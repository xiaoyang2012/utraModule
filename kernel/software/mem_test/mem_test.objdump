
MEM_TEST.elf:     file format elf32-littlenios2
MEM_TEST.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10020184

Program Header:
    LOAD off    0x00001000 vaddr 0x10020000 paddr 0x10020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10020020 paddr 0x10020020 align 2**12
         filesz 0x000130e8 memsz 0x000130e8 flags r-x
    LOAD off    0x00015000 vaddr 0x00000000 paddr 0x10033108 align 2**12
         filesz 0x00002c68 memsz 0x0000305c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10020000  10020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000164  10020020  10020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012f84  10020184  10020184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001114  00000000  10033108  00015000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b54  00001114  1003421c  00016114  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003f4  00002c68  10035d70  00017c68  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00017c68  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001158  00000000  00000000  00017c90  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001a0d  00000000  00000000  00018de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00031733  00000000  00000000  0001a7f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b83c  00000000  00000000  0004bf28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001fdd7  00000000  00000000  00057764  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000020d0  00000000  00000000  0007753c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000039ba  00000000  00000000  0007960c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00013441  00000000  00000000  0007cfc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macinfo 000e27cf  00000000  00000000  00090407  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00172bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000f58  00000000  00000000  00172c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  001777ee  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  001777f1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  001777f6  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  001777f7  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  001777f8  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  001777fc  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00177800  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00177804  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0017780d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00177816  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000006  00000000  00000000  0017781f  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003a  00000000  00000000  00177825  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00085930  00000000  00000000  0017785f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10020000 l    d  .entry	00000000 .entry
10020020 l    d  .exceptions	00000000 .exceptions
10020184 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00001114 l    d  .rwdata	00000000 .rwdata
00002c68 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
100201cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 memtest.c
100201d0 l     F .text	00000078 MenuHeader
10020248 l     F .text	00000054 MenuBegin
1002029c l     F .text	00000040 MenuItem
00002c68 l     O .bss	00000001 ch.3039
00002c69 l     O .bss	00000004 entry.3038
1002036c l     F .text	000000fc MenuEnd
10020468 l     F .text	00000118 MemGetAddressRange
10020580 l     F .text	00000078 MemTestDataBus
100205f8 l     F .text	000001e0 MemTestAddressBus
100207d8 l     F .text	0000020c MemTest8_16BitAccess
100209e4 l     F .text	00000198 MemTestDevice
10020b7c l     F .text	000001ac TestRam
10020d28 l     F .text	00000148 FlashCheckIfBlockErased
10020e70 l     F .text	00000390 FlashTestBlockWrite
10021200 l     F .text	00000310 FlashTestReadWrite
10021510 l     F .text	00000118 FlashTestBlockErase
10021628 l     F .text	00000154 FlashRunTests
1002177c l     F .text	00000174 GetFlashName
100218f0 l     F .text	0000034c FlashErase
10021c3c l     F .text	00000264 FlashFindErasedBlocks
10021ea0 l     F .text	0000019c TestFlash
1002203c l     F .text	00000178 TopMenu
00000000 l    df *ABS*	00000000 lib2-divmod.c
10022200 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00001114 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sscanf.c
10022f10 l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10023098 l     F .text	00000058 __sprint_r
00000b52 l     O .rodata	00000010 blanks.3452
00000b42 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
00000b6a l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
00000c8d l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
1002687c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10028278 l     F .text	00000058 std
10028384 l     F .text	00000008 __fp_lock
1002838c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00002c34 l     O .rwdata	00000004 charset
00000e30 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00000f78 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
1002b148 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
1002b578 l     F .text	00000048 match
0000193c l     O .rwdata	00000014 fpi.1950
00000f94 l     O .rodata	00000028 tinytens
00001928 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
1002ddbc l     F .text	00000024 htinit
1002de48 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
1002e6b0 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
1002f8d4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev.c
100314a4 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00002c58 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00001af8 l     O .rwdata	00001060 jtag_uart
00002b58 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10031b98 l     F .text	00000058 altera_avalon_jtag_uart_timeout
10031c70 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
1003214c l     F .text	00000144 altera_avalon_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
10032f3c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
10022d68 g     F .text	0000001c putchar
10029bbc g     F .text	00000094 _mprec_log10
10029ca8 g     F .text	00000088 __any_on
1002e944 g     F .text	00000070 _isatty_r
00000f50 g     O .rodata	00000028 __mprec_tinytens
10031770 g     F .text	00000060 alt_main
10022d8c g     F .text	000000a0 _puts_r
00002dcc g     O .bss	00000100 alt_irq
1002e9b4 g     F .text	00000078 _lseek_r
1003421c g       *ABS*	00000000 __flash_rwdata_start
100303f4 g     F .text	00000088 __eqdf2
0000305c g       *ABS*	00000000 __alt_heap_start
10022cf0 g     F .text	00000044 printf
1002b378 g     F .text	00000068 __sseek
100282e0 g     F .text	000000a4 __sinit
1002d93c g     F .text	00000130 __swbuf_r
10029220 g     F .text	00000084 _setlocale_r
100283e0 g     F .text	00000068 __sfmoreglue
1002d920 g     F .text	0000001c ungetc
100317d4 g     F .text	00000004 __malloc_unlock
1002b5c0 g     F .text	000014e4 _strtod_r
100202dc g     F .text	00000090 GetInputString
10029638 g     F .text	000000e0 memmove
100283d0 g     F .text	00000010 _cleanup
10029d30 g     F .text	000000bc _Balloc
10030504 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
10020000 g     F .entry	0000001c __reset
10020020 g       *ABS*	00000000 __flash_exceptions_start
1002dd48 g     F .text	00000074 _fstat_r
00002c7c g     O .bss	00000004 errno
10022e8c g     F .text	00000014 __srget
10026640 g     F .text	00000024 __svfscanf
10030cec g     F .text	0000002c __make_fp
00002c90 g     O .bss	00000004 alt_argv
0000ac1c g       *ABS*	00000000 _gp
00001978 g     O .rwdata	00000180 alt_fd_list
100223e4 g     F .text	00000090 _getc_r
1002234c g     F .text	00000098 getc
10022d84 g     F .text	00000008 _putchar_r
10032708 g     F .text	00000094 alt_find_dev
10022c50 g     F .text	000000a0 memcpy
1002e6fc g     F .text	00000248 __hexnan
100283c4 g     F .text	0000000c _cleanup_r
10030724 g     F .text	000000f8 __floatsidf
100328cc g     F .text	00000104 alt_io_redirect
10030614 g     F .text	00000088 __ltdf2
10033108 g       *ABS*	00000000 __DTOR_END__
10022e2c g     F .text	00000014 puts
100294d4 g     F .text	00000040 mbrtowc
10026664 g     F .text	00000068 _vfscanf_r
10029b0c g     F .text	000000b0 __ratio
10031e00 g     F .text	0000016c altera_avalon_jtag_uart_read
10022488 g     F .text	00000014 malloc
10022d34 g     F .text	00000034 _printf_r
1002233c g     F .text	00000008 __udivsi3
1003159c g     F .text	00000084 isatty
100291d0 g     F .text	0000002c iswspace
00000e60 g     O .rodata	000000c8 __mprec_tens
100291fc g     F .text	00000008 __locale_charset
1002eb3c g     F .text	000000a4 __fixunsdfsi
10032d84 g     F .text	00000038 alt_icache_flush
00002c70 g     O .bss	00000004 __malloc_top_pad
1002d394 g     F .text	00000024 strtoul
00002c30 g     O .rwdata	00000004 __mb_cur_max
10029204 g     F .text	0000000c _localeconv_r
1002d3b8 g     F .text	000002f0 _strtoull_r
1002a428 g     F .text	0000003c __i2b
10028bb4 g     F .text	0000049c __sfvwrite_r
10022ea0 g     F .text	00000070 _sbrk_r
1002ea2c g     F .text	00000078 _read_r
1003147c g     F .text	00000028 alt_dcache_flush
0000191c g     O .rwdata	0000000c __lc_ctype
00002c48 g     O .rwdata	00000004 alt_max_fd
1003102c g     F .text	00000138 __unpack_d
1002dc24 g     F .text	00000110 _fclose_r
10028244 g     F .text	00000034 fflush
00002c74 g     O .bss	00000004 __malloc_max_sbrked_mem
1002fd64 g     F .text	00000074 __adddf3
1002f76c g     F .text	00000078 __nesf2
100299ec g     F .text	00000120 __b2d
1002f1bc g     F .text	000005b0 __umoddi3
100316d4 g     F .text	0000009c lseek
00002c20 g     O .rwdata	00000004 _global_impure_ptr
1002a990 g     F .text	000005f4 _realloc_r
0000305c g       *ABS*	00000000 __bss_end
10032844 g     F .text	00000088 alt_iic_isr_register
10032b84 g     F .text	000000e8 alt_tick
00002ccc g     O .bss	00000100 __hexdig
1002ebe0 g     F .text	000005dc __udivdi3
00000f28 g     O .rodata	00000028 __mprec_bigtens
1002a684 g     F .text	00000120 __s2b
10030968 g     F .text	00000194 __floatunsidf
1002990c g     F .text	00000060 __mcmp
10032290 g     F .text	00000040 altera_avalon_uart_init
00002c2c g     O .rwdata	00000004 __ctype_ptr
100283ac g     F .text	00000018 __fp_lock_all
100327a8 g     F .text	00000018 alt_ic_irq_enabled
10032b50 g     F .text	00000034 alt_alarm_stop
1002ce28 g     F .text	00000024 strtol
00002c98 g     O .bss	00000004 alt_irq_active
100200ec g     F .exceptions	00000098 alt_irq_handler
00001950 g     O .rwdata	00000028 alt_dev_null
10030b7c g     F .text	000000c8 __unpack_f
100325dc g     F .text	00000018 alt_dcache_flush_all
100297d8 g     F .text	00000070 __hi0bits
1003081c g     F .text	000000d8 __fixdfsi
1002cbc8 g     F .text	0000001c strtod
00002c68 g       *ABS*	00000000 __ram_rwdata_end
10020000 g       *ABS*	00000000 __alt_mem_onchip_memory
00002c40 g     O .rwdata	00000008 alt_dev_list
1003196c g     F .text	00000118 write
1002a8a8 g     F .text	000000e8 _putc_r
1002f7e4 g     F .text	00000078 __gtsf2
00001114 g       *ABS*	00000000 __ram_rodata_end
1003150c g     F .text	00000090 fstat
1003069c g     F .text	00000088 __ledf2
1002a564 g     F .text	00000120 __pow5mult
00002c80 g     O .bss	00000004 __nlocale_changed
10022344 g     F .text	00000008 __umodsi3
0000305c g       *ABS*	00000000 end
1003122c g     F .text	00000160 __pack_f
10032410 g     F .text	00000138 altera_avalon_uart_write
10031bf0 g     F .text	00000080 altera_avalon_jtag_uart_init
10033104 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
10032100 g     F .text	00000010 altera_avalon_uart_write_fd
10030afc g     F .text	00000080 __clzsi2
100320f0 g     F .text	00000010 altera_avalon_uart_close_fd
10031f6c g     F .text	00000184 altera_avalon_jtag_uart_write
100282d0 g     F .text	00000004 __sfp_lock_acquire
10029554 g     F .text	000000e4 memchr
100230f0 g     F .text	00001eac ___vfprintf_internal_r
1002b310 g     F .text	00000060 _sprintf_r
100288a0 g     F .text	00000314 _free_r
10032f40 g     F .text	000001b0 __call_exitprocs
10022e40 g     F .text	0000004c __srget_r
00002c84 g     O .bss	00000004 __mlocale_changed
00002c28 g     O .rwdata	00000004 __malloc_sbrk_base
10020184 g     F .text	0000004c _start
00002c9c g     O .bss	00000004 _alt_tick_rate
1002ce4c g     F .text	00000318 _strtoll_r
1002a0f4 g     F .text	0000014c __lshift
00002ca0 g     O .bss	00000004 _alt_nticks
100317d8 g     F .text	0000011c read
10031aa4 g     F .text	00000070 alt_sys_init
10032e08 g     F .text	00000134 __register_exitproc
1002a240 g     F .text	000001e8 __multiply
10031b50 g     F .text	00000048 altera_avalon_jtag_uart_close
00001114 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
00002ca4 g     O .bss	00000028 __malloc_current_mallinfo
10029dec g     F .text	0000017c __d2b
10031b40 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
1002d164 g     F .text	00000230 _strtoul_r
10032d24 g     F .text	00000060 alt_get_fd
10031164 g     F .text	000000c8 __fpcmp_parts_d
1002dbb4 g     F .text	00000070 _close_r
10022bdc g     F .text	00000074 memcmp
10031b20 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
0000305c g       *ABS*	00000000 __alt_stack_base
10031b14 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
10022fa0 g     F .text	00000084 sscanf
10026740 g     F .text	0000013c __swsetup_r
1003019c g     F .text	00000258 __divdf3
10028448 g     F .text	000000f0 __sfp
10029c50 g     F .text	00000058 __copybits
00001514 g     O .rwdata	00000408 __malloc_av_
100282dc g     F .text	00000004 __sinit_lock_release
1002fdd8 g     F .text	000003c4 __muldf3
1002b45c g     F .text	00000060 __sread
10028734 g     F .text	00000040 fread
10032c74 g     F .text	000000b0 alt_find_file
100325f4 g     F .text	0000007c alt_dev_llist_insert
100317d0 g     F .text	00000004 __malloc_lock
10031918 g     F .text	00000054 sbrk
10028048 g     F .text	000001fc _fflush_r
1002db00 g     F .text	000000b4 _calloc_r
00002c50 g     O .rwdata	00000008 alt_flash_dev_list
00002c68 g       *ABS*	00000000 __bss_start
10029718 g     F .text	00000098 memset
100221b4 g     F .text	0000004c main
00002c94 g     O .bss	00000004 alt_envp
00002c78 g     O .bss	00000004 __malloc_max_total_mem
10031b30 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
1002da6c g     F .text	0000001c __swbuf
1002f85c g     F .text	00000078 __ltsf2
10028538 g     F .text	000001fc _fread_r
1002b370 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
1002dd34 g     F .text	00000014 fclose
1002cbe4 g     F .text	00000244 _strtol_r
100308f4 g     F .text	00000074 __truncdfsf2
00002ecc g     O .bss	00000190 _atexit0
10026a94 g     F .text	000015b4 _dtoa_r
1002249c g     F .text	00000740 _malloc_r
00002c4c g     O .rwdata	00000004 alt_errno
1002d6a8 g     F .text	000000dc __submore
10029118 g     F .text	000000b8 _fwalk
10029514 g     F .text	00000040 _mbtowc_r
1002a7a4 g     F .text	00000104 putc
1002227c g     F .text	00000060 __divsi3
00000fd8 g     O .rodata	00000014 __thenan_df
10028774 g     F .text	0000012c _malloc_trim_r
10033108 g       *ABS*	00000000 __CTOR_END__
1002b4bc g     F .text	000000bc strcmp
10033108 g       *ABS*	00000000 __flash_rodata_start
10033108 g       *ABS*	00000000 __DTOR_LIST__
1003047c g     F .text	00000088 __nedf2
10031a84 g     F .text	00000020 alt_irq_init
100318f4 g     F .text	00000024 alt_release_fd
1002b29c g     F .text	00000074 sprintf
00000fec g     O .rodata	00000100 __clz_tab
00002c88 g     O .bss	00000004 _PathLocale
1002caa4 g     F .text	00000124 strtof
10032dbc g     F .text	00000014 atexit
1002da88 g     F .text	00000078 _write_r
100292a4 g     F .text	0000001c setlocale
1002b294 g     F .text	00000008 nanf
00002c1c g     O .rwdata	00000004 _impure_ptr
00002c8c g     O .bss	00000004 alt_argc
10029454 g     F .text	00000080 _mbrtowc_r
100326bc g     F .text	0000004c _do_dtors
1002af84 g     F .text	000001c4 __srefill_r
10020020 g       .exceptions	00000000 alt_irq_entry
1002996c g     F .text	00000080 __ulp
1002b164 g     F .text	00000040 __isinfd
10028394 g     F .text	00000018 __fp_unlock_all
00002c38 g     O .rwdata	00000008 alt_fs_list
10020020 g       *ABS*	00000000 __ram_exceptions_start
10029210 g     F .text	00000010 localeconv
10032840 g     F .text	00000004 alt_ic_isr_register
1002dde0 g     F .text	00000068 __hexdig_init
10022f18 g     F .text	00000088 _sscanf_r
00002c68 g       *ABS*	00000000 _edata
10032110 g     F .text	00000010 altera_avalon_uart_read_fd
0000305c g       *ABS*	00000000 _end
100314c0 g     F .text	0000004c alt_flash_open_dev
10020184 g       *ABS*	00000000 __ram_exceptions_end
100266cc g     F .text	00000074 vfscanf
10031d78 g     F .text	00000088 altera_avalon_jtag_uart_ioctl
10032800 g     F .text	00000040 alt_ic_irq_disable
1002b3e0 g     F .text	0000007c __swrite
00002c24 g     O .rwdata	00000004 __malloc_trim_threshold
10032c6c g     F .text	00000008 altera_nios2_qsys_irq_init
10032dd0 g     F .text	00000038 exit
10029050 g     F .text	000000c8 _fwalk_reent
10029f68 g     F .text	0000018c __mdiff
100314ac g     F .text	00000014 alt_flash_close_dev
100222dc g     F .text	00000060 __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
10020020 g     F .exceptions	00000000 alt_exception
100282d4 g     F .text	00000004 __sfp_lock_release
1002b1d4 g     F .text	000000c0 __sccl
00000b8c g     O .rodata	00000101 _ctype_
10032120 g     F .text	0000002c altera_avalon_uart_close
10030c44 g     F .text	000000a8 __fpcmp_parts_f
100330f0 g     F .text	00000014 _exit
1002b1a4 g     F .text	00000030 __isnand
10032548 g     F .text	00000094 alt_alarm_start
1002eaa4 g     F .text	00000098 __muldi3
100292c0 g     F .text	00000194 __smakebuf_r
10023024 g     F .text	00000074 strlen
100329d0 g     F .text	00000180 open
1003058c g     F .text	00000088 __gedf2
1002def8 g     F .text	000007b8 __gethex
1003279c g     F .text	0000000c alt_icache_flush_all
00002c5c g     O .rwdata	00000004 alt_priority_mask
100327c0 g     F .text	00000040 alt_ic_irq_enable
10024f9c g     F .text	00000024 __vfprintf_internal
100322d0 g     F .text	00000140 altera_avalon_uart_read
00000000 g       *ABS*	00000000 __alt_mem_DDR3_MEM
1002fce4 g     F .text	00000080 __subdf3
10029848 g     F .text	000000c4 __lo0bits
10024fc0 g     F .text	00001680 __svfscanf_r
00002c60 g     O .rwdata	00000008 alt_alarm_list
1002d784 g     F .text	0000019c _ungetc_r
10032670 g     F .text	0000004c _do_ctors
1003138c g     F .text	000000f0 close
10031620 g     F .text	000000b4 alt_load
10030d18 g     F .text	00000314 __pack_d
10022474 g     F .text	00000014 free
100282d8 g     F .text	00000004 __sinit_lock_acquire
1002a464 g     F .text	00000100 __multadd
100297b0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1002000c:	00bffd16 	blt	zero,r2,10020004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10020010:	004400b4 	movhi	at,4098
    ori r1, r1, %lo(_start)
10020014:	08406114 	ori	at,at,388
    jmp r1
10020018:	0800683a 	jmp	at
1002001c:	00000000 	call	10000000 <__alt_data_end>

Disassembly of section .exceptions:

10020020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
10020020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
10020024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
10020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1002002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1002003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10020040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
10020044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
10020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1002004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1002005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1002006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1002007c:	10000326 	beq	r2,zero,1002008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10020080:	20000226 	beq	r4,zero,1002008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10020084:	00200ec0 	call	100200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10020088:	00000306 	br	10020098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1002008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10020090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10020094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10020098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1002009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100200c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
100200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100200e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
100200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100200e8:	ef80083a 	eret

100200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100200ec:	defffe04 	addi	sp,sp,-8
100200f0:	dfc00115 	stw	ra,4(sp)
100200f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
100200f8:	000b313a 	rdctl	r5,ipending
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
100200fc:	2880004c 	andi	r2,r5,1
10020100:	1005003a 	cmpeq	r2,r2,zero
10020104:	04000034 	movhi	r16,0
10020108:	840b7304 	addi	r16,r16,11724
1002010c:	10001126 	beq	r2,zero,10020154 <alt_irq_handler+0x68>
10020110:	00c00044 	movi	r3,1
10020114:	0009883a 	mov	r4,zero
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
10020118:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1002011c:	28c4703a 	and	r2,r5,r3
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
10020120:	21000044 	addi	r4,r4,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
10020124:	103ffc26 	beq	r2,zero,10020118 <alt_irq_handler+0x2c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
10020128:	200490fa 	slli	r2,r4,3
1002012c:	1405883a 	add	r2,r2,r16
10020130:	11000117 	ldw	r4,4(r2)
10020134:	10c00017 	ldw	r3,0(r2)
10020138:	183ee83a 	callr	r3
1002013c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
10020140:	10000c26 	beq	r2,zero,10020174 <alt_irq_handler+0x88>
10020144:	100b883a 	mov	r5,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
10020148:	2880004c 	andi	r2,r5,1
1002014c:	1005003a 	cmpeq	r2,r2,zero
10020150:	103fef1e 	bne	r2,zero,10020110 <alt_irq_handler+0x24>
10020154:	0009883a 	mov	r4,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
10020158:	200490fa 	slli	r2,r4,3
1002015c:	1405883a 	add	r2,r2,r16
10020160:	11000117 	ldw	r4,4(r2)
10020164:	10c00017 	ldw	r3,0(r2)
10020168:	183ee83a 	callr	r3
1002016c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
10020170:	103ff41e 	bne	r2,zero,10020144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
10020174:	dfc00117 	ldw	ra,4(sp)
10020178:	dc000017 	ldw	r16,0(sp)
1002017c:	dec00204 	addi	sp,sp,8
10020180:	f800283a 	ret

Disassembly of section .text:

10020184 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10020184:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10020188:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1002018c:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
10020190:	00bffd16 	blt	zero,r2,10020188 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10020194:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
10020198:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
1002019c:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
100201a0:	d6ab0714 	ori	gp,gp,44060
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100201a4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
100201a8:	108b1a14 	ori	r2,r2,11368

    movhi r3, %hi(__bss_end)
100201ac:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
100201b0:	18cc1714 	ori	r3,r3,12380

    beq r2, r3, 1f
100201b4:	10c00326 	beq	r2,r3,100201c4 <_start+0x40>

0:
    stw zero, (r2)
100201b8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100201bc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100201c0:	10fffd36 	bltu	r2,r3,100201b8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100201c4:	00316200 	call	10031620 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100201c8:	00317700 	call	10031770 <alt_main>

100201cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100201cc:	003fff06 	br	100201cc <alt_after_alt_main>

100201d0 <MenuHeader>:
*
*  Purpose: Prints the menu header.
*
******************************************************************/
static void MenuHeader(void)
{
100201d0:	defffe04 	addi	sp,sp,-8
100201d4:	dfc00115 	stw	ra,4(sp)
100201d8:	df000015 	stw	fp,0(sp)
100201dc:	d839883a 	mov	fp,sp
  printf("\n\n");
100201e0:	01000034 	movhi	r4,0
100201e4:	21000004 	addi	r4,r4,0
100201e8:	0022e2c0 	call	10022e2c <puts>
  printf("             <---->   Nios II Memory Test.   <---->\n");
100201ec:	01000034 	movhi	r4,0
100201f0:	21000104 	addi	r4,r4,4
100201f4:	0022e2c0 	call	10022e2c <puts>
  printf("This software example tests the memory in your system to assure it\n");
100201f8:	01000034 	movhi	r4,0
100201fc:	21000e04 	addi	r4,r4,56
10020200:	0022e2c0 	call	10022e2c <puts>
  printf("is working properly.  This test is destructive to the contents of\n");
10020204:	01000034 	movhi	r4,0
10020208:	21001f04 	addi	r4,r4,124
1002020c:	0022e2c0 	call	10022e2c <puts>
  printf("the memory it tests. Assure the memory being tested does not contain\n");
10020210:	01000034 	movhi	r4,0
10020214:	21003004 	addi	r4,r4,192
10020218:	0022e2c0 	call	10022e2c <puts>
  printf("the executable or data sections of this code or the exception address\n");
1002021c:	01000034 	movhi	r4,0
10020220:	21004204 	addi	r4,r4,264
10020224:	0022e2c0 	call	10022e2c <puts>
  printf("of the system.\n");
10020228:	01000034 	movhi	r4,0
1002022c:	21005404 	addi	r4,r4,336
10020230:	0022e2c0 	call	10022e2c <puts>
}
10020234:	e037883a 	mov	sp,fp
10020238:	dfc00117 	ldw	ra,4(sp)
1002023c:	df000017 	ldw	fp,0(sp)
10020240:	dec00204 	addi	sp,sp,8
10020244:	f800283a 	ret

10020248 <MenuBegin>:
*
*  Purpose: Prints the top portion of the menu.
*
******************************************************************/
static void MenuBegin( char *title )
{
10020248:	defffd04 	addi	sp,sp,-12
1002024c:	dfc00215 	stw	ra,8(sp)
10020250:	df000115 	stw	fp,4(sp)
10020254:	df000104 	addi	fp,sp,4
10020258:	e13fff15 	stw	r4,-4(fp)
  printf("\n\n");
1002025c:	01000034 	movhi	r4,0
10020260:	21000004 	addi	r4,r4,0
10020264:	0022e2c0 	call	10022e2c <puts>
  printf("----------------------------------\n");
10020268:	01000034 	movhi	r4,0
1002026c:	21005804 	addi	r4,r4,352
10020270:	0022e2c0 	call	10022e2c <puts>
  printf("%s\n",title);
10020274:	e13fff17 	ldw	r4,-4(fp)
10020278:	0022e2c0 	call	10022e2c <puts>
  printf("----------------------------------\n");
1002027c:	01000034 	movhi	r4,0
10020280:	21005804 	addi	r4,r4,352
10020284:	0022e2c0 	call	10022e2c <puts>
}
10020288:	e037883a 	mov	sp,fp
1002028c:	dfc00117 	ldw	ra,4(sp)
10020290:	df000017 	ldw	fp,0(sp)
10020294:	dec00204 	addi	sp,sp,8
10020298:	f800283a 	ret

1002029c <MenuItem>:
*  Purpose: Prints selection items in the menu, enumerated by the 
*           specified letter.
*
******************************************************************/
static void MenuItem( char letter, char *name )
{
1002029c:	defffc04 	addi	sp,sp,-16
100202a0:	dfc00315 	stw	ra,12(sp)
100202a4:	df000215 	stw	fp,8(sp)
100202a8:	df000204 	addi	fp,sp,8
100202ac:	e17fff15 	stw	r5,-4(fp)
100202b0:	e13ffe05 	stb	r4,-8(fp)
  printf("     %c:  %s\n" ,letter, name);
100202b4:	e17ffe07 	ldb	r5,-8(fp)
100202b8:	01000034 	movhi	r4,0
100202bc:	21006104 	addi	r4,r4,388
100202c0:	e1bfff17 	ldw	r6,-4(fp)
100202c4:	0022cf00 	call	10022cf0 <printf>
}
100202c8:	e037883a 	mov	sp,fp
100202cc:	dfc00117 	ldw	ra,4(sp)
100202d0:	df000017 	ldw	fp,0(sp)
100202d4:	dec00204 	addi	sp,sp,8
100202d8:	f800283a 	ret

100202dc <GetInputString>:
*           returns the string, minus any '\r' characters it 
*           encounters.
*
******************************************************************/
void GetInputString( char* entry, int size, FILE * stream )
{
100202dc:	defff904 	addi	sp,sp,-28
100202e0:	dfc00615 	stw	ra,24(sp)
100202e4:	df000515 	stw	fp,20(sp)
100202e8:	df000504 	addi	fp,sp,20
100202ec:	e13ffd15 	stw	r4,-12(fp)
100202f0:	e17ffe15 	stw	r5,-8(fp)
100202f4:	e1bfff15 	stw	r6,-4(fp)
  int i;
  int ch = 0;
100202f8:	e03ffb15 	stw	zero,-20(fp)
  
  for(i = 0; (ch != '\n') && (i < size); )
100202fc:	e03ffc15 	stw	zero,-16(fp)
10020300:	00000f06 	br	10020340 <GetInputString+0x64>
  {
    if( (ch = getc(stream)) != '\r')
10020304:	e13fff17 	ldw	r4,-4(fp)
10020308:	002234c0 	call	1002234c <getc>
1002030c:	e0bffb15 	stw	r2,-20(fp)
10020310:	e0bffb17 	ldw	r2,-20(fp)
10020314:	10800360 	cmpeqi	r2,r2,13
10020318:	1000091e 	bne	r2,zero,10020340 <GetInputString+0x64>
    {
      entry[i] = ch;
1002031c:	e0bffc17 	ldw	r2,-16(fp)
10020320:	1007883a 	mov	r3,r2
10020324:	e0bffd17 	ldw	r2,-12(fp)
10020328:	1887883a 	add	r3,r3,r2
1002032c:	e0bffb17 	ldw	r2,-20(fp)
10020330:	18800005 	stb	r2,0(r3)
      i++;
10020334:	e0bffc17 	ldw	r2,-16(fp)
10020338:	10800044 	addi	r2,r2,1
1002033c:	e0bffc15 	stw	r2,-16(fp)
void GetInputString( char* entry, int size, FILE * stream )
{
  int i;
  int ch = 0;
  
  for(i = 0; (ch != '\n') && (i < size); )
10020340:	e0bffb17 	ldw	r2,-20(fp)
10020344:	108002a0 	cmpeqi	r2,r2,10
10020348:	1000031e 	bne	r2,zero,10020358 <GetInputString+0x7c>
1002034c:	e0fffc17 	ldw	r3,-16(fp)
10020350:	e0bffe17 	ldw	r2,-8(fp)
10020354:	18bfeb16 	blt	r3,r2,10020304 <GetInputString+0x28>
    {
      entry[i] = ch;
      i++;
    }
  }
}
10020358:	e037883a 	mov	sp,fp
1002035c:	dfc00117 	ldw	ra,4(sp)
10020360:	df000017 	ldw	fp,0(sp)
10020364:	dec00204 	addi	sp,sp,8
10020368:	f800283a 	ret

1002036c <MenuEnd>:
*  Purpose: Prints the end of the menu, then captures and returns
*           the user's selection.
*
******************************************************************/
static int MenuEnd( char lowLetter, char highLetter )
{
1002036c:	defffc04 	addi	sp,sp,-16
10020370:	dfc00315 	stw	ra,12(sp)
10020374:	df000215 	stw	fp,8(sp)
10020378:	df000204 	addi	fp,sp,8
1002037c:	e13ffe05 	stb	r4,-8(fp)
10020380:	e17fff05 	stb	r5,-4(fp)
  static char entry[4];
  static char ch;

  printf("     q:  Exit\n");
10020384:	01000034 	movhi	r4,0
10020388:	21006504 	addi	r4,r4,404
1002038c:	0022e2c0 	call	10022e2c <puts>
  printf("----------------------------------\n");
10020390:	01000034 	movhi	r4,0
10020394:	21005804 	addi	r4,r4,352
10020398:	0022e2c0 	call	10022e2c <puts>
  printf("\nSelect Choice (%c-%c): [Followed by <enter>]",lowLetter,highLetter);
1002039c:	e17ffe07 	ldb	r5,-8(fp)
100203a0:	e1bfff07 	ldb	r6,-4(fp)
100203a4:	01000034 	movhi	r4,0
100203a8:	21006904 	addi	r4,r4,420
100203ac:	0022cf00 	call	10022cf0 <printf>

  GetInputString( entry, sizeof(entry), stdin );
100203b0:	00800034 	movhi	r2,0
100203b4:	108b0704 	addi	r2,r2,11292
100203b8:	10800017 	ldw	r2,0(r2)
100203bc:	11800117 	ldw	r6,4(r2)
100203c0:	d1201344 	addi	r4,gp,-32691
100203c4:	01400104 	movi	r5,4
100203c8:	00202dc0 	call	100202dc <GetInputString>
  if(sscanf(entry, "%c\n", &ch))
100203cc:	d1201344 	addi	r4,gp,-32691
100203d0:	01400034 	movhi	r5,0
100203d4:	29407504 	addi	r5,r5,468
100203d8:	d1a01304 	addi	r6,gp,-32692
100203dc:	0022fa00 	call	10022fa0 <sscanf>
100203e0:	1005003a 	cmpeq	r2,r2,zero
100203e4:	1000171e 	bne	r2,zero,10020444 <MenuEnd+0xd8>
  {
    if( ch >= 'A' && ch <= 'Z' )
100203e8:	d0a01303 	ldbu	r2,-32692(gp)
100203ec:	10803fcc 	andi	r2,r2,255
100203f0:	1080201c 	xori	r2,r2,128
100203f4:	10bfe004 	addi	r2,r2,-128
100203f8:	10801050 	cmplti	r2,r2,65
100203fc:	1000091e 	bne	r2,zero,10020424 <MenuEnd+0xb8>
10020400:	d0a01303 	ldbu	r2,-32692(gp)
10020404:	10803fcc 	andi	r2,r2,255
10020408:	1080201c 	xori	r2,r2,128
1002040c:	10bfe004 	addi	r2,r2,-128
10020410:	108016c8 	cmpgei	r2,r2,91
10020414:	1000031e 	bne	r2,zero,10020424 <MenuEnd+0xb8>
      ch += 'a' - 'A';
10020418:	d0a01303 	ldbu	r2,-32692(gp)
1002041c:	10800804 	addi	r2,r2,32
10020420:	d0a01305 	stb	r2,-32692(gp)
    if( ch == 27 )
10020424:	d0a01303 	ldbu	r2,-32692(gp)
10020428:	10803fcc 	andi	r2,r2,255
1002042c:	1080201c 	xori	r2,r2,128
10020430:	10bfe004 	addi	r2,r2,-128
10020434:	108006d8 	cmpnei	r2,r2,27
10020438:	1000021e 	bne	r2,zero,10020444 <MenuEnd+0xd8>
      ch = 'q';
1002043c:	00801c44 	movi	r2,113
10020440:	d0a01305 	stb	r2,-32692(gp)
  }
  return ch;
10020444:	d0a01303 	ldbu	r2,-32692(gp)
10020448:	10803fcc 	andi	r2,r2,255
1002044c:	1080201c 	xori	r2,r2,128
10020450:	10bfe004 	addi	r2,r2,-128
}
10020454:	e037883a 	mov	sp,fp
10020458:	dfc00117 	ldw	ra,4(sp)
1002045c:	df000017 	ldw	fp,0(sp)
10020460:	dec00204 	addi	sp,sp,8
10020464:	f800283a 	ret

10020468 <MemGetAddressRange>:
*
*  Purpose: Gathers a range of memory from the user.
*
******************************************************************/
static int MemGetAddressRange(int* base_address, int* end_address)
{
10020468:	defff904 	addi	sp,sp,-28
1002046c:	dfc00615 	stw	ra,24(sp)
10020470:	df000515 	stw	fp,20(sp)
10020474:	df000504 	addi	fp,sp,20
10020478:	e13ffe15 	stw	r4,-8(fp)
1002047c:	e17fff15 	stw	r5,-4(fp)
10020480:	00000006 	br	10020484 <MemGetAddressRange+0x1c>
  char line[12];

  while(1)
  {
    /* Get the base address */
    printf("Base address to start memory test: (i.e. 0x800000)\n");
10020484:	01000034 	movhi	r4,0
10020488:	21007604 	addi	r4,r4,472
1002048c:	0022e2c0 	call	10022e2c <puts>
    printf(">");
10020490:	01000f84 	movi	r4,62
10020494:	0022d680 	call	10022d68 <putchar>

    GetInputString( line, sizeof(line), stdin );
10020498:	00800034 	movhi	r2,0
1002049c:	108b0704 	addi	r2,r2,11292
100204a0:	10800017 	ldw	r2,0(r2)
100204a4:	11800117 	ldw	r6,4(r2)
100204a8:	e13ffb04 	addi	r4,fp,-20
100204ac:	01400304 	movi	r5,12
100204b0:	00202dc0 	call	100202dc <GetInputString>
   
    /* Check the format to make sure it was entered as hex */
    if(sscanf(line, "0x%X", base_address) != 1)
100204b4:	e13ffb04 	addi	r4,fp,-20
100204b8:	01400034 	movhi	r5,0
100204bc:	29408304 	addi	r5,r5,524
100204c0:	e1bffe17 	ldw	r6,-8(fp)
100204c4:	0022fa00 	call	10022fa0 <sscanf>
100204c8:	10800060 	cmpeqi	r2,r2,1
100204cc:	1000061e 	bne	r2,zero,100204e8 <MemGetAddressRange+0x80>
    {
      printf("%s\n", line);
100204d0:	e13ffb04 	addi	r4,fp,-20
100204d4:	0022e2c0 	call	10022e2c <puts>
      printf(" -ERROR: Invalid base address entered.  Address must be in the form '0x800000'\n\n");
100204d8:	01000034 	movhi	r4,0
100204dc:	21008504 	addi	r4,r4,532
100204e0:	0022e2c0 	call	10022e2c <puts>
      continue;
100204e4:	003fe706 	br	10020484 <MemGetAddressRange+0x1c>
    }
    
    /* Get the end address */
    printf("End Address:\n");
100204e8:	01000034 	movhi	r4,0
100204ec:	21009904 	addi	r4,r4,612
100204f0:	0022e2c0 	call	10022e2c <puts>
    printf(">");
100204f4:	01000f84 	movi	r4,62
100204f8:	0022d680 	call	10022d68 <putchar>

    GetInputString( line, sizeof(line), stdin );
100204fc:	00800034 	movhi	r2,0
10020500:	108b0704 	addi	r2,r2,11292
10020504:	10800017 	ldw	r2,0(r2)
10020508:	11800117 	ldw	r6,4(r2)
1002050c:	e13ffb04 	addi	r4,fp,-20
10020510:	01400304 	movi	r5,12
10020514:	00202dc0 	call	100202dc <GetInputString>
    
    /* Check the format to make sure it was entered as hex */
    if(sscanf(line, "0x%X", end_address) != 1)
10020518:	e13ffb04 	addi	r4,fp,-20
1002051c:	01400034 	movhi	r5,0
10020520:	29408304 	addi	r5,r5,524
10020524:	e1bfff17 	ldw	r6,-4(fp)
10020528:	0022fa00 	call	10022fa0 <sscanf>
1002052c:	10800060 	cmpeqi	r2,r2,1
10020530:	1000041e 	bne	r2,zero,10020544 <MemGetAddressRange+0xdc>
    {
      printf(" -ERROR: Invalid end address entered.  Address must be in the form '0x8FFFFF'\n\n");
10020534:	01000034 	movhi	r4,0
10020538:	21009d04 	addi	r4,r4,628
1002053c:	0022e2c0 	call	10022e2c <puts>
      continue;
10020540:	003fd006 	br	10020484 <MemGetAddressRange+0x1c>
    }
    
    /* Make sure end address is greater than base address. */
    if (*end_address <= *base_address)
10020544:	e0bfff17 	ldw	r2,-4(fp)
10020548:	10c00017 	ldw	r3,0(r2)
1002054c:	e0bffe17 	ldw	r2,-8(fp)
10020550:	10800017 	ldw	r2,0(r2)
10020554:	10c00416 	blt	r2,r3,10020568 <MemGetAddressRange+0x100>
    {
      printf(" -ERROR: End address must be greater than the start address\n\n");
10020558:	01000034 	movhi	r4,0
1002055c:	2100b104 	addi	r4,r4,708
10020560:	0022e2c0 	call	10022e2c <puts>

      continue;
10020564:	003fc706 	br	10020484 <MemGetAddressRange+0x1c>
    }
    break;
  }

  return(0);
10020568:	0005883a 	mov	r2,zero
}
1002056c:	e037883a 	mov	sp,fp
10020570:	dfc00117 	ldw	ra,4(sp)
10020574:	df000017 	ldw	fp,0(sp)
10020578:	dec00204 	addi	sp,sp,8
1002057c:	f800283a 	ret

10020580 <MemTestDataBus>:
*  Purpose: Tests that the data bus is connected with no 
*           stuck-at's, shorts, or open circuits.
*
******************************************************************/
static int MemTestDataBus(unsigned int address)
{
10020580:	defffc04 	addi	sp,sp,-16
10020584:	df000315 	stw	fp,12(sp)
10020588:	df000304 	addi	fp,sp,12
1002058c:	e13fff15 	stw	r4,-4(fp)
  unsigned int pattern;
  unsigned int ret_code = 0x0;
10020590:	e03ffd15 	stw	zero,-12(fp)

  /* Perform a walking 1's test at the given address. */
  for (pattern = 1; pattern != 0; pattern <<= 1)
10020594:	00800044 	movi	r2,1
10020598:	e0bffe15 	stw	r2,-8(fp)
1002059c:	00000e06 	br	100205d8 <MemTestDataBus+0x58>
  {
    /* Write the test pattern. */
    IOWR_32DIRECT(address, 0, pattern);
100205a0:	e0bfff17 	ldw	r2,-4(fp)
100205a4:	e0fffe17 	ldw	r3,-8(fp)
100205a8:	10c00035 	stwio	r3,0(r2)

    /* Read it back (immediately is okay for this test). */
    if (IORD_32DIRECT(address, 0) != pattern)
100205ac:	e0bfff17 	ldw	r2,-4(fp)
100205b0:	10800037 	ldwio	r2,0(r2)
100205b4:	1007883a 	mov	r3,r2
100205b8:	e0bffe17 	ldw	r2,-8(fp)
100205bc:	18800326 	beq	r3,r2,100205cc <MemTestDataBus+0x4c>
    {
      ret_code = pattern;
100205c0:	e0bffe17 	ldw	r2,-8(fp)
100205c4:	e0bffd15 	stw	r2,-12(fp)
      break;
100205c8:	00000606 	br	100205e4 <MemTestDataBus+0x64>
{
  unsigned int pattern;
  unsigned int ret_code = 0x0;

  /* Perform a walking 1's test at the given address. */
  for (pattern = 1; pattern != 0; pattern <<= 1)
100205cc:	e0bffe17 	ldw	r2,-8(fp)
100205d0:	1085883a 	add	r2,r2,r2
100205d4:	e0bffe15 	stw	r2,-8(fp)
100205d8:	e0bffe17 	ldw	r2,-8(fp)
100205dc:	1004c03a 	cmpne	r2,r2,zero
100205e0:	103fef1e 	bne	r2,zero,100205a0 <MemTestDataBus+0x20>
    {
      ret_code = pattern;
      break;
    }
  }
  return ret_code;
100205e4:	e0bffd17 	ldw	r2,-12(fp)
}
100205e8:	e037883a 	mov	sp,fp
100205ec:	df000017 	ldw	fp,0(sp)
100205f0:	dec00104 	addi	sp,sp,4
100205f4:	f800283a 	ret

100205f8 <MemTestAddressBus>:
*  Purpose: Tests that the address bus is connected with no 
*           stuck-at's, shorts, or open circuits.
*
******************************************************************/
static int MemTestAddressBus(unsigned int memory_base, unsigned int nBytes)
{
100205f8:	defff704 	addi	sp,sp,-36
100205fc:	df000815 	stw	fp,32(sp)
10020600:	df000804 	addi	fp,sp,32
10020604:	e13ffe15 	stw	r4,-8(fp)
10020608:	e17fff15 	stw	r5,-4(fp)
  unsigned int address_mask = (nBytes - 1);
1002060c:	e0bfff17 	ldw	r2,-4(fp)
10020610:	10bfffc4 	addi	r2,r2,-1
10020614:	e0bffd15 	stw	r2,-12(fp)
  unsigned int offset;
  unsigned int test_offset;

  unsigned int pattern     = 0xAAAAAAAA;
10020618:	00aaaaf4 	movhi	r2,43691
1002061c:	10aaaa84 	addi	r2,r2,-21846
10020620:	e0bffa15 	stw	r2,-24(fp)
  unsigned int antipattern  = 0x55555555;
10020624:	00955574 	movhi	r2,21845
10020628:	10955544 	addi	r2,r2,21845
1002062c:	e0bff915 	stw	r2,-28(fp)

  unsigned int ret_code = 0x0;
10020630:	e03ff815 	stw	zero,-32(fp)

  /* Write the default pattern at each of the power-of-two offsets. */
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
10020634:	00800104 	movi	r2,4
10020638:	e0bffc15 	stw	r2,-16(fp)
1002063c:	00000806 	br	10020660 <MemTestAddressBus+0x68>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
10020640:	e0fffe17 	ldw	r3,-8(fp)
10020644:	e0bffc17 	ldw	r2,-16(fp)
10020648:	1885883a 	add	r2,r3,r2
1002064c:	e0fffa17 	ldw	r3,-24(fp)
10020650:	10c00035 	stwio	r3,0(r2)
  unsigned int antipattern  = 0x55555555;

  unsigned int ret_code = 0x0;

  /* Write the default pattern at each of the power-of-two offsets. */
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
10020654:	e0bffc17 	ldw	r2,-16(fp)
10020658:	1085883a 	add	r2,r2,r2
1002065c:	e0bffc15 	stw	r2,-16(fp)
10020660:	e0fffc17 	ldw	r3,-16(fp)
10020664:	e0bffd17 	ldw	r2,-12(fp)
10020668:	1884703a 	and	r2,r3,r2
1002066c:	1004c03a 	cmpne	r2,r2,zero
10020670:	103ff31e 	bne	r2,zero,10020640 <MemTestAddressBus+0x48>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
  }

  /* Check for address bits stuck high. */
  test_offset = 0;
10020674:	e03ffb15 	stw	zero,-20(fp)
  IOWR_32DIRECT(memory_base, test_offset, antipattern);
10020678:	e0fffe17 	ldw	r3,-8(fp)
1002067c:	e0bffb17 	ldw	r2,-20(fp)
10020680:	1885883a 	add	r2,r3,r2
10020684:	e0fff917 	ldw	r3,-28(fp)
10020688:	10c00035 	stwio	r3,0(r2)
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
1002068c:	00800104 	movi	r2,4
10020690:	e0bffc15 	stw	r2,-16(fp)
10020694:	00000f06 	br	100206d4 <MemTestAddressBus+0xdc>
  {
     if (IORD_32DIRECT(memory_base, offset) != pattern)
10020698:	e0fffe17 	ldw	r3,-8(fp)
1002069c:	e0bffc17 	ldw	r2,-16(fp)
100206a0:	1885883a 	add	r2,r3,r2
100206a4:	10800037 	ldwio	r2,0(r2)
100206a8:	1007883a 	mov	r3,r2
100206ac:	e0bffa17 	ldw	r2,-24(fp)
100206b0:	18800526 	beq	r3,r2,100206c8 <MemTestAddressBus+0xd0>
     {
        ret_code = (memory_base+offset);
100206b4:	e0bffe17 	ldw	r2,-8(fp)
100206b8:	e0fffc17 	ldw	r3,-16(fp)
100206bc:	10c5883a 	add	r2,r2,r3
100206c0:	e0bff815 	stw	r2,-32(fp)
        break;
100206c4:	00000806 	br	100206e8 <MemTestAddressBus+0xf0>
  }

  /* Check for address bits stuck high. */
  test_offset = 0;
  IOWR_32DIRECT(memory_base, test_offset, antipattern);
  for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
100206c8:	e0bffc17 	ldw	r2,-16(fp)
100206cc:	1085883a 	add	r2,r2,r2
100206d0:	e0bffc15 	stw	r2,-16(fp)
100206d4:	e0fffc17 	ldw	r3,-16(fp)
100206d8:	e0bffd17 	ldw	r2,-12(fp)
100206dc:	1884703a 	and	r2,r3,r2
100206e0:	1004c03a 	cmpne	r2,r2,zero
100206e4:	103fec1e 	bne	r2,zero,10020698 <MemTestAddressBus+0xa0>
        break;
     }
  }

  /* Check for address bits stuck low or shorted. */
  IOWR_32DIRECT(memory_base, test_offset, pattern);
100206e8:	e0fffe17 	ldw	r3,-8(fp)
100206ec:	e0bffb17 	ldw	r2,-20(fp)
100206f0:	1885883a 	add	r2,r3,r2
100206f4:	e0fffa17 	ldw	r3,-24(fp)
100206f8:	10c00035 	stwio	r3,0(r2)
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
100206fc:	00800104 	movi	r2,4
10020700:	e0bffb15 	stw	r2,-20(fp)
10020704:	00002a06 	br	100207b0 <MemTestAddressBus+0x1b8>
  {
    if (!ret_code)
10020708:	e0bff817 	ldw	r2,-32(fp)
1002070c:	1004c03a 	cmpne	r2,r2,zero
10020710:	1000241e 	bne	r2,zero,100207a4 <MemTestAddressBus+0x1ac>
    {
      IOWR_32DIRECT(memory_base, test_offset, antipattern);
10020714:	e0fffe17 	ldw	r3,-8(fp)
10020718:	e0bffb17 	ldw	r2,-20(fp)
1002071c:	1885883a 	add	r2,r3,r2
10020720:	e0fff917 	ldw	r3,-28(fp)
10020724:	10c00035 	stwio	r3,0(r2)
      for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
10020728:	00800104 	movi	r2,4
1002072c:	e0bffc15 	stw	r2,-16(fp)
10020730:	00001206 	br	1002077c <MemTestAddressBus+0x184>
      {
        if ((IORD_32DIRECT(memory_base, offset) != pattern) && (offset != test_offset))
10020734:	e0fffe17 	ldw	r3,-8(fp)
10020738:	e0bffc17 	ldw	r2,-16(fp)
1002073c:	1885883a 	add	r2,r3,r2
10020740:	10800037 	ldwio	r2,0(r2)
10020744:	1007883a 	mov	r3,r2
10020748:	e0bffa17 	ldw	r2,-24(fp)
1002074c:	18800826 	beq	r3,r2,10020770 <MemTestAddressBus+0x178>
10020750:	e0fffc17 	ldw	r3,-16(fp)
10020754:	e0bffb17 	ldw	r2,-20(fp)
10020758:	18800526 	beq	r3,r2,10020770 <MemTestAddressBus+0x178>
        {
          ret_code = (memory_base + test_offset);
1002075c:	e0bffe17 	ldw	r2,-8(fp)
10020760:	e0fffb17 	ldw	r3,-20(fp)
10020764:	10c5883a 	add	r2,r2,r3
10020768:	e0bff815 	stw	r2,-32(fp)
          break;
1002076c:	00000806 	br	10020790 <MemTestAddressBus+0x198>
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
  {
    if (!ret_code)
    {
      IOWR_32DIRECT(memory_base, test_offset, antipattern);
      for (offset = sizeof(unsigned int); (offset & address_mask) != 0; offset <<= 1)
10020770:	e0bffc17 	ldw	r2,-16(fp)
10020774:	1085883a 	add	r2,r2,r2
10020778:	e0bffc15 	stw	r2,-16(fp)
1002077c:	e0fffc17 	ldw	r3,-16(fp)
10020780:	e0bffd17 	ldw	r2,-12(fp)
10020784:	1884703a 	and	r2,r3,r2
10020788:	1004c03a 	cmpne	r2,r2,zero
1002078c:	103fe91e 	bne	r2,zero,10020734 <MemTestAddressBus+0x13c>
        {
          ret_code = (memory_base + test_offset);
          break;
        }
      }
      IOWR_32DIRECT(memory_base, test_offset, pattern);
10020790:	e0fffe17 	ldw	r3,-8(fp)
10020794:	e0bffb17 	ldw	r2,-20(fp)
10020798:	1885883a 	add	r2,r3,r2
1002079c:	e0fffa17 	ldw	r3,-24(fp)
100207a0:	10c00035 	stwio	r3,0(r2)
     }
  }

  /* Check for address bits stuck low or shorted. */
  IOWR_32DIRECT(memory_base, test_offset, pattern);
  for (test_offset = sizeof(unsigned int); (test_offset & address_mask) != 0; test_offset <<= 1)
100207a4:	e0bffb17 	ldw	r2,-20(fp)
100207a8:	1085883a 	add	r2,r2,r2
100207ac:	e0bffb15 	stw	r2,-20(fp)
100207b0:	e0fffb17 	ldw	r3,-20(fp)
100207b4:	e0bffd17 	ldw	r2,-12(fp)
100207b8:	1884703a 	and	r2,r3,r2
100207bc:	1004c03a 	cmpne	r2,r2,zero
100207c0:	103fd11e 	bne	r2,zero,10020708 <MemTestAddressBus+0x110>
      }
      IOWR_32DIRECT(memory_base, test_offset, pattern);
    }
  }

  return ret_code;
100207c4:	e0bff817 	ldw	r2,-32(fp)
}
100207c8:	e037883a 	mov	sp,fp
100207cc:	df000017 	ldw	fp,0(sp)
100207d0:	dec00104 	addi	sp,sp,4
100207d4:	f800283a 	ret

100207d8 <MemTest8_16BitAccess>:
*           can be read and written in both byte and half-word 
*           modes.
*
******************************************************************/
static int MemTest8_16BitAccess(unsigned int memory_base)
{
100207d8:	defffd04 	addi	sp,sp,-12
100207dc:	df000215 	stw	fp,8(sp)
100207e0:	df000204 	addi	fp,sp,8
100207e4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0x0;
100207e8:	e03ffe15 	stw	zero,-8(fp)

  /* Write 4 bytes */
  IOWR_8DIRECT(memory_base, 0, 0x0A);
100207ec:	e0bfff17 	ldw	r2,-4(fp)
100207f0:	1007883a 	mov	r3,r2
100207f4:	00800284 	movi	r2,10
100207f8:	18800025 	stbio	r2,0(r3)
  IOWR_8DIRECT(memory_base, 1, 0x05);
100207fc:	e0bfff17 	ldw	r2,-4(fp)
10020800:	10800044 	addi	r2,r2,1
10020804:	1007883a 	mov	r3,r2
10020808:	00800144 	movi	r2,5
1002080c:	18800025 	stbio	r2,0(r3)
  IOWR_8DIRECT(memory_base, 2, 0xA0);
10020810:	e0bfff17 	ldw	r2,-4(fp)
10020814:	10800084 	addi	r2,r2,2
10020818:	1007883a 	mov	r3,r2
1002081c:	00802804 	movi	r2,160
10020820:	18800025 	stbio	r2,0(r3)
  IOWR_8DIRECT(memory_base, 3, 0x50);
10020824:	e0bfff17 	ldw	r2,-4(fp)
10020828:	108000c4 	addi	r2,r2,3
1002082c:	1007883a 	mov	r3,r2
10020830:	00801404 	movi	r2,80
10020834:	18800025 	stbio	r2,0(r3)

  /* Read it back as one word */
  if(IORD_32DIRECT(memory_base, 0) != 0x50A0050A)
10020838:	e0bfff17 	ldw	r2,-4(fp)
1002083c:	10c00037 	ldwio	r3,0(r2)
10020840:	00942834 	movhi	r2,20640
10020844:	10814284 	addi	r2,r2,1290
10020848:	18800226 	beq	r3,r2,10020854 <MemTest8_16BitAccess+0x7c>
  {
    ret_code = memory_base;
1002084c:	e0bfff17 	ldw	r2,-4(fp)
10020850:	e0bffe15 	stw	r2,-8(fp)
  }

  /* Read it back as two half-words */
  if (!ret_code)
10020854:	e0bffe17 	ldw	r2,-8(fp)
10020858:	1004c03a 	cmpne	r2,r2,zero
1002085c:	10000b1e 	bne	r2,zero,1002088c <MemTest8_16BitAccess+0xb4>
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x50A0) ||
10020860:	e0bfff17 	ldw	r2,-4(fp)
10020864:	10800084 	addi	r2,r2,2
10020868:	1080002b 	ldhuio	r2,0(r2)
1002086c:	10942818 	cmpnei	r2,r2,20640
10020870:	1000041e 	bne	r2,zero,10020884 <MemTest8_16BitAccess+0xac>
10020874:	e0bfff17 	ldw	r2,-4(fp)
10020878:	1080002b 	ldhuio	r2,0(r2)
1002087c:	108142a0 	cmpeqi	r2,r2,1290
10020880:	1000021e 	bne	r2,zero,1002088c <MemTest8_16BitAccess+0xb4>
        (IORD_16DIRECT(memory_base, 0) != 0x050A))
    {
      ret_code = memory_base;
10020884:	e0bfff17 	ldw	r2,-4(fp)
10020888:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
1002088c:	e0bffe17 	ldw	r2,-8(fp)
10020890:	1004c03a 	cmpne	r2,r2,zero
10020894:	1000151e 	bne	r2,zero,100208ec <MemTest8_16BitAccess+0x114>
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x50) ||
10020898:	e0bfff17 	ldw	r2,-4(fp)
1002089c:	108000c4 	addi	r2,r2,3
100208a0:	10800023 	ldbuio	r2,0(r2)
100208a4:	10801418 	cmpnei	r2,r2,80
100208a8:	10000e1e 	bne	r2,zero,100208e4 <MemTest8_16BitAccess+0x10c>
100208ac:	e0bfff17 	ldw	r2,-4(fp)
100208b0:	10800084 	addi	r2,r2,2
100208b4:	10800023 	ldbuio	r2,0(r2)
100208b8:	10802818 	cmpnei	r2,r2,160
100208bc:	1000091e 	bne	r2,zero,100208e4 <MemTest8_16BitAccess+0x10c>
100208c0:	e0bfff17 	ldw	r2,-4(fp)
100208c4:	10800044 	addi	r2,r2,1
100208c8:	10800023 	ldbuio	r2,0(r2)
100208cc:	10800158 	cmpnei	r2,r2,5
100208d0:	1000041e 	bne	r2,zero,100208e4 <MemTest8_16BitAccess+0x10c>
100208d4:	e0bfff17 	ldw	r2,-4(fp)
100208d8:	10800023 	ldbuio	r2,0(r2)
100208dc:	108002a0 	cmpeqi	r2,r2,10
100208e0:	1000021e 	bne	r2,zero,100208ec <MemTest8_16BitAccess+0x114>
        (IORD_8DIRECT(memory_base, 2) != 0xA0) ||
        (IORD_8DIRECT(memory_base, 1) != 0x05) ||
        (IORD_8DIRECT(memory_base, 0) != 0x0A))
    {
    ret_code = memory_base;
100208e4:	e0bfff17 	ldw	r2,-4(fp)
100208e8:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Write 2 half-words */
  if (!ret_code)
100208ec:	e0bffe17 	ldw	r2,-8(fp)
100208f0:	1004c03a 	cmpne	r2,r2,zero
100208f4:	1000101e 	bne	r2,zero,10020938 <MemTest8_16BitAccess+0x160>
  {
    IOWR_16DIRECT(memory_base, 0, 0x50A0);
100208f8:	e0bfff17 	ldw	r2,-4(fp)
100208fc:	1007883a 	mov	r3,r2
10020900:	00942804 	movi	r2,20640
10020904:	1880002d 	sthio	r2,0(r3)
    IOWR_16DIRECT(memory_base, 2, 0x050A);
10020908:	e0bfff17 	ldw	r2,-4(fp)
1002090c:	10800084 	addi	r2,r2,2
10020910:	1007883a 	mov	r3,r2
10020914:	00814284 	movi	r2,1290
10020918:	1880002d 	sthio	r2,0(r3)

    /* Read it back as one word */
    if(IORD_32DIRECT(memory_base, 0) != 0x050A50A0)
1002091c:	e0bfff17 	ldw	r2,-4(fp)
10020920:	10c00037 	ldwio	r3,0(r2)
10020924:	008142b4 	movhi	r2,1290
10020928:	10942804 	addi	r2,r2,20640
1002092c:	18800226 	beq	r3,r2,10020938 <MemTest8_16BitAccess+0x160>
    {
      ret_code = memory_base;
10020930:	e0bfff17 	ldw	r2,-4(fp)
10020934:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as two half-words */
  if (!ret_code)
10020938:	e0bffe17 	ldw	r2,-8(fp)
1002093c:	1004c03a 	cmpne	r2,r2,zero
10020940:	10000b1e 	bne	r2,zero,10020970 <MemTest8_16BitAccess+0x198>
  {
    if ((IORD_16DIRECT(memory_base, 2) != 0x050A) ||
10020944:	e0bfff17 	ldw	r2,-4(fp)
10020948:	10800084 	addi	r2,r2,2
1002094c:	1080002b 	ldhuio	r2,0(r2)
10020950:	10814298 	cmpnei	r2,r2,1290
10020954:	1000041e 	bne	r2,zero,10020968 <MemTest8_16BitAccess+0x190>
10020958:	e0bfff17 	ldw	r2,-4(fp)
1002095c:	1080002b 	ldhuio	r2,0(r2)
10020960:	10942820 	cmpeqi	r2,r2,20640
10020964:	1000021e 	bne	r2,zero,10020970 <MemTest8_16BitAccess+0x198>
        (IORD_16DIRECT(memory_base, 0) != 0x50A0))
    {
      ret_code = memory_base;
10020968:	e0bfff17 	ldw	r2,-4(fp)
1002096c:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  /* Read it back as 4 bytes */
  if (!ret_code)
10020970:	e0bffe17 	ldw	r2,-8(fp)
10020974:	1004c03a 	cmpne	r2,r2,zero
10020978:	1000151e 	bne	r2,zero,100209d0 <MemTest8_16BitAccess+0x1f8>
  {
    if ((IORD_8DIRECT(memory_base, 3) != 0x05) ||
1002097c:	e0bfff17 	ldw	r2,-4(fp)
10020980:	108000c4 	addi	r2,r2,3
10020984:	10800023 	ldbuio	r2,0(r2)
10020988:	10800158 	cmpnei	r2,r2,5
1002098c:	10000e1e 	bne	r2,zero,100209c8 <MemTest8_16BitAccess+0x1f0>
10020990:	e0bfff17 	ldw	r2,-4(fp)
10020994:	10800084 	addi	r2,r2,2
10020998:	10800023 	ldbuio	r2,0(r2)
1002099c:	10800298 	cmpnei	r2,r2,10
100209a0:	1000091e 	bne	r2,zero,100209c8 <MemTest8_16BitAccess+0x1f0>
100209a4:	e0bfff17 	ldw	r2,-4(fp)
100209a8:	10800044 	addi	r2,r2,1
100209ac:	10800023 	ldbuio	r2,0(r2)
100209b0:	10801418 	cmpnei	r2,r2,80
100209b4:	1000041e 	bne	r2,zero,100209c8 <MemTest8_16BitAccess+0x1f0>
100209b8:	e0bfff17 	ldw	r2,-4(fp)
100209bc:	10800023 	ldbuio	r2,0(r2)
100209c0:	10802820 	cmpeqi	r2,r2,160
100209c4:	1000021e 	bne	r2,zero,100209d0 <MemTest8_16BitAccess+0x1f8>
        (IORD_8DIRECT(memory_base, 2) != 0x0A) ||
        (IORD_8DIRECT(memory_base, 1) != 0x50) ||
        (IORD_8DIRECT(memory_base, 0) != 0xA0))
    {
      ret_code = memory_base;
100209c8:	e0bfff17 	ldw	r2,-4(fp)
100209cc:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  return(ret_code);
100209d0:	e0bffe17 	ldw	r2,-8(fp)
}
100209d4:	e037883a 	mov	sp,fp
100209d8:	df000017 	ldw	fp,0(sp)
100209dc:	dec00104 	addi	sp,sp,4
100209e0:	f800283a 	ret

100209e4 <MemTestDevice>:
*  Purpose: Tests that every bit in the memory device within the 
*           specified address range can store both a '1' and a '0'.
*
******************************************************************/
static int MemTestDevice(unsigned int memory_base, unsigned int nBytes)
{
100209e4:	defff804 	addi	sp,sp,-32
100209e8:	dfc00715 	stw	ra,28(sp)
100209ec:	df000615 	stw	fp,24(sp)
100209f0:	df000604 	addi	fp,sp,24
100209f4:	e13ffe15 	stw	r4,-8(fp)
100209f8:	e17fff15 	stw	r5,-4(fp)
  unsigned int offset;
  unsigned int pattern;
  unsigned int antipattern;
  unsigned int ret_code = 0x0;
100209fc:	e03ffa15 	stw	zero,-24(fp)

  /* Fill memory with a known pattern. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
10020a00:	00800044 	movi	r2,1
10020a04:	e0bffc15 	stw	r2,-16(fp)
10020a08:	e03ffd15 	stw	zero,-12(fp)
10020a0c:	00000b06 	br	10020a3c <MemTestDevice+0x58>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
10020a10:	e0fffe17 	ldw	r3,-8(fp)
10020a14:	e0bffd17 	ldw	r2,-12(fp)
10020a18:	1885883a 	add	r2,r3,r2
10020a1c:	e0fffc17 	ldw	r3,-16(fp)
10020a20:	10c00035 	stwio	r3,0(r2)
  unsigned int pattern;
  unsigned int antipattern;
  unsigned int ret_code = 0x0;

  /* Fill memory with a known pattern. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
10020a24:	e0bffc17 	ldw	r2,-16(fp)
10020a28:	10800044 	addi	r2,r2,1
10020a2c:	e0bffc15 	stw	r2,-16(fp)
10020a30:	e0bffd17 	ldw	r2,-12(fp)
10020a34:	10800104 	addi	r2,r2,4
10020a38:	e0bffd15 	stw	r2,-12(fp)
10020a3c:	e0fffd17 	ldw	r3,-12(fp)
10020a40:	e0bfff17 	ldw	r2,-4(fp)
10020a44:	18bff236 	bltu	r3,r2,10020a10 <MemTestDevice+0x2c>
  {
    IOWR_32DIRECT(memory_base, offset, pattern);
  }

  printf(" .");
10020a48:	01000034 	movhi	r4,0
10020a4c:	2100c104 	addi	r4,r4,772
10020a50:	0022cf00 	call	10022cf0 <printf>

  /* Check each location and invert it for the second pass. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
10020a54:	00800044 	movi	r2,1
10020a58:	e0bffc15 	stw	r2,-16(fp)
10020a5c:	e03ffd15 	stw	zero,-12(fp)
10020a60:	00001a06 	br	10020acc <MemTestDevice+0xe8>
  {
    if (IORD_32DIRECT(memory_base, offset) != pattern)
10020a64:	e0fffe17 	ldw	r3,-8(fp)
10020a68:	e0bffd17 	ldw	r2,-12(fp)
10020a6c:	1885883a 	add	r2,r3,r2
10020a70:	10800037 	ldwio	r2,0(r2)
10020a74:	1007883a 	mov	r3,r2
10020a78:	e0bffc17 	ldw	r2,-16(fp)
10020a7c:	18800526 	beq	r3,r2,10020a94 <MemTestDevice+0xb0>
    {
      ret_code = (memory_base + offset);
10020a80:	e0bffe17 	ldw	r2,-8(fp)
10020a84:	e0fffd17 	ldw	r3,-12(fp)
10020a88:	10c5883a 	add	r2,r2,r3
10020a8c:	e0bffa15 	stw	r2,-24(fp)
      break;
10020a90:	00001106 	br	10020ad8 <MemTestDevice+0xf4>
    }
    antipattern = ~pattern;
10020a94:	e0bffc17 	ldw	r2,-16(fp)
10020a98:	0084303a 	nor	r2,zero,r2
10020a9c:	e0bffb15 	stw	r2,-20(fp)
    IOWR_32DIRECT(memory_base, offset, antipattern);
10020aa0:	e0fffe17 	ldw	r3,-8(fp)
10020aa4:	e0bffd17 	ldw	r2,-12(fp)
10020aa8:	1885883a 	add	r2,r3,r2
10020aac:	e0fffb17 	ldw	r3,-20(fp)
10020ab0:	10c00035 	stwio	r3,0(r2)
  }

  printf(" .");

  /* Check each location and invert it for the second pass. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
10020ab4:	e0bffc17 	ldw	r2,-16(fp)
10020ab8:	10800044 	addi	r2,r2,1
10020abc:	e0bffc15 	stw	r2,-16(fp)
10020ac0:	e0bffd17 	ldw	r2,-12(fp)
10020ac4:	10800104 	addi	r2,r2,4
10020ac8:	e0bffd15 	stw	r2,-12(fp)
10020acc:	e0fffd17 	ldw	r3,-12(fp)
10020ad0:	e0bfff17 	ldw	r2,-4(fp)
10020ad4:	18bfe336 	bltu	r3,r2,10020a64 <MemTestDevice+0x80>
    }
    antipattern = ~pattern;
    IOWR_32DIRECT(memory_base, offset, antipattern);
  }

  printf(" .");
10020ad8:	01000034 	movhi	r4,0
10020adc:	2100c104 	addi	r4,r4,772
10020ae0:	0022cf00 	call	10022cf0 <printf>

  /* Check each location for the inverted pattern and zero it. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
10020ae4:	00800044 	movi	r2,1
10020ae8:	e0bffc15 	stw	r2,-16(fp)
10020aec:	e03ffd15 	stw	zero,-12(fp)
10020af0:	00001906 	br	10020b58 <MemTestDevice+0x174>
  {
    antipattern = ~pattern;
10020af4:	e0bffc17 	ldw	r2,-16(fp)
10020af8:	0084303a 	nor	r2,zero,r2
10020afc:	e0bffb15 	stw	r2,-20(fp)
    if (IORD_32DIRECT(memory_base, offset) != antipattern)
10020b00:	e0fffe17 	ldw	r3,-8(fp)
10020b04:	e0bffd17 	ldw	r2,-12(fp)
10020b08:	1885883a 	add	r2,r3,r2
10020b0c:	10800037 	ldwio	r2,0(r2)
10020b10:	1007883a 	mov	r3,r2
10020b14:	e0bffb17 	ldw	r2,-20(fp)
10020b18:	18800526 	beq	r3,r2,10020b30 <MemTestDevice+0x14c>
    {
      ret_code = (memory_base + offset);
10020b1c:	e0bffe17 	ldw	r2,-8(fp)
10020b20:	e0fffd17 	ldw	r3,-12(fp)
10020b24:	10c5883a 	add	r2,r2,r3
10020b28:	e0bffa15 	stw	r2,-24(fp)
      break;
10020b2c:	00000d06 	br	10020b64 <MemTestDevice+0x180>
    }
    IOWR_32DIRECT(memory_base, offset, 0x0);
10020b30:	e0fffe17 	ldw	r3,-8(fp)
10020b34:	e0bffd17 	ldw	r2,-12(fp)
10020b38:	1885883a 	add	r2,r3,r2
10020b3c:	10000035 	stwio	zero,0(r2)
  }

  printf(" .");

  /* Check each location for the inverted pattern and zero it. */
  for (pattern = 1, offset = 0; offset < nBytes; pattern++, offset+=4)
10020b40:	e0bffc17 	ldw	r2,-16(fp)
10020b44:	10800044 	addi	r2,r2,1
10020b48:	e0bffc15 	stw	r2,-16(fp)
10020b4c:	e0bffd17 	ldw	r2,-12(fp)
10020b50:	10800104 	addi	r2,r2,4
10020b54:	e0bffd15 	stw	r2,-12(fp)
10020b58:	e0fffd17 	ldw	r3,-12(fp)
10020b5c:	e0bfff17 	ldw	r2,-4(fp)
10020b60:	18bfe436 	bltu	r3,r2,10020af4 <MemTestDevice+0x110>
      ret_code = (memory_base + offset);
      break;
    }
    IOWR_32DIRECT(memory_base, offset, 0x0);
  }
  return ret_code;
10020b64:	e0bffa17 	ldw	r2,-24(fp)
}
10020b68:	e037883a 	mov	sp,fp
10020b6c:	dfc00117 	ldw	ra,4(sp)
10020b70:	df000017 	ldw	fp,0(sp)
10020b74:	dec00204 	addi	sp,sp,8
10020b78:	f800283a 	ret

10020b7c <TestRam>:
*             - MemTestDevice
*             - MemDMATest
*
******************************************************************/
static void TestRam(void)
{
10020b7c:	defffa04 	addi	sp,sp,-24
10020b80:	dfc00515 	stw	ra,20(sp)
10020b84:	df000415 	stw	fp,16(sp)
10020b88:	df000404 	addi	fp,sp,16
  
  int memory_base, memory_end, memory_size;
  int ret_code = 0x0;
10020b8c:	e03ffc15 	stw	zero,-16(fp)

  /* Find out what range of memory we are testing */
  MemGetAddressRange(&memory_base, &memory_end);
10020b90:	e13ffe04 	addi	r4,fp,-8
10020b94:	e17fff04 	addi	r5,fp,-4
10020b98:	00204680 	call	10020468 <MemGetAddressRange>
  memory_size = (memory_end - memory_base);
10020b9c:	e0ffff17 	ldw	r3,-4(fp)
10020ba0:	e0bffe17 	ldw	r2,-8(fp)
10020ba4:	1885c83a 	sub	r2,r3,r2
10020ba8:	e0bffd15 	stw	r2,-12(fp)

  printf("\n");
10020bac:	01000284 	movi	r4,10
10020bb0:	0022d680 	call	10022d68 <putchar>
  printf("Testing RAM from 0x%X to 0x%X\n", memory_base, (memory_base + memory_size));
10020bb4:	e17ffe17 	ldw	r5,-8(fp)
10020bb8:	e0fffe17 	ldw	r3,-8(fp)
10020bbc:	e0bffd17 	ldw	r2,-12(fp)
10020bc0:	188d883a 	add	r6,r3,r2
10020bc4:	01000034 	movhi	r4,0
10020bc8:	2100c204 	addi	r4,r4,776
10020bcc:	0022cf00 	call	10022cf0 <printf>

  /* Test Data Bus. */
  ret_code = MemTestDataBus(memory_base);
10020bd0:	e0bffe17 	ldw	r2,-8(fp)
10020bd4:	1009883a 	mov	r4,r2
10020bd8:	00205800 	call	10020580 <MemTestDataBus>
10020bdc:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code)
10020be0:	e0bffc17 	ldw	r2,-16(fp)
10020be4:	1005003a 	cmpeq	r2,r2,zero
10020be8:	1000051e 	bne	r2,zero,10020c00 <TestRam+0x84>
   printf(" -Data bus test failed at bit 0x%X", (int)ret_code);
10020bec:	01000034 	movhi	r4,0
10020bf0:	2100ca04 	addi	r4,r4,808
10020bf4:	e17ffc17 	ldw	r5,-16(fp)
10020bf8:	0022cf00 	call	10022cf0 <printf>
10020bfc:	00000306 	br	10020c0c <TestRam+0x90>
  else
    printf(" -Data bus test passed\n");
10020c00:	01000034 	movhi	r4,0
10020c04:	2100d304 	addi	r4,r4,844
10020c08:	0022e2c0 	call	10022e2c <puts>

  /* Test Address Bus. */
  if (!ret_code)
10020c0c:	e0bffc17 	ldw	r2,-16(fp)
10020c10:	1004c03a 	cmpne	r2,r2,zero
10020c14:	1000101e 	bne	r2,zero,10020c58 <TestRam+0xdc>
  {
    ret_code  = MemTestAddressBus(memory_base, memory_size);
10020c18:	e0bffe17 	ldw	r2,-8(fp)
10020c1c:	1009883a 	mov	r4,r2
10020c20:	e17ffd17 	ldw	r5,-12(fp)
10020c24:	00205f80 	call	100205f8 <MemTestAddressBus>
10020c28:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
10020c2c:	e0bffc17 	ldw	r2,-16(fp)
10020c30:	1005003a 	cmpeq	r2,r2,zero
10020c34:	1000051e 	bne	r2,zero,10020c4c <TestRam+0xd0>
      printf(" -Address bus test failed at address 0x%X", (int)ret_code);
10020c38:	01000034 	movhi	r4,0
10020c3c:	2100d904 	addi	r4,r4,868
10020c40:	e17ffc17 	ldw	r5,-16(fp)
10020c44:	0022cf00 	call	10022cf0 <printf>
10020c48:	00000306 	br	10020c58 <TestRam+0xdc>
    else
      printf(" -Address bus test passed\n");
10020c4c:	01000034 	movhi	r4,0
10020c50:	2100e404 	addi	r4,r4,912
10020c54:	0022e2c0 	call	10022e2c <puts>
  }

  /* Test byte and half-word access. */
  if (!ret_code)
10020c58:	e0bffc17 	ldw	r2,-16(fp)
10020c5c:	1004c03a 	cmpne	r2,r2,zero
10020c60:	10000f1e 	bne	r2,zero,10020ca0 <TestRam+0x124>
  {
    ret_code = MemTest8_16BitAccess(memory_base);
10020c64:	e0bffe17 	ldw	r2,-8(fp)
10020c68:	1009883a 	mov	r4,r2
10020c6c:	00207d80 	call	100207d8 <MemTest8_16BitAccess>
10020c70:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
10020c74:	e0bffc17 	ldw	r2,-16(fp)
10020c78:	1005003a 	cmpeq	r2,r2,zero
10020c7c:	1000051e 	bne	r2,zero,10020c94 <TestRam+0x118>
      printf(" -Byte and half-word access test failed at address 0x%X", (int)ret_code);
10020c80:	01000034 	movhi	r4,0
10020c84:	2100eb04 	addi	r4,r4,940
10020c88:	e17ffc17 	ldw	r5,-16(fp)
10020c8c:	0022cf00 	call	10022cf0 <printf>
10020c90:	00000306 	br	10020ca0 <TestRam+0x124>
    else
      printf(" -Byte and half-word access test passed\n");
10020c94:	01000034 	movhi	r4,0
10020c98:	2100f904 	addi	r4,r4,996
10020c9c:	0022e2c0 	call	10022e2c <puts>
  }

  /* Test that each bit in the device can store both 1 and 0. */
  if (!ret_code)
10020ca0:	e0bffc17 	ldw	r2,-16(fp)
10020ca4:	1004c03a 	cmpne	r2,r2,zero
10020ca8:	1000131e 	bne	r2,zero,10020cf8 <TestRam+0x17c>
  {
    printf(" -Testing each bit in memory device.");
10020cac:	01000034 	movhi	r4,0
10020cb0:	21010304 	addi	r4,r4,1036
10020cb4:	0022cf00 	call	10022cf0 <printf>
    ret_code = MemTestDevice(memory_base, memory_size);
10020cb8:	e0bffe17 	ldw	r2,-8(fp)
10020cbc:	1009883a 	mov	r4,r2
10020cc0:	e17ffd17 	ldw	r5,-12(fp)
10020cc4:	00209e40 	call	100209e4 <MemTestDevice>
10020cc8:	e0bffc15 	stw	r2,-16(fp)
    if  (ret_code)
10020ccc:	e0bffc17 	ldw	r2,-16(fp)
10020cd0:	1005003a 	cmpeq	r2,r2,zero
10020cd4:	1000051e 	bne	r2,zero,10020cec <TestRam+0x170>
      printf("  failed at address 0x%X", (int)ret_code);
10020cd8:	01000034 	movhi	r4,0
10020cdc:	21010d04 	addi	r4,r4,1076
10020ce0:	e17ffc17 	ldw	r5,-16(fp)
10020ce4:	0022cf00 	call	10022cf0 <printf>
10020ce8:	00000306 	br	10020cf8 <TestRam+0x17c>
    else
      printf("  passed\n");
10020cec:	01000034 	movhi	r4,0
10020cf0:	21011404 	addi	r4,r4,1104
10020cf4:	0022e2c0 	call	10022e2c <puts>
    else
      printf("  passed\n");
  }
#endif /* DMA_NAME */
      
  if (!ret_code)
10020cf8:	e0bffc17 	ldw	r2,-16(fp)
10020cfc:	1004c03a 	cmpne	r2,r2,zero
10020d00:	1000041e 	bne	r2,zero,10020d14 <TestRam+0x198>
    printf("Memory at 0x%X Okay\n", memory_base);
10020d04:	e17ffe17 	ldw	r5,-8(fp)
10020d08:	01000034 	movhi	r4,0
10020d0c:	21011704 	addi	r4,r4,1116
10020d10:	0022cf00 	call	10022cf0 <printf>
}
10020d14:	e037883a 	mov	sp,fp
10020d18:	dfc00117 	ldw	ra,4(sp)
10020d1c:	df000017 	ldw	fp,0(sp)
10020d20:	dec00204 	addi	sp,sp,8
10020d24:	f800283a 	ret

10020d28 <FlashCheckIfBlockErased>:
*  Purpose: Checks the specified flash block to see if it is 
*           completely erased (all 0xFFFFFFFF).
*
******************************************************************/
static int FlashCheckIfBlockErased(alt_flash_fd* fd, int block, flash_region* regions)
{
10020d28:	defff204 	addi	sp,sp,-56
10020d2c:	dfc00d15 	stw	ra,52(sp)
10020d30:	df000c15 	stw	fp,48(sp)
10020d34:	df000c04 	addi	fp,sp,48
10020d38:	e13ffd15 	stw	r4,-12(fp)
10020d3c:	e17ffe15 	stw	r5,-8(fp)
10020d40:	e1bfff15 	stw	r6,-4(fp)
  int i, j;
  int ret_code = 0x0;
10020d44:	e03ffa15 	stw	zero,-24(fp)
  char block_is_erased = 0x1;
10020d48:	00800044 	movi	r2,1
10020d4c:	e0bff905 	stb	r2,-28(fp)
  alt_u8 *data_read;
 
  /* Get a buffer */
  data_read = malloc(64);
10020d50:	01001004 	movi	r4,64
10020d54:	00224880 	call	10022488 <malloc>
10020d58:	e0bff815 	stw	r2,-32(fp)
  
  /* Initialize the flag */
  block_is_erased = 0x1;
10020d5c:	00800044 	movi	r2,1
10020d60:	e0bff905 	stb	r2,-28(fp)

  for(i = 0; i < regions->block_size; i += 64)
10020d64:	e03ffc15 	stw	zero,-16(fp)
10020d68:	00002d06 	br	10020e20 <FlashCheckIfBlockErased+0xf8>
  {
    ret_code = alt_read_flash(fd, ((block * regions->block_size) + i), data_read, 64);
10020d6c:	e0bfff17 	ldw	r2,-4(fp)
10020d70:	10c00317 	ldw	r3,12(r2)
10020d74:	e0bffe17 	ldw	r2,-8(fp)
10020d78:	1887383a 	mul	r3,r3,r2
10020d7c:	e0bffc17 	ldw	r2,-16(fp)
10020d80:	1887883a 	add	r3,r3,r2
10020d84:	e0bffd17 	ldw	r2,-12(fp)
10020d88:	e0bff415 	stw	r2,-48(fp)
10020d8c:	e0fff515 	stw	r3,-44(fp)
10020d90:	e0bff817 	ldw	r2,-32(fp)
10020d94:	e0bff615 	stw	r2,-40(fp)
10020d98:	00801004 	movi	r2,64
10020d9c:	e0bff715 	stw	r2,-36(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
10020da0:	e0bff417 	ldw	r2,-48(fp)
10020da4:	10800617 	ldw	r2,24(r2)
10020da8:	e13ff417 	ldw	r4,-48(fp)
10020dac:	e17ff517 	ldw	r5,-44(fp)
10020db0:	e1bff617 	ldw	r6,-40(fp)
10020db4:	e1fff717 	ldw	r7,-36(fp)
10020db8:	103ee83a 	callr	r2
10020dbc:	e0bffa15 	stw	r2,-24(fp)

    for(j=0; j < 64; j+=1)
10020dc0:	e03ffb15 	stw	zero,-20(fp)
10020dc4:	00000d06 	br	10020dfc <FlashCheckIfBlockErased+0xd4>
    {
      if(*(data_read+j) != 0xFF)
10020dc8:	e0bffb17 	ldw	r2,-20(fp)
10020dcc:	1007883a 	mov	r3,r2
10020dd0:	e0bff817 	ldw	r2,-32(fp)
10020dd4:	1885883a 	add	r2,r3,r2
10020dd8:	10800003 	ldbu	r2,0(r2)
10020ddc:	10803fcc 	andi	r2,r2,255
10020de0:	10803fe0 	cmpeqi	r2,r2,255
10020de4:	1000021e 	bne	r2,zero,10020df0 <FlashCheckIfBlockErased+0xc8>
      {
        /* If this byte isn't erased, then neither is the block */
        block_is_erased = 0x0;
10020de8:	e03ff905 	stb	zero,-28(fp)
        break;
10020dec:	00000606 	br	10020e08 <FlashCheckIfBlockErased+0xe0>

  for(i = 0; i < regions->block_size; i += 64)
  {
    ret_code = alt_read_flash(fd, ((block * regions->block_size) + i), data_read, 64);

    for(j=0; j < 64; j+=1)
10020df0:	e0bffb17 	ldw	r2,-20(fp)
10020df4:	10800044 	addi	r2,r2,1
10020df8:	e0bffb15 	stw	r2,-20(fp)
10020dfc:	e0bffb17 	ldw	r2,-20(fp)
10020e00:	10801010 	cmplti	r2,r2,64
10020e04:	103ff01e 	bne	r2,zero,10020dc8 <FlashCheckIfBlockErased+0xa0>
        /* If this byte isn't erased, then neither is the block */
        block_is_erased = 0x0;
        break;
      }
    }
    if (block_is_erased == 0x0)
10020e08:	e0bff907 	ldb	r2,-28(fp)
10020e0c:	1005003a 	cmpeq	r2,r2,zero
10020e10:	1000071e 	bne	r2,zero,10020e30 <FlashCheckIfBlockErased+0x108>
  data_read = malloc(64);
  
  /* Initialize the flag */
  block_is_erased = 0x1;

  for(i = 0; i < regions->block_size; i += 64)
10020e14:	e0bffc17 	ldw	r2,-16(fp)
10020e18:	10801004 	addi	r2,r2,64
10020e1c:	e0bffc15 	stw	r2,-16(fp)
10020e20:	e0bfff17 	ldw	r2,-4(fp)
10020e24:	10c00317 	ldw	r3,12(r2)
10020e28:	e0bffc17 	ldw	r2,-16(fp)
10020e2c:	10ffcf16 	blt	r2,r3,10020d6c <FlashCheckIfBlockErased+0x44>
    }
    if (block_is_erased == 0x0)
      break;
  }
  /* Block is erased if we indexed through all block locations */
  if(i == regions->block_size)
10020e30:	e0bfff17 	ldw	r2,-4(fp)
10020e34:	10c00317 	ldw	r3,12(r2)
10020e38:	e0bffc17 	ldw	r2,-16(fp)
10020e3c:	1880031e 	bne	r3,r2,10020e4c <FlashCheckIfBlockErased+0x124>
    ret_code = 1;
10020e40:	00800044 	movi	r2,1
10020e44:	e0bffa15 	stw	r2,-24(fp)
10020e48:	00000106 	br	10020e50 <FlashCheckIfBlockErased+0x128>
  else
    ret_code = 0;
10020e4c:	e03ffa15 	stw	zero,-24(fp)
  
  free(data_read);
10020e50:	e13ff817 	ldw	r4,-32(fp)
10020e54:	00224740 	call	10022474 <free>
 
  return ret_code;
10020e58:	e0bffa17 	ldw	r2,-24(fp)
}
10020e5c:	e037883a 	mov	sp,fp
10020e60:	dfc00117 	ldw	ra,4(sp)
10020e64:	df000017 	ldw	fp,0(sp)
10020e68:	dec00204 	addi	sp,sp,8
10020e6c:	f800283a 	ret

10020e70 <FlashTestBlockWrite>:
*  Purpose: Tests that the function alt_write_flash_block is
*           is working properly.
*
******************************************************************/
static int FlashTestBlockWrite(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
10020e70:	deffdc04 	addi	sp,sp,-144
10020e74:	dfc02315 	stw	ra,140(sp)
10020e78:	df002215 	stw	fp,136(sp)
10020e7c:	df002204 	addi	fp,sp,136
10020e80:	e13ffc15 	stw	r4,-16(fp)
10020e84:	e17ffd15 	stw	r5,-12(fp)
10020e88:	e1bffe15 	stw	r6,-8(fp)
10020e8c:	e1ffff15 	stw	r7,-4(fp)
  int i;
  int ret_code = 0x0;
10020e90:	e03ffa15 	stw	zero,-24(fp)
  alt_u8 *data_written;
  alt_u8 *data_read;


  /* Get a couple buffers for the test */
  data_written = malloc(100);
10020e94:	01001904 	movi	r4,100
10020e98:	00224880 	call	10022488 <malloc>
10020e9c:	e0bff815 	stw	r2,-32(fp)
  data_read = malloc(100);
10020ea0:	01001904 	movi	r4,100
10020ea4:	00224880 	call	10022488 <malloc>
10020ea8:	e0bff715 	stw	r2,-36(fp)

  test_offset = (regions->offset + (block * regions->block_size));
10020eac:	e0bfff17 	ldw	r2,-4(fp)
10020eb0:	11000017 	ldw	r4,0(r2)
10020eb4:	e0bfff17 	ldw	r2,-4(fp)
10020eb8:	10c00317 	ldw	r3,12(r2)
10020ebc:	e0bffc17 	ldw	r2,-16(fp)
10020ec0:	1885383a 	mul	r2,r3,r2
10020ec4:	2085883a 	add	r2,r4,r2
10020ec8:	e0bff915 	stw	r2,-28(fp)

  /* Fill write buffer with 100 values (incremented by 3) */
  for(i=0; i < 100; i++)
10020ecc:	e03ffb15 	stw	zero,-20(fp)
10020ed0:	00000c06 	br	10020f04 <FlashTestBlockWrite+0x94>
    *(data_written + i) = (i * 3);
10020ed4:	e0bffb17 	ldw	r2,-20(fp)
10020ed8:	1007883a 	mov	r3,r2
10020edc:	e0bff817 	ldw	r2,-32(fp)
10020ee0:	1889883a 	add	r4,r3,r2
10020ee4:	e0fffb17 	ldw	r3,-20(fp)
10020ee8:	1805883a 	mov	r2,r3
10020eec:	1085883a 	add	r2,r2,r2
10020ef0:	10c5883a 	add	r2,r2,r3
10020ef4:	20800005 	stb	r2,0(r4)
  data_read = malloc(100);

  test_offset = (regions->offset + (block * regions->block_size));

  /* Fill write buffer with 100 values (incremented by 3) */
  for(i=0; i < 100; i++)
10020ef8:	e0bffb17 	ldw	r2,-20(fp)
10020efc:	10800044 	addi	r2,r2,1
10020f00:	e0bffb15 	stw	r2,-20(fp)
10020f04:	e0bffb17 	ldw	r2,-20(fp)
10020f08:	10801910 	cmplti	r2,r2,100
10020f0c:	103ff11e 	bne	r2,zero,10020ed4 <FlashTestBlockWrite+0x64>
    *(data_written + i) = (i * 3);

  /* Write the buffer to flash starting 0x40 bytes from the beginning of the block. */
  printf(" -Testing \"alt_write_flash_block\".");
10020f10:	01000034 	movhi	r4,0
10020f14:	21011d04 	addi	r4,r4,1140
10020f18:	0022cf00 	call	10022cf0 <printf>
  ret_code = alt_write_flash_block(fd, test_offset, (test_offset + 0x40), data_written, 100);
10020f1c:	e0bff917 	ldw	r2,-28(fp)
10020f20:	10c01004 	addi	r3,r2,64
10020f24:	e0bffe17 	ldw	r2,-8(fp)
10020f28:	e0bff115 	stw	r2,-60(fp)
10020f2c:	e0bff917 	ldw	r2,-28(fp)
10020f30:	e0bff215 	stw	r2,-56(fp)
10020f34:	e0fff315 	stw	r3,-52(fp)
10020f38:	e0bff817 	ldw	r2,-32(fp)
10020f3c:	e0bff415 	stw	r2,-48(fp)
10020f40:	00801904 	movi	r2,100
10020f44:	e0bff515 	stw	r2,-44(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
10020f48:	e0bff117 	ldw	r2,-60(fp)
10020f4c:	10c00917 	ldw	r3,36(r2)
10020f50:	e0bff517 	ldw	r2,-44(fp)
10020f54:	d8800015 	stw	r2,0(sp)
10020f58:	e13ff117 	ldw	r4,-60(fp)
10020f5c:	e17ff217 	ldw	r5,-56(fp)
10020f60:	e1bff317 	ldw	r6,-52(fp)
10020f64:	e1fff417 	ldw	r7,-48(fp)
10020f68:	183ee83a 	callr	r3
10020f6c:	e0bff615 	stw	r2,-40(fp)

  if(!ret_code)
10020f70:	e0bff617 	ldw	r2,-40(fp)
10020f74:	1004c03a 	cmpne	r2,r2,zero
10020f78:	1000071e 	bne	r2,zero,10020f98 <FlashTestBlockWrite+0x128>
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
10020f7c:	e0bff117 	ldw	r2,-60(fp)
10020f80:	10800a17 	ldw	r2,40(r2)
10020f84:	1007883a 	mov	r3,r2
10020f88:	e0bff317 	ldw	r2,-52(fp)
10020f8c:	1889883a 	add	r4,r3,r2
10020f90:	e17ff517 	ldw	r5,-44(fp)
10020f94:	003147c0 	call	1003147c <alt_dcache_flush>

  return ret_code;
10020f98:	e0bff617 	ldw	r2,-40(fp)
10020f9c:	e0bffa15 	stw	r2,-24(fp)
  if (!ret_code)
10020fa0:	e0bffa17 	ldw	r2,-24(fp)
10020fa4:	1004c03a 	cmpne	r2,r2,zero
10020fa8:	1000241e 	bne	r2,zero,1002103c <FlashTestBlockWrite+0x1cc>
  {
    /* Now read it back into the read_buffer */
    ret_code = alt_read_flash(fd, (test_offset + 0x40), data_read, 100);
10020fac:	e0bff917 	ldw	r2,-28(fp)
10020fb0:	10c01004 	addi	r3,r2,64
10020fb4:	e0bffe17 	ldw	r2,-8(fp)
10020fb8:	e0bfed15 	stw	r2,-76(fp)
10020fbc:	e0ffee15 	stw	r3,-72(fp)
10020fc0:	e0bff717 	ldw	r2,-36(fp)
10020fc4:	e0bfef15 	stw	r2,-68(fp)
10020fc8:	00801904 	movi	r2,100
10020fcc:	e0bff015 	stw	r2,-64(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
10020fd0:	e0bfed17 	ldw	r2,-76(fp)
10020fd4:	10800617 	ldw	r2,24(r2)
10020fd8:	e13fed17 	ldw	r4,-76(fp)
10020fdc:	e17fee17 	ldw	r5,-72(fp)
10020fe0:	e1bfef17 	ldw	r6,-68(fp)
10020fe4:	e1fff017 	ldw	r7,-64(fp)
10020fe8:	103ee83a 	callr	r2
10020fec:	e0bffa15 	stw	r2,-24(fp)
    if(!ret_code)
10020ff0:	e0bffa17 	ldw	r2,-24(fp)
10020ff4:	1004c03a 	cmpne	r2,r2,zero
10020ff8:	1000101e 	bne	r2,zero,1002103c <FlashTestBlockWrite+0x1cc>
    {
      /* See if they match */
      if (memcmp(data_written, data_read, 100))
10020ffc:	e13ff817 	ldw	r4,-32(fp)
10021000:	e17ff717 	ldw	r5,-36(fp)
10021004:	01801904 	movi	r6,100
10021008:	0022bdc0 	call	10022bdc <memcmp>
1002100c:	1005003a 	cmpeq	r2,r2,zero
10021010:	1000071e 	bne	r2,zero,10021030 <FlashTestBlockWrite+0x1c0>
      {
        printf("  FAILED.\n");
10021014:	01000034 	movhi	r4,0
10021018:	21012604 	addi	r4,r4,1176
1002101c:	0022e2c0 	call	10022e2c <puts>
        *error++;
10021020:	e0bffd17 	ldw	r2,-12(fp)
10021024:	10800104 	addi	r2,r2,4
10021028:	e0bffd15 	stw	r2,-12(fp)
1002102c:	00000306 	br	1002103c <FlashTestBlockWrite+0x1cc>
      }
      else
        printf("  passed.\n");
10021030:	01000034 	movhi	r4,0
10021034:	21012904 	addi	r4,r4,1188
10021038:	0022e2c0 	call	10022e2c <puts>
    }
  }

  /* Test unaligned writes */
  if(!ret_code)
1002103c:	e0bffa17 	ldw	r2,-24(fp)
10021040:	1004c03a 	cmpne	r2,r2,zero
10021044:	1000641e 	bne	r2,zero,100211d8 <FlashTestBlockWrite+0x368>
  {
    /* Erase the block */
    ret_code = alt_erase_flash_block(fd, test_offset, regions->block_size);
10021048:	e0bfff17 	ldw	r2,-4(fp)
1002104c:	10c00317 	ldw	r3,12(r2)
10021050:	e0bffe17 	ldw	r2,-8(fp)
10021054:	e0bfe915 	stw	r2,-92(fp)
10021058:	e0bff917 	ldw	r2,-28(fp)
1002105c:	e0bfea15 	stw	r2,-88(fp)
10021060:	e0ffeb15 	stw	r3,-84(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
10021064:	e0bfe917 	ldw	r2,-92(fp)
10021068:	10800817 	ldw	r2,32(r2)
1002106c:	e13fe917 	ldw	r4,-92(fp)
10021070:	e17fea17 	ldw	r5,-88(fp)
10021074:	103ee83a 	callr	r2
10021078:	e0bfec15 	stw	r2,-80(fp)
  
  if(!ret_code)
1002107c:	e0bfec17 	ldw	r2,-80(fp)
10021080:	1004c03a 	cmpne	r2,r2,zero
10021084:	1000071e 	bne	r2,zero,100210a4 <FlashTestBlockWrite+0x234>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
10021088:	e0bfe917 	ldw	r2,-92(fp)
1002108c:	10800a17 	ldw	r2,40(r2)
10021090:	1007883a 	mov	r3,r2
10021094:	e0bfea17 	ldw	r2,-88(fp)
10021098:	1889883a 	add	r4,r3,r2
1002109c:	e17feb17 	ldw	r5,-84(fp)
100210a0:	003147c0 	call	1003147c <alt_dcache_flush>

  return ret_code;
100210a4:	e0bfec17 	ldw	r2,-80(fp)
100210a8:	e0bffa15 	stw	r2,-24(fp)
  
    /* Write the buffer to flash on an unaligned address. */
    printf(" -Testing unaligned writes.");
100210ac:	01000034 	movhi	r4,0
100210b0:	21012c04 	addi	r4,r4,1200
100210b4:	0022cf00 	call	10022cf0 <printf>
    ret_code = alt_write_flash_block(fd, test_offset, (test_offset + 0x43), data_written, 100);
100210b8:	e0bff917 	ldw	r2,-28(fp)
100210bc:	10c010c4 	addi	r3,r2,67
100210c0:	e0bffe17 	ldw	r2,-8(fp)
100210c4:	e0bfe315 	stw	r2,-116(fp)
100210c8:	e0bff917 	ldw	r2,-28(fp)
100210cc:	e0bfe415 	stw	r2,-112(fp)
100210d0:	e0ffe515 	stw	r3,-108(fp)
100210d4:	e0bff817 	ldw	r2,-32(fp)
100210d8:	e0bfe615 	stw	r2,-104(fp)
100210dc:	00801904 	movi	r2,100
100210e0:	e0bfe715 	stw	r2,-100(fp)
                                      int data_offset,
                                      const void *data, int length)
{

  int ret_code;
  ret_code = fd->write_block( fd, block_offset, data_offset, data, length );
100210e4:	e0bfe317 	ldw	r2,-116(fp)
100210e8:	10c00917 	ldw	r3,36(r2)
100210ec:	e0bfe717 	ldw	r2,-100(fp)
100210f0:	d8800015 	stw	r2,0(sp)
100210f4:	e13fe317 	ldw	r4,-116(fp)
100210f8:	e17fe417 	ldw	r5,-112(fp)
100210fc:	e1bfe517 	ldw	r6,-108(fp)
10021100:	e1ffe617 	ldw	r7,-104(fp)
10021104:	183ee83a 	callr	r3
10021108:	e0bfe815 	stw	r2,-96(fp)

  if(!ret_code)
1002110c:	e0bfe817 	ldw	r2,-96(fp)
10021110:	1004c03a 	cmpne	r2,r2,zero
10021114:	1000071e 	bne	r2,zero,10021134 <FlashTestBlockWrite+0x2c4>
      alt_dcache_flush((alt_u8*)fd->base_addr + data_offset, length);
10021118:	e0bfe317 	ldw	r2,-116(fp)
1002111c:	10800a17 	ldw	r2,40(r2)
10021120:	1007883a 	mov	r3,r2
10021124:	e0bfe517 	ldw	r2,-108(fp)
10021128:	1889883a 	add	r4,r3,r2
1002112c:	e17fe717 	ldw	r5,-100(fp)
10021130:	003147c0 	call	1003147c <alt_dcache_flush>

  return ret_code;
10021134:	e0bfe817 	ldw	r2,-96(fp)
10021138:	e0bffa15 	stw	r2,-24(fp)
    if (!ret_code)
1002113c:	e0bffa17 	ldw	r2,-24(fp)
10021140:	1004c03a 	cmpne	r2,r2,zero
10021144:	1000241e 	bne	r2,zero,100211d8 <FlashTestBlockWrite+0x368>
    {
      /* Now read it back into the read_buffer */
      ret_code = alt_read_flash(fd, (test_offset + 0x43), data_read, 100);
10021148:	e0bff917 	ldw	r2,-28(fp)
1002114c:	10c010c4 	addi	r3,r2,67
10021150:	e0bffe17 	ldw	r2,-8(fp)
10021154:	e0bfdf15 	stw	r2,-132(fp)
10021158:	e0ffe015 	stw	r3,-128(fp)
1002115c:	e0bff717 	ldw	r2,-36(fp)
10021160:	e0bfe115 	stw	r2,-124(fp)
10021164:	00801904 	movi	r2,100
10021168:	e0bfe215 	stw	r2,-120(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
1002116c:	e0bfdf17 	ldw	r2,-132(fp)
10021170:	10800617 	ldw	r2,24(r2)
10021174:	e13fdf17 	ldw	r4,-132(fp)
10021178:	e17fe017 	ldw	r5,-128(fp)
1002117c:	e1bfe117 	ldw	r6,-124(fp)
10021180:	e1ffe217 	ldw	r7,-120(fp)
10021184:	103ee83a 	callr	r2
10021188:	e0bffa15 	stw	r2,-24(fp)
      if(!ret_code)
1002118c:	e0bffa17 	ldw	r2,-24(fp)
10021190:	1004c03a 	cmpne	r2,r2,zero
10021194:	1000101e 	bne	r2,zero,100211d8 <FlashTestBlockWrite+0x368>
      {
        /* See if they match */
        if (memcmp(data_written, data_read, 100))
10021198:	e13ff817 	ldw	r4,-32(fp)
1002119c:	e17ff717 	ldw	r5,-36(fp)
100211a0:	01801904 	movi	r6,100
100211a4:	0022bdc0 	call	10022bdc <memcmp>
100211a8:	1005003a 	cmpeq	r2,r2,zero
100211ac:	1000071e 	bne	r2,zero,100211cc <FlashTestBlockWrite+0x35c>
        {
          printf("  FAILED.\n");
100211b0:	01000034 	movhi	r4,0
100211b4:	21012604 	addi	r4,r4,1176
100211b8:	0022e2c0 	call	10022e2c <puts>
          *error++;
100211bc:	e0bffd17 	ldw	r2,-12(fp)
100211c0:	10800104 	addi	r2,r2,4
100211c4:	e0bffd15 	stw	r2,-12(fp)
100211c8:	00000306 	br	100211d8 <FlashTestBlockWrite+0x368>
        }
        else
          printf("  passed.\n");
100211cc:	01000034 	movhi	r4,0
100211d0:	21012904 	addi	r4,r4,1188
100211d4:	0022e2c0 	call	10022e2c <puts>
      }
    }
  }

  /* Free up the buffers we allocated. */
  free(data_written);
100211d8:	e13ff817 	ldw	r4,-32(fp)
100211dc:	00224740 	call	10022474 <free>
  free(data_read);
100211e0:	e13ff717 	ldw	r4,-36(fp)
100211e4:	00224740 	call	10022474 <free>
  
  return ret_code;
100211e8:	e0bffa17 	ldw	r2,-24(fp)
}
100211ec:	e037883a 	mov	sp,fp
100211f0:	dfc00117 	ldw	ra,4(sp)
100211f4:	df000017 	ldw	fp,0(sp)
100211f8:	dec00204 	addi	sp,sp,8
100211fc:	f800283a 	ret

10021200 <FlashTestReadWrite>:
*           that every bit in the specified block can store both
*           a '1' and '0'.
*
******************************************************************/
static int FlashTestReadWrite(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
10021200:	deffe504 	addi	sp,sp,-108
10021204:	dfc01a15 	stw	ra,104(sp)
10021208:	df001915 	stw	fp,100(sp)
1002120c:	df001904 	addi	fp,sp,100
10021210:	e13ffc15 	stw	r4,-16(fp)
10021214:	e17ffd15 	stw	r5,-12(fp)
10021218:	e1bffe15 	stw	r6,-8(fp)
1002121c:	e1ffff15 	stw	r7,-4(fp)
  int i;
  int ret_code = 0x0;
10021220:	e03ffa15 	stw	zero,-24(fp)
  alt_u8 *data_written;
  alt_u8 *data_read;
 

  /* Get a couple buffers for the tests */
  data_written = malloc(regions->block_size);
10021224:	e0bfff17 	ldw	r2,-4(fp)
10021228:	10800317 	ldw	r2,12(r2)
1002122c:	1009883a 	mov	r4,r2
10021230:	00224880 	call	10022488 <malloc>
10021234:	e0bff815 	stw	r2,-32(fp)
  data_read = malloc(regions->block_size);
10021238:	e0bfff17 	ldw	r2,-4(fp)
1002123c:	10800317 	ldw	r2,12(r2)
10021240:	1009883a 	mov	r4,r2
10021244:	00224880 	call	10022488 <malloc>
10021248:	e0bff715 	stw	r2,-36(fp)
 
  /* Calculate the offset at which the block lives */
  test_offset = (regions->offset + (block * regions->block_size));
1002124c:	e0bfff17 	ldw	r2,-4(fp)
10021250:	11000017 	ldw	r4,0(r2)
10021254:	e0bfff17 	ldw	r2,-4(fp)
10021258:	10c00317 	ldw	r3,12(r2)
1002125c:	e0bffc17 	ldw	r2,-16(fp)
10021260:	1885383a 	mul	r2,r3,r2
10021264:	2085883a 	add	r2,r4,r2
10021268:	e0bff915 	stw	r2,-28(fp)

  printf("\n -Starting Flash Test.\n");
1002126c:	01000034 	movhi	r4,0
10021270:	21013304 	addi	r4,r4,1228
10021274:	0022e2c0 	call	10022e2c <puts>
 
  printf(" -Testing \"alt_write_flash\" and \"alt_read_flash\".\n");
10021278:	01000034 	movhi	r4,0
1002127c:	21013904 	addi	r4,r4,1252
10021280:	0022e2c0 	call	10022e2c <puts>
  /* Fill buffer with incrementing values */
  for(i=0; i < regions->block_size; i++)
10021284:	e03ffb15 	stw	zero,-20(fp)
10021288:	00000906 	br	100212b0 <FlashTestReadWrite+0xb0>
    *(data_written + i) = i;
1002128c:	e0bffb17 	ldw	r2,-20(fp)
10021290:	1007883a 	mov	r3,r2
10021294:	e0bff817 	ldw	r2,-32(fp)
10021298:	1887883a 	add	r3,r3,r2
1002129c:	e0bffb17 	ldw	r2,-20(fp)
100212a0:	18800005 	stb	r2,0(r3)

  printf("\n -Starting Flash Test.\n");
 
  printf(" -Testing \"alt_write_flash\" and \"alt_read_flash\".\n");
  /* Fill buffer with incrementing values */
  for(i=0; i < regions->block_size; i++)
100212a4:	e0bffb17 	ldw	r2,-20(fp)
100212a8:	10800044 	addi	r2,r2,1
100212ac:	e0bffb15 	stw	r2,-20(fp)
100212b0:	e0bfff17 	ldw	r2,-4(fp)
100212b4:	10c00317 	ldw	r3,12(r2)
100212b8:	e0bffb17 	ldw	r2,-20(fp)
100212bc:	10fff316 	blt	r2,r3,1002128c <FlashTestReadWrite+0x8c>
    *(data_written + i) = i;

  /* Write the buffer to flash block */
  ret_code = alt_write_flash(fd, test_offset, data_written, regions->block_size);
100212c0:	e0bfff17 	ldw	r2,-4(fp)
100212c4:	10c00317 	ldw	r3,12(r2)
100212c8:	e0bffe17 	ldw	r2,-8(fp)
100212cc:	e0bff315 	stw	r2,-52(fp)
100212d0:	e0bff917 	ldw	r2,-28(fp)
100212d4:	e0bff415 	stw	r2,-48(fp)
100212d8:	e0bff817 	ldw	r2,-32(fp)
100212dc:	e0bff515 	stw	r2,-44(fp)
100212e0:	e0fff615 	stw	r3,-40(fp)
                                                           alt_flash_fd* fd, 
                                                           int offset, 
                                                           const void* src_addr, 
                                                           int length )
{
  return fd->write( fd, offset, src_addr, length );
100212e4:	e0bff317 	ldw	r2,-52(fp)
100212e8:	10800517 	ldw	r2,20(r2)
100212ec:	e13ff317 	ldw	r4,-52(fp)
100212f0:	e17ff417 	ldw	r5,-48(fp)
100212f4:	e1bff517 	ldw	r6,-44(fp)
100212f8:	e1fff617 	ldw	r7,-40(fp)
100212fc:	103ee83a 	callr	r2
10021300:	e0bffa15 	stw	r2,-24(fp)
     
  if (!ret_code)
10021304:	e0bffa17 	ldw	r2,-24(fp)
10021308:	1004c03a 	cmpne	r2,r2,zero
1002130c:	1000761e 	bne	r2,zero,100214e8 <FlashTestReadWrite+0x2e8>
  {
    /* Read flash block into read buffer */
    ret_code = alt_read_flash(fd, test_offset, data_read, regions->block_size);
10021310:	e0bfff17 	ldw	r2,-4(fp)
10021314:	10c00317 	ldw	r3,12(r2)
10021318:	e0bffe17 	ldw	r2,-8(fp)
1002131c:	e0bfef15 	stw	r2,-68(fp)
10021320:	e0bff917 	ldw	r2,-28(fp)
10021324:	e0bff015 	stw	r2,-64(fp)
10021328:	e0bff717 	ldw	r2,-36(fp)
1002132c:	e0bff115 	stw	r2,-60(fp)
10021330:	e0fff215 	stw	r3,-56(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
10021334:	e0bfef17 	ldw	r2,-68(fp)
10021338:	10800617 	ldw	r2,24(r2)
1002133c:	e13fef17 	ldw	r4,-68(fp)
10021340:	e17ff017 	ldw	r5,-64(fp)
10021344:	e1bff117 	ldw	r6,-60(fp)
10021348:	e1fff217 	ldw	r7,-56(fp)
1002134c:	103ee83a 	callr	r2
10021350:	e0bffa15 	stw	r2,-24(fp)
    if(!ret_code)
10021354:	e0bffa17 	ldw	r2,-24(fp)
10021358:	1004c03a 	cmpne	r2,r2,zero
1002135c:	1000121e 	bne	r2,zero,100213a8 <FlashTestReadWrite+0x1a8>
    {
      /* See if they match */
      if (memcmp(data_written, data_read, regions->block_size))
10021360:	e0bfff17 	ldw	r2,-4(fp)
10021364:	10800317 	ldw	r2,12(r2)
10021368:	100d883a 	mov	r6,r2
1002136c:	e13ff817 	ldw	r4,-32(fp)
10021370:	e17ff717 	ldw	r5,-36(fp)
10021374:	0022bdc0 	call	10022bdc <memcmp>
10021378:	1005003a 	cmpeq	r2,r2,zero
1002137c:	1000071e 	bne	r2,zero,1002139c <FlashTestReadWrite+0x19c>
      {
        printf("    pass 1 - FAILED.\n");
10021380:	01000034 	movhi	r4,0
10021384:	21014604 	addi	r4,r4,1304
10021388:	0022e2c0 	call	10022e2c <puts>
        *error++;
1002138c:	e0bffd17 	ldw	r2,-12(fp)
10021390:	10800104 	addi	r2,r2,4
10021394:	e0bffd15 	stw	r2,-12(fp)
10021398:	00000306 	br	100213a8 <FlashTestReadWrite+0x1a8>
      }
      else
        printf("    pass 1 - passed.\n");
1002139c:	01000034 	movhi	r4,0
100213a0:	21014c04 	addi	r4,r4,1328
100213a4:	0022e2c0 	call	10022e2c <puts>
    }
  
    /* Now fill the buffer with decrementing values (invert the incrementing ones) */
    for(i=0; i < regions->block_size; i++)
100213a8:	e03ffb15 	stw	zero,-20(fp)
100213ac:	00000a06 	br	100213d8 <FlashTestReadWrite+0x1d8>
      *(data_written + i) = ~((alt_u8)(i));
100213b0:	e0bffb17 	ldw	r2,-20(fp)
100213b4:	1007883a 	mov	r3,r2
100213b8:	e0bff817 	ldw	r2,-32(fp)
100213bc:	1887883a 	add	r3,r3,r2
100213c0:	e0bffb17 	ldw	r2,-20(fp)
100213c4:	0084303a 	nor	r2,zero,r2
100213c8:	18800005 	stb	r2,0(r3)
      else
        printf("    pass 1 - passed.\n");
    }
  
    /* Now fill the buffer with decrementing values (invert the incrementing ones) */
    for(i=0; i < regions->block_size; i++)
100213cc:	e0bffb17 	ldw	r2,-20(fp)
100213d0:	10800044 	addi	r2,r2,1
100213d4:	e0bffb15 	stw	r2,-20(fp)
100213d8:	e0bfff17 	ldw	r2,-4(fp)
100213dc:	10c00317 	ldw	r3,12(r2)
100213e0:	e0bffb17 	ldw	r2,-20(fp)
100213e4:	10fff216 	blt	r2,r3,100213b0 <FlashTestReadWrite+0x1b0>
      *(data_written + i) = ~((alt_u8)(i));
 
    /* Write the buffer to flash block */
    ret_code = alt_write_flash(fd, test_offset, data_written, regions->block_size);
100213e8:	e0bfff17 	ldw	r2,-4(fp)
100213ec:	10c00317 	ldw	r3,12(r2)
100213f0:	e0bffe17 	ldw	r2,-8(fp)
100213f4:	e0bfeb15 	stw	r2,-84(fp)
100213f8:	e0bff917 	ldw	r2,-28(fp)
100213fc:	e0bfec15 	stw	r2,-80(fp)
10021400:	e0bff817 	ldw	r2,-32(fp)
10021404:	e0bfed15 	stw	r2,-76(fp)
10021408:	e0ffee15 	stw	r3,-72(fp)
                                                           alt_flash_fd* fd, 
                                                           int offset, 
                                                           const void* src_addr, 
                                                           int length )
{
  return fd->write( fd, offset, src_addr, length );
1002140c:	e0bfeb17 	ldw	r2,-84(fp)
10021410:	10800517 	ldw	r2,20(r2)
10021414:	e13feb17 	ldw	r4,-84(fp)
10021418:	e17fec17 	ldw	r5,-80(fp)
1002141c:	e1bfed17 	ldw	r6,-76(fp)
10021420:	e1ffee17 	ldw	r7,-72(fp)
10021424:	103ee83a 	callr	r2
10021428:	e0bffa15 	stw	r2,-24(fp)
    
    if (!ret_code)
1002142c:	e0bffa17 	ldw	r2,-24(fp)
10021430:	1004c03a 	cmpne	r2,r2,zero
10021434:	1000261e 	bne	r2,zero,100214d0 <FlashTestReadWrite+0x2d0>
    {
      /* Read flash block into read buffer */
      ret_code = alt_read_flash(fd, test_offset, data_read, regions->block_size);
10021438:	e0bfff17 	ldw	r2,-4(fp)
1002143c:	10c00317 	ldw	r3,12(r2)
10021440:	e0bffe17 	ldw	r2,-8(fp)
10021444:	e0bfe715 	stw	r2,-100(fp)
10021448:	e0bff917 	ldw	r2,-28(fp)
1002144c:	e0bfe815 	stw	r2,-96(fp)
10021450:	e0bff717 	ldw	r2,-36(fp)
10021454:	e0bfe915 	stw	r2,-92(fp)
10021458:	e0ffea15 	stw	r3,-88(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_read_flash( 
                                      alt_flash_fd* fd, int offset, 
                                      void* dest_addr, int length )
{
  return fd->read( fd, offset, dest_addr, length );
1002145c:	e0bfe717 	ldw	r2,-100(fp)
10021460:	10800617 	ldw	r2,24(r2)
10021464:	e13fe717 	ldw	r4,-100(fp)
10021468:	e17fe817 	ldw	r5,-96(fp)
1002146c:	e1bfe917 	ldw	r6,-92(fp)
10021470:	e1ffea17 	ldw	r7,-88(fp)
10021474:	103ee83a 	callr	r2
10021478:	e0bffa15 	stw	r2,-24(fp)
      if(!ret_code)
1002147c:	e0bffa17 	ldw	r2,-24(fp)
10021480:	1004c03a 	cmpne	r2,r2,zero
10021484:	1000121e 	bne	r2,zero,100214d0 <FlashTestReadWrite+0x2d0>
      {
        /* See if they match */
        if (memcmp(data_written, data_read, regions->block_size))
10021488:	e0bfff17 	ldw	r2,-4(fp)
1002148c:	10800317 	ldw	r2,12(r2)
10021490:	100d883a 	mov	r6,r2
10021494:	e13ff817 	ldw	r4,-32(fp)
10021498:	e17ff717 	ldw	r5,-36(fp)
1002149c:	0022bdc0 	call	10022bdc <memcmp>
100214a0:	1005003a 	cmpeq	r2,r2,zero
100214a4:	1000071e 	bne	r2,zero,100214c4 <FlashTestReadWrite+0x2c4>
        {
          printf("    pass 2 - FAILED.\n");
100214a8:	01000034 	movhi	r4,0
100214ac:	21015204 	addi	r4,r4,1352
100214b0:	0022e2c0 	call	10022e2c <puts>
          *error++;
100214b4:	e0bffd17 	ldw	r2,-12(fp)
100214b8:	10800104 	addi	r2,r2,4
100214bc:	e0bffd15 	stw	r2,-12(fp)
100214c0:	00000306 	br	100214d0 <FlashTestReadWrite+0x2d0>
        }
        else
          printf("    pass 2 - passed.\n");
100214c4:	01000034 	movhi	r4,0
100214c8:	21015804 	addi	r4,r4,1376
100214cc:	0022e2c0 	call	10022e2c <puts>
      }
    }
    if (*error)
100214d0:	e0bffd17 	ldw	r2,-12(fp)
100214d4:	10800017 	ldw	r2,0(r2)
100214d8:	1005003a 	cmpeq	r2,r2,zero
100214dc:	1000021e 	bne	r2,zero,100214e8 <FlashTestReadWrite+0x2e8>
      ret_code = 1;
100214e0:	00800044 	movi	r2,1
100214e4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Free up the buffers we allocated */
  free(data_written);
100214e8:	e13ff817 	ldw	r4,-32(fp)
100214ec:	00224740 	call	10022474 <free>
  free(data_read);
100214f0:	e13ff717 	ldw	r4,-36(fp)
100214f4:	00224740 	call	10022474 <free>
  
  return ret_code;
100214f8:	e0bffa17 	ldw	r2,-24(fp)
}
100214fc:	e037883a 	mov	sp,fp
10021500:	dfc00117 	ldw	ra,4(sp)
10021504:	df000017 	ldw	fp,0(sp)
10021508:	dec00204 	addi	sp,sp,8
1002150c:	f800283a 	ret

10021510 <FlashTestBlockErase>:
*           flash block contains some non-0xFFFFFFFF data before
*           this function is called.
*
******************************************************************/
static int FlashTestBlockErase(int block, int *error, alt_flash_fd* fd, flash_region* regions)
{
10021510:	defff404 	addi	sp,sp,-48
10021514:	dfc00b15 	stw	ra,44(sp)
10021518:	df000a15 	stw	fp,40(sp)
1002151c:	df000a04 	addi	fp,sp,40
10021520:	e13ffc15 	stw	r4,-16(fp)
10021524:	e17ffd15 	stw	r5,-12(fp)
10021528:	e1bffe15 	stw	r6,-8(fp)
1002152c:	e1ffff15 	stw	r7,-4(fp)

  int ret_code = 0x0;
10021530:	e03ffb15 	stw	zero,-20(fp)
  int test_offset;

  /* Calculate the offset of the block */
  test_offset = (regions->offset + (block * regions->block_size));
10021534:	e0bfff17 	ldw	r2,-4(fp)
10021538:	11000017 	ldw	r4,0(r2)
1002153c:	e0bfff17 	ldw	r2,-4(fp)
10021540:	10c00317 	ldw	r3,12(r2)
10021544:	e0bffc17 	ldw	r2,-16(fp)
10021548:	1885383a 	mul	r2,r3,r2
1002154c:	2085883a 	add	r2,r4,r2
10021550:	e0bffa15 	stw	r2,-24(fp)

  printf(" -Testing \"alt_erase_flash_block\".");
10021554:	01000034 	movhi	r4,0
10021558:	21015e04 	addi	r4,r4,1400
1002155c:	0022cf00 	call	10022cf0 <printf>
  ret_code = alt_erase_flash_block(fd, test_offset, regions->block_size);
10021560:	e0bfff17 	ldw	r2,-4(fp)
10021564:	10c00317 	ldw	r3,12(r2)
10021568:	e0bffe17 	ldw	r2,-8(fp)
1002156c:	e0bff615 	stw	r2,-40(fp)
10021570:	e0bffa17 	ldw	r2,-24(fp)
10021574:	e0bff715 	stw	r2,-36(fp)
10021578:	e0fff815 	stw	r3,-32(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
1002157c:	e0bff617 	ldw	r2,-40(fp)
10021580:	10800817 	ldw	r2,32(r2)
10021584:	e13ff617 	ldw	r4,-40(fp)
10021588:	e17ff717 	ldw	r5,-36(fp)
1002158c:	103ee83a 	callr	r2
10021590:	e0bff915 	stw	r2,-28(fp)
  
  if(!ret_code)
10021594:	e0bff917 	ldw	r2,-28(fp)
10021598:	1004c03a 	cmpne	r2,r2,zero
1002159c:	1000071e 	bne	r2,zero,100215bc <FlashTestBlockErase+0xac>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
100215a0:	e0bff617 	ldw	r2,-40(fp)
100215a4:	10800a17 	ldw	r2,40(r2)
100215a8:	1007883a 	mov	r3,r2
100215ac:	e0bff717 	ldw	r2,-36(fp)
100215b0:	1889883a 	add	r4,r3,r2
100215b4:	e17ff817 	ldw	r5,-32(fp)
100215b8:	003147c0 	call	1003147c <alt_dcache_flush>

  return ret_code;
100215bc:	e0bff917 	ldw	r2,-28(fp)
100215c0:	e0bffb15 	stw	r2,-20(fp)
  /* Check that the erase was successful. */
  if (!ret_code)
100215c4:	e0bffb17 	ldw	r2,-20(fp)
100215c8:	1004c03a 	cmpne	r2,r2,zero
100215cc:	1000101e 	bne	r2,zero,10021610 <FlashTestBlockErase+0x100>
  {
    if(FlashCheckIfBlockErased(fd, block, regions))
100215d0:	e13ffe17 	ldw	r4,-8(fp)
100215d4:	e17ffc17 	ldw	r5,-16(fp)
100215d8:	e1bfff17 	ldw	r6,-4(fp)
100215dc:	0020d280 	call	10020d28 <FlashCheckIfBlockErased>
100215e0:	1005003a 	cmpeq	r2,r2,zero
100215e4:	1000041e 	bne	r2,zero,100215f8 <FlashTestBlockErase+0xe8>
      printf("  passed.\n");
100215e8:	01000034 	movhi	r4,0
100215ec:	21012904 	addi	r4,r4,1188
100215f0:	0022e2c0 	call	10022e2c <puts>
100215f4:	00000606 	br	10021610 <FlashTestBlockErase+0x100>
    else
    {
      printf("  FAILED\n");  
100215f8:	01000034 	movhi	r4,0
100215fc:	21016704 	addi	r4,r4,1436
10021600:	0022e2c0 	call	10022e2c <puts>
      *error++;
10021604:	e0bffd17 	ldw	r2,-12(fp)
10021608:	10800104 	addi	r2,r2,4
1002160c:	e0bffd15 	stw	r2,-12(fp)
    }
  }
  
  return ret_code;
10021610:	e0bffb17 	ldw	r2,-20(fp)
}
10021614:	e037883a 	mov	sp,fp
10021618:	dfc00117 	ldw	ra,4(sp)
1002161c:	df000017 	ldw	fp,0(sp)
10021620:	dec00204 	addi	sp,sp,8
10021624:	f800283a 	ret

10021628 <FlashRunTests>:
*             - alt_erase_flash_block
*             - alt_write_flash_block
* 
******************************************************************/
static void FlashRunTests(alt_flash_fd* fd, int block, flash_region* regions)
{
10021628:	defff404 	addi	sp,sp,-48
1002162c:	dfc00b15 	stw	ra,44(sp)
10021630:	df000a15 	stw	fp,40(sp)
10021634:	df000a04 	addi	fp,sp,40
10021638:	e13ffd15 	stw	r4,-12(fp)
1002163c:	e17ffe15 	stw	r5,-8(fp)
10021640:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0x0;
10021644:	e03ffb15 	stw	zero,-20(fp)
  int error = 0x0;
10021648:	e03ffc15 	stw	zero,-16(fp)
  int test_offset;

  /* Calculate the offset of the block */
  test_offset = (regions->offset + (block * regions->block_size));
1002164c:	e0bfff17 	ldw	r2,-4(fp)
10021650:	11000017 	ldw	r4,0(r2)
10021654:	e0bfff17 	ldw	r2,-4(fp)
10021658:	10c00317 	ldw	r3,12(r2)
1002165c:	e0bffe17 	ldw	r2,-8(fp)
10021660:	1885383a 	mul	r2,r3,r2
10021664:	2085883a 	add	r2,r4,r2
10021668:	e0bffa15 	stw	r2,-24(fp)
  
  /* Test reading and writing functions */
  ret_code = FlashTestReadWrite(block, &error, fd, regions);
1002166c:	e17ffc04 	addi	r5,fp,-16
10021670:	e13ffe17 	ldw	r4,-8(fp)
10021674:	e1bffd17 	ldw	r6,-12(fp)
10021678:	e1ffff17 	ldw	r7,-4(fp)
1002167c:	00212000 	call	10021200 <FlashTestReadWrite>
10021680:	e0bffb15 	stw	r2,-20(fp)
 
  /* Test the erase function */
  if (!ret_code)
10021684:	e0bffb17 	ldw	r2,-20(fp)
10021688:	1004c03a 	cmpne	r2,r2,zero
1002168c:	1000061e 	bne	r2,zero,100216a8 <FlashRunTests+0x80>
  {
    ret_code = FlashTestBlockErase(block, &error, fd, regions);
10021690:	e17ffc04 	addi	r5,fp,-16
10021694:	e13ffe17 	ldw	r4,-8(fp)
10021698:	e1bffd17 	ldw	r6,-12(fp)
1002169c:	e1ffff17 	ldw	r7,-4(fp)
100216a0:	00215100 	call	10021510 <FlashTestBlockErase>
100216a4:	e0bffb15 	stw	r2,-20(fp)
  }
  /* Test the block write function */
  if (!ret_code)
100216a8:	e0bffb17 	ldw	r2,-20(fp)
100216ac:	1004c03a 	cmpne	r2,r2,zero
100216b0:	1000061e 	bne	r2,zero,100216cc <FlashRunTests+0xa4>
  {
    ret_code = FlashTestBlockWrite(block, &error, fd, regions);
100216b4:	e17ffc04 	addi	r5,fp,-16
100216b8:	e13ffe17 	ldw	r4,-8(fp)
100216bc:	e1bffd17 	ldw	r6,-12(fp)
100216c0:	e1ffff17 	ldw	r7,-4(fp)
100216c4:	0020e700 	call	10020e70 <FlashTestBlockWrite>
100216c8:	e0bffb15 	stw	r2,-20(fp)
  }

  /* Erase the block so we dont fill one up each time we run the test */
  printf(" -Returning block %d to its erased state.\n", block);
100216cc:	01000034 	movhi	r4,0
100216d0:	21016a04 	addi	r4,r4,1448
100216d4:	e17ffe17 	ldw	r5,-8(fp)
100216d8:	0022cf00 	call	10022cf0 <printf>
  alt_erase_flash_block(fd, test_offset, regions->block_size);
100216dc:	e0bfff17 	ldw	r2,-4(fp)
100216e0:	10c00317 	ldw	r3,12(r2)
100216e4:	e0bffd17 	ldw	r2,-12(fp)
100216e8:	e0bff615 	stw	r2,-40(fp)
100216ec:	e0bffa17 	ldw	r2,-24(fp)
100216f0:	e0bff715 	stw	r2,-36(fp)
100216f4:	e0fff815 	stw	r3,-32(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
100216f8:	e0bff617 	ldw	r2,-40(fp)
100216fc:	10800817 	ldw	r2,32(r2)
10021700:	e13ff617 	ldw	r4,-40(fp)
10021704:	e17ff717 	ldw	r5,-36(fp)
10021708:	103ee83a 	callr	r2
1002170c:	e0bff915 	stw	r2,-28(fp)
  
  if(!ret_code)
10021710:	e0bff917 	ldw	r2,-28(fp)
10021714:	1004c03a 	cmpne	r2,r2,zero
10021718:	1000071e 	bne	r2,zero,10021738 <FlashRunTests+0x110>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
1002171c:	e0bff617 	ldw	r2,-40(fp)
10021720:	10800a17 	ldw	r2,40(r2)
10021724:	1007883a 	mov	r3,r2
10021728:	e0bff717 	ldw	r2,-36(fp)
1002172c:	1889883a 	add	r4,r3,r2
10021730:	e17ff817 	ldw	r5,-32(fp)
10021734:	003147c0 	call	1003147c <alt_dcache_flush>
 
  printf(" -Flash tests complete.\n");
10021738:	01000034 	movhi	r4,0
1002173c:	21017504 	addi	r4,r4,1492
10021740:	0022e2c0 	call	10022e2c <puts>
  if(ret_code || error)
10021744:	e0bffb17 	ldw	r2,-20(fp)
10021748:	1004c03a 	cmpne	r2,r2,zero
1002174c:	1000031e 	bne	r2,zero,1002175c <FlashRunTests+0x134>
10021750:	e0bffc17 	ldw	r2,-16(fp)
10021754:	1005003a 	cmpeq	r2,r2,zero
10021758:	1000031e 	bne	r2,zero,10021768 <FlashRunTests+0x140>
  {
    printf(" -At least one test failed.\n\n");
1002175c:	01000034 	movhi	r4,0
10021760:	21017b04 	addi	r4,r4,1516
10021764:	0022e2c0 	call	10022e2c <puts>
  }
}
10021768:	e037883a 	mov	sp,fp
1002176c:	dfc00117 	ldw	ra,4(sp)
10021770:	df000017 	ldw	fp,0(sp)
10021774:	dec00204 	addi	sp,sp,8
10021778:	f800283a 	ret

1002177c <GetFlashName>:
*           Defaults to "/dev/ext_flash", the name of the flash
*           component in the Nios II example designs.
* 
******************************************************************/
static int GetFlashName(char line[30], int flash_type)
{
1002177c:	defffa04 	addi	sp,sp,-24
10021780:	dfc00515 	stw	ra,20(sp)
10021784:	df000415 	stw	fp,16(sp)
10021788:	df000404 	addi	fp,sp,16
1002178c:	e13ffe15 	stw	r4,-8(fp)
10021790:	e17fff15 	stw	r5,-4(fp)

  char ch = 0x0;
10021794:	e03ffd05 	stb	zero,-12(fp)
  int i;

  if (flash_type == CFI)
10021798:	e0bfff17 	ldw	r2,-4(fp)
1002179c:	108000d8 	cmpnei	r2,r2,3
100217a0:	1000091e 	bne	r2,zero,100217c8 <GetFlashName+0x4c>
  { 
    printf("\nEnter the name of the CFI flash device to be opened,\n");
100217a4:	01000034 	movhi	r4,0
100217a8:	21018304 	addi	r4,r4,1548
100217ac:	0022e2c0 	call	10022e2c <puts>
    printf("or just press <enter> to open \"/dev/ext_flash\"\n");
100217b0:	01000034 	movhi	r4,0
100217b4:	21019104 	addi	r4,r4,1604
100217b8:	0022e2c0 	call	10022e2c <puts>
    printf(">");
100217bc:	01000f84 	movi	r4,62
100217c0:	0022d680 	call	10022d68 <putchar>
100217c4:	00000b06 	br	100217f4 <GetFlashName+0x78>
  }
  else if (flash_type == EPCS)
100217c8:	e0bfff17 	ldw	r2,-4(fp)
100217cc:	10800118 	cmpnei	r2,r2,4
100217d0:	1000081e 	bne	r2,zero,100217f4 <GetFlashName+0x78>
  {
    printf("\nEnter the name of the EPCS flash device to be opened,\n");
100217d4:	01000034 	movhi	r4,0
100217d8:	21019d04 	addi	r4,r4,1652
100217dc:	0022e2c0 	call	10022e2c <puts>
    printf("or just press <enter> to open \"/dev/epcs_controller\"\n");
100217e0:	01000034 	movhi	r4,0
100217e4:	2101ab04 	addi	r4,r4,1708
100217e8:	0022e2c0 	call	10022e2c <puts>
    printf(">");
100217ec:	01000f84 	movi	r4,62
100217f0:	0022d680 	call	10022d68 <putchar>
  }
 
  for(i = 0; ch != '\n'; i++)
100217f4:	e03ffc15 	stw	zero,-16(fp)
100217f8:	00003406 	br	100218cc <GetFlashName+0x150>
  {
    ch = getc(stdin);
100217fc:	00800034 	movhi	r2,0
10021800:	108b0704 	addi	r2,r2,11292
10021804:	10800017 	ldw	r2,0(r2)
10021808:	11000117 	ldw	r4,4(r2)
1002180c:	002234c0 	call	1002234c <getc>
10021810:	e0bffd05 	stb	r2,-12(fp)
    if(ch == '\r' || ch == '\n')
10021814:	e0bffd07 	ldb	r2,-12(fp)
10021818:	10800360 	cmpeqi	r2,r2,13
1002181c:	1000031e 	bne	r2,zero,1002182c <GetFlashName+0xb0>
10021820:	e0bffd07 	ldb	r2,-12(fp)
10021824:	10800298 	cmpnei	r2,r2,10
10021828:	10001f1e 	bne	r2,zero,100218a8 <GetFlashName+0x12c>
    {
      /* Hitting <enter> defaults to the standard component name */
      if( i <= 1 )
1002182c:	e0bffc17 	ldw	r2,-16(fp)
10021830:	10800088 	cmpgei	r2,r2,2
10021834:	1000161e 	bne	r2,zero,10021890 <GetFlashName+0x114>
      {
        if (flash_type == CFI)
10021838:	e0bfff17 	ldw	r2,-4(fp)
1002183c:	108000d8 	cmpnei	r2,r2,3
10021840:	1000081e 	bne	r2,zero,10021864 <GetFlashName+0xe8>
          strcpy(line, "/dev/ext_flash\0");
10021844:	e0bffe17 	ldw	r2,-8(fp)
10021848:	00c00034 	movhi	r3,0
1002184c:	18c1b904 	addi	r3,r3,1764
10021850:	1009883a 	mov	r4,r2
10021854:	180b883a 	mov	r5,r3
10021858:	018003c4 	movi	r6,15
1002185c:	0022c500 	call	10022c50 <memcpy>
10021860:	00001706 	br	100218c0 <GetFlashName+0x144>
        else if (flash_type == EPCS)
10021864:	e0bfff17 	ldw	r2,-4(fp)
10021868:	10800118 	cmpnei	r2,r2,4
1002186c:	1000141e 	bne	r2,zero,100218c0 <GetFlashName+0x144>
          strcpy(line, "/dev/epcs_controller\0");
10021870:	e0bffe17 	ldw	r2,-8(fp)
10021874:	00c00034 	movhi	r3,0
10021878:	18c1bd04 	addi	r3,r3,1780
1002187c:	1009883a 	mov	r4,r2
10021880:	180b883a 	mov	r5,r3
10021884:	01800544 	movi	r6,21
10021888:	0022c500 	call	10022c50 <memcpy>
1002188c:	00000c06 	br	100218c0 <GetFlashName+0x144>
      }
         
      else
        /* Properly terminate the string. */
        line[i] = '\0';
10021890:	e0bffc17 	ldw	r2,-16(fp)
10021894:	1007883a 	mov	r3,r2
10021898:	e0bffe17 	ldw	r2,-8(fp)
1002189c:	1885883a 	add	r2,r3,r2
100218a0:	10000005 	stb	zero,0(r2)
  }
 
  for(i = 0; ch != '\n'; i++)
  {
    ch = getc(stdin);
    if(ch == '\r' || ch == '\n')
100218a4:	00000606 	br	100218c0 <GetFlashName+0x144>
      else
        /* Properly terminate the string. */
        line[i] = '\0';
    }
    else
     line[i] = ch;
100218a8:	e0bffc17 	ldw	r2,-16(fp)
100218ac:	1007883a 	mov	r3,r2
100218b0:	e0bffe17 	ldw	r2,-8(fp)
100218b4:	1887883a 	add	r3,r3,r2
100218b8:	e0bffd03 	ldbu	r2,-12(fp)
100218bc:	18800005 	stb	r2,0(r3)
    printf("\nEnter the name of the EPCS flash device to be opened,\n");
    printf("or just press <enter> to open \"/dev/epcs_controller\"\n");
    printf(">");
  }
 
  for(i = 0; ch != '\n'; i++)
100218c0:	e0bffc17 	ldw	r2,-16(fp)
100218c4:	10800044 	addi	r2,r2,1
100218c8:	e0bffc15 	stw	r2,-16(fp)
100218cc:	e0bffd07 	ldb	r2,-12(fp)
100218d0:	10800298 	cmpnei	r2,r2,10
100218d4:	103fc91e 	bne	r2,zero,100217fc <GetFlashName+0x80>
    }
    else
     line[i] = ch;
  }
 
  return 0;
100218d8:	0005883a 	mov	r2,zero
}
100218dc:	e037883a 	mov	sp,fp
100218e0:	dfc00117 	ldw	ra,4(sp)
100218e4:	df000017 	ldw	fp,0(sp)
100218e8:	dec00204 	addi	sp,sp,8
100218ec:	f800283a 	ret

100218f0 <FlashErase>:
*
*  Purpose: Erases 1 or all blocks in the specified flash device.
* 
******************************************************************/
static void FlashErase(int flash_type)
{
100218f0:	deffe304 	addi	sp,sp,-116
100218f4:	dfc01c15 	stw	ra,112(sp)
100218f8:	df001b15 	stw	fp,108(sp)
100218fc:	df001b04 	addi	fp,sp,108
10021900:	e13fff15 	stw	r4,-4(fp)
  alt_u8 entry[4];
  alt_u8 flashname[30];
  unsigned int block;
 
  /* Get the name of the flash we are erasing */
  ret_code = GetFlashName(flashname, flash_type);
10021904:	e13ff604 	addi	r4,fp,-40
10021908:	e17fff17 	ldw	r5,-4(fp)
1002190c:	002177c0 	call	1002177c <GetFlashName>
10021910:	e0bff015 	stw	r2,-64(fp)
 
  fd = alt_flash_open_dev(flashname);
10021914:	e13ff604 	addi	r4,fp,-40
10021918:	00314c00 	call	100314c0 <alt_flash_open_dev>
1002191c:	e0bff215 	stw	r2,-56(fp)
  if (fd)
10021920:	e0bff217 	ldw	r2,-56(fp)
10021924:	1005003a 	cmpeq	r2,r2,zero
10021928:	1000bf1e 	bne	r2,zero,10021c28 <FlashErase+0x338>
1002192c:	e0bff217 	ldw	r2,-56(fp)
10021930:	e0bfed15 	stw	r2,-76(fp)
10021934:	e0bff304 	addi	r2,fp,-52
10021938:	e0bfee15 	stw	r2,-72(fp)
1002193c:	e0bff404 	addi	r2,fp,-48
10021940:	e0bfef15 	stw	r2,-68(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
10021944:	e0bfed17 	ldw	r2,-76(fp)
10021948:	10800717 	ldw	r2,28(r2)
1002194c:	e13fed17 	ldw	r4,-76(fp)
10021950:	e17fee17 	ldw	r5,-72(fp)
10021954:	e1bfef17 	ldw	r6,-68(fp)
10021958:	103ee83a 	callr	r2
  {
    /* Find out some useful stuff about the flash */
    ret_code = alt_get_flash_info(fd, &regions, &number_of_regions);
1002195c:	e0bff015 	stw	r2,-64(fp)
    if (!ret_code)
10021960:	e0bff017 	ldw	r2,-64(fp)
10021964:	1004c03a 	cmpne	r2,r2,zero
10021968:	1000a91e 	bne	r2,zero,10021c10 <FlashErase+0x320>
    {
      printf(" -Region has %d blocks.\n", regions->number_of_blocks);
1002196c:	e0bff317 	ldw	r2,-52(fp)
10021970:	11400217 	ldw	r5,8(r2)
10021974:	01000034 	movhi	r4,0
10021978:	2101c304 	addi	r4,r4,1804
1002197c:	0022cf00 	call	10022cf0 <printf>
      printf(" -Which block would you like to erase?\n");
10021980:	01000034 	movhi	r4,0
10021984:	2101ca04 	addi	r4,r4,1832
10021988:	0022e2c0 	call	10022e2c <puts>
      printf(" -> ");
1002198c:	01000034 	movhi	r4,0
10021990:	2101d404 	addi	r4,r4,1872
10021994:	0022cf00 	call	10022cf0 <printf>
      
      GetInputString( entry, sizeof(entry), stdin );
10021998:	e13ff504 	addi	r4,fp,-44
1002199c:	00800034 	movhi	r2,0
100219a0:	108b0704 	addi	r2,r2,11292
100219a4:	10800017 	ldw	r2,0(r2)
100219a8:	11800117 	ldw	r6,4(r2)
100219ac:	01400104 	movi	r5,4
100219b0:	00202dc0 	call	100202dc <GetInputString>

      if(entry[0] == 'a')
100219b4:	e0bff503 	ldbu	r2,-44(fp)
100219b8:	10803fcc 	andi	r2,r2,255
100219bc:	10801858 	cmpnei	r2,r2,97
100219c0:	1000561e 	bne	r2,zero,10021b1c <FlashErase+0x22c>
      {
        printf(" -Erase ALL blocks? (y/n) ");
100219c4:	01000034 	movhi	r4,0
100219c8:	2101d604 	addi	r4,r4,1880
100219cc:	0022cf00 	call	10022cf0 <printf>

        GetInputString( entry, sizeof(entry), stdin );
100219d0:	e13ff504 	addi	r4,fp,-44
100219d4:	00800034 	movhi	r2,0
100219d8:	108b0704 	addi	r2,r2,11292
100219dc:	10800017 	ldw	r2,0(r2)
100219e0:	11800117 	ldw	r6,4(r2)
100219e4:	01400104 	movi	r5,4
100219e8:	00202dc0 	call	100202dc <GetInputString>
        
        if(entry[0] == 'y')
100219ec:	e0bff503 	ldbu	r2,-44(fp)
100219f0:	10803fcc 	andi	r2,r2,255
100219f4:	10801e58 	cmpnei	r2,r2,121
100219f8:	1000451e 	bne	r2,zero,10021b10 <FlashErase+0x220>
        {
          /* Erase all blocks */
          printf(" -Erasing %d blocks.  Please Wait.\n", (regions->number_of_blocks));
100219fc:	e0bff317 	ldw	r2,-52(fp)
10021a00:	11400217 	ldw	r5,8(r2)
10021a04:	01000034 	movhi	r4,0
10021a08:	2101dd04 	addi	r4,r4,1908
10021a0c:	0022cf00 	call	10022cf0 <printf>
          for(block = 0; block < regions->number_of_blocks; block++)
10021a10:	e03ffe15 	stw	zero,-8(fp)
10021a14:	00003506 	br	10021aec <FlashErase+0x1fc>
          {
            /* Dont erase it if it's already erased silly. */
            if ((FlashCheckIfBlockErased(fd, block, regions)) == 0)
10021a18:	e0bffe17 	ldw	r2,-8(fp)
10021a1c:	100b883a 	mov	r5,r2
10021a20:	e1bff317 	ldw	r6,-52(fp)
10021a24:	e13ff217 	ldw	r4,-56(fp)
10021a28:	0020d280 	call	10020d28 <FlashCheckIfBlockErased>
10021a2c:	1004c03a 	cmpne	r2,r2,zero
10021a30:	1000211e 	bne	r2,zero,10021ab8 <FlashErase+0x1c8>
            {
              test_offset = (regions->offset + (block * regions->block_size));
10021a34:	e0bff317 	ldw	r2,-52(fp)
10021a38:	10800017 	ldw	r2,0(r2)
10021a3c:	1009883a 	mov	r4,r2
10021a40:	e0bff317 	ldw	r2,-52(fp)
10021a44:	10800317 	ldw	r2,12(r2)
10021a48:	1007883a 	mov	r3,r2
10021a4c:	e0bffe17 	ldw	r2,-8(fp)
10021a50:	1885383a 	mul	r2,r3,r2
10021a54:	2085883a 	add	r2,r4,r2
10021a58:	e0bff115 	stw	r2,-60(fp)
              alt_erase_flash_block(fd, test_offset, regions->block_size);
10021a5c:	e0bff317 	ldw	r2,-52(fp)
10021a60:	10c00317 	ldw	r3,12(r2)
10021a64:	e0bff217 	ldw	r2,-56(fp)
10021a68:	e0bfe915 	stw	r2,-92(fp)
10021a6c:	e0bff117 	ldw	r2,-60(fp)
10021a70:	e0bfea15 	stw	r2,-88(fp)
10021a74:	e0ffeb15 	stw	r3,-84(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
10021a78:	e0bfe917 	ldw	r2,-92(fp)
10021a7c:	10800817 	ldw	r2,32(r2)
10021a80:	e13fe917 	ldw	r4,-92(fp)
10021a84:	e17fea17 	ldw	r5,-88(fp)
10021a88:	103ee83a 	callr	r2
10021a8c:	e0bfec15 	stw	r2,-80(fp)
  
  if(!ret_code)
10021a90:	e0bfec17 	ldw	r2,-80(fp)
10021a94:	1004c03a 	cmpne	r2,r2,zero
10021a98:	1000071e 	bne	r2,zero,10021ab8 <FlashErase+0x1c8>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
10021a9c:	e0bfe917 	ldw	r2,-92(fp)
10021aa0:	10800a17 	ldw	r2,40(r2)
10021aa4:	1007883a 	mov	r3,r2
10021aa8:	e0bfea17 	ldw	r2,-88(fp)
10021aac:	1889883a 	add	r4,r3,r2
10021ab0:	e17feb17 	ldw	r5,-84(fp)
10021ab4:	003147c0 	call	1003147c <alt_dcache_flush>
            }
            /* Just a simple progress meter so we dont get bored waiting for the flash to erase. */
            printf(".");
10021ab8:	01000b84 	movi	r4,46
10021abc:	0022d680 	call	10022d68 <putchar>
            if(((block + 1) % 80) == 0)
10021ac0:	e0bffe17 	ldw	r2,-8(fp)
10021ac4:	11000044 	addi	r4,r2,1
10021ac8:	01401404 	movi	r5,80
10021acc:	00223440 	call	10022344 <__umodsi3>
10021ad0:	1004c03a 	cmpne	r2,r2,zero
10021ad4:	1000021e 	bne	r2,zero,10021ae0 <FlashErase+0x1f0>
            {
              printf("\n");
10021ad8:	01000284 	movi	r4,10
10021adc:	0022d680 	call	10022d68 <putchar>
        
        if(entry[0] == 'y')
        {
          /* Erase all blocks */
          printf(" -Erasing %d blocks.  Please Wait.\n", (regions->number_of_blocks));
          for(block = 0; block < regions->number_of_blocks; block++)
10021ae0:	e0bffe17 	ldw	r2,-8(fp)
10021ae4:	10800044 	addi	r2,r2,1
10021ae8:	e0bffe15 	stw	r2,-8(fp)
10021aec:	e0bff317 	ldw	r2,-52(fp)
10021af0:	10800217 	ldw	r2,8(r2)
10021af4:	1007883a 	mov	r3,r2
10021af8:	e0bffe17 	ldw	r2,-8(fp)
10021afc:	10ffc636 	bltu	r2,r3,10021a18 <FlashErase+0x128>
            if(((block + 1) % 80) == 0)
            {
              printf("\n");
            }
          }
          printf("\n -All Blocks Erased.\n");
10021b00:	01000034 	movhi	r4,0
10021b04:	2101e604 	addi	r4,r4,1944
10021b08:	0022e2c0 	call	10022e2c <puts>
10021b0c:	00000306 	br	10021b1c <FlashErase+0x22c>
        }
        else
        {
          printf("Erased zero blocks.\n");
10021b10:	01000034 	movhi	r4,0
10021b14:	2101ec04 	addi	r4,r4,1968
10021b18:	0022e2c0 	call	10022e2c <puts>
        }
      }
      /* Just erase one block */
      if(sscanf(entry, "%d\n", &block))
10021b1c:	e13ff504 	addi	r4,fp,-44
10021b20:	e1bffe04 	addi	r6,fp,-8
10021b24:	01400034 	movhi	r5,0
10021b28:	2941f104 	addi	r5,r5,1988
10021b2c:	0022fa00 	call	10022fa0 <sscanf>
10021b30:	1005003a 	cmpeq	r2,r2,zero
10021b34:	1000361e 	bne	r2,zero,10021c10 <FlashErase+0x320>
      {
        if ((block >= 0) && (block <= (regions->number_of_blocks - 1)))
10021b38:	e0bff317 	ldw	r2,-52(fp)
10021b3c:	10800217 	ldw	r2,8(r2)
10021b40:	10bfffc4 	addi	r2,r2,-1
10021b44:	1007883a 	mov	r3,r2
10021b48:	e0bffe17 	ldw	r2,-8(fp)
10021b4c:	18802636 	bltu	r3,r2,10021be8 <FlashErase+0x2f8>
        {
          test_offset = (regions->offset + (block * regions->block_size));
10021b50:	e0bff317 	ldw	r2,-52(fp)
10021b54:	10800017 	ldw	r2,0(r2)
10021b58:	1009883a 	mov	r4,r2
10021b5c:	e0bff317 	ldw	r2,-52(fp)
10021b60:	10800317 	ldw	r2,12(r2)
10021b64:	1007883a 	mov	r3,r2
10021b68:	e0bffe17 	ldw	r2,-8(fp)
10021b6c:	1885383a 	mul	r2,r3,r2
10021b70:	2085883a 	add	r2,r4,r2
10021b74:	e0bff115 	stw	r2,-60(fp)
          alt_erase_flash_block(fd, test_offset, regions->block_size);
10021b78:	e0bff317 	ldw	r2,-52(fp)
10021b7c:	10c00317 	ldw	r3,12(r2)
10021b80:	e0bff217 	ldw	r2,-56(fp)
10021b84:	e0bfe515 	stw	r2,-108(fp)
10021b88:	e0bff117 	ldw	r2,-60(fp)
10021b8c:	e0bfe615 	stw	r2,-104(fp)
10021b90:	e0ffe715 	stw	r3,-100(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_erase_flash_block( 
                                      alt_flash_fd* fd, int offset, int length) 
{
  int ret_code;
  ret_code = fd->erase_block( fd, offset );
10021b94:	e0bfe517 	ldw	r2,-108(fp)
10021b98:	10800817 	ldw	r2,32(r2)
10021b9c:	e13fe517 	ldw	r4,-108(fp)
10021ba0:	e17fe617 	ldw	r5,-104(fp)
10021ba4:	103ee83a 	callr	r2
10021ba8:	e0bfe815 	stw	r2,-96(fp)
  
  if(!ret_code)
10021bac:	e0bfe817 	ldw	r2,-96(fp)
10021bb0:	1004c03a 	cmpne	r2,r2,zero
10021bb4:	1000071e 	bne	r2,zero,10021bd4 <FlashErase+0x2e4>
      alt_dcache_flush((alt_u8*)fd->base_addr + offset, length);
10021bb8:	e0bfe517 	ldw	r2,-108(fp)
10021bbc:	10800a17 	ldw	r2,40(r2)
10021bc0:	1007883a 	mov	r3,r2
10021bc4:	e0bfe617 	ldw	r2,-104(fp)
10021bc8:	1889883a 	add	r4,r3,r2
10021bcc:	e17fe717 	ldw	r5,-100(fp)
10021bd0:	003147c0 	call	1003147c <alt_dcache_flush>
          printf(" -Block %d erased.\n", block);
10021bd4:	e17ffe17 	ldw	r5,-8(fp)
10021bd8:	01000034 	movhi	r4,0
10021bdc:	2101f204 	addi	r4,r4,1992
10021be0:	0022cf00 	call	10022cf0 <printf>
10021be4:	00000a06 	br	10021c10 <FlashErase+0x320>
        }
        else
        {
          printf(" -Block number entered is %d\n", block);
10021be8:	e17ffe17 	ldw	r5,-8(fp)
10021bec:	01000034 	movhi	r4,0
10021bf0:	2101f704 	addi	r4,r4,2012
10021bf4:	0022cf00 	call	10022cf0 <printf>
          printf(" -Block number must be between 0 and %d.\n", (regions->number_of_blocks - 1));
10021bf8:	e0bff317 	ldw	r2,-52(fp)
10021bfc:	10800217 	ldw	r2,8(r2)
10021c00:	117fffc4 	addi	r5,r2,-1
10021c04:	01000034 	movhi	r4,0
10021c08:	2101ff04 	addi	r4,r4,2044
10021c0c:	0022cf00 	call	10022cf0 <printf>
        }
      }
    }
    printf(" -Closing flash \"%s\".\n", flashname);
10021c10:	e17ff604 	addi	r5,fp,-40
10021c14:	01000034 	movhi	r4,0
10021c18:	21020a04 	addi	r4,r4,2088
10021c1c:	0022cf00 	call	10022cf0 <printf>
    alt_flash_close_dev(fd);
10021c20:	e13ff217 	ldw	r4,-56(fp)
10021c24:	00314ac0 	call	100314ac <alt_flash_close_dev>
  }
}
10021c28:	e037883a 	mov	sp,fp
10021c2c:	dfc00117 	ldw	ra,4(sp)
10021c30:	df000017 	ldw	fp,0(sp)
10021c34:	dec00204 	addi	sp,sp,8
10021c38:	f800283a 	ret

10021c3c <FlashFindErasedBlocks>:
*           parameter is SHOWMAP, the function prints a list of 
*           all blocks, indicating which ones are erased.
* 
******************************************************************/
static int FlashFindErasedBlocks(alt_flash_fd* fd, flash_region* regions, int number_of_regions, int mode)
{ 
10021c3c:	defff404 	addi	sp,sp,-48
10021c40:	dfc00b15 	stw	ra,44(sp)
10021c44:	df000a15 	stw	fp,40(sp)
10021c48:	df000a04 	addi	fp,sp,40
10021c4c:	e13ffc15 	stw	r4,-16(fp)
10021c50:	e17ffd15 	stw	r5,-12(fp)
10021c54:	e1bffe15 	stw	r6,-8(fp)
10021c58:	e1ffff15 	stw	r7,-4(fp)
  int region_index, block_index;
  int block_erased = 0x0;
10021c5c:	e03ff615 	stw	zero,-40(fp)
  alt_u8 entry[5];
  unsigned int block;

  /* Currently only supports flashes with 1 region, but region loop is left here for possible */
  /* future implementation */
  for(region_index = 0; region_index < number_of_regions; region_index++)
10021c60:	e03ff815 	stw	zero,-32(fp)
10021c64:	00008506 	br	10021e7c <FlashFindErasedBlocks+0x240>
  {
    printf(" -Checking Region %d for erased blocks.\n", region_index);
10021c68:	01000034 	movhi	r4,0
10021c6c:	21021004 	addi	r4,r4,2112
10021c70:	e17ff817 	ldw	r5,-32(fp)
10021c74:	0022cf00 	call	10022cf0 <printf>
    /* SHOWMAP mode has a legend reminding us what little plus and minus signs mean */
    if(mode == SHOWMAP)
10021c78:	e0bfff17 	ldw	r2,-4(fp)
10021c7c:	10800098 	cmpnei	r2,r2,2
10021c80:	1000061e 	bne	r2,zero,10021c9c <FlashFindErasedBlocks+0x60>
    {
      printf("            erased block = '-'\n");     
10021c84:	01000034 	movhi	r4,0
10021c88:	21021b04 	addi	r4,r4,2156
10021c8c:	0022e2c0 	call	10022e2c <puts>
      printf("          unerased block = '+'\n\n");     
10021c90:	01000034 	movhi	r4,0
10021c94:	21022304 	addi	r4,r4,2188
10021c98:	0022e2c0 	call	10022e2c <puts>
    }
    /* Check those blocks. */
    for(block_index = 0; block_index < (regions->number_of_blocks); block_index++)
10021c9c:	e03ff715 	stw	zero,-36(fp)
10021ca0:	00003106 	br	10021d68 <FlashFindErasedBlocks+0x12c>
    {
      block_erased = FlashCheckIfBlockErased(fd, block_index, regions);
10021ca4:	e13ffc17 	ldw	r4,-16(fp)
10021ca8:	e17ff717 	ldw	r5,-36(fp)
10021cac:	e1bffd17 	ldw	r6,-12(fp)
10021cb0:	0020d280 	call	10020d28 <FlashCheckIfBlockErased>
10021cb4:	e0bff615 	stw	r2,-40(fp)
      /* If it's erased and were running in TEST mode, we're done */
      if(block_erased && (mode == TEST))
10021cb8:	e0bff617 	ldw	r2,-40(fp)
10021cbc:	1005003a 	cmpeq	r2,r2,zero
10021cc0:	1000031e 	bne	r2,zero,10021cd0 <FlashFindErasedBlocks+0x94>
10021cc4:	e0bfff17 	ldw	r2,-4(fp)
10021cc8:	10800060 	cmpeqi	r2,r2,1
10021ccc:	10002a1e 	bne	r2,zero,10021d78 <FlashFindErasedBlocks+0x13c>
        break;
      /* If in SHOWMAP mode, mark block as either erased or not-erased. */
      else if(block_erased && (mode == SHOWMAP))
10021cd0:	e0bff617 	ldw	r2,-40(fp)
10021cd4:	1005003a 	cmpeq	r2,r2,zero
10021cd8:	10000f1e 	bne	r2,zero,10021d18 <FlashFindErasedBlocks+0xdc>
10021cdc:	e0bfff17 	ldw	r2,-4(fp)
10021ce0:	10800098 	cmpnei	r2,r2,2
10021ce4:	10000c1e 	bne	r2,zero,10021d18 <FlashFindErasedBlocks+0xdc>
        printf("  Block %3d @ 0x%8.8X:\t-\n", block_index, (regions->offset + (block_index * regions->block_size)));           
10021ce8:	e0bffd17 	ldw	r2,-12(fp)
10021cec:	11000017 	ldw	r4,0(r2)
10021cf0:	e0bffd17 	ldw	r2,-12(fp)
10021cf4:	10c00317 	ldw	r3,12(r2)
10021cf8:	e0bff717 	ldw	r2,-36(fp)
10021cfc:	1885383a 	mul	r2,r3,r2
10021d00:	208d883a 	add	r6,r4,r2
10021d04:	01000034 	movhi	r4,0
10021d08:	21022b04 	addi	r4,r4,2220
10021d0c:	e17ff717 	ldw	r5,-36(fp)
10021d10:	0022cf00 	call	10022cf0 <printf>
      block_erased = FlashCheckIfBlockErased(fd, block_index, regions);
      /* If it's erased and were running in TEST mode, we're done */
      if(block_erased && (mode == TEST))
        break;
      /* If in SHOWMAP mode, mark block as either erased or not-erased. */
      else if(block_erased && (mode == SHOWMAP))
10021d14:	00001106 	br	10021d5c <FlashFindErasedBlocks+0x120>
        printf("  Block %3d @ 0x%8.8X:\t-\n", block_index, (regions->offset + (block_index * regions->block_size)));           
      else if(!block_erased && (mode == SHOWMAP))
10021d18:	e0bff617 	ldw	r2,-40(fp)
10021d1c:	1004c03a 	cmpne	r2,r2,zero
10021d20:	10000e1e 	bne	r2,zero,10021d5c <FlashFindErasedBlocks+0x120>
10021d24:	e0bfff17 	ldw	r2,-4(fp)
10021d28:	10800098 	cmpnei	r2,r2,2
10021d2c:	10000b1e 	bne	r2,zero,10021d5c <FlashFindErasedBlocks+0x120>
        printf("  Block %3d @ 0x%8.8X:\t+\n", block_index, (regions->offset + (block_index * regions->block_size)));           
10021d30:	e0bffd17 	ldw	r2,-12(fp)
10021d34:	11000017 	ldw	r4,0(r2)
10021d38:	e0bffd17 	ldw	r2,-12(fp)
10021d3c:	10c00317 	ldw	r3,12(r2)
10021d40:	e0bff717 	ldw	r2,-36(fp)
10021d44:	1885383a 	mul	r2,r3,r2
10021d48:	208d883a 	add	r6,r4,r2
10021d4c:	01000034 	movhi	r4,0
10021d50:	21023204 	addi	r4,r4,2248
10021d54:	e17ff717 	ldw	r5,-36(fp)
10021d58:	0022cf00 	call	10022cf0 <printf>
    {
      printf("            erased block = '-'\n");     
      printf("          unerased block = '+'\n\n");     
    }
    /* Check those blocks. */
    for(block_index = 0; block_index < (regions->number_of_blocks); block_index++)
10021d5c:	e0bff717 	ldw	r2,-36(fp)
10021d60:	10800044 	addi	r2,r2,1
10021d64:	e0bff715 	stw	r2,-36(fp)
10021d68:	e0bffd17 	ldw	r2,-12(fp)
10021d6c:	10c00217 	ldw	r3,8(r2)
10021d70:	e0bff717 	ldw	r2,-36(fp)
10021d74:	10ffcb16 	blt	r2,r3,10021ca4 <FlashFindErasedBlocks+0x68>
        printf("  Block %3d @ 0x%8.8X:\t-\n", block_index, (regions->offset + (block_index * regions->block_size)));           
      else if(!block_erased && (mode == SHOWMAP))
        printf("  Block %3d @ 0x%8.8X:\t+\n", block_index, (regions->offset + (block_index * regions->block_size)));           
    }
    /* Special case if no blocks are erased (TEST mode only)*/
    if(( block_index == ( regions->number_of_blocks )) && ( mode == TEST ))
10021d78:	e0bffd17 	ldw	r2,-12(fp)
10021d7c:	10c00217 	ldw	r3,8(r2)
10021d80:	e0bff717 	ldw	r2,-36(fp)
10021d84:	1880341e 	bne	r3,r2,10021e58 <FlashFindErasedBlocks+0x21c>
10021d88:	e0bfff17 	ldw	r2,-4(fp)
10021d8c:	10800058 	cmpnei	r2,r2,1
10021d90:	1000311e 	bne	r2,zero,10021e58 <FlashFindErasedBlocks+0x21c>
    {
      printf(" -Found no erased blocks.  Please enter the number of the block\n");
10021d94:	01000034 	movhi	r4,0
10021d98:	21023904 	addi	r4,r4,2276
10021d9c:	0022e2c0 	call	10022e2c <puts>
      printf("  you would like to test.  Enter 'q' to quit without testing flash.\n");
10021da0:	01000034 	movhi	r4,0
10021da4:	21024904 	addi	r4,r4,2340
10021da8:	0022e2c0 	call	10022e2c <puts>
      printf(" -> ");
10021dac:	01000034 	movhi	r4,0
10021db0:	2101d404 	addi	r4,r4,1872
10021db4:	0022cf00 	call	10022cf0 <printf>

      GetInputString( entry, sizeof(entry), stdin );
10021db8:	e13ff904 	addi	r4,fp,-28
10021dbc:	00800034 	movhi	r2,0
10021dc0:	108b0704 	addi	r2,r2,11292
10021dc4:	10800017 	ldw	r2,0(r2)
10021dc8:	11800117 	ldw	r6,4(r2)
10021dcc:	01400144 	movi	r5,5
10021dd0:	00202dc0 	call	100202dc <GetInputString>

      if(entry[0] == 'q')
10021dd4:	e0bff903 	ldbu	r2,-28(fp)
10021dd8:	10803fcc 	andi	r2,r2,255
10021ddc:	10801c58 	cmpnei	r2,r2,113
10021de0:	1000031e 	bne	r2,zero,10021df0 <FlashFindErasedBlocks+0x1b4>
      {
    		block_index = QUIT_WITHOUT_TESTING;
10021de4:	00bfffc4 	movi	r2,-1
10021de8:	e0bff715 	stw	r2,-36(fp)
    		break;
10021dec:	00002606 	br	10021e88 <FlashFindErasedBlocks+0x24c>
    	}
      else if(sscanf(entry, "%d\n", &block))
10021df0:	e13ff904 	addi	r4,fp,-28
10021df4:	e1bffb04 	addi	r6,fp,-20
10021df8:	01400034 	movhi	r5,0
10021dfc:	2941f104 	addi	r5,r5,1988
10021e00:	0022fa00 	call	10022fa0 <sscanf>
10021e04:	1005003a 	cmpeq	r2,r2,zero
10021e08:	1000131e 	bne	r2,zero,10021e58 <FlashFindErasedBlocks+0x21c>
      {
        if ((block >= 0) && (block <= (regions->number_of_blocks - 1)))
10021e0c:	e0bffd17 	ldw	r2,-12(fp)
10021e10:	10800217 	ldw	r2,8(r2)
10021e14:	10bfffc4 	addi	r2,r2,-1
10021e18:	1007883a 	mov	r3,r2
10021e1c:	e0bffb17 	ldw	r2,-20(fp)
10021e20:	18800336 	bltu	r3,r2,10021e30 <FlashFindErasedBlocks+0x1f4>
        {
        	block_index = block;
10021e24:	e0bffb17 	ldw	r2,-20(fp)
10021e28:	e0bff715 	stw	r2,-36(fp)
        	break;
10021e2c:	00001606 	br	10021e88 <FlashFindErasedBlocks+0x24c>
        }
        else 
        {
          printf(" -Block number entered is %d\n", block);
10021e30:	e17ffb17 	ldw	r5,-20(fp)
10021e34:	01000034 	movhi	r4,0
10021e38:	2101f704 	addi	r4,r4,2012
10021e3c:	0022cf00 	call	10022cf0 <printf>
          printf(" -Block number must be between 0 and %d.\n", (regions->number_of_blocks - 1));
10021e40:	e0bffd17 	ldw	r2,-12(fp)
10021e44:	10800217 	ldw	r2,8(r2)
10021e48:	117fffc4 	addi	r5,r2,-1
10021e4c:	01000034 	movhi	r4,0
10021e50:	2101ff04 	addi	r4,r4,2044
10021e54:	0022cf00 	call	10022cf0 <printf>
        }
      }    	
    }
    /* Break out of the region loop if we've found an erased block to test. */
    if(block_erased && (mode == TEST))
10021e58:	e0bff617 	ldw	r2,-40(fp)
10021e5c:	1005003a 	cmpeq	r2,r2,zero
10021e60:	1000031e 	bne	r2,zero,10021e70 <FlashFindErasedBlocks+0x234>
10021e64:	e0bfff17 	ldw	r2,-4(fp)
10021e68:	10800060 	cmpeqi	r2,r2,1
10021e6c:	1000061e 	bne	r2,zero,10021e88 <FlashFindErasedBlocks+0x24c>
  alt_u8 entry[5];
  unsigned int block;

  /* Currently only supports flashes with 1 region, but region loop is left here for possible */
  /* future implementation */
  for(region_index = 0; region_index < number_of_regions; region_index++)
10021e70:	e0bff817 	ldw	r2,-32(fp)
10021e74:	10800044 	addi	r2,r2,1
10021e78:	e0bff815 	stw	r2,-32(fp)
10021e7c:	e0fff817 	ldw	r3,-32(fp)
10021e80:	e0bffe17 	ldw	r2,-8(fp)
10021e84:	18bf7816 	blt	r3,r2,10021c68 <FlashFindErasedBlocks+0x2c>
    /* Break out of the region loop if we've found an erased block to test. */
    if(block_erased && (mode == TEST))
      break;
  }

  return block_index;
10021e88:	e0bff717 	ldw	r2,-36(fp)
}
10021e8c:	e037883a 	mov	sp,fp
10021e90:	dfc00117 	ldw	ra,4(sp)
10021e94:	df000017 	ldw	fp,0(sp)
10021e98:	dec00204 	addi	sp,sp,8
10021e9c:	f800283a 	ret

10021ea0 <TestFlash>:
*           indicates which ones are erased.  The flash is closed
*           at the end of the function.
* 
******************************************************************/
static void TestFlash(int mode, int flash_type)
{
10021ea0:	deffeb04 	addi	sp,sp,-84
10021ea4:	dfc01415 	stw	ra,80(sp)
10021ea8:	df001315 	stw	fp,76(sp)
10021eac:	df001304 	addi	fp,sp,76
10021eb0:	e13ffe15 	stw	r4,-8(fp)
10021eb4:	e17fff15 	stw	r5,-4(fp)
  alt_flash_fd* fd;
  int number_of_regions;
  int block;
  flash_region* regions;
  int ret_code = 0x0;
10021eb8:	e03ff015 	stw	zero,-64(fp)
  alt_u8 entry[4];
  alt_u8 flashname[30];
  
  ret_code = GetFlashName(flashname, flash_type);
10021ebc:	e13ff604 	addi	r4,fp,-40
10021ec0:	e17fff17 	ldw	r5,-4(fp)
10021ec4:	002177c0 	call	1002177c <GetFlashName>
10021ec8:	e0bff015 	stw	r2,-64(fp)

  fd = alt_flash_open_dev(flashname);
10021ecc:	e13ff604 	addi	r4,fp,-40
10021ed0:	00314c00 	call	100314c0 <alt_flash_open_dev>
10021ed4:	e0bff215 	stw	r2,-56(fp)
  if (fd)
10021ed8:	e0bff217 	ldw	r2,-56(fp)
10021edc:	1005003a 	cmpeq	r2,r2,zero
10021ee0:	10004d1e 	bne	r2,zero,10022018 <TestFlash+0x178>
  {
    printf(" -Successfully opened %s\n", flashname);
10021ee4:	e17ff604 	addi	r5,fp,-40
10021ee8:	01000034 	movhi	r4,0
10021eec:	21025a04 	addi	r4,r4,2408
10021ef0:	0022cf00 	call	10022cf0 <printf>
10021ef4:	e0bff217 	ldw	r2,-56(fp)
10021ef8:	e0bfed15 	stw	r2,-76(fp)
10021efc:	e0bff404 	addi	r2,fp,-48
10021f00:	e0bfee15 	stw	r2,-72(fp)
10021f04:	e0bff304 	addi	r2,fp,-52
10021f08:	e0bfef15 	stw	r2,-68(fp)
 */
static __inline__ int __attribute__ ((always_inline)) alt_get_flash_info( 
                                      alt_flash_fd* fd, flash_region** info, 
                                      int* number_of_regions)
{
  return fd->get_info( fd, info, number_of_regions);
10021f0c:	e0bfed17 	ldw	r2,-76(fp)
10021f10:	10800717 	ldw	r2,28(r2)
10021f14:	e13fed17 	ldw	r4,-76(fp)
10021f18:	e17fee17 	ldw	r5,-72(fp)
10021f1c:	e1bfef17 	ldw	r6,-68(fp)
10021f20:	103ee83a 	callr	r2
    
    /* Get some useful info about the flash */
    ret_code = alt_get_flash_info(fd, &regions, &number_of_regions);
10021f24:	e0bff015 	stw	r2,-64(fp)
      
    if (!ret_code)
10021f28:	e0bff017 	ldw	r2,-64(fp)
10021f2c:	1004c03a 	cmpne	r2,r2,zero
10021f30:	10003d1e 	bne	r2,zero,10022028 <TestFlash+0x188>
    {
      printf(" -Region 0 contains %d blocks.\n", regions->number_of_blocks);
10021f34:	e0bff417 	ldw	r2,-48(fp)
10021f38:	11400217 	ldw	r5,8(r2)
10021f3c:	01000034 	movhi	r4,0
10021f40:	21026104 	addi	r4,r4,2436
10021f44:	0022cf00 	call	10022cf0 <printf>
      
      block = FlashFindErasedBlocks(fd, regions, number_of_regions, mode);
10021f48:	e17ff417 	ldw	r5,-48(fp)
10021f4c:	e1bff317 	ldw	r6,-52(fp)
10021f50:	e13ff217 	ldw	r4,-56(fp)
10021f54:	e1fffe17 	ldw	r7,-8(fp)
10021f58:	0021c3c0 	call	10021c3c <FlashFindErasedBlocks>
10021f5c:	e0bff115 	stw	r2,-60(fp)

      /* If we're in TEST mode, ask if this block is okay to test. */
      if(( mode == TEST ) && ( block != QUIT_WITHOUT_TESTING ))
10021f60:	e0bffe17 	ldw	r2,-8(fp)
10021f64:	10800058 	cmpnei	r2,r2,1
10021f68:	10002f1e 	bne	r2,zero,10022028 <TestFlash+0x188>
10021f6c:	e0bff117 	ldw	r2,-60(fp)
10021f70:	10bfffe0 	cmpeqi	r2,r2,-1
10021f74:	10002c1e 	bne	r2,zero,10022028 <TestFlash+0x188>
      {
        printf(" -Block %d, at address 0x%X identified.\n", block, (regions->offset + (block * regions->block_size)));
10021f78:	e0bff417 	ldw	r2,-48(fp)
10021f7c:	11000017 	ldw	r4,0(r2)
10021f80:	e0bff417 	ldw	r2,-48(fp)
10021f84:	10c00317 	ldw	r3,12(r2)
10021f88:	e0bff117 	ldw	r2,-60(fp)
10021f8c:	1885383a 	mul	r2,r3,r2
10021f90:	208d883a 	add	r6,r4,r2
10021f94:	01000034 	movhi	r4,0
10021f98:	21026904 	addi	r4,r4,2468
10021f9c:	e17ff117 	ldw	r5,-60(fp)
10021fa0:	0022cf00 	call	10022cf0 <printf>
        printf(" -Would you like to test this block? (y/n)");
10021fa4:	01000034 	movhi	r4,0
10021fa8:	21027404 	addi	r4,r4,2512
10021fac:	0022cf00 	call	10022cf0 <printf>

        GetInputString(entry, sizeof(entry), stdin);
10021fb0:	e13ff504 	addi	r4,fp,-44
10021fb4:	00800034 	movhi	r2,0
10021fb8:	108b0704 	addi	r2,r2,11292
10021fbc:	10800017 	ldw	r2,0(r2)
10021fc0:	11800117 	ldw	r6,4(r2)
10021fc4:	01400104 	movi	r5,4
10021fc8:	00202dc0 	call	100202dc <GetInputString>

        if ( entry[0] == 'y' && entry[1] == '\n' )
10021fcc:	e0bff503 	ldbu	r2,-44(fp)
10021fd0:	10803fcc 	andi	r2,r2,255
10021fd4:	10801e58 	cmpnei	r2,r2,121
10021fd8:	1000131e 	bne	r2,zero,10022028 <TestFlash+0x188>
10021fdc:	e0bff543 	ldbu	r2,-43(fp)
10021fe0:	10803fcc 	andi	r2,r2,255
10021fe4:	10800298 	cmpnei	r2,r2,10
10021fe8:	10000f1e 	bne	r2,zero,10022028 <TestFlash+0x188>
        {
          /* Test that Flash! */
          FlashRunTests(fd, block, regions);
10021fec:	e1bff417 	ldw	r6,-48(fp)
10021ff0:	e13ff217 	ldw	r4,-56(fp)
10021ff4:	e17ff117 	ldw	r5,-60(fp)
10021ff8:	00216280 	call	10021628 <FlashRunTests>
          printf(" -Closing flash device \"%s\".\n", flashname);
10021ffc:	e17ff604 	addi	r5,fp,-40
10022000:	01000034 	movhi	r4,0
10022004:	21027f04 	addi	r4,r4,2556
10022008:	0022cf00 	call	10022cf0 <printf>
          alt_flash_close_dev(fd);
1002200c:	e13ff217 	ldw	r4,-56(fp)
10022010:	00314ac0 	call	100314ac <alt_flash_close_dev>
10022014:	00000406 	br	10022028 <TestFlash+0x188>
      }
    }
  }
  else
  {
    printf(" -ERROR: Could not open %s\n", flashname);   
10022018:	e17ff604 	addi	r5,fp,-40
1002201c:	01000034 	movhi	r4,0
10022020:	21028704 	addi	r4,r4,2588
10022024:	0022cf00 	call	10022cf0 <printf>
  }
}
10022028:	e037883a 	mov	sp,fp
1002202c:	dfc00117 	ldw	ra,4(sp)
10022030:	df000017 	ldw	fp,0(sp)
10022034:	dec00204 	addi	sp,sp,8
10022038:	f800283a 	ret

1002203c <TopMenu>:
*
*  Purpose: Generates the top level menu.
* 
******************************************************************/
static int TopMenu( void )
{
1002203c:	defffc04 	addi	sp,sp,-16
10022040:	dfc00315 	stw	ra,12(sp)
10022044:	df000215 	stw	fp,8(sp)
10022048:	df000204 	addi	fp,sp,8
1002204c:	00000006 	br	10022050 <TopMenu+0x14>
  char ch;

  /* Print the top-level menu to stdout */
  while (1)
  {
    MenuBegin("      Memory Test Main Menu");
10022050:	01000034 	movhi	r4,0
10022054:	21028e04 	addi	r4,r4,2616
10022058:	00202480 	call	10020248 <MenuBegin>
    MenuItem( 'a', "Test RAM" );
1002205c:	01001844 	movi	r4,97
10022060:	01400034 	movhi	r5,0
10022064:	29429504 	addi	r5,r5,2644
10022068:	002029c0 	call	1002029c <MenuItem>
    MenuItem( 'b', "Test Flash");
1002206c:	01001884 	movi	r4,98
10022070:	01400034 	movhi	r5,0
10022074:	29429804 	addi	r5,r5,2656
10022078:	002029c0 	call	1002029c <MenuItem>
#ifdef EPCS_CONTROLLER_NAME    
    MenuItem( 'c', "Test EPCS Serial Flash");
    ch = MenuEnd( 'a', 'c' );    
#else
    ch = MenuEnd( 'a', 'b' );
1002207c:	01001844 	movi	r4,97
10022080:	01401884 	movi	r5,98
10022084:	002036c0 	call	1002036c <MenuEnd>
10022088:	e0bffe05 	stb	r2,-8(fp)
#endif /* EPCS_CONTROLLER_NAME */

    switch(ch)
1002208c:	e0bffe07 	ldb	r2,-8(fp)
10022090:	10bfe7c4 	addi	r2,r2,-97
10022094:	e0bfff15 	stw	r2,-4(fp)
10022098:	e0ffff17 	ldw	r3,-4(fp)
1002209c:	18800468 	cmpgeui	r2,r3,17
100220a0:	1000271e 	bne	r2,zero,10022140 <TopMenu+0x104>
100220a4:	e13fff17 	ldw	r4,-4(fp)
100220a8:	e13fff17 	ldw	r4,-4(fp)
100220ac:	2105883a 	add	r2,r4,r4
100220b0:	1087883a 	add	r3,r2,r2
100220b4:	008400b4 	movhi	r2,4098
100220b8:	10883204 	addi	r2,r2,8392
100220bc:	1885883a 	add	r2,r3,r2
100220c0:	10800017 	ldw	r2,0(r2)
100220c4:	1000683a 	jmp	r2
100220c8:	1002210c 	andi	zero,r2,2180
100220cc:	10022114 	ori	zero,r2,2180
100220d0:	10022140 	call	11002214 <__flash_rwdata_start+0xfcdff8>
100220d4:	10022140 	call	11002214 <__flash_rwdata_start+0xfcdff8>
100220d8:	10022124 	muli	zero,r2,2180
100220dc:	10022140 	call	11002214 <__flash_rwdata_start+0xfcdff8>
100220e0:	10022140 	call	11002214 <__flash_rwdata_start+0xfcdff8>
100220e4:	10022140 	call	11002214 <__flash_rwdata_start+0xfcdff8>
100220e8:	10022140 	call	11002214 <__flash_rwdata_start+0xfcdff8>
100220ec:	10022140 	call	11002214 <__flash_rwdata_start+0xfcdff8>
100220f0:	10022140 	call	11002214 <__flash_rwdata_start+0xfcdff8>
100220f4:	10022140 	call	11002214 <__flash_rwdata_start+0xfcdff8>
100220f8:	10022130 	cmpltui	zero,r2,2180
100220fc:	10022140 	call	11002214 <__flash_rwdata_start+0xfcdff8>
10022100:	10022140 	call	11002214 <__flash_rwdata_start+0xfcdff8>
10022104:	10022140 	call	11002214 <__flash_rwdata_start+0xfcdff8>
10022108:	10022150 	cmplti	zero,r2,2181
    {
      MenuCase('a',TestRam());
1002210c:	0020b7c0 	call	10020b7c <TestRam>
10022110:	00000f06 	br	10022150 <TopMenu+0x114>
      MenuCase('b',TestFlash(TEST, CFI));
10022114:	01000044 	movi	r4,1
10022118:	014000c4 	movi	r5,3
1002211c:	0021ea00 	call	10021ea0 <TestFlash>
10022120:	00000b06 	br	10022150 <TopMenu+0x114>
      MenuCase('e',FlashErase(CFI));       /* hidden option */
10022124:	010000c4 	movi	r4,3
10022128:	00218f00 	call	100218f0 <FlashErase>
1002212c:	00000806 	br	10022150 <TopMenu+0x114>
      MenuCase('m',TestFlash(SHOWMAP, CFI)); /* hidden option */
10022130:	01000084 	movi	r4,2
10022134:	014000c4 	movi	r5,3
10022138:	0021ea00 	call	10021ea0 <TestFlash>
1002213c:	00000406 	br	10022150 <TopMenu+0x114>
      MenuCase('c',TestFlash(TEST, EPCS));
      MenuCase('f',FlashErase(EPCS));       /* hidden option */
      MenuCase('s',TestFlash(SHOWMAP, EPCS)); /* hidden option */
#endif /* EPCS_CONTROLLER_NAME */
      case 'q':	break;
      default:	printf("\n -ERROR: %c is an invalid entry.  Please try again\n", ch); break;
10022140:	e17ffe07 	ldb	r5,-8(fp)
10022144:	01000034 	movhi	r4,0
10022148:	21029b04 	addi	r4,r4,2668
1002214c:	0022cf00 	call	10022cf0 <printf>
    }
    if (ch == 'q')
10022150:	e0bffe07 	ldb	r2,-8(fp)
10022154:	10801c60 	cmpeqi	r2,r2,113
10022158:	1000101e 	bne	r2,zero,1002219c <TopMenu+0x160>
      break;
    printf("\nPress enter to continue...\n");
1002215c:	01000034 	movhi	r4,0
10022160:	2102a904 	addi	r4,r4,2724
10022164:	0022e2c0 	call	10022e2c <puts>
    while( (( ch = getc(stdin)) != '\n' ) && ( ch != EOF ));
10022168:	00800034 	movhi	r2,0
1002216c:	108b0704 	addi	r2,r2,11292
10022170:	10800017 	ldw	r2,0(r2)
10022174:	11000117 	ldw	r4,4(r2)
10022178:	002234c0 	call	1002234c <getc>
1002217c:	e0bffe05 	stb	r2,-8(fp)
10022180:	e0bffe07 	ldb	r2,-8(fp)
10022184:	108002a0 	cmpeqi	r2,r2,10
10022188:	103fb11e 	bne	r2,zero,10022050 <TopMenu+0x14>
1002218c:	e0bffe07 	ldb	r2,-8(fp)
10022190:	10bfffd8 	cmpnei	r2,r2,-1
10022194:	103ff41e 	bne	r2,zero,10022168 <TopMenu+0x12c>

  }
10022198:	003fad06 	br	10022050 <TopMenu+0x14>
  return (ch);
1002219c:	e0bffe07 	ldb	r2,-8(fp)
}
100221a0:	e037883a 	mov	sp,fp
100221a4:	dfc00117 	ldw	ra,4(sp)
100221a8:	df000017 	ldw	fp,0(sp)
100221ac:	dec00204 	addi	sp,sp,8
100221b0:	f800283a 	ret

100221b4 <main>:
*  Purpose: Continually prints the menu and performs the actions
*           requested by the user.
* 
******************************************************************/
int main(void)
{
100221b4:	defffd04 	addi	sp,sp,-12
100221b8:	dfc00215 	stw	ra,8(sp)
100221bc:	df000115 	stw	fp,4(sp)
100221c0:	df000104 	addi	fp,sp,4

  int ch;

  /* Print the Header */
  MenuHeader();
100221c4:	00201d00 	call	100201d0 <MenuHeader>
  /* Print the menu and do what the user requests, until they hit 'q' */
  while (1)
  {
    ch = TopMenu();
100221c8:	002203c0 	call	1002203c <TopMenu>
100221cc:	e0bfff15 	stw	r2,-4(fp)
    if (ch == 'q')
100221d0:	e0bfff17 	ldw	r2,-4(fp)
100221d4:	10801c58 	cmpnei	r2,r2,113
100221d8:	103ffb1e 	bne	r2,zero,100221c8 <main+0x14>
    {
      printf( "\nExiting from Memory Test.\n");
100221dc:	01000034 	movhi	r4,0
100221e0:	2102b004 	addi	r4,r4,2752
100221e4:	0022e2c0 	call	10022e2c <puts>
      break;
    }
  }
  return (0);
100221e8:	0005883a 	mov	r2,zero
}
100221ec:	e037883a 	mov	sp,fp
100221f0:	dfc00117 	ldw	ra,4(sp)
100221f4:	df000017 	ldw	fp,0(sp)
100221f8:	dec00204 	addi	sp,sp,8
100221fc:	f800283a 	ret

10022200 <udivmodsi4>:
10022200:	29001b2e 	bgeu	r5,r4,10022270 <udivmodsi4+0x70>
10022204:	28001a16 	blt	r5,zero,10022270 <udivmodsi4+0x70>
10022208:	00800044 	movi	r2,1
1002220c:	0007883a 	mov	r3,zero
10022210:	01c007c4 	movi	r7,31
10022214:	00000306 	br	10022224 <udivmodsi4+0x24>
10022218:	19c01326 	beq	r3,r7,10022268 <udivmodsi4+0x68>
1002221c:	18c00044 	addi	r3,r3,1
10022220:	28000416 	blt	r5,zero,10022234 <udivmodsi4+0x34>
10022224:	294b883a 	add	r5,r5,r5
10022228:	1085883a 	add	r2,r2,r2
1002222c:	293ffa36 	bltu	r5,r4,10022218 <udivmodsi4+0x18>
10022230:	10000d26 	beq	r2,zero,10022268 <udivmodsi4+0x68>
10022234:	0007883a 	mov	r3,zero
10022238:	21400236 	bltu	r4,r5,10022244 <udivmodsi4+0x44>
1002223c:	2149c83a 	sub	r4,r4,r5
10022240:	1886b03a 	or	r3,r3,r2
10022244:	1004d07a 	srli	r2,r2,1
10022248:	280ad07a 	srli	r5,r5,1
1002224c:	103ffa1e 	bne	r2,zero,10022238 <udivmodsi4+0x38>
10022250:	30000226 	beq	r6,zero,1002225c <udivmodsi4+0x5c>
10022254:	2005883a 	mov	r2,r4
10022258:	f800283a 	ret
1002225c:	1809883a 	mov	r4,r3
10022260:	2005883a 	mov	r2,r4
10022264:	f800283a 	ret
10022268:	0007883a 	mov	r3,zero
1002226c:	003ff806 	br	10022250 <udivmodsi4+0x50>
10022270:	00800044 	movi	r2,1
10022274:	0007883a 	mov	r3,zero
10022278:	003fef06 	br	10022238 <udivmodsi4+0x38>

1002227c <__divsi3>:
1002227c:	defffe04 	addi	sp,sp,-8
10022280:	dc000015 	stw	r16,0(sp)
10022284:	dfc00115 	stw	ra,4(sp)
10022288:	0021883a 	mov	r16,zero
1002228c:	20000c16 	blt	r4,zero,100222c0 <__divsi3+0x44>
10022290:	000d883a 	mov	r6,zero
10022294:	28000e16 	blt	r5,zero,100222d0 <__divsi3+0x54>
10022298:	00222000 	call	10022200 <udivmodsi4>
1002229c:	1007883a 	mov	r3,r2
100222a0:	8005003a 	cmpeq	r2,r16,zero
100222a4:	1000011e 	bne	r2,zero,100222ac <__divsi3+0x30>
100222a8:	00c7c83a 	sub	r3,zero,r3
100222ac:	1805883a 	mov	r2,r3
100222b0:	dfc00117 	ldw	ra,4(sp)
100222b4:	dc000017 	ldw	r16,0(sp)
100222b8:	dec00204 	addi	sp,sp,8
100222bc:	f800283a 	ret
100222c0:	0109c83a 	sub	r4,zero,r4
100222c4:	04000044 	movi	r16,1
100222c8:	000d883a 	mov	r6,zero
100222cc:	283ff20e 	bge	r5,zero,10022298 <__divsi3+0x1c>
100222d0:	014bc83a 	sub	r5,zero,r5
100222d4:	8021003a 	cmpeq	r16,r16,zero
100222d8:	003fef06 	br	10022298 <__divsi3+0x1c>

100222dc <__modsi3>:
100222dc:	deffff04 	addi	sp,sp,-4
100222e0:	dfc00015 	stw	ra,0(sp)
100222e4:	01800044 	movi	r6,1
100222e8:	2807883a 	mov	r3,r5
100222ec:	20000416 	blt	r4,zero,10022300 <__modsi3+0x24>
100222f0:	28000c16 	blt	r5,zero,10022324 <__modsi3+0x48>
100222f4:	dfc00017 	ldw	ra,0(sp)
100222f8:	dec00104 	addi	sp,sp,4
100222fc:	00222001 	jmpi	10022200 <udivmodsi4>
10022300:	0109c83a 	sub	r4,zero,r4
10022304:	28000b16 	blt	r5,zero,10022334 <__modsi3+0x58>
10022308:	180b883a 	mov	r5,r3
1002230c:	01800044 	movi	r6,1
10022310:	00222000 	call	10022200 <udivmodsi4>
10022314:	0085c83a 	sub	r2,zero,r2
10022318:	dfc00017 	ldw	ra,0(sp)
1002231c:	dec00104 	addi	sp,sp,4
10022320:	f800283a 	ret
10022324:	014bc83a 	sub	r5,zero,r5
10022328:	dfc00017 	ldw	ra,0(sp)
1002232c:	dec00104 	addi	sp,sp,4
10022330:	00222001 	jmpi	10022200 <udivmodsi4>
10022334:	0147c83a 	sub	r3,zero,r5
10022338:	003ff306 	br	10022308 <__modsi3+0x2c>

1002233c <__udivsi3>:
1002233c:	000d883a 	mov	r6,zero
10022340:	00222001 	jmpi	10022200 <udivmodsi4>

10022344 <__umodsi3>:
10022344:	01800044 	movi	r6,1
10022348:	00222001 	jmpi	10022200 <udivmodsi4>

1002234c <getc>:
1002234c:	defffd04 	addi	sp,sp,-12
10022350:	dc400115 	stw	r17,4(sp)
10022354:	04400034 	movhi	r17,0
10022358:	8c4b0704 	addi	r17,r17,11292
1002235c:	88c00017 	ldw	r3,0(r17)
10022360:	dc000015 	stw	r16,0(sp)
10022364:	dfc00215 	stw	ra,8(sp)
10022368:	2021883a 	mov	r16,r4
1002236c:	18000326 	beq	r3,zero,1002237c <getc+0x30>
10022370:	18800e17 	ldw	r2,56(r3)
10022374:	1809883a 	mov	r4,r3
10022378:	10000e26 	beq	r2,zero,100223b4 <getc+0x68>
1002237c:	80800117 	ldw	r2,4(r16)
10022380:	800b883a 	mov	r5,r16
10022384:	10bfffc4 	addi	r2,r2,-1
10022388:	80800115 	stw	r2,4(r16)
1002238c:	10000f16 	blt	r2,zero,100223cc <getc+0x80>
10022390:	80c00017 	ldw	r3,0(r16)
10022394:	18800003 	ldbu	r2,0(r3)
10022398:	18c00044 	addi	r3,r3,1
1002239c:	80c00015 	stw	r3,0(r16)
100223a0:	dfc00217 	ldw	ra,8(sp)
100223a4:	dc400117 	ldw	r17,4(sp)
100223a8:	dc000017 	ldw	r16,0(sp)
100223ac:	dec00304 	addi	sp,sp,12
100223b0:	f800283a 	ret
100223b4:	00282e00 	call	100282e0 <__sinit>
100223b8:	80800117 	ldw	r2,4(r16)
100223bc:	800b883a 	mov	r5,r16
100223c0:	10bfffc4 	addi	r2,r2,-1
100223c4:	80800115 	stw	r2,4(r16)
100223c8:	103ff10e 	bge	r2,zero,10022390 <getc+0x44>
100223cc:	89000017 	ldw	r4,0(r17)
100223d0:	dfc00217 	ldw	ra,8(sp)
100223d4:	dc400117 	ldw	r17,4(sp)
100223d8:	dc000017 	ldw	r16,0(sp)
100223dc:	dec00304 	addi	sp,sp,12
100223e0:	0022e401 	jmpi	10022e40 <__srget_r>

100223e4 <_getc_r>:
100223e4:	defffd04 	addi	sp,sp,-12
100223e8:	dc400115 	stw	r17,4(sp)
100223ec:	dc000015 	stw	r16,0(sp)
100223f0:	dfc00215 	stw	ra,8(sp)
100223f4:	2021883a 	mov	r16,r4
100223f8:	2823883a 	mov	r17,r5
100223fc:	20000226 	beq	r4,zero,10022408 <_getc_r+0x24>
10022400:	20800e17 	ldw	r2,56(r4)
10022404:	10000f26 	beq	r2,zero,10022444 <_getc_r+0x60>
10022408:	88800117 	ldw	r2,4(r17)
1002240c:	8009883a 	mov	r4,r16
10022410:	880b883a 	mov	r5,r17
10022414:	10bfffc4 	addi	r2,r2,-1
10022418:	88800115 	stw	r2,4(r17)
1002241c:	10001016 	blt	r2,zero,10022460 <_getc_r+0x7c>
10022420:	88c00017 	ldw	r3,0(r17)
10022424:	18800003 	ldbu	r2,0(r3)
10022428:	18c00044 	addi	r3,r3,1
1002242c:	88c00015 	stw	r3,0(r17)
10022430:	dfc00217 	ldw	ra,8(sp)
10022434:	dc400117 	ldw	r17,4(sp)
10022438:	dc000017 	ldw	r16,0(sp)
1002243c:	dec00304 	addi	sp,sp,12
10022440:	f800283a 	ret
10022444:	00282e00 	call	100282e0 <__sinit>
10022448:	88800117 	ldw	r2,4(r17)
1002244c:	8009883a 	mov	r4,r16
10022450:	880b883a 	mov	r5,r17
10022454:	10bfffc4 	addi	r2,r2,-1
10022458:	88800115 	stw	r2,4(r17)
1002245c:	103ff00e 	bge	r2,zero,10022420 <_getc_r+0x3c>
10022460:	dfc00217 	ldw	ra,8(sp)
10022464:	dc400117 	ldw	r17,4(sp)
10022468:	dc000017 	ldw	r16,0(sp)
1002246c:	dec00304 	addi	sp,sp,12
10022470:	0022e401 	jmpi	10022e40 <__srget_r>

10022474 <free>:
10022474:	00800034 	movhi	r2,0
10022478:	108b0704 	addi	r2,r2,11292
1002247c:	200b883a 	mov	r5,r4
10022480:	11000017 	ldw	r4,0(r2)
10022484:	00288a01 	jmpi	100288a0 <_free_r>

10022488 <malloc>:
10022488:	00800034 	movhi	r2,0
1002248c:	108b0704 	addi	r2,r2,11292
10022490:	200b883a 	mov	r5,r4
10022494:	11000017 	ldw	r4,0(r2)
10022498:	002249c1 	jmpi	1002249c <_malloc_r>

1002249c <_malloc_r>:
1002249c:	defff604 	addi	sp,sp,-40
100224a0:	28c002c4 	addi	r3,r5,11
100224a4:	00800584 	movi	r2,22
100224a8:	dc800215 	stw	r18,8(sp)
100224ac:	dfc00915 	stw	ra,36(sp)
100224b0:	df000815 	stw	fp,32(sp)
100224b4:	ddc00715 	stw	r23,28(sp)
100224b8:	dd800615 	stw	r22,24(sp)
100224bc:	dd400515 	stw	r21,20(sp)
100224c0:	dd000415 	stw	r20,16(sp)
100224c4:	dcc00315 	stw	r19,12(sp)
100224c8:	dc400115 	stw	r17,4(sp)
100224cc:	dc000015 	stw	r16,0(sp)
100224d0:	2025883a 	mov	r18,r4
100224d4:	10c01236 	bltu	r2,r3,10022520 <_malloc_r+0x84>
100224d8:	04400404 	movi	r17,16
100224dc:	8940142e 	bgeu	r17,r5,10022530 <_malloc_r+0x94>
100224e0:	00800304 	movi	r2,12
100224e4:	0007883a 	mov	r3,zero
100224e8:	90800015 	stw	r2,0(r18)
100224ec:	1805883a 	mov	r2,r3
100224f0:	dfc00917 	ldw	ra,36(sp)
100224f4:	df000817 	ldw	fp,32(sp)
100224f8:	ddc00717 	ldw	r23,28(sp)
100224fc:	dd800617 	ldw	r22,24(sp)
10022500:	dd400517 	ldw	r21,20(sp)
10022504:	dd000417 	ldw	r20,16(sp)
10022508:	dcc00317 	ldw	r19,12(sp)
1002250c:	dc800217 	ldw	r18,8(sp)
10022510:	dc400117 	ldw	r17,4(sp)
10022514:	dc000017 	ldw	r16,0(sp)
10022518:	dec00a04 	addi	sp,sp,40
1002251c:	f800283a 	ret
10022520:	00bffe04 	movi	r2,-8
10022524:	18a2703a 	and	r17,r3,r2
10022528:	883fed16 	blt	r17,zero,100224e0 <_malloc_r+0x44>
1002252c:	897fec36 	bltu	r17,r5,100224e0 <_malloc_r+0x44>
10022530:	9009883a 	mov	r4,r18
10022534:	00317d00 	call	100317d0 <__malloc_lock>
10022538:	00807dc4 	movi	r2,503
1002253c:	14402b2e 	bgeu	r2,r17,100225ec <_malloc_r+0x150>
10022540:	8806d27a 	srli	r3,r17,9
10022544:	18003f1e 	bne	r3,zero,10022644 <_malloc_r+0x1a8>
10022548:	880cd0fa 	srli	r6,r17,3
1002254c:	300490fa 	slli	r2,r6,3
10022550:	02c00034 	movhi	r11,0
10022554:	5ac54504 	addi	r11,r11,5396
10022558:	12cb883a 	add	r5,r2,r11
1002255c:	2c000317 	ldw	r16,12(r5)
10022560:	580f883a 	mov	r7,r11
10022564:	2c00041e 	bne	r5,r16,10022578 <_malloc_r+0xdc>
10022568:	00000a06 	br	10022594 <_malloc_r+0xf8>
1002256c:	1800860e 	bge	r3,zero,10022788 <_malloc_r+0x2ec>
10022570:	84000317 	ldw	r16,12(r16)
10022574:	2c000726 	beq	r5,r16,10022594 <_malloc_r+0xf8>
10022578:	80800117 	ldw	r2,4(r16)
1002257c:	00ffff04 	movi	r3,-4
10022580:	10c8703a 	and	r4,r2,r3
10022584:	2447c83a 	sub	r3,r4,r17
10022588:	008003c4 	movi	r2,15
1002258c:	10fff70e 	bge	r2,r3,1002256c <_malloc_r+0xd0>
10022590:	31bfffc4 	addi	r6,r6,-1
10022594:	32400044 	addi	r9,r6,1
10022598:	02800034 	movhi	r10,0
1002259c:	52854704 	addi	r10,r10,5404
100225a0:	54000217 	ldw	r16,8(r10)
100225a4:	8280a026 	beq	r16,r10,10022828 <_malloc_r+0x38c>
100225a8:	80800117 	ldw	r2,4(r16)
100225ac:	00ffff04 	movi	r3,-4
100225b0:	10ca703a 	and	r5,r2,r3
100225b4:	2c4dc83a 	sub	r6,r5,r17
100225b8:	008003c4 	movi	r2,15
100225bc:	11808316 	blt	r2,r6,100227cc <_malloc_r+0x330>
100225c0:	52800315 	stw	r10,12(r10)
100225c4:	52800215 	stw	r10,8(r10)
100225c8:	30002916 	blt	r6,zero,10022670 <_malloc_r+0x1d4>
100225cc:	8147883a 	add	r3,r16,r5
100225d0:	18800117 	ldw	r2,4(r3)
100225d4:	9009883a 	mov	r4,r18
100225d8:	10800054 	ori	r2,r2,1
100225dc:	18800115 	stw	r2,4(r3)
100225e0:	00317d40 	call	100317d4 <__malloc_unlock>
100225e4:	80c00204 	addi	r3,r16,8
100225e8:	003fc006 	br	100224ec <_malloc_r+0x50>
100225ec:	02c00034 	movhi	r11,0
100225f0:	5ac54504 	addi	r11,r11,5396
100225f4:	8ac5883a 	add	r2,r17,r11
100225f8:	14000317 	ldw	r16,12(r2)
100225fc:	580f883a 	mov	r7,r11
10022600:	8806d0fa 	srli	r3,r17,3
10022604:	14006c26 	beq	r2,r16,100227b8 <_malloc_r+0x31c>
10022608:	80c00117 	ldw	r3,4(r16)
1002260c:	00bfff04 	movi	r2,-4
10022610:	81800317 	ldw	r6,12(r16)
10022614:	1886703a 	and	r3,r3,r2
10022618:	80c7883a 	add	r3,r16,r3
1002261c:	18800117 	ldw	r2,4(r3)
10022620:	81400217 	ldw	r5,8(r16)
10022624:	9009883a 	mov	r4,r18
10022628:	10800054 	ori	r2,r2,1
1002262c:	18800115 	stw	r2,4(r3)
10022630:	31400215 	stw	r5,8(r6)
10022634:	29800315 	stw	r6,12(r5)
10022638:	00317d40 	call	100317d4 <__malloc_unlock>
1002263c:	80c00204 	addi	r3,r16,8
10022640:	003faa06 	br	100224ec <_malloc_r+0x50>
10022644:	00800104 	movi	r2,4
10022648:	10c0052e 	bgeu	r2,r3,10022660 <_malloc_r+0x1c4>
1002264c:	00800504 	movi	r2,20
10022650:	10c07836 	bltu	r2,r3,10022834 <_malloc_r+0x398>
10022654:	198016c4 	addi	r6,r3,91
10022658:	300490fa 	slli	r2,r6,3
1002265c:	003fbc06 	br	10022550 <_malloc_r+0xb4>
10022660:	8804d1ba 	srli	r2,r17,6
10022664:	11800e04 	addi	r6,r2,56
10022668:	300490fa 	slli	r2,r6,3
1002266c:	003fb806 	br	10022550 <_malloc_r+0xb4>
10022670:	00807fc4 	movi	r2,511
10022674:	1140bb36 	bltu	r2,r5,10022964 <_malloc_r+0x4c8>
10022678:	2806d0fa 	srli	r3,r5,3
1002267c:	573ffe04 	addi	fp,r10,-8
10022680:	00800044 	movi	r2,1
10022684:	180890fa 	slli	r4,r3,3
10022688:	1807d0ba 	srai	r3,r3,2
1002268c:	e1c00117 	ldw	r7,4(fp)
10022690:	5909883a 	add	r4,r11,r4
10022694:	21400217 	ldw	r5,8(r4)
10022698:	10c4983a 	sll	r2,r2,r3
1002269c:	81000315 	stw	r4,12(r16)
100226a0:	81400215 	stw	r5,8(r16)
100226a4:	388eb03a 	or	r7,r7,r2
100226a8:	2c000315 	stw	r16,12(r5)
100226ac:	24000215 	stw	r16,8(r4)
100226b0:	e1c00115 	stw	r7,4(fp)
100226b4:	4807883a 	mov	r3,r9
100226b8:	4800cd16 	blt	r9,zero,100229f0 <_malloc_r+0x554>
100226bc:	1807d0ba 	srai	r3,r3,2
100226c0:	00800044 	movi	r2,1
100226c4:	10c8983a 	sll	r4,r2,r3
100226c8:	39004436 	bltu	r7,r4,100227dc <_malloc_r+0x340>
100226cc:	21c4703a 	and	r2,r4,r7
100226d0:	10000a1e 	bne	r2,zero,100226fc <_malloc_r+0x260>
100226d4:	2109883a 	add	r4,r4,r4
100226d8:	00bfff04 	movi	r2,-4
100226dc:	4884703a 	and	r2,r9,r2
100226e0:	3906703a 	and	r3,r7,r4
100226e4:	12400104 	addi	r9,r2,4
100226e8:	1800041e 	bne	r3,zero,100226fc <_malloc_r+0x260>
100226ec:	2109883a 	add	r4,r4,r4
100226f0:	3904703a 	and	r2,r7,r4
100226f4:	4a400104 	addi	r9,r9,4
100226f8:	103ffc26 	beq	r2,zero,100226ec <_malloc_r+0x250>
100226fc:	480490fa 	slli	r2,r9,3
10022700:	4819883a 	mov	r12,r9
10022704:	023fff04 	movi	r8,-4
10022708:	589b883a 	add	r13,r11,r2
1002270c:	6807883a 	mov	r3,r13
10022710:	014003c4 	movi	r5,15
10022714:	1c000317 	ldw	r16,12(r3)
10022718:	1c00041e 	bne	r3,r16,1002272c <_malloc_r+0x290>
1002271c:	0000a706 	br	100229bc <_malloc_r+0x520>
10022720:	3000ab0e 	bge	r6,zero,100229d0 <_malloc_r+0x534>
10022724:	84000317 	ldw	r16,12(r16)
10022728:	1c00a426 	beq	r3,r16,100229bc <_malloc_r+0x520>
1002272c:	80800117 	ldw	r2,4(r16)
10022730:	1204703a 	and	r2,r2,r8
10022734:	144dc83a 	sub	r6,r2,r17
10022738:	29bff90e 	bge	r5,r6,10022720 <_malloc_r+0x284>
1002273c:	81000317 	ldw	r4,12(r16)
10022740:	80c00217 	ldw	r3,8(r16)
10022744:	89400054 	ori	r5,r17,1
10022748:	8445883a 	add	r2,r16,r17
1002274c:	20c00215 	stw	r3,8(r4)
10022750:	19000315 	stw	r4,12(r3)
10022754:	81400115 	stw	r5,4(r16)
10022758:	1187883a 	add	r3,r2,r6
1002275c:	31000054 	ori	r4,r6,1
10022760:	50800315 	stw	r2,12(r10)
10022764:	50800215 	stw	r2,8(r10)
10022768:	19800015 	stw	r6,0(r3)
1002276c:	11000115 	stw	r4,4(r2)
10022770:	12800215 	stw	r10,8(r2)
10022774:	12800315 	stw	r10,12(r2)
10022778:	9009883a 	mov	r4,r18
1002277c:	00317d40 	call	100317d4 <__malloc_unlock>
10022780:	80c00204 	addi	r3,r16,8
10022784:	003f5906 	br	100224ec <_malloc_r+0x50>
10022788:	8109883a 	add	r4,r16,r4
1002278c:	20800117 	ldw	r2,4(r4)
10022790:	80c00217 	ldw	r3,8(r16)
10022794:	81400317 	ldw	r5,12(r16)
10022798:	10800054 	ori	r2,r2,1
1002279c:	20800115 	stw	r2,4(r4)
100227a0:	28c00215 	stw	r3,8(r5)
100227a4:	19400315 	stw	r5,12(r3)
100227a8:	9009883a 	mov	r4,r18
100227ac:	00317d40 	call	100317d4 <__malloc_unlock>
100227b0:	80c00204 	addi	r3,r16,8
100227b4:	003f4d06 	br	100224ec <_malloc_r+0x50>
100227b8:	80800204 	addi	r2,r16,8
100227bc:	14000317 	ldw	r16,12(r2)
100227c0:	143f911e 	bne	r2,r16,10022608 <_malloc_r+0x16c>
100227c4:	1a400084 	addi	r9,r3,2
100227c8:	003f7306 	br	10022598 <_malloc_r+0xfc>
100227cc:	88c00054 	ori	r3,r17,1
100227d0:	8445883a 	add	r2,r16,r17
100227d4:	80c00115 	stw	r3,4(r16)
100227d8:	003fdf06 	br	10022758 <_malloc_r+0x2bc>
100227dc:	e4000217 	ldw	r16,8(fp)
100227e0:	00bfff04 	movi	r2,-4
100227e4:	80c00117 	ldw	r3,4(r16)
100227e8:	802d883a 	mov	r22,r16
100227ec:	18aa703a 	and	r21,r3,r2
100227f0:	ac401636 	bltu	r21,r17,1002284c <_malloc_r+0x3b0>
100227f4:	ac49c83a 	sub	r4,r21,r17
100227f8:	008003c4 	movi	r2,15
100227fc:	1100130e 	bge	r2,r4,1002284c <_malloc_r+0x3b0>
10022800:	88800054 	ori	r2,r17,1
10022804:	8447883a 	add	r3,r16,r17
10022808:	80800115 	stw	r2,4(r16)
1002280c:	20800054 	ori	r2,r4,1
10022810:	18800115 	stw	r2,4(r3)
10022814:	e0c00215 	stw	r3,8(fp)
10022818:	9009883a 	mov	r4,r18
1002281c:	00317d40 	call	100317d4 <__malloc_unlock>
10022820:	80c00204 	addi	r3,r16,8
10022824:	003f3106 	br	100224ec <_malloc_r+0x50>
10022828:	39c00117 	ldw	r7,4(r7)
1002282c:	573ffe04 	addi	fp,r10,-8
10022830:	003fa006 	br	100226b4 <_malloc_r+0x218>
10022834:	00801504 	movi	r2,84
10022838:	10c06736 	bltu	r2,r3,100229d8 <_malloc_r+0x53c>
1002283c:	8804d33a 	srli	r2,r17,12
10022840:	11801b84 	addi	r6,r2,110
10022844:	300490fa 	slli	r2,r6,3
10022848:	003f4106 	br	10022550 <_malloc_r+0xb4>
1002284c:	d0a01517 	ldw	r2,-32684(gp)
10022850:	d0e00317 	ldw	r3,-32756(gp)
10022854:	053fffc4 	movi	r20,-1
10022858:	10800404 	addi	r2,r2,16
1002285c:	88a7883a 	add	r19,r17,r2
10022860:	1d000326 	beq	r3,r20,10022870 <_malloc_r+0x3d4>
10022864:	98c3ffc4 	addi	r3,r19,4095
10022868:	00bc0004 	movi	r2,-4096
1002286c:	18a6703a 	and	r19,r3,r2
10022870:	9009883a 	mov	r4,r18
10022874:	980b883a 	mov	r5,r19
10022878:	0022ea00 	call	10022ea0 <_sbrk_r>
1002287c:	1009883a 	mov	r4,r2
10022880:	15000426 	beq	r2,r20,10022894 <_malloc_r+0x3f8>
10022884:	854b883a 	add	r5,r16,r21
10022888:	1029883a 	mov	r20,r2
1002288c:	11405a2e 	bgeu	r2,r5,100229f8 <_malloc_r+0x55c>
10022890:	87000c26 	beq	r16,fp,100228c4 <_malloc_r+0x428>
10022894:	e4000217 	ldw	r16,8(fp)
10022898:	80c00117 	ldw	r3,4(r16)
1002289c:	00bfff04 	movi	r2,-4
100228a0:	1884703a 	and	r2,r3,r2
100228a4:	14400336 	bltu	r2,r17,100228b4 <_malloc_r+0x418>
100228a8:	1449c83a 	sub	r4,r2,r17
100228ac:	008003c4 	movi	r2,15
100228b0:	113fd316 	blt	r2,r4,10022800 <_malloc_r+0x364>
100228b4:	9009883a 	mov	r4,r18
100228b8:	00317d40 	call	100317d4 <__malloc_unlock>
100228bc:	0007883a 	mov	r3,zero
100228c0:	003f0a06 	br	100224ec <_malloc_r+0x50>
100228c4:	05c00034 	movhi	r23,0
100228c8:	bdcb2904 	addi	r23,r23,11428
100228cc:	b8800017 	ldw	r2,0(r23)
100228d0:	988d883a 	add	r6,r19,r2
100228d4:	b9800015 	stw	r6,0(r23)
100228d8:	d0e00317 	ldw	r3,-32756(gp)
100228dc:	00bfffc4 	movi	r2,-1
100228e0:	18808e26 	beq	r3,r2,10022b1c <_malloc_r+0x680>
100228e4:	2145c83a 	sub	r2,r4,r5
100228e8:	3085883a 	add	r2,r6,r2
100228ec:	b8800015 	stw	r2,0(r23)
100228f0:	20c001cc 	andi	r3,r4,7
100228f4:	18005f1e 	bne	r3,zero,10022a74 <_malloc_r+0x5d8>
100228f8:	000b883a 	mov	r5,zero
100228fc:	a4c5883a 	add	r2,r20,r19
10022900:	1083ffcc 	andi	r2,r2,4095
10022904:	00c40004 	movi	r3,4096
10022908:	1887c83a 	sub	r3,r3,r2
1002290c:	28e7883a 	add	r19,r5,r3
10022910:	9009883a 	mov	r4,r18
10022914:	980b883a 	mov	r5,r19
10022918:	0022ea00 	call	10022ea0 <_sbrk_r>
1002291c:	1007883a 	mov	r3,r2
10022920:	00bfffc4 	movi	r2,-1
10022924:	18807a26 	beq	r3,r2,10022b10 <_malloc_r+0x674>
10022928:	1d05c83a 	sub	r2,r3,r20
1002292c:	9885883a 	add	r2,r19,r2
10022930:	10c00054 	ori	r3,r2,1
10022934:	b8800017 	ldw	r2,0(r23)
10022938:	a021883a 	mov	r16,r20
1002293c:	a0c00115 	stw	r3,4(r20)
10022940:	9885883a 	add	r2,r19,r2
10022944:	b8800015 	stw	r2,0(r23)
10022948:	e5000215 	stw	r20,8(fp)
1002294c:	b7003626 	beq	r22,fp,10022a28 <_malloc_r+0x58c>
10022950:	018003c4 	movi	r6,15
10022954:	35404b36 	bltu	r6,r21,10022a84 <_malloc_r+0x5e8>
10022958:	00800044 	movi	r2,1
1002295c:	a0800115 	stw	r2,4(r20)
10022960:	003fcd06 	br	10022898 <_malloc_r+0x3fc>
10022964:	2808d27a 	srli	r4,r5,9
10022968:	2000371e 	bne	r4,zero,10022a48 <_malloc_r+0x5ac>
1002296c:	2808d0fa 	srli	r4,r5,3
10022970:	200690fa 	slli	r3,r4,3
10022974:	1ad1883a 	add	r8,r3,r11
10022978:	41800217 	ldw	r6,8(r8)
1002297c:	41805b26 	beq	r8,r6,10022aec <_malloc_r+0x650>
10022980:	30800117 	ldw	r2,4(r6)
10022984:	00ffff04 	movi	r3,-4
10022988:	10c4703a 	and	r2,r2,r3
1002298c:	2880022e 	bgeu	r5,r2,10022998 <_malloc_r+0x4fc>
10022990:	31800217 	ldw	r6,8(r6)
10022994:	41bffa1e 	bne	r8,r6,10022980 <_malloc_r+0x4e4>
10022998:	32000317 	ldw	r8,12(r6)
1002299c:	39c00117 	ldw	r7,4(r7)
100229a0:	82000315 	stw	r8,12(r16)
100229a4:	81800215 	stw	r6,8(r16)
100229a8:	07000034 	movhi	fp,0
100229ac:	e7054504 	addi	fp,fp,5396
100229b0:	34000315 	stw	r16,12(r6)
100229b4:	44000215 	stw	r16,8(r8)
100229b8:	003f3e06 	br	100226b4 <_malloc_r+0x218>
100229bc:	63000044 	addi	r12,r12,1
100229c0:	608000cc 	andi	r2,r12,3
100229c4:	10005d26 	beq	r2,zero,10022b3c <_malloc_r+0x6a0>
100229c8:	18c00204 	addi	r3,r3,8
100229cc:	003f5106 	br	10022714 <_malloc_r+0x278>
100229d0:	8089883a 	add	r4,r16,r2
100229d4:	003f6d06 	br	1002278c <_malloc_r+0x2f0>
100229d8:	00805504 	movi	r2,340
100229dc:	10c02036 	bltu	r2,r3,10022a60 <_malloc_r+0x5c4>
100229e0:	8804d3fa 	srli	r2,r17,15
100229e4:	11801dc4 	addi	r6,r2,119
100229e8:	300490fa 	slli	r2,r6,3
100229ec:	003ed806 	br	10022550 <_malloc_r+0xb4>
100229f0:	48c000c4 	addi	r3,r9,3
100229f4:	003f3106 	br	100226bc <_malloc_r+0x220>
100229f8:	05c00034 	movhi	r23,0
100229fc:	bdcb2904 	addi	r23,r23,11428
10022a00:	b8800017 	ldw	r2,0(r23)
10022a04:	988d883a 	add	r6,r19,r2
10022a08:	b9800015 	stw	r6,0(r23)
10022a0c:	293fb21e 	bne	r5,r4,100228d8 <_malloc_r+0x43c>
10022a10:	2083ffcc 	andi	r2,r4,4095
10022a14:	103fb01e 	bne	r2,zero,100228d8 <_malloc_r+0x43c>
10022a18:	e4000217 	ldw	r16,8(fp)
10022a1c:	9d45883a 	add	r2,r19,r21
10022a20:	10800054 	ori	r2,r2,1
10022a24:	80800115 	stw	r2,4(r16)
10022a28:	b8c00017 	ldw	r3,0(r23)
10022a2c:	d0a01617 	ldw	r2,-32680(gp)
10022a30:	10c0012e 	bgeu	r2,r3,10022a38 <_malloc_r+0x59c>
10022a34:	d0e01615 	stw	r3,-32680(gp)
10022a38:	d0a01717 	ldw	r2,-32676(gp)
10022a3c:	10ff962e 	bgeu	r2,r3,10022898 <_malloc_r+0x3fc>
10022a40:	d0e01715 	stw	r3,-32676(gp)
10022a44:	003f9406 	br	10022898 <_malloc_r+0x3fc>
10022a48:	00800104 	movi	r2,4
10022a4c:	11001e36 	bltu	r2,r4,10022ac8 <_malloc_r+0x62c>
10022a50:	2804d1ba 	srli	r2,r5,6
10022a54:	11000e04 	addi	r4,r2,56
10022a58:	200690fa 	slli	r3,r4,3
10022a5c:	003fc506 	br	10022974 <_malloc_r+0x4d8>
10022a60:	00815504 	movi	r2,1364
10022a64:	10c01d2e 	bgeu	r2,r3,10022adc <_malloc_r+0x640>
10022a68:	01801f84 	movi	r6,126
10022a6c:	0080fc04 	movi	r2,1008
10022a70:	003eb706 	br	10022550 <_malloc_r+0xb4>
10022a74:	00800204 	movi	r2,8
10022a78:	10cbc83a 	sub	r5,r2,r3
10022a7c:	2169883a 	add	r20,r4,r5
10022a80:	003f9e06 	br	100228fc <_malloc_r+0x460>
10022a84:	00bffe04 	movi	r2,-8
10022a88:	a93ffd04 	addi	r4,r21,-12
10022a8c:	2088703a 	and	r4,r4,r2
10022a90:	b10b883a 	add	r5,r22,r4
10022a94:	00c00144 	movi	r3,5
10022a98:	28c00215 	stw	r3,8(r5)
10022a9c:	28c00115 	stw	r3,4(r5)
10022aa0:	b0800117 	ldw	r2,4(r22)
10022aa4:	1080004c 	andi	r2,r2,1
10022aa8:	2084b03a 	or	r2,r4,r2
10022aac:	b0800115 	stw	r2,4(r22)
10022ab0:	313fdd2e 	bgeu	r6,r4,10022a28 <_malloc_r+0x58c>
10022ab4:	b1400204 	addi	r5,r22,8
10022ab8:	9009883a 	mov	r4,r18
10022abc:	00288a00 	call	100288a0 <_free_r>
10022ac0:	e4000217 	ldw	r16,8(fp)
10022ac4:	003fd806 	br	10022a28 <_malloc_r+0x58c>
10022ac8:	00800504 	movi	r2,20
10022acc:	11001536 	bltu	r2,r4,10022b24 <_malloc_r+0x688>
10022ad0:	210016c4 	addi	r4,r4,91
10022ad4:	200690fa 	slli	r3,r4,3
10022ad8:	003fa606 	br	10022974 <_malloc_r+0x4d8>
10022adc:	8804d4ba 	srli	r2,r17,18
10022ae0:	11801f04 	addi	r6,r2,124
10022ae4:	300490fa 	slli	r2,r6,3
10022ae8:	003e9906 	br	10022550 <_malloc_r+0xb4>
10022aec:	2009d0ba 	srai	r4,r4,2
10022af0:	01400034 	movhi	r5,0
10022af4:	29454504 	addi	r5,r5,5396
10022af8:	00c00044 	movi	r3,1
10022afc:	28800117 	ldw	r2,4(r5)
10022b00:	1906983a 	sll	r3,r3,r4
10022b04:	10c4b03a 	or	r2,r2,r3
10022b08:	28800115 	stw	r2,4(r5)
10022b0c:	003fa306 	br	1002299c <_malloc_r+0x500>
10022b10:	0027883a 	mov	r19,zero
10022b14:	00c00044 	movi	r3,1
10022b18:	003f8606 	br	10022934 <_malloc_r+0x498>
10022b1c:	d1200315 	stw	r4,-32756(gp)
10022b20:	003f7306 	br	100228f0 <_malloc_r+0x454>
10022b24:	00801504 	movi	r2,84
10022b28:	11001936 	bltu	r2,r4,10022b90 <_malloc_r+0x6f4>
10022b2c:	2804d33a 	srli	r2,r5,12
10022b30:	11001b84 	addi	r4,r2,110
10022b34:	200690fa 	slli	r3,r4,3
10022b38:	003f8e06 	br	10022974 <_malloc_r+0x4d8>
10022b3c:	480b883a 	mov	r5,r9
10022b40:	6807883a 	mov	r3,r13
10022b44:	288000cc 	andi	r2,r5,3
10022b48:	18fffe04 	addi	r3,r3,-8
10022b4c:	297fffc4 	addi	r5,r5,-1
10022b50:	10001526 	beq	r2,zero,10022ba8 <_malloc_r+0x70c>
10022b54:	18800217 	ldw	r2,8(r3)
10022b58:	10fffa26 	beq	r2,r3,10022b44 <_malloc_r+0x6a8>
10022b5c:	2109883a 	add	r4,r4,r4
10022b60:	393f1e36 	bltu	r7,r4,100227dc <_malloc_r+0x340>
10022b64:	203f1d26 	beq	r4,zero,100227dc <_malloc_r+0x340>
10022b68:	21c4703a 	and	r2,r4,r7
10022b6c:	10000226 	beq	r2,zero,10022b78 <_malloc_r+0x6dc>
10022b70:	6013883a 	mov	r9,r12
10022b74:	003ee106 	br	100226fc <_malloc_r+0x260>
10022b78:	2109883a 	add	r4,r4,r4
10022b7c:	3904703a 	and	r2,r7,r4
10022b80:	63000104 	addi	r12,r12,4
10022b84:	103ffc26 	beq	r2,zero,10022b78 <_malloc_r+0x6dc>
10022b88:	6013883a 	mov	r9,r12
10022b8c:	003edb06 	br	100226fc <_malloc_r+0x260>
10022b90:	00805504 	movi	r2,340
10022b94:	11000836 	bltu	r2,r4,10022bb8 <_malloc_r+0x71c>
10022b98:	2804d3fa 	srli	r2,r5,15
10022b9c:	11001dc4 	addi	r4,r2,119
10022ba0:	200690fa 	slli	r3,r4,3
10022ba4:	003f7306 	br	10022974 <_malloc_r+0x4d8>
10022ba8:	0104303a 	nor	r2,zero,r4
10022bac:	388e703a 	and	r7,r7,r2
10022bb0:	e1c00115 	stw	r7,4(fp)
10022bb4:	003fe906 	br	10022b5c <_malloc_r+0x6c0>
10022bb8:	00815504 	movi	r2,1364
10022bbc:	1100032e 	bgeu	r2,r4,10022bcc <_malloc_r+0x730>
10022bc0:	01001f84 	movi	r4,126
10022bc4:	00c0fc04 	movi	r3,1008
10022bc8:	003f6a06 	br	10022974 <_malloc_r+0x4d8>
10022bcc:	2804d4ba 	srli	r2,r5,18
10022bd0:	11001f04 	addi	r4,r2,124
10022bd4:	200690fa 	slli	r3,r4,3
10022bd8:	003f6606 	br	10022974 <_malloc_r+0x4d8>

10022bdc <memcmp>:
10022bdc:	00c000c4 	movi	r3,3
10022be0:	1980032e 	bgeu	r3,r6,10022bf0 <memcmp+0x14>
10022be4:	2144b03a 	or	r2,r4,r5
10022be8:	10c4703a 	and	r2,r2,r3
10022bec:	10000f26 	beq	r2,zero,10022c2c <memcmp+0x50>
10022bf0:	31ffffc4 	addi	r7,r6,-1
10022bf4:	3000061e 	bne	r6,zero,10022c10 <memcmp+0x34>
10022bf8:	00000a06 	br	10022c24 <memcmp+0x48>
10022bfc:	39ffffc4 	addi	r7,r7,-1
10022c00:	00bfffc4 	movi	r2,-1
10022c04:	21000044 	addi	r4,r4,1
10022c08:	29400044 	addi	r5,r5,1
10022c0c:	38800526 	beq	r7,r2,10022c24 <memcmp+0x48>
10022c10:	20c00003 	ldbu	r3,0(r4)
10022c14:	28800003 	ldbu	r2,0(r5)
10022c18:	18bff826 	beq	r3,r2,10022bfc <memcmp+0x20>
10022c1c:	1885c83a 	sub	r2,r3,r2
10022c20:	f800283a 	ret
10022c24:	0005883a 	mov	r2,zero
10022c28:	f800283a 	ret
10022c2c:	180f883a 	mov	r7,r3
10022c30:	20c00017 	ldw	r3,0(r4)
10022c34:	28800017 	ldw	r2,0(r5)
10022c38:	18bfed1e 	bne	r3,r2,10022bf0 <memcmp+0x14>
10022c3c:	31bfff04 	addi	r6,r6,-4
10022c40:	21000104 	addi	r4,r4,4
10022c44:	29400104 	addi	r5,r5,4
10022c48:	39bff936 	bltu	r7,r6,10022c30 <memcmp+0x54>
10022c4c:	003fe806 	br	10022bf0 <memcmp+0x14>

10022c50 <memcpy>:
10022c50:	01c003c4 	movi	r7,15
10022c54:	2007883a 	mov	r3,r4
10022c58:	3980032e 	bgeu	r7,r6,10022c68 <memcpy+0x18>
10022c5c:	2904b03a 	or	r2,r5,r4
10022c60:	108000cc 	andi	r2,r2,3
10022c64:	10000926 	beq	r2,zero,10022c8c <memcpy+0x3c>
10022c68:	30000626 	beq	r6,zero,10022c84 <memcpy+0x34>
10022c6c:	30cd883a 	add	r6,r6,r3
10022c70:	28800003 	ldbu	r2,0(r5)
10022c74:	29400044 	addi	r5,r5,1
10022c78:	18800005 	stb	r2,0(r3)
10022c7c:	18c00044 	addi	r3,r3,1
10022c80:	30fffb1e 	bne	r6,r3,10022c70 <memcpy+0x20>
10022c84:	2005883a 	mov	r2,r4
10022c88:	f800283a 	ret
10022c8c:	3811883a 	mov	r8,r7
10022c90:	200f883a 	mov	r7,r4
10022c94:	28c00017 	ldw	r3,0(r5)
10022c98:	31bffc04 	addi	r6,r6,-16
10022c9c:	38c00015 	stw	r3,0(r7)
10022ca0:	28800117 	ldw	r2,4(r5)
10022ca4:	38800115 	stw	r2,4(r7)
10022ca8:	28c00217 	ldw	r3,8(r5)
10022cac:	38c00215 	stw	r3,8(r7)
10022cb0:	28800317 	ldw	r2,12(r5)
10022cb4:	29400404 	addi	r5,r5,16
10022cb8:	38800315 	stw	r2,12(r7)
10022cbc:	39c00404 	addi	r7,r7,16
10022cc0:	41bff436 	bltu	r8,r6,10022c94 <memcpy+0x44>
10022cc4:	008000c4 	movi	r2,3
10022cc8:	1180072e 	bgeu	r2,r6,10022ce8 <memcpy+0x98>
10022ccc:	1007883a 	mov	r3,r2
10022cd0:	28800017 	ldw	r2,0(r5)
10022cd4:	31bfff04 	addi	r6,r6,-4
10022cd8:	29400104 	addi	r5,r5,4
10022cdc:	38800015 	stw	r2,0(r7)
10022ce0:	39c00104 	addi	r7,r7,4
10022ce4:	19bffa36 	bltu	r3,r6,10022cd0 <memcpy+0x80>
10022ce8:	3807883a 	mov	r3,r7
10022cec:	003fde06 	br	10022c68 <memcpy+0x18>

10022cf0 <printf>:
10022cf0:	defffb04 	addi	sp,sp,-20
10022cf4:	dfc00115 	stw	ra,4(sp)
10022cf8:	d9400215 	stw	r5,8(sp)
10022cfc:	d9800315 	stw	r6,12(sp)
10022d00:	d9c00415 	stw	r7,16(sp)
10022d04:	00800034 	movhi	r2,0
10022d08:	108b0704 	addi	r2,r2,11292
10022d0c:	10c00017 	ldw	r3,0(r2)
10022d10:	200b883a 	mov	r5,r4
10022d14:	d8800204 	addi	r2,sp,8
10022d18:	19000217 	ldw	r4,8(r3)
10022d1c:	100d883a 	mov	r6,r2
10022d20:	d8800015 	stw	r2,0(sp)
10022d24:	0024f9c0 	call	10024f9c <__vfprintf_internal>
10022d28:	dfc00117 	ldw	ra,4(sp)
10022d2c:	dec00504 	addi	sp,sp,20
10022d30:	f800283a 	ret

10022d34 <_printf_r>:
10022d34:	defffc04 	addi	sp,sp,-16
10022d38:	dfc00115 	stw	ra,4(sp)
10022d3c:	d9800215 	stw	r6,8(sp)
10022d40:	d9c00315 	stw	r7,12(sp)
10022d44:	280d883a 	mov	r6,r5
10022d48:	21400217 	ldw	r5,8(r4)
10022d4c:	d8c00204 	addi	r3,sp,8
10022d50:	180f883a 	mov	r7,r3
10022d54:	d8c00015 	stw	r3,0(sp)
10022d58:	00230f00 	call	100230f0 <___vfprintf_internal_r>
10022d5c:	dfc00117 	ldw	ra,4(sp)
10022d60:	dec00404 	addi	sp,sp,16
10022d64:	f800283a 	ret

10022d68 <putchar>:
10022d68:	00800034 	movhi	r2,0
10022d6c:	108b0704 	addi	r2,r2,11292
10022d70:	11800017 	ldw	r6,0(r2)
10022d74:	200b883a 	mov	r5,r4
10022d78:	3009883a 	mov	r4,r6
10022d7c:	31800217 	ldw	r6,8(r6)
10022d80:	002a8a81 	jmpi	1002a8a8 <_putc_r>

10022d84 <_putchar_r>:
10022d84:	21800217 	ldw	r6,8(r4)
10022d88:	002a8a81 	jmpi	1002a8a8 <_putc_r>

10022d8c <_puts_r>:
10022d8c:	defff604 	addi	sp,sp,-40
10022d90:	dc400715 	stw	r17,28(sp)
10022d94:	2023883a 	mov	r17,r4
10022d98:	2809883a 	mov	r4,r5
10022d9c:	dfc00915 	stw	ra,36(sp)
10022da0:	dcc00815 	stw	r19,32(sp)
10022da4:	2827883a 	mov	r19,r5
10022da8:	00230240 	call	10023024 <strlen>
10022dac:	89400217 	ldw	r5,8(r17)
10022db0:	00c00034 	movhi	r3,0
10022db4:	18c2b804 	addi	r3,r3,2784
10022db8:	01c00044 	movi	r7,1
10022dbc:	12000044 	addi	r8,r2,1
10022dc0:	d8c00515 	stw	r3,20(sp)
10022dc4:	d9c00615 	stw	r7,24(sp)
10022dc8:	d8c00304 	addi	r3,sp,12
10022dcc:	01c00084 	movi	r7,2
10022dd0:	8809883a 	mov	r4,r17
10022dd4:	d80d883a 	mov	r6,sp
10022dd8:	d8c00015 	stw	r3,0(sp)
10022ddc:	dcc00315 	stw	r19,12(sp)
10022de0:	da000215 	stw	r8,8(sp)
10022de4:	d9c00115 	stw	r7,4(sp)
10022de8:	d8800415 	stw	r2,16(sp)
10022dec:	0028bb40 	call	10028bb4 <__sfvwrite_r>
10022df0:	00ffffc4 	movi	r3,-1
10022df4:	10000626 	beq	r2,zero,10022e10 <_puts_r+0x84>
10022df8:	1805883a 	mov	r2,r3
10022dfc:	dfc00917 	ldw	ra,36(sp)
10022e00:	dcc00817 	ldw	r19,32(sp)
10022e04:	dc400717 	ldw	r17,28(sp)
10022e08:	dec00a04 	addi	sp,sp,40
10022e0c:	f800283a 	ret
10022e10:	00c00284 	movi	r3,10
10022e14:	1805883a 	mov	r2,r3
10022e18:	dfc00917 	ldw	ra,36(sp)
10022e1c:	dcc00817 	ldw	r19,32(sp)
10022e20:	dc400717 	ldw	r17,28(sp)
10022e24:	dec00a04 	addi	sp,sp,40
10022e28:	f800283a 	ret

10022e2c <puts>:
10022e2c:	00800034 	movhi	r2,0
10022e30:	108b0704 	addi	r2,r2,11292
10022e34:	200b883a 	mov	r5,r4
10022e38:	11000017 	ldw	r4,0(r2)
10022e3c:	0022d8c1 	jmpi	10022d8c <_puts_r>

10022e40 <__srget_r>:
10022e40:	defffe04 	addi	sp,sp,-8
10022e44:	dc000015 	stw	r16,0(sp)
10022e48:	dfc00115 	stw	ra,4(sp)
10022e4c:	2821883a 	mov	r16,r5
10022e50:	002af840 	call	1002af84 <__srefill_r>
10022e54:	013fffc4 	movi	r4,-1
10022e58:	1000071e 	bne	r2,zero,10022e78 <__srget_r+0x38>
10022e5c:	80800117 	ldw	r2,4(r16)
10022e60:	81000017 	ldw	r4,0(r16)
10022e64:	10bfffc4 	addi	r2,r2,-1
10022e68:	20c00044 	addi	r3,r4,1
10022e6c:	80800115 	stw	r2,4(r16)
10022e70:	21000003 	ldbu	r4,0(r4)
10022e74:	80c00015 	stw	r3,0(r16)
10022e78:	2005883a 	mov	r2,r4
10022e7c:	dfc00117 	ldw	ra,4(sp)
10022e80:	dc000017 	ldw	r16,0(sp)
10022e84:	dec00204 	addi	sp,sp,8
10022e88:	f800283a 	ret

10022e8c <__srget>:
10022e8c:	00800034 	movhi	r2,0
10022e90:	108b0704 	addi	r2,r2,11292
10022e94:	200b883a 	mov	r5,r4
10022e98:	11000017 	ldw	r4,0(r2)
10022e9c:	0022e401 	jmpi	10022e40 <__srget_r>

10022ea0 <_sbrk_r>:
10022ea0:	defffd04 	addi	sp,sp,-12
10022ea4:	dc000015 	stw	r16,0(sp)
10022ea8:	04000034 	movhi	r16,0
10022eac:	840b1f04 	addi	r16,r16,11388
10022eb0:	dc400115 	stw	r17,4(sp)
10022eb4:	80000015 	stw	zero,0(r16)
10022eb8:	2023883a 	mov	r17,r4
10022ebc:	2809883a 	mov	r4,r5
10022ec0:	dfc00215 	stw	ra,8(sp)
10022ec4:	00319180 	call	10031918 <sbrk>
10022ec8:	1007883a 	mov	r3,r2
10022ecc:	00bfffc4 	movi	r2,-1
10022ed0:	18800626 	beq	r3,r2,10022eec <_sbrk_r+0x4c>
10022ed4:	1805883a 	mov	r2,r3
10022ed8:	dfc00217 	ldw	ra,8(sp)
10022edc:	dc400117 	ldw	r17,4(sp)
10022ee0:	dc000017 	ldw	r16,0(sp)
10022ee4:	dec00304 	addi	sp,sp,12
10022ee8:	f800283a 	ret
10022eec:	80800017 	ldw	r2,0(r16)
10022ef0:	103ff826 	beq	r2,zero,10022ed4 <_sbrk_r+0x34>
10022ef4:	88800015 	stw	r2,0(r17)
10022ef8:	1805883a 	mov	r2,r3
10022efc:	dfc00217 	ldw	ra,8(sp)
10022f00:	dc400117 	ldw	r17,4(sp)
10022f04:	dc000017 	ldw	r16,0(sp)
10022f08:	dec00304 	addi	sp,sp,12
10022f0c:	f800283a 	ret

10022f10 <eofread>:
10022f10:	0005883a 	mov	r2,zero
10022f14:	f800283a 	ret

10022f18 <_sscanf_r>:
10022f18:	deffe404 	addi	sp,sp,-112
10022f1c:	dcc01915 	stw	r19,100(sp)
10022f20:	2027883a 	mov	r19,r4
10022f24:	dfc01a15 	stw	ra,104(sp)
10022f28:	dc401815 	stw	r17,96(sp)
10022f2c:	d9c01b15 	stw	r7,108(sp)
10022f30:	00808104 	movi	r2,516
10022f34:	2809883a 	mov	r4,r5
10022f38:	3023883a 	mov	r17,r6
10022f3c:	d9400115 	stw	r5,4(sp)
10022f40:	d9400515 	stw	r5,20(sp)
10022f44:	d880040d 	sth	r2,16(sp)
10022f48:	00230240 	call	10023024 <strlen>
10022f4c:	d8c01b04 	addi	r3,sp,108
10022f50:	d8c00015 	stw	r3,0(sp)
10022f54:	180f883a 	mov	r7,r3
10022f58:	023fffc4 	movi	r8,-1
10022f5c:	00c400b4 	movhi	r3,4098
10022f60:	18cbc404 	addi	r3,r3,12048
10022f64:	9809883a 	mov	r4,r19
10022f68:	880d883a 	mov	r6,r17
10022f6c:	d9400104 	addi	r5,sp,4
10022f70:	d8800615 	stw	r2,24(sp)
10022f74:	d8c00915 	stw	r3,36(sp)
10022f78:	da00048d 	sth	r8,18(sp)
10022f7c:	d8800215 	stw	r2,8(sp)
10022f80:	d8000d15 	stw	zero,52(sp)
10022f84:	d8001215 	stw	zero,72(sp)
10022f88:	0024fc00 	call	10024fc0 <__svfscanf_r>
10022f8c:	dfc01a17 	ldw	ra,104(sp)
10022f90:	dcc01917 	ldw	r19,100(sp)
10022f94:	dc401817 	ldw	r17,96(sp)
10022f98:	dec01c04 	addi	sp,sp,112
10022f9c:	f800283a 	ret

10022fa0 <sscanf>:
10022fa0:	deffe404 	addi	sp,sp,-112
10022fa4:	dfc01915 	stw	ra,100(sp)
10022fa8:	dc401815 	stw	r17,96(sp)
10022fac:	d9801a15 	stw	r6,104(sp)
10022fb0:	d9c01b15 	stw	r7,108(sp)
10022fb4:	00808104 	movi	r2,516
10022fb8:	2823883a 	mov	r17,r5
10022fbc:	d9000515 	stw	r4,20(sp)
10022fc0:	d9000115 	stw	r4,4(sp)
10022fc4:	d880040d 	sth	r2,16(sp)
10022fc8:	00230240 	call	10023024 <strlen>
10022fcc:	d8c01a04 	addi	r3,sp,104
10022fd0:	d8c00015 	stw	r3,0(sp)
10022fd4:	00c00034 	movhi	r3,0
10022fd8:	18cb0704 	addi	r3,r3,11292
10022fdc:	19000017 	ldw	r4,0(r3)
10022fe0:	d9c00017 	ldw	r7,0(sp)
10022fe4:	00c400b4 	movhi	r3,4098
10022fe8:	18cbc404 	addi	r3,r3,12048
10022fec:	023fffc4 	movi	r8,-1
10022ff0:	880d883a 	mov	r6,r17
10022ff4:	d9400104 	addi	r5,sp,4
10022ff8:	d8800615 	stw	r2,24(sp)
10022ffc:	d8c00915 	stw	r3,36(sp)
10023000:	da00048d 	sth	r8,18(sp)
10023004:	d8800215 	stw	r2,8(sp)
10023008:	d8000d15 	stw	zero,52(sp)
1002300c:	d8001215 	stw	zero,72(sp)
10023010:	0024fc00 	call	10024fc0 <__svfscanf_r>
10023014:	dfc01917 	ldw	ra,100(sp)
10023018:	dc401817 	ldw	r17,96(sp)
1002301c:	dec01c04 	addi	sp,sp,112
10023020:	f800283a 	ret

10023024 <strlen>:
10023024:	208000cc 	andi	r2,r4,3
10023028:	2011883a 	mov	r8,r4
1002302c:	1000161e 	bne	r2,zero,10023088 <strlen+0x64>
10023030:	20c00017 	ldw	r3,0(r4)
10023034:	017fbff4 	movhi	r5,65279
10023038:	297fbfc4 	addi	r5,r5,-257
1002303c:	01e02074 	movhi	r7,32897
10023040:	39e02004 	addi	r7,r7,-32640
10023044:	1945883a 	add	r2,r3,r5
10023048:	11c4703a 	and	r2,r2,r7
1002304c:	00c6303a 	nor	r3,zero,r3
10023050:	1886703a 	and	r3,r3,r2
10023054:	18000c1e 	bne	r3,zero,10023088 <strlen+0x64>
10023058:	280d883a 	mov	r6,r5
1002305c:	380b883a 	mov	r5,r7
10023060:	21000104 	addi	r4,r4,4
10023064:	20800017 	ldw	r2,0(r4)
10023068:	1187883a 	add	r3,r2,r6
1002306c:	1946703a 	and	r3,r3,r5
10023070:	0084303a 	nor	r2,zero,r2
10023074:	10c4703a 	and	r2,r2,r3
10023078:	103ff926 	beq	r2,zero,10023060 <strlen+0x3c>
1002307c:	20800007 	ldb	r2,0(r4)
10023080:	10000326 	beq	r2,zero,10023090 <strlen+0x6c>
10023084:	21000044 	addi	r4,r4,1
10023088:	20800007 	ldb	r2,0(r4)
1002308c:	103ffd1e 	bne	r2,zero,10023084 <strlen+0x60>
10023090:	2205c83a 	sub	r2,r4,r8
10023094:	f800283a 	ret

10023098 <__sprint_r>:
10023098:	30800217 	ldw	r2,8(r6)
1002309c:	defffe04 	addi	sp,sp,-8
100230a0:	dc000015 	stw	r16,0(sp)
100230a4:	dfc00115 	stw	ra,4(sp)
100230a8:	3021883a 	mov	r16,r6
100230ac:	0007883a 	mov	r3,zero
100230b0:	1000061e 	bne	r2,zero,100230cc <__sprint_r+0x34>
100230b4:	1805883a 	mov	r2,r3
100230b8:	30000115 	stw	zero,4(r6)
100230bc:	dfc00117 	ldw	ra,4(sp)
100230c0:	dc000017 	ldw	r16,0(sp)
100230c4:	dec00204 	addi	sp,sp,8
100230c8:	f800283a 	ret
100230cc:	0028bb40 	call	10028bb4 <__sfvwrite_r>
100230d0:	1007883a 	mov	r3,r2
100230d4:	1805883a 	mov	r2,r3
100230d8:	80000115 	stw	zero,4(r16)
100230dc:	80000215 	stw	zero,8(r16)
100230e0:	dfc00117 	ldw	ra,4(sp)
100230e4:	dc000017 	ldw	r16,0(sp)
100230e8:	dec00204 	addi	sp,sp,8
100230ec:	f800283a 	ret

100230f0 <___vfprintf_internal_r>:
100230f0:	defea404 	addi	sp,sp,-1392
100230f4:	dd815815 	stw	r22,1376(sp)
100230f8:	dc015215 	stw	r16,1352(sp)
100230fc:	d9c15115 	stw	r7,1348(sp)
10023100:	dfc15b15 	stw	ra,1388(sp)
10023104:	df015a15 	stw	fp,1384(sp)
10023108:	ddc15915 	stw	r23,1380(sp)
1002310c:	dd415715 	stw	r21,1372(sp)
10023110:	dd015615 	stw	r20,1368(sp)
10023114:	dcc15515 	stw	r19,1364(sp)
10023118:	dc815415 	stw	r18,1360(sp)
1002311c:	dc415315 	stw	r17,1356(sp)
10023120:	282d883a 	mov	r22,r5
10023124:	3021883a 	mov	r16,r6
10023128:	d9014f15 	stw	r4,1340(sp)
1002312c:	00292040 	call	10029204 <_localeconv_r>
10023130:	10800017 	ldw	r2,0(r2)
10023134:	d9c15117 	ldw	r7,1348(sp)
10023138:	d8814915 	stw	r2,1316(sp)
1002313c:	d8814f17 	ldw	r2,1340(sp)
10023140:	10000226 	beq	r2,zero,1002314c <___vfprintf_internal_r+0x5c>
10023144:	10800e17 	ldw	r2,56(r2)
10023148:	10020d26 	beq	r2,zero,10023980 <___vfprintf_internal_r+0x890>
1002314c:	b080030b 	ldhu	r2,12(r22)
10023150:	1080020c 	andi	r2,r2,8
10023154:	10020e26 	beq	r2,zero,10023990 <___vfprintf_internal_r+0x8a0>
10023158:	b0800417 	ldw	r2,16(r22)
1002315c:	10020c26 	beq	r2,zero,10023990 <___vfprintf_internal_r+0x8a0>
10023160:	b200030b 	ldhu	r8,12(r22)
10023164:	00800284 	movi	r2,10
10023168:	40c0068c 	andi	r3,r8,26
1002316c:	18802f1e 	bne	r3,r2,1002322c <___vfprintf_internal_r+0x13c>
10023170:	b080038f 	ldh	r2,14(r22)
10023174:	10002d16 	blt	r2,zero,1002322c <___vfprintf_internal_r+0x13c>
10023178:	b240038b 	ldhu	r9,14(r22)
1002317c:	b2800717 	ldw	r10,28(r22)
10023180:	b2c00917 	ldw	r11,36(r22)
10023184:	d9014f17 	ldw	r4,1340(sp)
10023188:	dc402904 	addi	r17,sp,164
1002318c:	d8804004 	addi	r2,sp,256
10023190:	00c10004 	movi	r3,1024
10023194:	423fff4c 	andi	r8,r8,65533
10023198:	800d883a 	mov	r6,r16
1002319c:	880b883a 	mov	r5,r17
100231a0:	da002c0d 	sth	r8,176(sp)
100231a4:	da402c8d 	sth	r9,178(sp)
100231a8:	da803015 	stw	r10,192(sp)
100231ac:	dac03215 	stw	r11,200(sp)
100231b0:	d8802d15 	stw	r2,180(sp)
100231b4:	d8c02e15 	stw	r3,184(sp)
100231b8:	d8802915 	stw	r2,164(sp)
100231bc:	d8c02b15 	stw	r3,172(sp)
100231c0:	d8002f15 	stw	zero,188(sp)
100231c4:	00230f00 	call	100230f0 <___vfprintf_internal_r>
100231c8:	d8814b15 	stw	r2,1324(sp)
100231cc:	10000416 	blt	r2,zero,100231e0 <___vfprintf_internal_r+0xf0>
100231d0:	d9014f17 	ldw	r4,1340(sp)
100231d4:	880b883a 	mov	r5,r17
100231d8:	00280480 	call	10028048 <_fflush_r>
100231dc:	1002321e 	bne	r2,zero,10023aa8 <___vfprintf_internal_r+0x9b8>
100231e0:	d8802c0b 	ldhu	r2,176(sp)
100231e4:	1080100c 	andi	r2,r2,64
100231e8:	10000326 	beq	r2,zero,100231f8 <___vfprintf_internal_r+0x108>
100231ec:	b080030b 	ldhu	r2,12(r22)
100231f0:	10801014 	ori	r2,r2,64
100231f4:	b080030d 	sth	r2,12(r22)
100231f8:	d8814b17 	ldw	r2,1324(sp)
100231fc:	dfc15b17 	ldw	ra,1388(sp)
10023200:	df015a17 	ldw	fp,1384(sp)
10023204:	ddc15917 	ldw	r23,1380(sp)
10023208:	dd815817 	ldw	r22,1376(sp)
1002320c:	dd415717 	ldw	r21,1372(sp)
10023210:	dd015617 	ldw	r20,1368(sp)
10023214:	dcc15517 	ldw	r19,1364(sp)
10023218:	dc815417 	ldw	r18,1360(sp)
1002321c:	dc415317 	ldw	r17,1356(sp)
10023220:	dc015217 	ldw	r16,1352(sp)
10023224:	dec15c04 	addi	sp,sp,1392
10023228:	f800283a 	ret
1002322c:	0005883a 	mov	r2,zero
10023230:	0007883a 	mov	r3,zero
10023234:	dd401904 	addi	r21,sp,100
10023238:	d8814215 	stw	r2,1288(sp)
1002323c:	802f883a 	mov	r23,r16
10023240:	d8c14315 	stw	r3,1292(sp)
10023244:	d8014b15 	stw	zero,1324(sp)
10023248:	d8014815 	stw	zero,1312(sp)
1002324c:	d8014415 	stw	zero,1296(sp)
10023250:	d8014715 	stw	zero,1308(sp)
10023254:	dd400c15 	stw	r21,48(sp)
10023258:	d8000e15 	stw	zero,56(sp)
1002325c:	d8000d15 	stw	zero,52(sp)
10023260:	b8800007 	ldb	r2,0(r23)
10023264:	10001926 	beq	r2,zero,100232cc <___vfprintf_internal_r+0x1dc>
10023268:	00c00944 	movi	r3,37
1002326c:	10c01726 	beq	r2,r3,100232cc <___vfprintf_internal_r+0x1dc>
10023270:	b821883a 	mov	r16,r23
10023274:	00000106 	br	1002327c <___vfprintf_internal_r+0x18c>
10023278:	10c00326 	beq	r2,r3,10023288 <___vfprintf_internal_r+0x198>
1002327c:	84000044 	addi	r16,r16,1
10023280:	80800007 	ldb	r2,0(r16)
10023284:	103ffc1e 	bne	r2,zero,10023278 <___vfprintf_internal_r+0x188>
10023288:	85e7c83a 	sub	r19,r16,r23
1002328c:	98000e26 	beq	r19,zero,100232c8 <___vfprintf_internal_r+0x1d8>
10023290:	dc800e17 	ldw	r18,56(sp)
10023294:	dc400d17 	ldw	r17,52(sp)
10023298:	008001c4 	movi	r2,7
1002329c:	94e5883a 	add	r18,r18,r19
100232a0:	8c400044 	addi	r17,r17,1
100232a4:	adc00015 	stw	r23,0(r21)
100232a8:	dc800e15 	stw	r18,56(sp)
100232ac:	acc00115 	stw	r19,4(r21)
100232b0:	dc400d15 	stw	r17,52(sp)
100232b4:	14428b16 	blt	r2,r17,10023ce4 <___vfprintf_internal_r+0xbf4>
100232b8:	ad400204 	addi	r21,r21,8
100232bc:	d9014b17 	ldw	r4,1324(sp)
100232c0:	24c9883a 	add	r4,r4,r19
100232c4:	d9014b15 	stw	r4,1324(sp)
100232c8:	802f883a 	mov	r23,r16
100232cc:	b8800007 	ldb	r2,0(r23)
100232d0:	10013c26 	beq	r2,zero,100237c4 <___vfprintf_internal_r+0x6d4>
100232d4:	bdc00044 	addi	r23,r23,1
100232d8:	d8000405 	stb	zero,16(sp)
100232dc:	b8c00007 	ldb	r3,0(r23)
100232e0:	04ffffc4 	movi	r19,-1
100232e4:	d8014c15 	stw	zero,1328(sp)
100232e8:	d8014a15 	stw	zero,1320(sp)
100232ec:	d8c14d15 	stw	r3,1332(sp)
100232f0:	bdc00044 	addi	r23,r23,1
100232f4:	d9414d17 	ldw	r5,1332(sp)
100232f8:	00801604 	movi	r2,88
100232fc:	28fff804 	addi	r3,r5,-32
10023300:	10c06036 	bltu	r2,r3,10023484 <___vfprintf_internal_r+0x394>
10023304:	18c5883a 	add	r2,r3,r3
10023308:	1085883a 	add	r2,r2,r2
1002330c:	00c400b4 	movhi	r3,4098
10023310:	18ccc804 	addi	r3,r3,13088
10023314:	10c5883a 	add	r2,r2,r3
10023318:	11000017 	ldw	r4,0(r2)
1002331c:	2000683a 	jmp	r4
10023320:	10024294 	ori	zero,r2,2314
10023324:	10023484 	addi	zero,r2,2258
10023328:	10023484 	addi	zero,r2,2258
1002332c:	10024280 	call	11002428 <__flash_rwdata_start+0xfce20c>
10023330:	10023484 	addi	zero,r2,2258
10023334:	10023484 	addi	zero,r2,2258
10023338:	10023484 	addi	zero,r2,2258
1002333c:	10023484 	addi	zero,r2,2258
10023340:	10023484 	addi	zero,r2,2258
10023344:	10023484 	addi	zero,r2,2258
10023348:	10024060 	cmpeqi	zero,r2,2305
1002334c:	10024270 	cmpltui	zero,r2,2313
10023350:	10023484 	addi	zero,r2,2258
10023354:	10024078 	rdprs	zero,r2,2305
10023358:	1002430c 	andi	zero,r2,2316
1002335c:	10023484 	addi	zero,r2,2258
10023360:	100242f8 	rdprs	zero,r2,2315
10023364:	100242c0 	call	1100242c <__flash_rwdata_start+0xfce210>
10023368:	100242c0 	call	1100242c <__flash_rwdata_start+0xfce210>
1002336c:	100242c0 	call	1100242c <__flash_rwdata_start+0xfce210>
10023370:	100242c0 	call	1100242c <__flash_rwdata_start+0xfce210>
10023374:	100242c0 	call	1100242c <__flash_rwdata_start+0xfce210>
10023378:	100242c0 	call	1100242c <__flash_rwdata_start+0xfce210>
1002337c:	100242c0 	call	1100242c <__flash_rwdata_start+0xfce210>
10023380:	100242c0 	call	1100242c <__flash_rwdata_start+0xfce210>
10023384:	100242c0 	call	1100242c <__flash_rwdata_start+0xfce210>
10023388:	10023484 	addi	zero,r2,2258
1002338c:	10023484 	addi	zero,r2,2258
10023390:	10023484 	addi	zero,r2,2258
10023394:	10023484 	addi	zero,r2,2258
10023398:	10023484 	addi	zero,r2,2258
1002339c:	10023484 	addi	zero,r2,2258
100233a0:	10023484 	addi	zero,r2,2258
100233a4:	10023484 	addi	zero,r2,2258
100233a8:	10023484 	addi	zero,r2,2258
100233ac:	10023484 	addi	zero,r2,2258
100233b0:	10023adc 	xori	zero,r2,2283
100233b4:	10024148 	cmpgei	zero,r2,2309
100233b8:	10023484 	addi	zero,r2,2258
100233bc:	10024148 	cmpgei	zero,r2,2309
100233c0:	10023484 	addi	zero,r2,2258
100233c4:	10023484 	addi	zero,r2,2258
100233c8:	10023484 	addi	zero,r2,2258
100233cc:	10023484 	addi	zero,r2,2258
100233d0:	100242ac 	andhi	zero,r2,2314
100233d4:	10023484 	addi	zero,r2,2258
100233d8:	10023484 	addi	zero,r2,2258
100233dc:	10023b90 	cmplti	zero,r2,2286
100233e0:	10023484 	addi	zero,r2,2258
100233e4:	10023484 	addi	zero,r2,2258
100233e8:	10023484 	addi	zero,r2,2258
100233ec:	10023484 	addi	zero,r2,2258
100233f0:	10023484 	addi	zero,r2,2258
100233f4:	10023bdc 	xori	zero,r2,2287
100233f8:	10023484 	addi	zero,r2,2258
100233fc:	10023484 	addi	zero,r2,2258
10023400:	100241fc 	xorhi	zero,r2,2311
10023404:	10023484 	addi	zero,r2,2258
10023408:	10023484 	addi	zero,r2,2258
1002340c:	10023484 	addi	zero,r2,2258
10023410:	10023484 	addi	zero,r2,2258
10023414:	10023484 	addi	zero,r2,2258
10023418:	10023484 	addi	zero,r2,2258
1002341c:	10023484 	addi	zero,r2,2258
10023420:	10023484 	addi	zero,r2,2258
10023424:	10023484 	addi	zero,r2,2258
10023428:	10023484 	addi	zero,r2,2258
1002342c:	100241d0 	cmplti	zero,r2,2311
10023430:	10023ae8 	cmpgeui	zero,r2,2283
10023434:	10024148 	cmpgei	zero,r2,2309
10023438:	10024148 	cmpgei	zero,r2,2309
1002343c:	10024148 	cmpgei	zero,r2,2309
10023440:	10024134 	orhi	zero,r2,2308
10023444:	10023ae8 	cmpgeui	zero,r2,2283
10023448:	10023484 	addi	zero,r2,2258
1002344c:	10023484 	addi	zero,r2,2258
10023450:	100240bc 	xorhi	zero,r2,2306
10023454:	10023484 	addi	zero,r2,2258
10023458:	1002408c 	andi	zero,r2,2306
1002345c:	10023b9c 	xori	zero,r2,2286
10023460:	100240ec 	andhi	zero,r2,2307
10023464:	100240d8 	cmpnei	zero,r2,2307
10023468:	10023484 	addi	zero,r2,2258
1002346c:	10024368 	cmpgeui	zero,r2,2317
10023470:	10023484 	addi	zero,r2,2258
10023474:	10023be8 	cmpgeui	zero,r2,2287
10023478:	10023484 	addi	zero,r2,2258
1002347c:	10023484 	addi	zero,r2,2258
10023480:	10024260 	cmpeqi	zero,r2,2313
10023484:	d9014d17 	ldw	r4,1332(sp)
10023488:	2000ce26 	beq	r4,zero,100237c4 <___vfprintf_internal_r+0x6d4>
1002348c:	01400044 	movi	r5,1
10023490:	d9800f04 	addi	r6,sp,60
10023494:	d9c14015 	stw	r7,1280(sp)
10023498:	d9414515 	stw	r5,1300(sp)
1002349c:	d9814115 	stw	r6,1284(sp)
100234a0:	280f883a 	mov	r7,r5
100234a4:	d9000f05 	stb	r4,60(sp)
100234a8:	d8000405 	stb	zero,16(sp)
100234ac:	d8014615 	stw	zero,1304(sp)
100234b0:	d8c14c17 	ldw	r3,1328(sp)
100234b4:	1880008c 	andi	r2,r3,2
100234b8:	1005003a 	cmpeq	r2,r2,zero
100234bc:	d8815015 	stw	r2,1344(sp)
100234c0:	1000031e 	bne	r2,zero,100234d0 <___vfprintf_internal_r+0x3e0>
100234c4:	d9014517 	ldw	r4,1300(sp)
100234c8:	21000084 	addi	r4,r4,2
100234cc:	d9014515 	stw	r4,1300(sp)
100234d0:	d9414c17 	ldw	r5,1328(sp)
100234d4:	2940210c 	andi	r5,r5,132
100234d8:	d9414e15 	stw	r5,1336(sp)
100234dc:	28002d1e 	bne	r5,zero,10023594 <___vfprintf_internal_r+0x4a4>
100234e0:	d9814a17 	ldw	r6,1320(sp)
100234e4:	d8814517 	ldw	r2,1300(sp)
100234e8:	30a1c83a 	sub	r16,r6,r2
100234ec:	0400290e 	bge	zero,r16,10023594 <___vfprintf_internal_r+0x4a4>
100234f0:	00800404 	movi	r2,16
100234f4:	1404580e 	bge	r2,r16,10024658 <___vfprintf_internal_r+0x1568>
100234f8:	dc800e17 	ldw	r18,56(sp)
100234fc:	dc400d17 	ldw	r17,52(sp)
10023500:	1027883a 	mov	r19,r2
10023504:	07000034 	movhi	fp,0
10023508:	e702d484 	addi	fp,fp,2898
1002350c:	050001c4 	movi	r20,7
10023510:	00000306 	br	10023520 <___vfprintf_internal_r+0x430>
10023514:	843ffc04 	addi	r16,r16,-16
10023518:	ad400204 	addi	r21,r21,8
1002351c:	9c00130e 	bge	r19,r16,1002356c <___vfprintf_internal_r+0x47c>
10023520:	94800404 	addi	r18,r18,16
10023524:	8c400044 	addi	r17,r17,1
10023528:	af000015 	stw	fp,0(r21)
1002352c:	acc00115 	stw	r19,4(r21)
10023530:	dc800e15 	stw	r18,56(sp)
10023534:	dc400d15 	stw	r17,52(sp)
10023538:	a47ff60e 	bge	r20,r17,10023514 <___vfprintf_internal_r+0x424>
1002353c:	d9014f17 	ldw	r4,1340(sp)
10023540:	b00b883a 	mov	r5,r22
10023544:	d9800c04 	addi	r6,sp,48
10023548:	d9c15115 	stw	r7,1348(sp)
1002354c:	00230980 	call	10023098 <__sprint_r>
10023550:	d9c15117 	ldw	r7,1348(sp)
10023554:	10009e1e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10023558:	843ffc04 	addi	r16,r16,-16
1002355c:	dc800e17 	ldw	r18,56(sp)
10023560:	dc400d17 	ldw	r17,52(sp)
10023564:	dd401904 	addi	r21,sp,100
10023568:	9c3fed16 	blt	r19,r16,10023520 <___vfprintf_internal_r+0x430>
1002356c:	9425883a 	add	r18,r18,r16
10023570:	8c400044 	addi	r17,r17,1
10023574:	008001c4 	movi	r2,7
10023578:	af000015 	stw	fp,0(r21)
1002357c:	ac000115 	stw	r16,4(r21)
10023580:	dc800e15 	stw	r18,56(sp)
10023584:	dc400d15 	stw	r17,52(sp)
10023588:	1441f516 	blt	r2,r17,10023d60 <___vfprintf_internal_r+0xc70>
1002358c:	ad400204 	addi	r21,r21,8
10023590:	00000206 	br	1002359c <___vfprintf_internal_r+0x4ac>
10023594:	dc800e17 	ldw	r18,56(sp)
10023598:	dc400d17 	ldw	r17,52(sp)
1002359c:	d8800407 	ldb	r2,16(sp)
100235a0:	10000b26 	beq	r2,zero,100235d0 <___vfprintf_internal_r+0x4e0>
100235a4:	00800044 	movi	r2,1
100235a8:	94800044 	addi	r18,r18,1
100235ac:	8c400044 	addi	r17,r17,1
100235b0:	a8800115 	stw	r2,4(r21)
100235b4:	d8c00404 	addi	r3,sp,16
100235b8:	008001c4 	movi	r2,7
100235bc:	a8c00015 	stw	r3,0(r21)
100235c0:	dc800e15 	stw	r18,56(sp)
100235c4:	dc400d15 	stw	r17,52(sp)
100235c8:	1441da16 	blt	r2,r17,10023d34 <___vfprintf_internal_r+0xc44>
100235cc:	ad400204 	addi	r21,r21,8
100235d0:	d9015017 	ldw	r4,1344(sp)
100235d4:	20000b1e 	bne	r4,zero,10023604 <___vfprintf_internal_r+0x514>
100235d8:	d8800444 	addi	r2,sp,17
100235dc:	94800084 	addi	r18,r18,2
100235e0:	8c400044 	addi	r17,r17,1
100235e4:	a8800015 	stw	r2,0(r21)
100235e8:	00c00084 	movi	r3,2
100235ec:	008001c4 	movi	r2,7
100235f0:	a8c00115 	stw	r3,4(r21)
100235f4:	dc800e15 	stw	r18,56(sp)
100235f8:	dc400d15 	stw	r17,52(sp)
100235fc:	1441c216 	blt	r2,r17,10023d08 <___vfprintf_internal_r+0xc18>
10023600:	ad400204 	addi	r21,r21,8
10023604:	d9414e17 	ldw	r5,1336(sp)
10023608:	00802004 	movi	r2,128
1002360c:	2880b126 	beq	r5,r2,100238d4 <___vfprintf_internal_r+0x7e4>
10023610:	d8c14617 	ldw	r3,1304(sp)
10023614:	19e1c83a 	sub	r16,r3,r7
10023618:	0400260e 	bge	zero,r16,100236b4 <___vfprintf_internal_r+0x5c4>
1002361c:	00800404 	movi	r2,16
10023620:	1403c90e 	bge	r2,r16,10024548 <___vfprintf_internal_r+0x1458>
10023624:	1027883a 	mov	r19,r2
10023628:	07000034 	movhi	fp,0
1002362c:	e702d084 	addi	fp,fp,2882
10023630:	050001c4 	movi	r20,7
10023634:	00000306 	br	10023644 <___vfprintf_internal_r+0x554>
10023638:	843ffc04 	addi	r16,r16,-16
1002363c:	ad400204 	addi	r21,r21,8
10023640:	9c00130e 	bge	r19,r16,10023690 <___vfprintf_internal_r+0x5a0>
10023644:	94800404 	addi	r18,r18,16
10023648:	8c400044 	addi	r17,r17,1
1002364c:	af000015 	stw	fp,0(r21)
10023650:	acc00115 	stw	r19,4(r21)
10023654:	dc800e15 	stw	r18,56(sp)
10023658:	dc400d15 	stw	r17,52(sp)
1002365c:	a47ff60e 	bge	r20,r17,10023638 <___vfprintf_internal_r+0x548>
10023660:	d9014f17 	ldw	r4,1340(sp)
10023664:	b00b883a 	mov	r5,r22
10023668:	d9800c04 	addi	r6,sp,48
1002366c:	d9c15115 	stw	r7,1348(sp)
10023670:	00230980 	call	10023098 <__sprint_r>
10023674:	d9c15117 	ldw	r7,1348(sp)
10023678:	1000551e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
1002367c:	843ffc04 	addi	r16,r16,-16
10023680:	dc800e17 	ldw	r18,56(sp)
10023684:	dc400d17 	ldw	r17,52(sp)
10023688:	dd401904 	addi	r21,sp,100
1002368c:	9c3fed16 	blt	r19,r16,10023644 <___vfprintf_internal_r+0x554>
10023690:	9425883a 	add	r18,r18,r16
10023694:	8c400044 	addi	r17,r17,1
10023698:	008001c4 	movi	r2,7
1002369c:	af000015 	stw	fp,0(r21)
100236a0:	ac000115 	stw	r16,4(r21)
100236a4:	dc800e15 	stw	r18,56(sp)
100236a8:	dc400d15 	stw	r17,52(sp)
100236ac:	14418216 	blt	r2,r17,10023cb8 <___vfprintf_internal_r+0xbc8>
100236b0:	ad400204 	addi	r21,r21,8
100236b4:	d9014c17 	ldw	r4,1328(sp)
100236b8:	2080400c 	andi	r2,r4,256
100236bc:	10004a1e 	bne	r2,zero,100237e8 <___vfprintf_internal_r+0x6f8>
100236c0:	d9414117 	ldw	r5,1284(sp)
100236c4:	91e5883a 	add	r18,r18,r7
100236c8:	8c400044 	addi	r17,r17,1
100236cc:	008001c4 	movi	r2,7
100236d0:	a9400015 	stw	r5,0(r21)
100236d4:	a9c00115 	stw	r7,4(r21)
100236d8:	dc800e15 	stw	r18,56(sp)
100236dc:	dc400d15 	stw	r17,52(sp)
100236e0:	14416716 	blt	r2,r17,10023c80 <___vfprintf_internal_r+0xb90>
100236e4:	a8c00204 	addi	r3,r21,8
100236e8:	d9814c17 	ldw	r6,1328(sp)
100236ec:	3080010c 	andi	r2,r6,4
100236f0:	10002826 	beq	r2,zero,10023794 <___vfprintf_internal_r+0x6a4>
100236f4:	d8814a17 	ldw	r2,1320(sp)
100236f8:	d9014517 	ldw	r4,1300(sp)
100236fc:	1121c83a 	sub	r16,r2,r4
10023700:	0400240e 	bge	zero,r16,10023794 <___vfprintf_internal_r+0x6a4>
10023704:	00800404 	movi	r2,16
10023708:	14044f0e 	bge	r2,r16,10024848 <___vfprintf_internal_r+0x1758>
1002370c:	dc400d17 	ldw	r17,52(sp)
10023710:	1027883a 	mov	r19,r2
10023714:	07000034 	movhi	fp,0
10023718:	e702d484 	addi	fp,fp,2898
1002371c:	050001c4 	movi	r20,7
10023720:	00000306 	br	10023730 <___vfprintf_internal_r+0x640>
10023724:	843ffc04 	addi	r16,r16,-16
10023728:	18c00204 	addi	r3,r3,8
1002372c:	9c00110e 	bge	r19,r16,10023774 <___vfprintf_internal_r+0x684>
10023730:	94800404 	addi	r18,r18,16
10023734:	8c400044 	addi	r17,r17,1
10023738:	1f000015 	stw	fp,0(r3)
1002373c:	1cc00115 	stw	r19,4(r3)
10023740:	dc800e15 	stw	r18,56(sp)
10023744:	dc400d15 	stw	r17,52(sp)
10023748:	a47ff60e 	bge	r20,r17,10023724 <___vfprintf_internal_r+0x634>
1002374c:	d9014f17 	ldw	r4,1340(sp)
10023750:	b00b883a 	mov	r5,r22
10023754:	d9800c04 	addi	r6,sp,48
10023758:	00230980 	call	10023098 <__sprint_r>
1002375c:	10001c1e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10023760:	843ffc04 	addi	r16,r16,-16
10023764:	dc800e17 	ldw	r18,56(sp)
10023768:	dc400d17 	ldw	r17,52(sp)
1002376c:	d8c01904 	addi	r3,sp,100
10023770:	9c3fef16 	blt	r19,r16,10023730 <___vfprintf_internal_r+0x640>
10023774:	9425883a 	add	r18,r18,r16
10023778:	8c400044 	addi	r17,r17,1
1002377c:	008001c4 	movi	r2,7
10023780:	1f000015 	stw	fp,0(r3)
10023784:	1c000115 	stw	r16,4(r3)
10023788:	dc800e15 	stw	r18,56(sp)
1002378c:	dc400d15 	stw	r17,52(sp)
10023790:	1440cb16 	blt	r2,r17,10023ac0 <___vfprintf_internal_r+0x9d0>
10023794:	d8814a17 	ldw	r2,1320(sp)
10023798:	d9414517 	ldw	r5,1300(sp)
1002379c:	1140010e 	bge	r2,r5,100237a4 <___vfprintf_internal_r+0x6b4>
100237a0:	2805883a 	mov	r2,r5
100237a4:	d9814b17 	ldw	r6,1324(sp)
100237a8:	308d883a 	add	r6,r6,r2
100237ac:	d9814b15 	stw	r6,1324(sp)
100237b0:	90013b1e 	bne	r18,zero,10023ca0 <___vfprintf_internal_r+0xbb0>
100237b4:	d9c14017 	ldw	r7,1280(sp)
100237b8:	dd401904 	addi	r21,sp,100
100237bc:	d8000d15 	stw	zero,52(sp)
100237c0:	003ea706 	br	10023260 <___vfprintf_internal_r+0x170>
100237c4:	d8800e17 	ldw	r2,56(sp)
100237c8:	10053f1e 	bne	r2,zero,10024cc8 <___vfprintf_internal_r+0x1bd8>
100237cc:	d8000d15 	stw	zero,52(sp)
100237d0:	b080030b 	ldhu	r2,12(r22)
100237d4:	1080100c 	andi	r2,r2,64
100237d8:	103e8726 	beq	r2,zero,100231f8 <___vfprintf_internal_r+0x108>
100237dc:	00bfffc4 	movi	r2,-1
100237e0:	d8814b15 	stw	r2,1324(sp)
100237e4:	003e8406 	br	100231f8 <___vfprintf_internal_r+0x108>
100237e8:	d9814d17 	ldw	r6,1332(sp)
100237ec:	00801944 	movi	r2,101
100237f0:	11806e16 	blt	r2,r6,100239ac <___vfprintf_internal_r+0x8bc>
100237f4:	d9414717 	ldw	r5,1308(sp)
100237f8:	00c00044 	movi	r3,1
100237fc:	1943430e 	bge	r3,r5,1002450c <___vfprintf_internal_r+0x141c>
10023800:	d8814117 	ldw	r2,1284(sp)
10023804:	94800044 	addi	r18,r18,1
10023808:	8c400044 	addi	r17,r17,1
1002380c:	a8800015 	stw	r2,0(r21)
10023810:	008001c4 	movi	r2,7
10023814:	a8c00115 	stw	r3,4(r21)
10023818:	dc800e15 	stw	r18,56(sp)
1002381c:	dc400d15 	stw	r17,52(sp)
10023820:	1441ca16 	blt	r2,r17,10023f4c <___vfprintf_internal_r+0xe5c>
10023824:	a8c00204 	addi	r3,r21,8
10023828:	d9014917 	ldw	r4,1316(sp)
1002382c:	00800044 	movi	r2,1
10023830:	94800044 	addi	r18,r18,1
10023834:	8c400044 	addi	r17,r17,1
10023838:	18800115 	stw	r2,4(r3)
1002383c:	008001c4 	movi	r2,7
10023840:	19000015 	stw	r4,0(r3)
10023844:	dc800e15 	stw	r18,56(sp)
10023848:	dc400d15 	stw	r17,52(sp)
1002384c:	1441b616 	blt	r2,r17,10023f28 <___vfprintf_internal_r+0xe38>
10023850:	1cc00204 	addi	r19,r3,8
10023854:	d9014217 	ldw	r4,1288(sp)
10023858:	d9414317 	ldw	r5,1292(sp)
1002385c:	000d883a 	mov	r6,zero
10023860:	000f883a 	mov	r7,zero
10023864:	003047c0 	call	1003047c <__nedf2>
10023868:	10017426 	beq	r2,zero,10023e3c <___vfprintf_internal_r+0xd4c>
1002386c:	d9414717 	ldw	r5,1308(sp)
10023870:	d9814117 	ldw	r6,1284(sp)
10023874:	8c400044 	addi	r17,r17,1
10023878:	2c85883a 	add	r2,r5,r18
1002387c:	14bfffc4 	addi	r18,r2,-1
10023880:	28bfffc4 	addi	r2,r5,-1
10023884:	30c00044 	addi	r3,r6,1
10023888:	98800115 	stw	r2,4(r19)
1002388c:	008001c4 	movi	r2,7
10023890:	98c00015 	stw	r3,0(r19)
10023894:	dc800e15 	stw	r18,56(sp)
10023898:	dc400d15 	stw	r17,52(sp)
1002389c:	14418e16 	blt	r2,r17,10023ed8 <___vfprintf_internal_r+0xde8>
100238a0:	9cc00204 	addi	r19,r19,8
100238a4:	d9414817 	ldw	r5,1312(sp)
100238a8:	d8800804 	addi	r2,sp,32
100238ac:	8c400044 	addi	r17,r17,1
100238b0:	9165883a 	add	r18,r18,r5
100238b4:	98800015 	stw	r2,0(r19)
100238b8:	008001c4 	movi	r2,7
100238bc:	99400115 	stw	r5,4(r19)
100238c0:	dc800e15 	stw	r18,56(sp)
100238c4:	dc400d15 	stw	r17,52(sp)
100238c8:	1440ed16 	blt	r2,r17,10023c80 <___vfprintf_internal_r+0xb90>
100238cc:	98c00204 	addi	r3,r19,8
100238d0:	003f8506 	br	100236e8 <___vfprintf_internal_r+0x5f8>
100238d4:	d9814a17 	ldw	r6,1320(sp)
100238d8:	d8814517 	ldw	r2,1300(sp)
100238dc:	30a1c83a 	sub	r16,r6,r2
100238e0:	043f4b0e 	bge	zero,r16,10023610 <___vfprintf_internal_r+0x520>
100238e4:	00800404 	movi	r2,16
100238e8:	1404340e 	bge	r2,r16,100249bc <___vfprintf_internal_r+0x18cc>
100238ec:	1027883a 	mov	r19,r2
100238f0:	07000034 	movhi	fp,0
100238f4:	e702d084 	addi	fp,fp,2882
100238f8:	050001c4 	movi	r20,7
100238fc:	00000306 	br	1002390c <___vfprintf_internal_r+0x81c>
10023900:	843ffc04 	addi	r16,r16,-16
10023904:	ad400204 	addi	r21,r21,8
10023908:	9c00130e 	bge	r19,r16,10023958 <___vfprintf_internal_r+0x868>
1002390c:	94800404 	addi	r18,r18,16
10023910:	8c400044 	addi	r17,r17,1
10023914:	af000015 	stw	fp,0(r21)
10023918:	acc00115 	stw	r19,4(r21)
1002391c:	dc800e15 	stw	r18,56(sp)
10023920:	dc400d15 	stw	r17,52(sp)
10023924:	a47ff60e 	bge	r20,r17,10023900 <___vfprintf_internal_r+0x810>
10023928:	d9014f17 	ldw	r4,1340(sp)
1002392c:	b00b883a 	mov	r5,r22
10023930:	d9800c04 	addi	r6,sp,48
10023934:	d9c15115 	stw	r7,1348(sp)
10023938:	00230980 	call	10023098 <__sprint_r>
1002393c:	d9c15117 	ldw	r7,1348(sp)
10023940:	103fa31e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10023944:	843ffc04 	addi	r16,r16,-16
10023948:	dc800e17 	ldw	r18,56(sp)
1002394c:	dc400d17 	ldw	r17,52(sp)
10023950:	dd401904 	addi	r21,sp,100
10023954:	9c3fed16 	blt	r19,r16,1002390c <___vfprintf_internal_r+0x81c>
10023958:	9425883a 	add	r18,r18,r16
1002395c:	8c400044 	addi	r17,r17,1
10023960:	008001c4 	movi	r2,7
10023964:	af000015 	stw	fp,0(r21)
10023968:	ac000115 	stw	r16,4(r21)
1002396c:	dc800e15 	stw	r18,56(sp)
10023970:	dc400d15 	stw	r17,52(sp)
10023974:	14416116 	blt	r2,r17,10023efc <___vfprintf_internal_r+0xe0c>
10023978:	ad400204 	addi	r21,r21,8
1002397c:	003f2406 	br	10023610 <___vfprintf_internal_r+0x520>
10023980:	d9014f17 	ldw	r4,1340(sp)
10023984:	00282e00 	call	100282e0 <__sinit>
10023988:	d9c15117 	ldw	r7,1348(sp)
1002398c:	003def06 	br	1002314c <___vfprintf_internal_r+0x5c>
10023990:	d9014f17 	ldw	r4,1340(sp)
10023994:	b00b883a 	mov	r5,r22
10023998:	d9c15115 	stw	r7,1348(sp)
1002399c:	00267400 	call	10026740 <__swsetup_r>
100239a0:	d9c15117 	ldw	r7,1348(sp)
100239a4:	103dee26 	beq	r2,zero,10023160 <___vfprintf_internal_r+0x70>
100239a8:	003f8c06 	br	100237dc <___vfprintf_internal_r+0x6ec>
100239ac:	d9014217 	ldw	r4,1288(sp)
100239b0:	d9414317 	ldw	r5,1292(sp)
100239b4:	000d883a 	mov	r6,zero
100239b8:	000f883a 	mov	r7,zero
100239bc:	00303f40 	call	100303f4 <__eqdf2>
100239c0:	1000f21e 	bne	r2,zero,10023d8c <___vfprintf_internal_r+0xc9c>
100239c4:	00800034 	movhi	r2,0
100239c8:	1082d004 	addi	r2,r2,2880
100239cc:	94800044 	addi	r18,r18,1
100239d0:	8c400044 	addi	r17,r17,1
100239d4:	a8800015 	stw	r2,0(r21)
100239d8:	00c00044 	movi	r3,1
100239dc:	008001c4 	movi	r2,7
100239e0:	a8c00115 	stw	r3,4(r21)
100239e4:	dc800e15 	stw	r18,56(sp)
100239e8:	dc400d15 	stw	r17,52(sp)
100239ec:	1442fa16 	blt	r2,r17,100245d8 <___vfprintf_internal_r+0x14e8>
100239f0:	a8c00204 	addi	r3,r21,8
100239f4:	d8800517 	ldw	r2,20(sp)
100239f8:	d9014717 	ldw	r4,1308(sp)
100239fc:	11015c0e 	bge	r2,r4,10023f70 <___vfprintf_internal_r+0xe80>
10023a00:	dc400d17 	ldw	r17,52(sp)
10023a04:	d9814917 	ldw	r6,1316(sp)
10023a08:	00800044 	movi	r2,1
10023a0c:	94800044 	addi	r18,r18,1
10023a10:	8c400044 	addi	r17,r17,1
10023a14:	18800115 	stw	r2,4(r3)
10023a18:	008001c4 	movi	r2,7
10023a1c:	19800015 	stw	r6,0(r3)
10023a20:	dc800e15 	stw	r18,56(sp)
10023a24:	dc400d15 	stw	r17,52(sp)
10023a28:	14431016 	blt	r2,r17,1002466c <___vfprintf_internal_r+0x157c>
10023a2c:	18c00204 	addi	r3,r3,8
10023a30:	d8814717 	ldw	r2,1308(sp)
10023a34:	143fffc4 	addi	r16,r2,-1
10023a38:	043f2b0e 	bge	zero,r16,100236e8 <___vfprintf_internal_r+0x5f8>
10023a3c:	00800404 	movi	r2,16
10023a40:	1402a20e 	bge	r2,r16,100244cc <___vfprintf_internal_r+0x13dc>
10023a44:	dc400d17 	ldw	r17,52(sp)
10023a48:	1027883a 	mov	r19,r2
10023a4c:	07000034 	movhi	fp,0
10023a50:	e702d084 	addi	fp,fp,2882
10023a54:	050001c4 	movi	r20,7
10023a58:	00000306 	br	10023a68 <___vfprintf_internal_r+0x978>
10023a5c:	18c00204 	addi	r3,r3,8
10023a60:	843ffc04 	addi	r16,r16,-16
10023a64:	9c029c0e 	bge	r19,r16,100244d8 <___vfprintf_internal_r+0x13e8>
10023a68:	94800404 	addi	r18,r18,16
10023a6c:	8c400044 	addi	r17,r17,1
10023a70:	1f000015 	stw	fp,0(r3)
10023a74:	1cc00115 	stw	r19,4(r3)
10023a78:	dc800e15 	stw	r18,56(sp)
10023a7c:	dc400d15 	stw	r17,52(sp)
10023a80:	a47ff60e 	bge	r20,r17,10023a5c <___vfprintf_internal_r+0x96c>
10023a84:	d9014f17 	ldw	r4,1340(sp)
10023a88:	b00b883a 	mov	r5,r22
10023a8c:	d9800c04 	addi	r6,sp,48
10023a90:	00230980 	call	10023098 <__sprint_r>
10023a94:	103f4e1e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10023a98:	dc800e17 	ldw	r18,56(sp)
10023a9c:	dc400d17 	ldw	r17,52(sp)
10023aa0:	d8c01904 	addi	r3,sp,100
10023aa4:	003fee06 	br	10023a60 <___vfprintf_internal_r+0x970>
10023aa8:	d8802c0b 	ldhu	r2,176(sp)
10023aac:	00ffffc4 	movi	r3,-1
10023ab0:	d8c14b15 	stw	r3,1324(sp)
10023ab4:	1080100c 	andi	r2,r2,64
10023ab8:	103dcc1e 	bne	r2,zero,100231ec <___vfprintf_internal_r+0xfc>
10023abc:	003dce06 	br	100231f8 <___vfprintf_internal_r+0x108>
10023ac0:	d9014f17 	ldw	r4,1340(sp)
10023ac4:	b00b883a 	mov	r5,r22
10023ac8:	d9800c04 	addi	r6,sp,48
10023acc:	00230980 	call	10023098 <__sprint_r>
10023ad0:	103f3f1e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10023ad4:	dc800e17 	ldw	r18,56(sp)
10023ad8:	003f2e06 	br	10023794 <___vfprintf_internal_r+0x6a4>
10023adc:	d9414c17 	ldw	r5,1328(sp)
10023ae0:	29400414 	ori	r5,r5,16
10023ae4:	d9414c15 	stw	r5,1328(sp)
10023ae8:	d9814c17 	ldw	r6,1328(sp)
10023aec:	3080080c 	andi	r2,r6,32
10023af0:	10014f1e 	bne	r2,zero,10024030 <___vfprintf_internal_r+0xf40>
10023af4:	d8c14c17 	ldw	r3,1328(sp)
10023af8:	1880040c 	andi	r2,r3,16
10023afc:	1002ea1e 	bne	r2,zero,100246a8 <___vfprintf_internal_r+0x15b8>
10023b00:	d9014c17 	ldw	r4,1328(sp)
10023b04:	2080100c 	andi	r2,r4,64
10023b08:	1002e726 	beq	r2,zero,100246a8 <___vfprintf_internal_r+0x15b8>
10023b0c:	3880000f 	ldh	r2,0(r7)
10023b10:	39c00104 	addi	r7,r7,4
10023b14:	d9c14015 	stw	r7,1280(sp)
10023b18:	1023d7fa 	srai	r17,r2,31
10023b1c:	1021883a 	mov	r16,r2
10023b20:	88037216 	blt	r17,zero,100248ec <___vfprintf_internal_r+0x17fc>
10023b24:	01000044 	movi	r4,1
10023b28:	98000416 	blt	r19,zero,10023b3c <___vfprintf_internal_r+0xa4c>
10023b2c:	d8c14c17 	ldw	r3,1328(sp)
10023b30:	00bfdfc4 	movi	r2,-129
10023b34:	1886703a 	and	r3,r3,r2
10023b38:	d8c14c15 	stw	r3,1328(sp)
10023b3c:	8444b03a 	or	r2,r16,r17
10023b40:	1002261e 	bne	r2,zero,100243dc <___vfprintf_internal_r+0x12ec>
10023b44:	9802251e 	bne	r19,zero,100243dc <___vfprintf_internal_r+0x12ec>
10023b48:	20803fcc 	andi	r2,r4,255
10023b4c:	10029b26 	beq	r2,zero,100245bc <___vfprintf_internal_r+0x14cc>
10023b50:	d8c01904 	addi	r3,sp,100
10023b54:	dd000f04 	addi	r20,sp,60
10023b58:	d8c14115 	stw	r3,1284(sp)
10023b5c:	d8c14117 	ldw	r3,1284(sp)
10023b60:	dcc14515 	stw	r19,1300(sp)
10023b64:	a0c5c83a 	sub	r2,r20,r3
10023b68:	11c00a04 	addi	r7,r2,40
10023b6c:	99c0010e 	bge	r19,r7,10023b74 <___vfprintf_internal_r+0xa84>
10023b70:	d9c14515 	stw	r7,1300(sp)
10023b74:	dcc14615 	stw	r19,1304(sp)
10023b78:	d8800407 	ldb	r2,16(sp)
10023b7c:	103e4c26 	beq	r2,zero,100234b0 <___vfprintf_internal_r+0x3c0>
10023b80:	d8814517 	ldw	r2,1300(sp)
10023b84:	10800044 	addi	r2,r2,1
10023b88:	d8814515 	stw	r2,1300(sp)
10023b8c:	003e4806 	br	100234b0 <___vfprintf_internal_r+0x3c0>
10023b90:	d9814c17 	ldw	r6,1328(sp)
10023b94:	31800414 	ori	r6,r6,16
10023b98:	d9814c15 	stw	r6,1328(sp)
10023b9c:	d8c14c17 	ldw	r3,1328(sp)
10023ba0:	1880080c 	andi	r2,r3,32
10023ba4:	1001271e 	bne	r2,zero,10024044 <___vfprintf_internal_r+0xf54>
10023ba8:	d9414c17 	ldw	r5,1328(sp)
10023bac:	2880040c 	andi	r2,r5,16
10023bb0:	1002b61e 	bne	r2,zero,1002468c <___vfprintf_internal_r+0x159c>
10023bb4:	d9814c17 	ldw	r6,1328(sp)
10023bb8:	3080100c 	andi	r2,r6,64
10023bbc:	1002b326 	beq	r2,zero,1002468c <___vfprintf_internal_r+0x159c>
10023bc0:	3c00000b 	ldhu	r16,0(r7)
10023bc4:	0009883a 	mov	r4,zero
10023bc8:	39c00104 	addi	r7,r7,4
10023bcc:	0023883a 	mov	r17,zero
10023bd0:	d9c14015 	stw	r7,1280(sp)
10023bd4:	d8000405 	stb	zero,16(sp)
10023bd8:	003fd306 	br	10023b28 <___vfprintf_internal_r+0xa38>
10023bdc:	d9014c17 	ldw	r4,1328(sp)
10023be0:	21000414 	ori	r4,r4,16
10023be4:	d9014c15 	stw	r4,1328(sp)
10023be8:	d9414c17 	ldw	r5,1328(sp)
10023bec:	2880080c 	andi	r2,r5,32
10023bf0:	1001081e 	bne	r2,zero,10024014 <___vfprintf_internal_r+0xf24>
10023bf4:	d8c14c17 	ldw	r3,1328(sp)
10023bf8:	1880040c 	andi	r2,r3,16
10023bfc:	1002b01e 	bne	r2,zero,100246c0 <___vfprintf_internal_r+0x15d0>
10023c00:	d9014c17 	ldw	r4,1328(sp)
10023c04:	2080100c 	andi	r2,r4,64
10023c08:	1002ad26 	beq	r2,zero,100246c0 <___vfprintf_internal_r+0x15d0>
10023c0c:	3c00000b 	ldhu	r16,0(r7)
10023c10:	01000044 	movi	r4,1
10023c14:	39c00104 	addi	r7,r7,4
10023c18:	0023883a 	mov	r17,zero
10023c1c:	d9c14015 	stw	r7,1280(sp)
10023c20:	d8000405 	stb	zero,16(sp)
10023c24:	003fc006 	br	10023b28 <___vfprintf_internal_r+0xa38>
10023c28:	d9014f17 	ldw	r4,1340(sp)
10023c2c:	b00b883a 	mov	r5,r22
10023c30:	d9800c04 	addi	r6,sp,48
10023c34:	00230980 	call	10023098 <__sprint_r>
10023c38:	103ee51e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10023c3c:	dc800e17 	ldw	r18,56(sp)
10023c40:	d8c01904 	addi	r3,sp,100
10023c44:	d9814c17 	ldw	r6,1328(sp)
10023c48:	3080004c 	andi	r2,r6,1
10023c4c:	1005003a 	cmpeq	r2,r2,zero
10023c50:	103ea51e 	bne	r2,zero,100236e8 <___vfprintf_internal_r+0x5f8>
10023c54:	00800044 	movi	r2,1
10023c58:	dc400d17 	ldw	r17,52(sp)
10023c5c:	18800115 	stw	r2,4(r3)
10023c60:	d8814917 	ldw	r2,1316(sp)
10023c64:	94800044 	addi	r18,r18,1
10023c68:	8c400044 	addi	r17,r17,1
10023c6c:	18800015 	stw	r2,0(r3)
10023c70:	008001c4 	movi	r2,7
10023c74:	dc800e15 	stw	r18,56(sp)
10023c78:	dc400d15 	stw	r17,52(sp)
10023c7c:	14421e0e 	bge	r2,r17,100244f8 <___vfprintf_internal_r+0x1408>
10023c80:	d9014f17 	ldw	r4,1340(sp)
10023c84:	b00b883a 	mov	r5,r22
10023c88:	d9800c04 	addi	r6,sp,48
10023c8c:	00230980 	call	10023098 <__sprint_r>
10023c90:	103ecf1e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10023c94:	dc800e17 	ldw	r18,56(sp)
10023c98:	d8c01904 	addi	r3,sp,100
10023c9c:	003e9206 	br	100236e8 <___vfprintf_internal_r+0x5f8>
10023ca0:	d9014f17 	ldw	r4,1340(sp)
10023ca4:	b00b883a 	mov	r5,r22
10023ca8:	d9800c04 	addi	r6,sp,48
10023cac:	00230980 	call	10023098 <__sprint_r>
10023cb0:	103ec026 	beq	r2,zero,100237b4 <___vfprintf_internal_r+0x6c4>
10023cb4:	003ec606 	br	100237d0 <___vfprintf_internal_r+0x6e0>
10023cb8:	d9014f17 	ldw	r4,1340(sp)
10023cbc:	b00b883a 	mov	r5,r22
10023cc0:	d9800c04 	addi	r6,sp,48
10023cc4:	d9c15115 	stw	r7,1348(sp)
10023cc8:	00230980 	call	10023098 <__sprint_r>
10023ccc:	d9c15117 	ldw	r7,1348(sp)
10023cd0:	103ebf1e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10023cd4:	dc800e17 	ldw	r18,56(sp)
10023cd8:	dc400d17 	ldw	r17,52(sp)
10023cdc:	dd401904 	addi	r21,sp,100
10023ce0:	003e7406 	br	100236b4 <___vfprintf_internal_r+0x5c4>
10023ce4:	d9014f17 	ldw	r4,1340(sp)
10023ce8:	b00b883a 	mov	r5,r22
10023cec:	d9800c04 	addi	r6,sp,48
10023cf0:	d9c15115 	stw	r7,1348(sp)
10023cf4:	00230980 	call	10023098 <__sprint_r>
10023cf8:	d9c15117 	ldw	r7,1348(sp)
10023cfc:	103eb41e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10023d00:	dd401904 	addi	r21,sp,100
10023d04:	003d6d06 	br	100232bc <___vfprintf_internal_r+0x1cc>
10023d08:	d9014f17 	ldw	r4,1340(sp)
10023d0c:	b00b883a 	mov	r5,r22
10023d10:	d9800c04 	addi	r6,sp,48
10023d14:	d9c15115 	stw	r7,1348(sp)
10023d18:	00230980 	call	10023098 <__sprint_r>
10023d1c:	d9c15117 	ldw	r7,1348(sp)
10023d20:	103eab1e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10023d24:	dc800e17 	ldw	r18,56(sp)
10023d28:	dc400d17 	ldw	r17,52(sp)
10023d2c:	dd401904 	addi	r21,sp,100
10023d30:	003e3406 	br	10023604 <___vfprintf_internal_r+0x514>
10023d34:	d9014f17 	ldw	r4,1340(sp)
10023d38:	b00b883a 	mov	r5,r22
10023d3c:	d9800c04 	addi	r6,sp,48
10023d40:	d9c15115 	stw	r7,1348(sp)
10023d44:	00230980 	call	10023098 <__sprint_r>
10023d48:	d9c15117 	ldw	r7,1348(sp)
10023d4c:	103ea01e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10023d50:	dc800e17 	ldw	r18,56(sp)
10023d54:	dc400d17 	ldw	r17,52(sp)
10023d58:	dd401904 	addi	r21,sp,100
10023d5c:	003e1c06 	br	100235d0 <___vfprintf_internal_r+0x4e0>
10023d60:	d9014f17 	ldw	r4,1340(sp)
10023d64:	b00b883a 	mov	r5,r22
10023d68:	d9800c04 	addi	r6,sp,48
10023d6c:	d9c15115 	stw	r7,1348(sp)
10023d70:	00230980 	call	10023098 <__sprint_r>
10023d74:	d9c15117 	ldw	r7,1348(sp)
10023d78:	103e951e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10023d7c:	dc800e17 	ldw	r18,56(sp)
10023d80:	dc400d17 	ldw	r17,52(sp)
10023d84:	dd401904 	addi	r21,sp,100
10023d88:	003e0406 	br	1002359c <___vfprintf_internal_r+0x4ac>
10023d8c:	d9000517 	ldw	r4,20(sp)
10023d90:	0102520e 	bge	zero,r4,100246dc <___vfprintf_internal_r+0x15ec>
10023d94:	d9814717 	ldw	r6,1308(sp)
10023d98:	21807a16 	blt	r4,r6,10023f84 <___vfprintf_internal_r+0xe94>
10023d9c:	d8814117 	ldw	r2,1284(sp)
10023da0:	91a5883a 	add	r18,r18,r6
10023da4:	8c400044 	addi	r17,r17,1
10023da8:	a8800015 	stw	r2,0(r21)
10023dac:	008001c4 	movi	r2,7
10023db0:	a9800115 	stw	r6,4(r21)
10023db4:	dc800e15 	stw	r18,56(sp)
10023db8:	dc400d15 	stw	r17,52(sp)
10023dbc:	1442f616 	blt	r2,r17,10024998 <___vfprintf_internal_r+0x18a8>
10023dc0:	a8c00204 	addi	r3,r21,8
10023dc4:	d9414717 	ldw	r5,1308(sp)
10023dc8:	2161c83a 	sub	r16,r4,r5
10023dcc:	043f9d0e 	bge	zero,r16,10023c44 <___vfprintf_internal_r+0xb54>
10023dd0:	00800404 	movi	r2,16
10023dd4:	1402130e 	bge	r2,r16,10024624 <___vfprintf_internal_r+0x1534>
10023dd8:	dc400d17 	ldw	r17,52(sp)
10023ddc:	1027883a 	mov	r19,r2
10023de0:	07000034 	movhi	fp,0
10023de4:	e702d084 	addi	fp,fp,2882
10023de8:	050001c4 	movi	r20,7
10023dec:	00000306 	br	10023dfc <___vfprintf_internal_r+0xd0c>
10023df0:	18c00204 	addi	r3,r3,8
10023df4:	843ffc04 	addi	r16,r16,-16
10023df8:	9c020d0e 	bge	r19,r16,10024630 <___vfprintf_internal_r+0x1540>
10023dfc:	94800404 	addi	r18,r18,16
10023e00:	8c400044 	addi	r17,r17,1
10023e04:	1f000015 	stw	fp,0(r3)
10023e08:	1cc00115 	stw	r19,4(r3)
10023e0c:	dc800e15 	stw	r18,56(sp)
10023e10:	dc400d15 	stw	r17,52(sp)
10023e14:	a47ff60e 	bge	r20,r17,10023df0 <___vfprintf_internal_r+0xd00>
10023e18:	d9014f17 	ldw	r4,1340(sp)
10023e1c:	b00b883a 	mov	r5,r22
10023e20:	d9800c04 	addi	r6,sp,48
10023e24:	00230980 	call	10023098 <__sprint_r>
10023e28:	103e691e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10023e2c:	dc800e17 	ldw	r18,56(sp)
10023e30:	dc400d17 	ldw	r17,52(sp)
10023e34:	d8c01904 	addi	r3,sp,100
10023e38:	003fee06 	br	10023df4 <___vfprintf_internal_r+0xd04>
10023e3c:	d8814717 	ldw	r2,1308(sp)
10023e40:	143fffc4 	addi	r16,r2,-1
10023e44:	043e970e 	bge	zero,r16,100238a4 <___vfprintf_internal_r+0x7b4>
10023e48:	00800404 	movi	r2,16
10023e4c:	1400180e 	bge	r2,r16,10023eb0 <___vfprintf_internal_r+0xdc0>
10023e50:	1029883a 	mov	r20,r2
10023e54:	07000034 	movhi	fp,0
10023e58:	e702d084 	addi	fp,fp,2882
10023e5c:	054001c4 	movi	r21,7
10023e60:	00000306 	br	10023e70 <___vfprintf_internal_r+0xd80>
10023e64:	9cc00204 	addi	r19,r19,8
10023e68:	843ffc04 	addi	r16,r16,-16
10023e6c:	a400120e 	bge	r20,r16,10023eb8 <___vfprintf_internal_r+0xdc8>
10023e70:	94800404 	addi	r18,r18,16
10023e74:	8c400044 	addi	r17,r17,1
10023e78:	9f000015 	stw	fp,0(r19)
10023e7c:	9d000115 	stw	r20,4(r19)
10023e80:	dc800e15 	stw	r18,56(sp)
10023e84:	dc400d15 	stw	r17,52(sp)
10023e88:	ac7ff60e 	bge	r21,r17,10023e64 <___vfprintf_internal_r+0xd74>
10023e8c:	d9014f17 	ldw	r4,1340(sp)
10023e90:	b00b883a 	mov	r5,r22
10023e94:	d9800c04 	addi	r6,sp,48
10023e98:	00230980 	call	10023098 <__sprint_r>
10023e9c:	103e4c1e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10023ea0:	dc800e17 	ldw	r18,56(sp)
10023ea4:	dc400d17 	ldw	r17,52(sp)
10023ea8:	dcc01904 	addi	r19,sp,100
10023eac:	003fee06 	br	10023e68 <___vfprintf_internal_r+0xd78>
10023eb0:	07000034 	movhi	fp,0
10023eb4:	e702d084 	addi	fp,fp,2882
10023eb8:	9425883a 	add	r18,r18,r16
10023ebc:	8c400044 	addi	r17,r17,1
10023ec0:	008001c4 	movi	r2,7
10023ec4:	9f000015 	stw	fp,0(r19)
10023ec8:	9c000115 	stw	r16,4(r19)
10023ecc:	dc800e15 	stw	r18,56(sp)
10023ed0:	dc400d15 	stw	r17,52(sp)
10023ed4:	147e720e 	bge	r2,r17,100238a0 <___vfprintf_internal_r+0x7b0>
10023ed8:	d9014f17 	ldw	r4,1340(sp)
10023edc:	b00b883a 	mov	r5,r22
10023ee0:	d9800c04 	addi	r6,sp,48
10023ee4:	00230980 	call	10023098 <__sprint_r>
10023ee8:	103e391e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10023eec:	dc800e17 	ldw	r18,56(sp)
10023ef0:	dc400d17 	ldw	r17,52(sp)
10023ef4:	dcc01904 	addi	r19,sp,100
10023ef8:	003e6a06 	br	100238a4 <___vfprintf_internal_r+0x7b4>
10023efc:	d9014f17 	ldw	r4,1340(sp)
10023f00:	b00b883a 	mov	r5,r22
10023f04:	d9800c04 	addi	r6,sp,48
10023f08:	d9c15115 	stw	r7,1348(sp)
10023f0c:	00230980 	call	10023098 <__sprint_r>
10023f10:	d9c15117 	ldw	r7,1348(sp)
10023f14:	103e2e1e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10023f18:	dc800e17 	ldw	r18,56(sp)
10023f1c:	dc400d17 	ldw	r17,52(sp)
10023f20:	dd401904 	addi	r21,sp,100
10023f24:	003dba06 	br	10023610 <___vfprintf_internal_r+0x520>
10023f28:	d9014f17 	ldw	r4,1340(sp)
10023f2c:	b00b883a 	mov	r5,r22
10023f30:	d9800c04 	addi	r6,sp,48
10023f34:	00230980 	call	10023098 <__sprint_r>
10023f38:	103e251e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10023f3c:	dc800e17 	ldw	r18,56(sp)
10023f40:	dc400d17 	ldw	r17,52(sp)
10023f44:	dcc01904 	addi	r19,sp,100
10023f48:	003e4206 	br	10023854 <___vfprintf_internal_r+0x764>
10023f4c:	d9014f17 	ldw	r4,1340(sp)
10023f50:	b00b883a 	mov	r5,r22
10023f54:	d9800c04 	addi	r6,sp,48
10023f58:	00230980 	call	10023098 <__sprint_r>
10023f5c:	103e1c1e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10023f60:	dc800e17 	ldw	r18,56(sp)
10023f64:	dc400d17 	ldw	r17,52(sp)
10023f68:	d8c01904 	addi	r3,sp,100
10023f6c:	003e2e06 	br	10023828 <___vfprintf_internal_r+0x738>
10023f70:	d9414c17 	ldw	r5,1328(sp)
10023f74:	2880004c 	andi	r2,r5,1
10023f78:	1005003a 	cmpeq	r2,r2,zero
10023f7c:	103dda1e 	bne	r2,zero,100236e8 <___vfprintf_internal_r+0x5f8>
10023f80:	003e9f06 	br	10023a00 <___vfprintf_internal_r+0x910>
10023f84:	d8c14117 	ldw	r3,1284(sp)
10023f88:	9125883a 	add	r18,r18,r4
10023f8c:	8c400044 	addi	r17,r17,1
10023f90:	008001c4 	movi	r2,7
10023f94:	a8c00015 	stw	r3,0(r21)
10023f98:	a9000115 	stw	r4,4(r21)
10023f9c:	dc800e15 	stw	r18,56(sp)
10023fa0:	dc400d15 	stw	r17,52(sp)
10023fa4:	14426616 	blt	r2,r17,10024940 <___vfprintf_internal_r+0x1850>
10023fa8:	a8c00204 	addi	r3,r21,8
10023fac:	d9414917 	ldw	r5,1316(sp)
10023fb0:	00800044 	movi	r2,1
10023fb4:	94800044 	addi	r18,r18,1
10023fb8:	8c400044 	addi	r17,r17,1
10023fbc:	18800115 	stw	r2,4(r3)
10023fc0:	008001c4 	movi	r2,7
10023fc4:	19400015 	stw	r5,0(r3)
10023fc8:	dc800e15 	stw	r18,56(sp)
10023fcc:	dc400d15 	stw	r17,52(sp)
10023fd0:	2021883a 	mov	r16,r4
10023fd4:	14425016 	blt	r2,r17,10024918 <___vfprintf_internal_r+0x1828>
10023fd8:	19400204 	addi	r5,r3,8
10023fdc:	d9814717 	ldw	r6,1308(sp)
10023fe0:	8c400044 	addi	r17,r17,1
10023fe4:	dc400d15 	stw	r17,52(sp)
10023fe8:	3107c83a 	sub	r3,r6,r4
10023fec:	d9014117 	ldw	r4,1284(sp)
10023ff0:	90e5883a 	add	r18,r18,r3
10023ff4:	28c00115 	stw	r3,4(r5)
10023ff8:	8105883a 	add	r2,r16,r4
10023ffc:	28800015 	stw	r2,0(r5)
10024000:	008001c4 	movi	r2,7
10024004:	dc800e15 	stw	r18,56(sp)
10024008:	147f1d16 	blt	r2,r17,10023c80 <___vfprintf_internal_r+0xb90>
1002400c:	28c00204 	addi	r3,r5,8
10024010:	003db506 	br	100236e8 <___vfprintf_internal_r+0x5f8>
10024014:	3c000017 	ldw	r16,0(r7)
10024018:	3c400117 	ldw	r17,4(r7)
1002401c:	39800204 	addi	r6,r7,8
10024020:	01000044 	movi	r4,1
10024024:	d9814015 	stw	r6,1280(sp)
10024028:	d8000405 	stb	zero,16(sp)
1002402c:	003ebe06 	br	10023b28 <___vfprintf_internal_r+0xa38>
10024030:	3c000017 	ldw	r16,0(r7)
10024034:	3c400117 	ldw	r17,4(r7)
10024038:	38800204 	addi	r2,r7,8
1002403c:	d8814015 	stw	r2,1280(sp)
10024040:	003eb706 	br	10023b20 <___vfprintf_internal_r+0xa30>
10024044:	3c000017 	ldw	r16,0(r7)
10024048:	3c400117 	ldw	r17,4(r7)
1002404c:	39000204 	addi	r4,r7,8
10024050:	d9014015 	stw	r4,1280(sp)
10024054:	0009883a 	mov	r4,zero
10024058:	d8000405 	stb	zero,16(sp)
1002405c:	003eb206 	br	10023b28 <___vfprintf_internal_r+0xa38>
10024060:	38c00017 	ldw	r3,0(r7)
10024064:	39c00104 	addi	r7,r7,4
10024068:	d8c14a15 	stw	r3,1320(sp)
1002406c:	1800d10e 	bge	r3,zero,100243b4 <___vfprintf_internal_r+0x12c4>
10024070:	00c7c83a 	sub	r3,zero,r3
10024074:	d8c14a15 	stw	r3,1320(sp)
10024078:	d9014c17 	ldw	r4,1328(sp)
1002407c:	b8c00007 	ldb	r3,0(r23)
10024080:	21000114 	ori	r4,r4,4
10024084:	d9014c15 	stw	r4,1328(sp)
10024088:	003c9806 	br	100232ec <___vfprintf_internal_r+0x1fc>
1002408c:	d9814c17 	ldw	r6,1328(sp)
10024090:	3080080c 	andi	r2,r6,32
10024094:	1001f026 	beq	r2,zero,10024858 <___vfprintf_internal_r+0x1768>
10024098:	d9014b17 	ldw	r4,1324(sp)
1002409c:	38800017 	ldw	r2,0(r7)
100240a0:	39c00104 	addi	r7,r7,4
100240a4:	d9c14015 	stw	r7,1280(sp)
100240a8:	2007d7fa 	srai	r3,r4,31
100240ac:	d9c14017 	ldw	r7,1280(sp)
100240b0:	11000015 	stw	r4,0(r2)
100240b4:	10c00115 	stw	r3,4(r2)
100240b8:	003c6906 	br	10023260 <___vfprintf_internal_r+0x170>
100240bc:	b8c00007 	ldb	r3,0(r23)
100240c0:	00801b04 	movi	r2,108
100240c4:	18824f26 	beq	r3,r2,10024a04 <___vfprintf_internal_r+0x1914>
100240c8:	d9414c17 	ldw	r5,1328(sp)
100240cc:	29400414 	ori	r5,r5,16
100240d0:	d9414c15 	stw	r5,1328(sp)
100240d4:	003c8506 	br	100232ec <___vfprintf_internal_r+0x1fc>
100240d8:	d9814c17 	ldw	r6,1328(sp)
100240dc:	b8c00007 	ldb	r3,0(r23)
100240e0:	31800814 	ori	r6,r6,32
100240e4:	d9814c15 	stw	r6,1328(sp)
100240e8:	003c8006 	br	100232ec <___vfprintf_internal_r+0x1fc>
100240ec:	d8814c17 	ldw	r2,1328(sp)
100240f0:	3c000017 	ldw	r16,0(r7)
100240f4:	00c01e04 	movi	r3,120
100240f8:	10800094 	ori	r2,r2,2
100240fc:	d8814c15 	stw	r2,1328(sp)
10024100:	39c00104 	addi	r7,r7,4
10024104:	01400034 	movhi	r5,0
10024108:	2942b904 	addi	r5,r5,2788
1002410c:	00800c04 	movi	r2,48
10024110:	0023883a 	mov	r17,zero
10024114:	01000084 	movi	r4,2
10024118:	d9c14015 	stw	r7,1280(sp)
1002411c:	d8c14d15 	stw	r3,1332(sp)
10024120:	d9414415 	stw	r5,1296(sp)
10024124:	d8800445 	stb	r2,17(sp)
10024128:	d8c00485 	stb	r3,18(sp)
1002412c:	d8000405 	stb	zero,16(sp)
10024130:	003e7d06 	br	10023b28 <___vfprintf_internal_r+0xa38>
10024134:	d8814c17 	ldw	r2,1328(sp)
10024138:	b8c00007 	ldb	r3,0(r23)
1002413c:	10801014 	ori	r2,r2,64
10024140:	d8814c15 	stw	r2,1328(sp)
10024144:	003c6906 	br	100232ec <___vfprintf_internal_r+0x1fc>
10024148:	d9414c17 	ldw	r5,1328(sp)
1002414c:	2880020c 	andi	r2,r5,8
10024150:	1001df26 	beq	r2,zero,100248d0 <___vfprintf_internal_r+0x17e0>
10024154:	39800017 	ldw	r6,0(r7)
10024158:	38800204 	addi	r2,r7,8
1002415c:	d8814015 	stw	r2,1280(sp)
10024160:	d9814215 	stw	r6,1288(sp)
10024164:	39c00117 	ldw	r7,4(r7)
10024168:	d9c14315 	stw	r7,1292(sp)
1002416c:	d9014217 	ldw	r4,1288(sp)
10024170:	d9414317 	ldw	r5,1292(sp)
10024174:	002b1640 	call	1002b164 <__isinfd>
10024178:	10021726 	beq	r2,zero,100249d8 <___vfprintf_internal_r+0x18e8>
1002417c:	d9014217 	ldw	r4,1288(sp)
10024180:	d9414317 	ldw	r5,1292(sp)
10024184:	000d883a 	mov	r6,zero
10024188:	000f883a 	mov	r7,zero
1002418c:	00306140 	call	10030614 <__ltdf2>
10024190:	1002ca16 	blt	r2,zero,10024cbc <___vfprintf_internal_r+0x1bcc>
10024194:	d9414d17 	ldw	r5,1332(sp)
10024198:	008011c4 	movi	r2,71
1002419c:	11420a16 	blt	r2,r5,100249c8 <___vfprintf_internal_r+0x18d8>
100241a0:	01800034 	movhi	r6,0
100241a4:	3182be04 	addi	r6,r6,2808
100241a8:	d9814115 	stw	r6,1284(sp)
100241ac:	d9014c17 	ldw	r4,1328(sp)
100241b0:	00c000c4 	movi	r3,3
100241b4:	00bfdfc4 	movi	r2,-129
100241b8:	2088703a 	and	r4,r4,r2
100241bc:	180f883a 	mov	r7,r3
100241c0:	d8c14515 	stw	r3,1300(sp)
100241c4:	d9014c15 	stw	r4,1328(sp)
100241c8:	d8014615 	stw	zero,1304(sp)
100241cc:	003e6a06 	br	10023b78 <___vfprintf_internal_r+0xa88>
100241d0:	38800017 	ldw	r2,0(r7)
100241d4:	00c00044 	movi	r3,1
100241d8:	39c00104 	addi	r7,r7,4
100241dc:	d9c14015 	stw	r7,1280(sp)
100241e0:	d9000f04 	addi	r4,sp,60
100241e4:	180f883a 	mov	r7,r3
100241e8:	d8c14515 	stw	r3,1300(sp)
100241ec:	d9014115 	stw	r4,1284(sp)
100241f0:	d8800f05 	stb	r2,60(sp)
100241f4:	d8000405 	stb	zero,16(sp)
100241f8:	003cac06 	br	100234ac <___vfprintf_internal_r+0x3bc>
100241fc:	01400034 	movhi	r5,0
10024200:	2942c404 	addi	r5,r5,2832
10024204:	d9414415 	stw	r5,1296(sp)
10024208:	d9814c17 	ldw	r6,1328(sp)
1002420c:	3080080c 	andi	r2,r6,32
10024210:	1000f926 	beq	r2,zero,100245f8 <___vfprintf_internal_r+0x1508>
10024214:	3c000017 	ldw	r16,0(r7)
10024218:	3c400117 	ldw	r17,4(r7)
1002421c:	38800204 	addi	r2,r7,8
10024220:	d8814015 	stw	r2,1280(sp)
10024224:	d9414c17 	ldw	r5,1328(sp)
10024228:	2880004c 	andi	r2,r5,1
1002422c:	1005003a 	cmpeq	r2,r2,zero
10024230:	1000b31e 	bne	r2,zero,10024500 <___vfprintf_internal_r+0x1410>
10024234:	8444b03a 	or	r2,r16,r17
10024238:	1000b126 	beq	r2,zero,10024500 <___vfprintf_internal_r+0x1410>
1002423c:	d9814d17 	ldw	r6,1332(sp)
10024240:	29400094 	ori	r5,r5,2
10024244:	00800c04 	movi	r2,48
10024248:	01000084 	movi	r4,2
1002424c:	d9414c15 	stw	r5,1328(sp)
10024250:	d8800445 	stb	r2,17(sp)
10024254:	d9800485 	stb	r6,18(sp)
10024258:	d8000405 	stb	zero,16(sp)
1002425c:	003e3206 	br	10023b28 <___vfprintf_internal_r+0xa38>
10024260:	01800034 	movhi	r6,0
10024264:	3182b904 	addi	r6,r6,2788
10024268:	d9814415 	stw	r6,1296(sp)
1002426c:	003fe606 	br	10024208 <___vfprintf_internal_r+0x1118>
10024270:	00800ac4 	movi	r2,43
10024274:	d8800405 	stb	r2,16(sp)
10024278:	b8c00007 	ldb	r3,0(r23)
1002427c:	003c1b06 	br	100232ec <___vfprintf_internal_r+0x1fc>
10024280:	d8814c17 	ldw	r2,1328(sp)
10024284:	b8c00007 	ldb	r3,0(r23)
10024288:	10800054 	ori	r2,r2,1
1002428c:	d8814c15 	stw	r2,1328(sp)
10024290:	003c1606 	br	100232ec <___vfprintf_internal_r+0x1fc>
10024294:	d8800407 	ldb	r2,16(sp)
10024298:	1000461e 	bne	r2,zero,100243b4 <___vfprintf_internal_r+0x12c4>
1002429c:	00800804 	movi	r2,32
100242a0:	d8800405 	stb	r2,16(sp)
100242a4:	b8c00007 	ldb	r3,0(r23)
100242a8:	003c1006 	br	100232ec <___vfprintf_internal_r+0x1fc>
100242ac:	d9814c17 	ldw	r6,1328(sp)
100242b0:	b8c00007 	ldb	r3,0(r23)
100242b4:	31800214 	ori	r6,r6,8
100242b8:	d9814c15 	stw	r6,1328(sp)
100242bc:	003c0b06 	br	100232ec <___vfprintf_internal_r+0x1fc>
100242c0:	0007883a 	mov	r3,zero
100242c4:	01000244 	movi	r4,9
100242c8:	188002a4 	muli	r2,r3,10
100242cc:	b8c00007 	ldb	r3,0(r23)
100242d0:	d9814d17 	ldw	r6,1332(sp)
100242d4:	bdc00044 	addi	r23,r23,1
100242d8:	d8c14d15 	stw	r3,1332(sp)
100242dc:	d9414d17 	ldw	r5,1332(sp)
100242e0:	3085883a 	add	r2,r6,r2
100242e4:	10fff404 	addi	r3,r2,-48
100242e8:	28bff404 	addi	r2,r5,-48
100242ec:	20bff62e 	bgeu	r4,r2,100242c8 <___vfprintf_internal_r+0x11d8>
100242f0:	d8c14a15 	stw	r3,1320(sp)
100242f4:	003bff06 	br	100232f4 <___vfprintf_internal_r+0x204>
100242f8:	d9414c17 	ldw	r5,1328(sp)
100242fc:	b8c00007 	ldb	r3,0(r23)
10024300:	29402014 	ori	r5,r5,128
10024304:	d9414c15 	stw	r5,1328(sp)
10024308:	003bf806 	br	100232ec <___vfprintf_internal_r+0x1fc>
1002430c:	b8c00007 	ldb	r3,0(r23)
10024310:	00800a84 	movi	r2,42
10024314:	bdc00044 	addi	r23,r23,1
10024318:	18831526 	beq	r3,r2,10024f70 <___vfprintf_internal_r+0x1e80>
1002431c:	d8c14d15 	stw	r3,1332(sp)
10024320:	18bff404 	addi	r2,r3,-48
10024324:	00c00244 	movi	r3,9
10024328:	18827836 	bltu	r3,r2,10024d0c <___vfprintf_internal_r+0x1c1c>
1002432c:	000d883a 	mov	r6,zero
10024330:	308002a4 	muli	r2,r6,10
10024334:	b9800007 	ldb	r6,0(r23)
10024338:	d9414d17 	ldw	r5,1332(sp)
1002433c:	bdc00044 	addi	r23,r23,1
10024340:	d9814d15 	stw	r6,1332(sp)
10024344:	d9014d17 	ldw	r4,1332(sp)
10024348:	1145883a 	add	r2,r2,r5
1002434c:	11bff404 	addi	r6,r2,-48
10024350:	20bff404 	addi	r2,r4,-48
10024354:	18bff62e 	bgeu	r3,r2,10024330 <___vfprintf_internal_r+0x1240>
10024358:	3027883a 	mov	r19,r6
1002435c:	303be50e 	bge	r6,zero,100232f4 <___vfprintf_internal_r+0x204>
10024360:	04ffffc4 	movi	r19,-1
10024364:	003be306 	br	100232f4 <___vfprintf_internal_r+0x204>
10024368:	d8000405 	stb	zero,16(sp)
1002436c:	39800017 	ldw	r6,0(r7)
10024370:	39c00104 	addi	r7,r7,4
10024374:	d9c14015 	stw	r7,1280(sp)
10024378:	d9814115 	stw	r6,1284(sp)
1002437c:	3001c926 	beq	r6,zero,10024aa4 <___vfprintf_internal_r+0x19b4>
10024380:	98000e16 	blt	r19,zero,100243bc <___vfprintf_internal_r+0x12cc>
10024384:	d9014117 	ldw	r4,1284(sp)
10024388:	000b883a 	mov	r5,zero
1002438c:	980d883a 	mov	r6,r19
10024390:	00295540 	call	10029554 <memchr>
10024394:	10025926 	beq	r2,zero,10024cfc <___vfprintf_internal_r+0x1c0c>
10024398:	d8c14117 	ldw	r3,1284(sp)
1002439c:	10cfc83a 	sub	r7,r2,r3
100243a0:	99c19e16 	blt	r19,r7,10024a1c <___vfprintf_internal_r+0x192c>
100243a4:	d9c14515 	stw	r7,1300(sp)
100243a8:	38000916 	blt	r7,zero,100243d0 <___vfprintf_internal_r+0x12e0>
100243ac:	d8014615 	stw	zero,1304(sp)
100243b0:	003df106 	br	10023b78 <___vfprintf_internal_r+0xa88>
100243b4:	b8c00007 	ldb	r3,0(r23)
100243b8:	003bcc06 	br	100232ec <___vfprintf_internal_r+0x1fc>
100243bc:	d9014117 	ldw	r4,1284(sp)
100243c0:	00230240 	call	10023024 <strlen>
100243c4:	d8814515 	stw	r2,1300(sp)
100243c8:	100f883a 	mov	r7,r2
100243cc:	103ff70e 	bge	r2,zero,100243ac <___vfprintf_internal_r+0x12bc>
100243d0:	d8014515 	stw	zero,1300(sp)
100243d4:	d8014615 	stw	zero,1304(sp)
100243d8:	003de706 	br	10023b78 <___vfprintf_internal_r+0xa88>
100243dc:	20c03fcc 	andi	r3,r4,255
100243e0:	00800044 	movi	r2,1
100243e4:	18802d26 	beq	r3,r2,1002449c <___vfprintf_internal_r+0x13ac>
100243e8:	18800e36 	bltu	r3,r2,10024424 <___vfprintf_internal_r+0x1334>
100243ec:	00800084 	movi	r2,2
100243f0:	1880fa26 	beq	r3,r2,100247dc <___vfprintf_internal_r+0x16ec>
100243f4:	01000034 	movhi	r4,0
100243f8:	2102c904 	addi	r4,r4,2852
100243fc:	00230240 	call	10023024 <strlen>
10024400:	100f883a 	mov	r7,r2
10024404:	dcc14515 	stw	r19,1300(sp)
10024408:	9880010e 	bge	r19,r2,10024410 <___vfprintf_internal_r+0x1320>
1002440c:	d8814515 	stw	r2,1300(sp)
10024410:	00800034 	movhi	r2,0
10024414:	1082c904 	addi	r2,r2,2852
10024418:	dcc14615 	stw	r19,1304(sp)
1002441c:	d8814115 	stw	r2,1284(sp)
10024420:	003dd506 	br	10023b78 <___vfprintf_internal_r+0xa88>
10024424:	d9401904 	addi	r5,sp,100
10024428:	dd000f04 	addi	r20,sp,60
1002442c:	d9414115 	stw	r5,1284(sp)
10024430:	880a977a 	slli	r5,r17,29
10024434:	d9814117 	ldw	r6,1284(sp)
10024438:	8004d0fa 	srli	r2,r16,3
1002443c:	8806d0fa 	srli	r3,r17,3
10024440:	810001cc 	andi	r4,r16,7
10024444:	2884b03a 	or	r2,r5,r2
10024448:	31bfffc4 	addi	r6,r6,-1
1002444c:	21000c04 	addi	r4,r4,48
10024450:	d9814115 	stw	r6,1284(sp)
10024454:	10cab03a 	or	r5,r2,r3
10024458:	31000005 	stb	r4,0(r6)
1002445c:	1021883a 	mov	r16,r2
10024460:	1823883a 	mov	r17,r3
10024464:	283ff21e 	bne	r5,zero,10024430 <___vfprintf_internal_r+0x1340>
10024468:	d8c14c17 	ldw	r3,1328(sp)
1002446c:	1880004c 	andi	r2,r3,1
10024470:	1005003a 	cmpeq	r2,r2,zero
10024474:	103db91e 	bne	r2,zero,10023b5c <___vfprintf_internal_r+0xa6c>
10024478:	20803fcc 	andi	r2,r4,255
1002447c:	1080201c 	xori	r2,r2,128
10024480:	10bfe004 	addi	r2,r2,-128
10024484:	00c00c04 	movi	r3,48
10024488:	10fdb426 	beq	r2,r3,10023b5c <___vfprintf_internal_r+0xa6c>
1002448c:	31bfffc4 	addi	r6,r6,-1
10024490:	d9814115 	stw	r6,1284(sp)
10024494:	30c00005 	stb	r3,0(r6)
10024498:	003db006 	br	10023b5c <___vfprintf_internal_r+0xa6c>
1002449c:	88800068 	cmpgeui	r2,r17,1
100244a0:	10002c1e 	bne	r2,zero,10024554 <___vfprintf_internal_r+0x1464>
100244a4:	8800021e 	bne	r17,zero,100244b0 <___vfprintf_internal_r+0x13c0>
100244a8:	00800244 	movi	r2,9
100244ac:	14002936 	bltu	r2,r16,10024554 <___vfprintf_internal_r+0x1464>
100244b0:	d90018c4 	addi	r4,sp,99
100244b4:	dd000f04 	addi	r20,sp,60
100244b8:	d9014115 	stw	r4,1284(sp)
100244bc:	d9014117 	ldw	r4,1284(sp)
100244c0:	80800c04 	addi	r2,r16,48
100244c4:	20800005 	stb	r2,0(r4)
100244c8:	003da406 	br	10023b5c <___vfprintf_internal_r+0xa6c>
100244cc:	dc400d17 	ldw	r17,52(sp)
100244d0:	07000034 	movhi	fp,0
100244d4:	e702d084 	addi	fp,fp,2882
100244d8:	9425883a 	add	r18,r18,r16
100244dc:	8c400044 	addi	r17,r17,1
100244e0:	008001c4 	movi	r2,7
100244e4:	1f000015 	stw	fp,0(r3)
100244e8:	1c000115 	stw	r16,4(r3)
100244ec:	dc800e15 	stw	r18,56(sp)
100244f0:	dc400d15 	stw	r17,52(sp)
100244f4:	147de216 	blt	r2,r17,10023c80 <___vfprintf_internal_r+0xb90>
100244f8:	18c00204 	addi	r3,r3,8
100244fc:	003c7a06 	br	100236e8 <___vfprintf_internal_r+0x5f8>
10024500:	01000084 	movi	r4,2
10024504:	d8000405 	stb	zero,16(sp)
10024508:	003d8706 	br	10023b28 <___vfprintf_internal_r+0xa38>
1002450c:	d9814c17 	ldw	r6,1328(sp)
10024510:	30c4703a 	and	r2,r6,r3
10024514:	1005003a 	cmpeq	r2,r2,zero
10024518:	103cb926 	beq	r2,zero,10023800 <___vfprintf_internal_r+0x710>
1002451c:	d9014117 	ldw	r4,1284(sp)
10024520:	94800044 	addi	r18,r18,1
10024524:	8c400044 	addi	r17,r17,1
10024528:	008001c4 	movi	r2,7
1002452c:	a9000015 	stw	r4,0(r21)
10024530:	a8c00115 	stw	r3,4(r21)
10024534:	dc800e15 	stw	r18,56(sp)
10024538:	dc400d15 	stw	r17,52(sp)
1002453c:	147e6616 	blt	r2,r17,10023ed8 <___vfprintf_internal_r+0xde8>
10024540:	acc00204 	addi	r19,r21,8
10024544:	003cd706 	br	100238a4 <___vfprintf_internal_r+0x7b4>
10024548:	07000034 	movhi	fp,0
1002454c:	e702d084 	addi	fp,fp,2882
10024550:	003c4f06 	br	10023690 <___vfprintf_internal_r+0x5a0>
10024554:	dd000f04 	addi	r20,sp,60
10024558:	dc801904 	addi	r18,sp,100
1002455c:	8009883a 	mov	r4,r16
10024560:	880b883a 	mov	r5,r17
10024564:	01800284 	movi	r6,10
10024568:	000f883a 	mov	r7,zero
1002456c:	002f1bc0 	call	1002f1bc <__umoddi3>
10024570:	12000c04 	addi	r8,r2,48
10024574:	94bfffc4 	addi	r18,r18,-1
10024578:	8009883a 	mov	r4,r16
1002457c:	880b883a 	mov	r5,r17
10024580:	01800284 	movi	r6,10
10024584:	000f883a 	mov	r7,zero
10024588:	92000005 	stb	r8,0(r18)
1002458c:	002ebe00 	call	1002ebe0 <__udivdi3>
10024590:	1009883a 	mov	r4,r2
10024594:	1021883a 	mov	r16,r2
10024598:	18800068 	cmpgeui	r2,r3,1
1002459c:	1823883a 	mov	r17,r3
100245a0:	103fee1e 	bne	r2,zero,1002455c <___vfprintf_internal_r+0x146c>
100245a4:	1800021e 	bne	r3,zero,100245b0 <___vfprintf_internal_r+0x14c0>
100245a8:	00800244 	movi	r2,9
100245ac:	113feb36 	bltu	r2,r4,1002455c <___vfprintf_internal_r+0x146c>
100245b0:	94bfffc4 	addi	r18,r18,-1
100245b4:	dc814115 	stw	r18,1284(sp)
100245b8:	003fc006 	br	100244bc <___vfprintf_internal_r+0x13cc>
100245bc:	d9014c17 	ldw	r4,1328(sp)
100245c0:	2080004c 	andi	r2,r4,1
100245c4:	10009a1e 	bne	r2,zero,10024830 <___vfprintf_internal_r+0x1740>
100245c8:	d9401904 	addi	r5,sp,100
100245cc:	dd000f04 	addi	r20,sp,60
100245d0:	d9414115 	stw	r5,1284(sp)
100245d4:	003d6106 	br	10023b5c <___vfprintf_internal_r+0xa6c>
100245d8:	d9014f17 	ldw	r4,1340(sp)
100245dc:	b00b883a 	mov	r5,r22
100245e0:	d9800c04 	addi	r6,sp,48
100245e4:	00230980 	call	10023098 <__sprint_r>
100245e8:	103c791e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
100245ec:	dc800e17 	ldw	r18,56(sp)
100245f0:	d8c01904 	addi	r3,sp,100
100245f4:	003cff06 	br	100239f4 <___vfprintf_internal_r+0x904>
100245f8:	d8c14c17 	ldw	r3,1328(sp)
100245fc:	1880040c 	andi	r2,r3,16
10024600:	1000711e 	bne	r2,zero,100247c8 <___vfprintf_internal_r+0x16d8>
10024604:	d9014c17 	ldw	r4,1328(sp)
10024608:	2080100c 	andi	r2,r4,64
1002460c:	10006e26 	beq	r2,zero,100247c8 <___vfprintf_internal_r+0x16d8>
10024610:	3c00000b 	ldhu	r16,0(r7)
10024614:	0023883a 	mov	r17,zero
10024618:	39c00104 	addi	r7,r7,4
1002461c:	d9c14015 	stw	r7,1280(sp)
10024620:	003f0006 	br	10024224 <___vfprintf_internal_r+0x1134>
10024624:	dc400d17 	ldw	r17,52(sp)
10024628:	07000034 	movhi	fp,0
1002462c:	e702d084 	addi	fp,fp,2882
10024630:	9425883a 	add	r18,r18,r16
10024634:	8c400044 	addi	r17,r17,1
10024638:	008001c4 	movi	r2,7
1002463c:	1f000015 	stw	fp,0(r3)
10024640:	1c000115 	stw	r16,4(r3)
10024644:	dc800e15 	stw	r18,56(sp)
10024648:	dc400d15 	stw	r17,52(sp)
1002464c:	147d7616 	blt	r2,r17,10023c28 <___vfprintf_internal_r+0xb38>
10024650:	18c00204 	addi	r3,r3,8
10024654:	003d7b06 	br	10023c44 <___vfprintf_internal_r+0xb54>
10024658:	dc800e17 	ldw	r18,56(sp)
1002465c:	dc400d17 	ldw	r17,52(sp)
10024660:	07000034 	movhi	fp,0
10024664:	e702d484 	addi	fp,fp,2898
10024668:	003bc006 	br	1002356c <___vfprintf_internal_r+0x47c>
1002466c:	d9014f17 	ldw	r4,1340(sp)
10024670:	b00b883a 	mov	r5,r22
10024674:	d9800c04 	addi	r6,sp,48
10024678:	00230980 	call	10023098 <__sprint_r>
1002467c:	103c541e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10024680:	dc800e17 	ldw	r18,56(sp)
10024684:	d8c01904 	addi	r3,sp,100
10024688:	003ce906 	br	10023a30 <___vfprintf_internal_r+0x940>
1002468c:	3c000017 	ldw	r16,0(r7)
10024690:	0009883a 	mov	r4,zero
10024694:	39c00104 	addi	r7,r7,4
10024698:	0023883a 	mov	r17,zero
1002469c:	d9c14015 	stw	r7,1280(sp)
100246a0:	d8000405 	stb	zero,16(sp)
100246a4:	003d2006 	br	10023b28 <___vfprintf_internal_r+0xa38>
100246a8:	38800017 	ldw	r2,0(r7)
100246ac:	39c00104 	addi	r7,r7,4
100246b0:	d9c14015 	stw	r7,1280(sp)
100246b4:	1023d7fa 	srai	r17,r2,31
100246b8:	1021883a 	mov	r16,r2
100246bc:	003d1806 	br	10023b20 <___vfprintf_internal_r+0xa30>
100246c0:	3c000017 	ldw	r16,0(r7)
100246c4:	01000044 	movi	r4,1
100246c8:	39c00104 	addi	r7,r7,4
100246cc:	0023883a 	mov	r17,zero
100246d0:	d9c14015 	stw	r7,1280(sp)
100246d4:	d8000405 	stb	zero,16(sp)
100246d8:	003d1306 	br	10023b28 <___vfprintf_internal_r+0xa38>
100246dc:	00800034 	movhi	r2,0
100246e0:	1082d004 	addi	r2,r2,2880
100246e4:	94800044 	addi	r18,r18,1
100246e8:	8c400044 	addi	r17,r17,1
100246ec:	a8800015 	stw	r2,0(r21)
100246f0:	00c00044 	movi	r3,1
100246f4:	008001c4 	movi	r2,7
100246f8:	a8c00115 	stw	r3,4(r21)
100246fc:	dc800e15 	stw	r18,56(sp)
10024700:	dc400d15 	stw	r17,52(sp)
10024704:	1440ca16 	blt	r2,r17,10024a30 <___vfprintf_internal_r+0x1940>
10024708:	a8c00204 	addi	r3,r21,8
1002470c:	2000061e 	bne	r4,zero,10024728 <___vfprintf_internal_r+0x1638>
10024710:	d9414717 	ldw	r5,1308(sp)
10024714:	2800041e 	bne	r5,zero,10024728 <___vfprintf_internal_r+0x1638>
10024718:	d9814c17 	ldw	r6,1328(sp)
1002471c:	3080004c 	andi	r2,r6,1
10024720:	1005003a 	cmpeq	r2,r2,zero
10024724:	103bf01e 	bne	r2,zero,100236e8 <___vfprintf_internal_r+0x5f8>
10024728:	00800044 	movi	r2,1
1002472c:	dc400d17 	ldw	r17,52(sp)
10024730:	18800115 	stw	r2,4(r3)
10024734:	d8814917 	ldw	r2,1316(sp)
10024738:	94800044 	addi	r18,r18,1
1002473c:	8c400044 	addi	r17,r17,1
10024740:	18800015 	stw	r2,0(r3)
10024744:	008001c4 	movi	r2,7
10024748:	dc800e15 	stw	r18,56(sp)
1002474c:	dc400d15 	stw	r17,52(sp)
10024750:	1440ca16 	blt	r2,r17,10024a7c <___vfprintf_internal_r+0x198c>
10024754:	18c00204 	addi	r3,r3,8
10024758:	0121c83a 	sub	r16,zero,r4
1002475c:	0400500e 	bge	zero,r16,100248a0 <___vfprintf_internal_r+0x17b0>
10024760:	00800404 	movi	r2,16
10024764:	1400800e 	bge	r2,r16,10024968 <___vfprintf_internal_r+0x1878>
10024768:	1027883a 	mov	r19,r2
1002476c:	07000034 	movhi	fp,0
10024770:	e702d084 	addi	fp,fp,2882
10024774:	050001c4 	movi	r20,7
10024778:	00000306 	br	10024788 <___vfprintf_internal_r+0x1698>
1002477c:	18c00204 	addi	r3,r3,8
10024780:	843ffc04 	addi	r16,r16,-16
10024784:	9c007a0e 	bge	r19,r16,10024970 <___vfprintf_internal_r+0x1880>
10024788:	94800404 	addi	r18,r18,16
1002478c:	8c400044 	addi	r17,r17,1
10024790:	1f000015 	stw	fp,0(r3)
10024794:	1cc00115 	stw	r19,4(r3)
10024798:	dc800e15 	stw	r18,56(sp)
1002479c:	dc400d15 	stw	r17,52(sp)
100247a0:	a47ff60e 	bge	r20,r17,1002477c <___vfprintf_internal_r+0x168c>
100247a4:	d9014f17 	ldw	r4,1340(sp)
100247a8:	b00b883a 	mov	r5,r22
100247ac:	d9800c04 	addi	r6,sp,48
100247b0:	00230980 	call	10023098 <__sprint_r>
100247b4:	103c061e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
100247b8:	dc800e17 	ldw	r18,56(sp)
100247bc:	dc400d17 	ldw	r17,52(sp)
100247c0:	d8c01904 	addi	r3,sp,100
100247c4:	003fee06 	br	10024780 <___vfprintf_internal_r+0x1690>
100247c8:	3c000017 	ldw	r16,0(r7)
100247cc:	0023883a 	mov	r17,zero
100247d0:	39c00104 	addi	r7,r7,4
100247d4:	d9c14015 	stw	r7,1280(sp)
100247d8:	003e9206 	br	10024224 <___vfprintf_internal_r+0x1134>
100247dc:	d9401904 	addi	r5,sp,100
100247e0:	dd000f04 	addi	r20,sp,60
100247e4:	d9414115 	stw	r5,1284(sp)
100247e8:	d9814417 	ldw	r6,1296(sp)
100247ec:	880a973a 	slli	r5,r17,28
100247f0:	8004d13a 	srli	r2,r16,4
100247f4:	810003cc 	andi	r4,r16,15
100247f8:	3109883a 	add	r4,r6,r4
100247fc:	2884b03a 	or	r2,r5,r2
10024800:	21400003 	ldbu	r5,0(r4)
10024804:	d9014117 	ldw	r4,1284(sp)
10024808:	8806d13a 	srli	r3,r17,4
1002480c:	1021883a 	mov	r16,r2
10024810:	213fffc4 	addi	r4,r4,-1
10024814:	d9014115 	stw	r4,1284(sp)
10024818:	d9814117 	ldw	r6,1284(sp)
1002481c:	10c8b03a 	or	r4,r2,r3
10024820:	1823883a 	mov	r17,r3
10024824:	31400005 	stb	r5,0(r6)
10024828:	203fef1e 	bne	r4,zero,100247e8 <___vfprintf_internal_r+0x16f8>
1002482c:	003ccb06 	br	10023b5c <___vfprintf_internal_r+0xa6c>
10024830:	00800c04 	movi	r2,48
10024834:	d98018c4 	addi	r6,sp,99
10024838:	dd000f04 	addi	r20,sp,60
1002483c:	d88018c5 	stb	r2,99(sp)
10024840:	d9814115 	stw	r6,1284(sp)
10024844:	003cc506 	br	10023b5c <___vfprintf_internal_r+0xa6c>
10024848:	dc400d17 	ldw	r17,52(sp)
1002484c:	07000034 	movhi	fp,0
10024850:	e702d484 	addi	fp,fp,2898
10024854:	003bc706 	br	10023774 <___vfprintf_internal_r+0x684>
10024858:	d9414c17 	ldw	r5,1328(sp)
1002485c:	2880040c 	andi	r2,r5,16
10024860:	10007c26 	beq	r2,zero,10024a54 <___vfprintf_internal_r+0x1964>
10024864:	38800017 	ldw	r2,0(r7)
10024868:	39c00104 	addi	r7,r7,4
1002486c:	d9c14015 	stw	r7,1280(sp)
10024870:	d9814b17 	ldw	r6,1324(sp)
10024874:	d9c14017 	ldw	r7,1280(sp)
10024878:	11800015 	stw	r6,0(r2)
1002487c:	003a7806 	br	10023260 <___vfprintf_internal_r+0x170>
10024880:	d9014f17 	ldw	r4,1340(sp)
10024884:	b00b883a 	mov	r5,r22
10024888:	d9800c04 	addi	r6,sp,48
1002488c:	00230980 	call	10023098 <__sprint_r>
10024890:	103bcf1e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10024894:	dc800e17 	ldw	r18,56(sp)
10024898:	dc400d17 	ldw	r17,52(sp)
1002489c:	d8c01904 	addi	r3,sp,100
100248a0:	d9014717 	ldw	r4,1308(sp)
100248a4:	d9414117 	ldw	r5,1284(sp)
100248a8:	8c400044 	addi	r17,r17,1
100248ac:	9125883a 	add	r18,r18,r4
100248b0:	008001c4 	movi	r2,7
100248b4:	19400015 	stw	r5,0(r3)
100248b8:	19000115 	stw	r4,4(r3)
100248bc:	dc800e15 	stw	r18,56(sp)
100248c0:	dc400d15 	stw	r17,52(sp)
100248c4:	147cee16 	blt	r2,r17,10023c80 <___vfprintf_internal_r+0xb90>
100248c8:	18c00204 	addi	r3,r3,8
100248cc:	003b8606 	br	100236e8 <___vfprintf_internal_r+0x5f8>
100248d0:	38c00017 	ldw	r3,0(r7)
100248d4:	39000204 	addi	r4,r7,8
100248d8:	d9014015 	stw	r4,1280(sp)
100248dc:	d8c14215 	stw	r3,1288(sp)
100248e0:	39c00117 	ldw	r7,4(r7)
100248e4:	d9c14315 	stw	r7,1292(sp)
100248e8:	003e2006 	br	1002416c <___vfprintf_internal_r+0x107c>
100248ec:	0005883a 	mov	r2,zero
100248f0:	1409c83a 	sub	r4,r2,r16
100248f4:	1105803a 	cmpltu	r2,r2,r4
100248f8:	044bc83a 	sub	r5,zero,r17
100248fc:	2885c83a 	sub	r2,r5,r2
10024900:	2021883a 	mov	r16,r4
10024904:	1023883a 	mov	r17,r2
10024908:	01000044 	movi	r4,1
1002490c:	00800b44 	movi	r2,45
10024910:	d8800405 	stb	r2,16(sp)
10024914:	003c8406 	br	10023b28 <___vfprintf_internal_r+0xa38>
10024918:	d9014f17 	ldw	r4,1340(sp)
1002491c:	b00b883a 	mov	r5,r22
10024920:	d9800c04 	addi	r6,sp,48
10024924:	00230980 	call	10023098 <__sprint_r>
10024928:	103ba91e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
1002492c:	dc800e17 	ldw	r18,56(sp)
10024930:	dc400d17 	ldw	r17,52(sp)
10024934:	d9000517 	ldw	r4,20(sp)
10024938:	d9401904 	addi	r5,sp,100
1002493c:	003da706 	br	10023fdc <___vfprintf_internal_r+0xeec>
10024940:	d9014f17 	ldw	r4,1340(sp)
10024944:	b00b883a 	mov	r5,r22
10024948:	d9800c04 	addi	r6,sp,48
1002494c:	00230980 	call	10023098 <__sprint_r>
10024950:	103b9f1e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10024954:	dc800e17 	ldw	r18,56(sp)
10024958:	dc400d17 	ldw	r17,52(sp)
1002495c:	d9000517 	ldw	r4,20(sp)
10024960:	d8c01904 	addi	r3,sp,100
10024964:	003d9106 	br	10023fac <___vfprintf_internal_r+0xebc>
10024968:	07000034 	movhi	fp,0
1002496c:	e702d084 	addi	fp,fp,2882
10024970:	9425883a 	add	r18,r18,r16
10024974:	8c400044 	addi	r17,r17,1
10024978:	008001c4 	movi	r2,7
1002497c:	1f000015 	stw	fp,0(r3)
10024980:	1c000115 	stw	r16,4(r3)
10024984:	dc800e15 	stw	r18,56(sp)
10024988:	dc400d15 	stw	r17,52(sp)
1002498c:	147fbc16 	blt	r2,r17,10024880 <___vfprintf_internal_r+0x1790>
10024990:	18c00204 	addi	r3,r3,8
10024994:	003fc206 	br	100248a0 <___vfprintf_internal_r+0x17b0>
10024998:	d9014f17 	ldw	r4,1340(sp)
1002499c:	b00b883a 	mov	r5,r22
100249a0:	d9800c04 	addi	r6,sp,48
100249a4:	00230980 	call	10023098 <__sprint_r>
100249a8:	103b891e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
100249ac:	dc800e17 	ldw	r18,56(sp)
100249b0:	d9000517 	ldw	r4,20(sp)
100249b4:	d8c01904 	addi	r3,sp,100
100249b8:	003d0206 	br	10023dc4 <___vfprintf_internal_r+0xcd4>
100249bc:	07000034 	movhi	fp,0
100249c0:	e702d084 	addi	fp,fp,2882
100249c4:	003be406 	br	10023958 <___vfprintf_internal_r+0x868>
100249c8:	00800034 	movhi	r2,0
100249cc:	1082bf04 	addi	r2,r2,2812
100249d0:	d8814115 	stw	r2,1284(sp)
100249d4:	003df506 	br	100241ac <___vfprintf_internal_r+0x10bc>
100249d8:	d9014217 	ldw	r4,1288(sp)
100249dc:	d9414317 	ldw	r5,1292(sp)
100249e0:	002b1a40 	call	1002b1a4 <__isnand>
100249e4:	10003926 	beq	r2,zero,10024acc <___vfprintf_internal_r+0x19dc>
100249e8:	d9414d17 	ldw	r5,1332(sp)
100249ec:	008011c4 	movi	r2,71
100249f0:	1140ce16 	blt	r2,r5,10024d2c <___vfprintf_internal_r+0x1c3c>
100249f4:	01800034 	movhi	r6,0
100249f8:	3182c004 	addi	r6,r6,2816
100249fc:	d9814115 	stw	r6,1284(sp)
10024a00:	003dea06 	br	100241ac <___vfprintf_internal_r+0x10bc>
10024a04:	d9014c17 	ldw	r4,1328(sp)
10024a08:	bdc00044 	addi	r23,r23,1
10024a0c:	b8c00007 	ldb	r3,0(r23)
10024a10:	21000814 	ori	r4,r4,32
10024a14:	d9014c15 	stw	r4,1328(sp)
10024a18:	003a3406 	br	100232ec <___vfprintf_internal_r+0x1fc>
10024a1c:	dcc14515 	stw	r19,1300(sp)
10024a20:	98011016 	blt	r19,zero,10024e64 <___vfprintf_internal_r+0x1d74>
10024a24:	980f883a 	mov	r7,r19
10024a28:	d8014615 	stw	zero,1304(sp)
10024a2c:	003c5206 	br	10023b78 <___vfprintf_internal_r+0xa88>
10024a30:	d9014f17 	ldw	r4,1340(sp)
10024a34:	b00b883a 	mov	r5,r22
10024a38:	d9800c04 	addi	r6,sp,48
10024a3c:	00230980 	call	10023098 <__sprint_r>
10024a40:	103b631e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10024a44:	dc800e17 	ldw	r18,56(sp)
10024a48:	d9000517 	ldw	r4,20(sp)
10024a4c:	d8c01904 	addi	r3,sp,100
10024a50:	003f2e06 	br	1002470c <___vfprintf_internal_r+0x161c>
10024a54:	d8c14c17 	ldw	r3,1328(sp)
10024a58:	1880100c 	andi	r2,r3,64
10024a5c:	1000a026 	beq	r2,zero,10024ce0 <___vfprintf_internal_r+0x1bf0>
10024a60:	38800017 	ldw	r2,0(r7)
10024a64:	39c00104 	addi	r7,r7,4
10024a68:	d9c14015 	stw	r7,1280(sp)
10024a6c:	d9014b17 	ldw	r4,1324(sp)
10024a70:	d9c14017 	ldw	r7,1280(sp)
10024a74:	1100000d 	sth	r4,0(r2)
10024a78:	0039f906 	br	10023260 <___vfprintf_internal_r+0x170>
10024a7c:	d9014f17 	ldw	r4,1340(sp)
10024a80:	b00b883a 	mov	r5,r22
10024a84:	d9800c04 	addi	r6,sp,48
10024a88:	00230980 	call	10023098 <__sprint_r>
10024a8c:	103b501e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10024a90:	dc800e17 	ldw	r18,56(sp)
10024a94:	dc400d17 	ldw	r17,52(sp)
10024a98:	d9000517 	ldw	r4,20(sp)
10024a9c:	d8c01904 	addi	r3,sp,100
10024aa0:	003f2d06 	br	10024758 <___vfprintf_internal_r+0x1668>
10024aa4:	00800184 	movi	r2,6
10024aa8:	14c09a36 	bltu	r2,r19,10024d14 <___vfprintf_internal_r+0x1c24>
10024aac:	dcc14515 	stw	r19,1300(sp)
10024ab0:	9800010e 	bge	r19,zero,10024ab8 <___vfprintf_internal_r+0x19c8>
10024ab4:	d8014515 	stw	zero,1300(sp)
10024ab8:	00800034 	movhi	r2,0
10024abc:	1082c204 	addi	r2,r2,2824
10024ac0:	980f883a 	mov	r7,r19
10024ac4:	d8814115 	stw	r2,1284(sp)
10024ac8:	003a7806 	br	100234ac <___vfprintf_internal_r+0x3bc>
10024acc:	00bfffc4 	movi	r2,-1
10024ad0:	9880e226 	beq	r19,r2,10024e5c <___vfprintf_internal_r+0x1d6c>
10024ad4:	d9414d17 	ldw	r5,1332(sp)
10024ad8:	008019c4 	movi	r2,103
10024adc:	2880dc26 	beq	r5,r2,10024e50 <___vfprintf_internal_r+0x1d60>
10024ae0:	008011c4 	movi	r2,71
10024ae4:	2880da26 	beq	r5,r2,10024e50 <___vfprintf_internal_r+0x1d60>
10024ae8:	d9414c17 	ldw	r5,1328(sp)
10024aec:	d9014317 	ldw	r4,1292(sp)
10024af0:	d9814217 	ldw	r6,1288(sp)
10024af4:	29404014 	ori	r5,r5,256
10024af8:	d9414c15 	stw	r5,1328(sp)
10024afc:	2000cc16 	blt	r4,zero,10024e30 <___vfprintf_internal_r+0x1d40>
10024b00:	3021883a 	mov	r16,r6
10024b04:	2023883a 	mov	r17,r4
10024b08:	0039883a 	mov	fp,zero
10024b0c:	d9414d17 	ldw	r5,1332(sp)
10024b10:	00801984 	movi	r2,102
10024b14:	2880b726 	beq	r5,r2,10024df4 <___vfprintf_internal_r+0x1d04>
10024b18:	00801184 	movi	r2,70
10024b1c:	2880b526 	beq	r5,r2,10024df4 <___vfprintf_internal_r+0x1d04>
10024b20:	00801944 	movi	r2,101
10024b24:	2880c826 	beq	r5,r2,10024e48 <___vfprintf_internal_r+0x1d58>
10024b28:	00801144 	movi	r2,69
10024b2c:	2880c626 	beq	r5,r2,10024e48 <___vfprintf_internal_r+0x1d58>
10024b30:	9829883a 	mov	r20,r19
10024b34:	d9014f17 	ldw	r4,1340(sp)
10024b38:	d8800504 	addi	r2,sp,20
10024b3c:	880d883a 	mov	r6,r17
10024b40:	d8800115 	stw	r2,4(sp)
10024b44:	d8c00604 	addi	r3,sp,24
10024b48:	d8800704 	addi	r2,sp,28
10024b4c:	800b883a 	mov	r5,r16
10024b50:	01c00084 	movi	r7,2
10024b54:	d8c00215 	stw	r3,8(sp)
10024b58:	d8800315 	stw	r2,12(sp)
10024b5c:	dd000015 	stw	r20,0(sp)
10024b60:	0026a940 	call	10026a94 <_dtoa_r>
10024b64:	d9814d17 	ldw	r6,1332(sp)
10024b68:	d8814115 	stw	r2,1284(sp)
10024b6c:	008019c4 	movi	r2,103
10024b70:	30809526 	beq	r6,r2,10024dc8 <___vfprintf_internal_r+0x1cd8>
10024b74:	d8c14d17 	ldw	r3,1332(sp)
10024b78:	008011c4 	movi	r2,71
10024b7c:	18809226 	beq	r3,r2,10024dc8 <___vfprintf_internal_r+0x1cd8>
10024b80:	d9414117 	ldw	r5,1284(sp)
10024b84:	d9814d17 	ldw	r6,1332(sp)
10024b88:	00801984 	movi	r2,102
10024b8c:	2d25883a 	add	r18,r5,r20
10024b90:	30808626 	beq	r6,r2,10024dac <___vfprintf_internal_r+0x1cbc>
10024b94:	00801184 	movi	r2,70
10024b98:	30808426 	beq	r6,r2,10024dac <___vfprintf_internal_r+0x1cbc>
10024b9c:	000d883a 	mov	r6,zero
10024ba0:	000f883a 	mov	r7,zero
10024ba4:	880b883a 	mov	r5,r17
10024ba8:	8009883a 	mov	r4,r16
10024bac:	00303f40 	call	100303f4 <__eqdf2>
10024bb0:	1000751e 	bne	r2,zero,10024d88 <___vfprintf_internal_r+0x1c98>
10024bb4:	9005883a 	mov	r2,r18
10024bb8:	dc800715 	stw	r18,28(sp)
10024bbc:	d9014117 	ldw	r4,1284(sp)
10024bc0:	d9414d17 	ldw	r5,1332(sp)
10024bc4:	00c019c4 	movi	r3,103
10024bc8:	1125c83a 	sub	r18,r2,r4
10024bcc:	28c06826 	beq	r5,r3,10024d70 <___vfprintf_internal_r+0x1c80>
10024bd0:	008011c4 	movi	r2,71
10024bd4:	28806626 	beq	r5,r2,10024d70 <___vfprintf_internal_r+0x1c80>
10024bd8:	d9000517 	ldw	r4,20(sp)
10024bdc:	d8c14d17 	ldw	r3,1332(sp)
10024be0:	00801944 	movi	r2,101
10024be4:	10c05516 	blt	r2,r3,10024d3c <___vfprintf_internal_r+0x1c4c>
10024be8:	213fffc4 	addi	r4,r4,-1
10024bec:	d9000515 	stw	r4,20(sp)
10024bf0:	d8c00805 	stb	r3,32(sp)
10024bf4:	2021883a 	mov	r16,r4
10024bf8:	2000c116 	blt	r4,zero,10024f00 <___vfprintf_internal_r+0x1e10>
10024bfc:	00800ac4 	movi	r2,43
10024c00:	d8800845 	stb	r2,33(sp)
10024c04:	00800244 	movi	r2,9
10024c08:	1400af0e 	bge	r2,r16,10024ec8 <___vfprintf_internal_r+0x1dd8>
10024c0c:	1027883a 	mov	r19,r2
10024c10:	dc400b84 	addi	r17,sp,46
10024c14:	8009883a 	mov	r4,r16
10024c18:	01400284 	movi	r5,10
10024c1c:	00222dc0 	call	100222dc <__modsi3>
10024c20:	10800c04 	addi	r2,r2,48
10024c24:	8c7fffc4 	addi	r17,r17,-1
10024c28:	8009883a 	mov	r4,r16
10024c2c:	01400284 	movi	r5,10
10024c30:	88800005 	stb	r2,0(r17)
10024c34:	002227c0 	call	1002227c <__divsi3>
10024c38:	1021883a 	mov	r16,r2
10024c3c:	98bff516 	blt	r19,r2,10024c14 <___vfprintf_internal_r+0x1b24>
10024c40:	10c00c04 	addi	r3,r2,48
10024c44:	d88009c4 	addi	r2,sp,39
10024c48:	108001c4 	addi	r2,r2,7
10024c4c:	897fffc4 	addi	r5,r17,-1
10024c50:	88ffffc5 	stb	r3,-1(r17)
10024c54:	2880a72e 	bgeu	r5,r2,10024ef4 <___vfprintf_internal_r+0x1e04>
10024c58:	1009883a 	mov	r4,r2
10024c5c:	d9800804 	addi	r6,sp,32
10024c60:	d8c00884 	addi	r3,sp,34
10024c64:	28800003 	ldbu	r2,0(r5)
10024c68:	29400044 	addi	r5,r5,1
10024c6c:	18800005 	stb	r2,0(r3)
10024c70:	18c00044 	addi	r3,r3,1
10024c74:	293ffb36 	bltu	r5,r4,10024c64 <___vfprintf_internal_r+0x1b74>
10024c78:	1987c83a 	sub	r3,r3,r6
10024c7c:	00800044 	movi	r2,1
10024c80:	d8c14815 	stw	r3,1312(sp)
10024c84:	90cf883a 	add	r7,r18,r3
10024c88:	1480960e 	bge	r2,r18,10024ee4 <___vfprintf_internal_r+0x1df4>
10024c8c:	39c00044 	addi	r7,r7,1
10024c90:	d9c14515 	stw	r7,1300(sp)
10024c94:	38003416 	blt	r7,zero,10024d68 <___vfprintf_internal_r+0x1c78>
10024c98:	e0803fcc 	andi	r2,fp,255
10024c9c:	1080201c 	xori	r2,r2,128
10024ca0:	10bfe004 	addi	r2,r2,-128
10024ca4:	10004e26 	beq	r2,zero,10024de0 <___vfprintf_internal_r+0x1cf0>
10024ca8:	00800b44 	movi	r2,45
10024cac:	dc814715 	stw	r18,1308(sp)
10024cb0:	d8014615 	stw	zero,1304(sp)
10024cb4:	d8800405 	stb	r2,16(sp)
10024cb8:	003bb106 	br	10023b80 <___vfprintf_internal_r+0xa90>
10024cbc:	00800b44 	movi	r2,45
10024cc0:	d8800405 	stb	r2,16(sp)
10024cc4:	003d3306 	br	10024194 <___vfprintf_internal_r+0x10a4>
10024cc8:	d9014f17 	ldw	r4,1340(sp)
10024ccc:	b00b883a 	mov	r5,r22
10024cd0:	d9800c04 	addi	r6,sp,48
10024cd4:	00230980 	call	10023098 <__sprint_r>
10024cd8:	103abd1e 	bne	r2,zero,100237d0 <___vfprintf_internal_r+0x6e0>
10024cdc:	003abb06 	br	100237cc <___vfprintf_internal_r+0x6dc>
10024ce0:	38800017 	ldw	r2,0(r7)
10024ce4:	39c00104 	addi	r7,r7,4
10024ce8:	d9c14015 	stw	r7,1280(sp)
10024cec:	d9414b17 	ldw	r5,1324(sp)
10024cf0:	d9c14017 	ldw	r7,1280(sp)
10024cf4:	11400015 	stw	r5,0(r2)
10024cf8:	00395906 	br	10023260 <___vfprintf_internal_r+0x170>
10024cfc:	980f883a 	mov	r7,r19
10024d00:	dcc14515 	stw	r19,1300(sp)
10024d04:	d8014615 	stw	zero,1304(sp)
10024d08:	003b9b06 	br	10023b78 <___vfprintf_internal_r+0xa88>
10024d0c:	0027883a 	mov	r19,zero
10024d10:	00397806 	br	100232f4 <___vfprintf_internal_r+0x204>
10024d14:	00c00034 	movhi	r3,0
10024d18:	18c2c204 	addi	r3,r3,2824
10024d1c:	100f883a 	mov	r7,r2
10024d20:	d8814515 	stw	r2,1300(sp)
10024d24:	d8c14115 	stw	r3,1284(sp)
10024d28:	0039e006 	br	100234ac <___vfprintf_internal_r+0x3bc>
10024d2c:	00800034 	movhi	r2,0
10024d30:	1082c104 	addi	r2,r2,2820
10024d34:	d8814115 	stw	r2,1284(sp)
10024d38:	003d1c06 	br	100241ac <___vfprintf_internal_r+0x10bc>
10024d3c:	d9414d17 	ldw	r5,1332(sp)
10024d40:	00801984 	movi	r2,102
10024d44:	28804926 	beq	r5,r2,10024e6c <___vfprintf_internal_r+0x1d7c>
10024d48:	200f883a 	mov	r7,r4
10024d4c:	24805716 	blt	r4,r18,10024eac <___vfprintf_internal_r+0x1dbc>
10024d50:	d9414c17 	ldw	r5,1328(sp)
10024d54:	2880004c 	andi	r2,r5,1
10024d58:	10000126 	beq	r2,zero,10024d60 <___vfprintf_internal_r+0x1c70>
10024d5c:	21c00044 	addi	r7,r4,1
10024d60:	d9c14515 	stw	r7,1300(sp)
10024d64:	383fcc0e 	bge	r7,zero,10024c98 <___vfprintf_internal_r+0x1ba8>
10024d68:	d8014515 	stw	zero,1300(sp)
10024d6c:	003fca06 	br	10024c98 <___vfprintf_internal_r+0x1ba8>
10024d70:	d9000517 	ldw	r4,20(sp)
10024d74:	00bfff04 	movi	r2,-4
10024d78:	1100480e 	bge	r2,r4,10024e9c <___vfprintf_internal_r+0x1dac>
10024d7c:	99004716 	blt	r19,r4,10024e9c <___vfprintf_internal_r+0x1dac>
10024d80:	d8c14d15 	stw	r3,1332(sp)
10024d84:	003ff006 	br	10024d48 <___vfprintf_internal_r+0x1c58>
10024d88:	d8800717 	ldw	r2,28(sp)
10024d8c:	14bf8b2e 	bgeu	r2,r18,10024bbc <___vfprintf_internal_r+0x1acc>
10024d90:	9007883a 	mov	r3,r18
10024d94:	01000c04 	movi	r4,48
10024d98:	11000005 	stb	r4,0(r2)
10024d9c:	10800044 	addi	r2,r2,1
10024da0:	d8800715 	stw	r2,28(sp)
10024da4:	18bffc1e 	bne	r3,r2,10024d98 <___vfprintf_internal_r+0x1ca8>
10024da8:	003f8406 	br	10024bbc <___vfprintf_internal_r+0x1acc>
10024dac:	d8814117 	ldw	r2,1284(sp)
10024db0:	10c00007 	ldb	r3,0(r2)
10024db4:	00800c04 	movi	r2,48
10024db8:	18805b26 	beq	r3,r2,10024f28 <___vfprintf_internal_r+0x1e38>
10024dbc:	d9000517 	ldw	r4,20(sp)
10024dc0:	9125883a 	add	r18,r18,r4
10024dc4:	003f7506 	br	10024b9c <___vfprintf_internal_r+0x1aac>
10024dc8:	d9014c17 	ldw	r4,1328(sp)
10024dcc:	2080004c 	andi	r2,r4,1
10024dd0:	1005003a 	cmpeq	r2,r2,zero
10024dd4:	103f6a26 	beq	r2,zero,10024b80 <___vfprintf_internal_r+0x1a90>
10024dd8:	d8800717 	ldw	r2,28(sp)
10024ddc:	003f7706 	br	10024bbc <___vfprintf_internal_r+0x1acc>
10024de0:	d9c14515 	stw	r7,1300(sp)
10024de4:	38004d16 	blt	r7,zero,10024f1c <___vfprintf_internal_r+0x1e2c>
10024de8:	dc814715 	stw	r18,1308(sp)
10024dec:	d8014615 	stw	zero,1304(sp)
10024df0:	003b6106 	br	10023b78 <___vfprintf_internal_r+0xa88>
10024df4:	d9014f17 	ldw	r4,1340(sp)
10024df8:	d8800504 	addi	r2,sp,20
10024dfc:	d8800115 	stw	r2,4(sp)
10024e00:	d8c00604 	addi	r3,sp,24
10024e04:	d8800704 	addi	r2,sp,28
10024e08:	800b883a 	mov	r5,r16
10024e0c:	880d883a 	mov	r6,r17
10024e10:	01c000c4 	movi	r7,3
10024e14:	d8c00215 	stw	r3,8(sp)
10024e18:	d8800315 	stw	r2,12(sp)
10024e1c:	dcc00015 	stw	r19,0(sp)
10024e20:	9829883a 	mov	r20,r19
10024e24:	0026a940 	call	10026a94 <_dtoa_r>
10024e28:	d8814115 	stw	r2,1284(sp)
10024e2c:	003f5106 	br	10024b74 <___vfprintf_internal_r+0x1a84>
10024e30:	d8c14217 	ldw	r3,1288(sp)
10024e34:	d9014317 	ldw	r4,1292(sp)
10024e38:	07000b44 	movi	fp,45
10024e3c:	1821883a 	mov	r16,r3
10024e40:	2460003c 	xorhi	r17,r4,32768
10024e44:	003f3106 	br	10024b0c <___vfprintf_internal_r+0x1a1c>
10024e48:	9d000044 	addi	r20,r19,1
10024e4c:	003f3906 	br	10024b34 <___vfprintf_internal_r+0x1a44>
10024e50:	983f251e 	bne	r19,zero,10024ae8 <___vfprintf_internal_r+0x19f8>
10024e54:	04c00044 	movi	r19,1
10024e58:	003f2306 	br	10024ae8 <___vfprintf_internal_r+0x19f8>
10024e5c:	04c00184 	movi	r19,6
10024e60:	003f2106 	br	10024ae8 <___vfprintf_internal_r+0x19f8>
10024e64:	d8014515 	stw	zero,1300(sp)
10024e68:	003eee06 	br	10024a24 <___vfprintf_internal_r+0x1934>
10024e6c:	200f883a 	mov	r7,r4
10024e70:	0100370e 	bge	zero,r4,10024f50 <___vfprintf_internal_r+0x1e60>
10024e74:	9800031e 	bne	r19,zero,10024e84 <___vfprintf_internal_r+0x1d94>
10024e78:	d9814c17 	ldw	r6,1328(sp)
10024e7c:	3080004c 	andi	r2,r6,1
10024e80:	103fb726 	beq	r2,zero,10024d60 <___vfprintf_internal_r+0x1c70>
10024e84:	20800044 	addi	r2,r4,1
10024e88:	98a7883a 	add	r19,r19,r2
10024e8c:	dcc14515 	stw	r19,1300(sp)
10024e90:	980f883a 	mov	r7,r19
10024e94:	983f800e 	bge	r19,zero,10024c98 <___vfprintf_internal_r+0x1ba8>
10024e98:	003fb306 	br	10024d68 <___vfprintf_internal_r+0x1c78>
10024e9c:	d9814d17 	ldw	r6,1332(sp)
10024ea0:	31bfff84 	addi	r6,r6,-2
10024ea4:	d9814d15 	stw	r6,1332(sp)
10024ea8:	003f4c06 	br	10024bdc <___vfprintf_internal_r+0x1aec>
10024eac:	0100180e 	bge	zero,r4,10024f10 <___vfprintf_internal_r+0x1e20>
10024eb0:	00800044 	movi	r2,1
10024eb4:	1485883a 	add	r2,r2,r18
10024eb8:	d8814515 	stw	r2,1300(sp)
10024ebc:	100f883a 	mov	r7,r2
10024ec0:	103f750e 	bge	r2,zero,10024c98 <___vfprintf_internal_r+0x1ba8>
10024ec4:	003fa806 	br	10024d68 <___vfprintf_internal_r+0x1c78>
10024ec8:	80c00c04 	addi	r3,r16,48
10024ecc:	00800c04 	movi	r2,48
10024ed0:	d8c008c5 	stb	r3,35(sp)
10024ed4:	d9800804 	addi	r6,sp,32
10024ed8:	d8c00904 	addi	r3,sp,36
10024edc:	d8800885 	stb	r2,34(sp)
10024ee0:	003f6506 	br	10024c78 <___vfprintf_internal_r+0x1b88>
10024ee4:	d9014c17 	ldw	r4,1328(sp)
10024ee8:	2084703a 	and	r2,r4,r2
10024eec:	103f9c26 	beq	r2,zero,10024d60 <___vfprintf_internal_r+0x1c70>
10024ef0:	003f6606 	br	10024c8c <___vfprintf_internal_r+0x1b9c>
10024ef4:	d9800804 	addi	r6,sp,32
10024ef8:	d8c00884 	addi	r3,sp,34
10024efc:	003f5e06 	br	10024c78 <___vfprintf_internal_r+0x1b88>
10024f00:	00800b44 	movi	r2,45
10024f04:	0121c83a 	sub	r16,zero,r4
10024f08:	d8800845 	stb	r2,33(sp)
10024f0c:	003f3d06 	br	10024c04 <___vfprintf_internal_r+0x1b14>
10024f10:	00800084 	movi	r2,2
10024f14:	1105c83a 	sub	r2,r2,r4
10024f18:	003fe606 	br	10024eb4 <___vfprintf_internal_r+0x1dc4>
10024f1c:	d8014515 	stw	zero,1300(sp)
10024f20:	dc814715 	stw	r18,1308(sp)
10024f24:	003fb106 	br	10024dec <___vfprintf_internal_r+0x1cfc>
10024f28:	000d883a 	mov	r6,zero
10024f2c:	000f883a 	mov	r7,zero
10024f30:	8009883a 	mov	r4,r16
10024f34:	880b883a 	mov	r5,r17
10024f38:	003047c0 	call	1003047c <__nedf2>
10024f3c:	103f9f26 	beq	r2,zero,10024dbc <___vfprintf_internal_r+0x1ccc>
10024f40:	00800044 	movi	r2,1
10024f44:	1509c83a 	sub	r4,r2,r20
10024f48:	d9000515 	stw	r4,20(sp)
10024f4c:	003f9b06 	br	10024dbc <___vfprintf_internal_r+0x1ccc>
10024f50:	98000d1e 	bne	r19,zero,10024f88 <___vfprintf_internal_r+0x1e98>
10024f54:	d8c14c17 	ldw	r3,1328(sp)
10024f58:	1880004c 	andi	r2,r3,1
10024f5c:	10000a1e 	bne	r2,zero,10024f88 <___vfprintf_internal_r+0x1e98>
10024f60:	01000044 	movi	r4,1
10024f64:	200f883a 	mov	r7,r4
10024f68:	d9014515 	stw	r4,1300(sp)
10024f6c:	003f4a06 	br	10024c98 <___vfprintf_internal_r+0x1ba8>
10024f70:	3cc00017 	ldw	r19,0(r7)
10024f74:	39c00104 	addi	r7,r7,4
10024f78:	983d0e0e 	bge	r19,zero,100243b4 <___vfprintf_internal_r+0x12c4>
10024f7c:	b8c00007 	ldb	r3,0(r23)
10024f80:	04ffffc4 	movi	r19,-1
10024f84:	0038d906 	br	100232ec <___vfprintf_internal_r+0x1fc>
10024f88:	9cc00084 	addi	r19,r19,2
10024f8c:	dcc14515 	stw	r19,1300(sp)
10024f90:	980f883a 	mov	r7,r19
10024f94:	983f400e 	bge	r19,zero,10024c98 <___vfprintf_internal_r+0x1ba8>
10024f98:	003f7306 	br	10024d68 <___vfprintf_internal_r+0x1c78>

10024f9c <__vfprintf_internal>:
10024f9c:	00800034 	movhi	r2,0
10024fa0:	108b0704 	addi	r2,r2,11292
10024fa4:	2013883a 	mov	r9,r4
10024fa8:	11000017 	ldw	r4,0(r2)
10024fac:	2805883a 	mov	r2,r5
10024fb0:	300f883a 	mov	r7,r6
10024fb4:	480b883a 	mov	r5,r9
10024fb8:	100d883a 	mov	r6,r2
10024fbc:	00230f01 	jmpi	100230f0 <___vfprintf_internal_r>

10024fc0 <__svfscanf_r>:
10024fc0:	deff4e04 	addi	sp,sp,-712
10024fc4:	dd80ae15 	stw	r22,696(sp)
10024fc8:	dd00ac15 	stw	r20,688(sp)
10024fcc:	dc40a915 	stw	r17,676(sp)
10024fd0:	dc00a815 	stw	r16,672(sp)
10024fd4:	dfc0b115 	stw	ra,708(sp)
10024fd8:	df00b015 	stw	fp,704(sp)
10024fdc:	ddc0af15 	stw	r23,700(sp)
10024fe0:	dd40ad15 	stw	r21,692(sp)
10024fe4:	dcc0ab15 	stw	r19,684(sp)
10024fe8:	dc80aa15 	stw	r18,680(sp)
10024fec:	202d883a 	mov	r22,r4
10024ff0:	2821883a 	mov	r16,r5
10024ff4:	d9c0a415 	stw	r7,656(sp)
10024ff8:	3029883a 	mov	r20,r6
10024ffc:	d800a215 	stw	zero,648(sp)
10025000:	0023883a 	mov	r17,zero
10025004:	d800a115 	stw	zero,644(sp)
10025008:	d800a015 	stw	zero,640(sp)
1002500c:	a1000007 	ldb	r4,0(r20)
10025010:	d9000115 	stw	r4,4(sp)
10025014:	20001f26 	beq	r4,zero,10025094 <__svfscanf_r+0xd4>
10025018:	04800034 	movhi	r18,0
1002501c:	948b0b04 	addi	r18,r18,11308
10025020:	91800017 	ldw	r6,0(r18)
10025024:	a5000044 	addi	r20,r20,1
10025028:	3107883a 	add	r3,r6,r4
1002502c:	18800003 	ldbu	r2,0(r3)
10025030:	1080020c 	andi	r2,r2,8
10025034:	10002426 	beq	r2,zero,100250c8 <__svfscanf_r+0x108>
10025038:	80c00117 	ldw	r3,4(r16)
1002503c:	00c00e0e 	bge	zero,r3,10025078 <__svfscanf_r+0xb8>
10025040:	81400017 	ldw	r5,0(r16)
10025044:	90800017 	ldw	r2,0(r18)
10025048:	28c00003 	ldbu	r3,0(r5)
1002504c:	1887883a 	add	r3,r3,r2
10025050:	19000003 	ldbu	r4,0(r3)
10025054:	2100020c 	andi	r4,r4,8
10025058:	203fec26 	beq	r4,zero,1002500c <__svfscanf_r+0x4c>
1002505c:	80c00117 	ldw	r3,4(r16)
10025060:	29800044 	addi	r6,r5,1
10025064:	8c400044 	addi	r17,r17,1
10025068:	18ffffc4 	addi	r3,r3,-1
1002506c:	81800015 	stw	r6,0(r16)
10025070:	80c00115 	stw	r3,4(r16)
10025074:	00fff216 	blt	zero,r3,10025040 <__svfscanf_r+0x80>
10025078:	b009883a 	mov	r4,r22
1002507c:	800b883a 	mov	r5,r16
10025080:	002af840 	call	1002af84 <__srefill_r>
10025084:	103fee26 	beq	r2,zero,10025040 <__svfscanf_r+0x80>
10025088:	a1000007 	ldb	r4,0(r20)
1002508c:	d9000115 	stw	r4,4(sp)
10025090:	203fe11e 	bne	r4,zero,10025018 <__svfscanf_r+0x58>
10025094:	d880a217 	ldw	r2,648(sp)
10025098:	dfc0b117 	ldw	ra,708(sp)
1002509c:	df00b017 	ldw	fp,704(sp)
100250a0:	ddc0af17 	ldw	r23,700(sp)
100250a4:	dd80ae17 	ldw	r22,696(sp)
100250a8:	dd40ad17 	ldw	r21,692(sp)
100250ac:	dd00ac17 	ldw	r20,688(sp)
100250b0:	dcc0ab17 	ldw	r19,684(sp)
100250b4:	dc80aa17 	ldw	r18,680(sp)
100250b8:	dc40a917 	ldw	r17,676(sp)
100250bc:	dc00a817 	ldw	r16,672(sp)
100250c0:	dec0b204 	addi	sp,sp,712
100250c4:	f800283a 	ret
100250c8:	00800944 	movi	r2,37
100250cc:	20801626 	beq	r4,r2,10025128 <__svfscanf_r+0x168>
100250d0:	80800117 	ldw	r2,4(r16)
100250d4:	00800b0e 	bge	zero,r2,10025104 <__svfscanf_r+0x144>
100250d8:	81000017 	ldw	r4,0(r16)
100250dc:	a0ffffc7 	ldb	r3,-1(r20)
100250e0:	20800003 	ldbu	r2,0(r4)
100250e4:	10ffeb1e 	bne	r2,r3,10025094 <__svfscanf_r+0xd4>
100250e8:	80c00117 	ldw	r3,4(r16)
100250ec:	21800044 	addi	r6,r4,1
100250f0:	8c400044 	addi	r17,r17,1
100250f4:	18ffffc4 	addi	r3,r3,-1
100250f8:	80c00115 	stw	r3,4(r16)
100250fc:	81800015 	stw	r6,0(r16)
10025100:	003fc206 	br	1002500c <__svfscanf_r+0x4c>
10025104:	b009883a 	mov	r4,r22
10025108:	800b883a 	mov	r5,r16
1002510c:	002af840 	call	1002af84 <__srefill_r>
10025110:	103ff126 	beq	r2,zero,100250d8 <__svfscanf_r+0x118>
10025114:	d900a217 	ldw	r4,648(sp)
10025118:	2004c91e 	bne	r4,zero,10026440 <__svfscanf_r+0x1480>
1002511c:	00bfffc4 	movi	r2,-1
10025120:	d880a215 	stw	r2,648(sp)
10025124:	003fdb06 	br	10025094 <__svfscanf_r+0xd4>
10025128:	d800a315 	stw	zero,652(sp)
1002512c:	0027883a 	mov	r19,zero
10025130:	a0c00003 	ldbu	r3,0(r20)
10025134:	00801e04 	movi	r2,120
10025138:	a5000044 	addi	r20,r20,1
1002513c:	19403fcc 	andi	r5,r3,255
10025140:	2940201c 	xori	r5,r5,128
10025144:	297fe004 	addi	r5,r5,-128
10025148:	10c08036 	bltu	r2,r3,1002534c <__svfscanf_r+0x38c>
1002514c:	18c5883a 	add	r2,r3,r3
10025150:	1085883a 	add	r2,r2,r2
10025154:	00c400b4 	movhi	r3,4098
10025158:	18d45a04 	addi	r3,r3,20840
1002515c:	10c5883a 	add	r2,r2,r3
10025160:	11000017 	ldw	r4,0(r2)
10025164:	2000683a 	jmp	r4
10025168:	1002511c 	xori	zero,r2,2372
1002516c:	1002534c 	andi	zero,r2,2381
10025170:	1002534c 	andi	zero,r2,2381
10025174:	1002534c 	andi	zero,r2,2381
10025178:	1002534c 	andi	zero,r2,2381
1002517c:	1002534c 	andi	zero,r2,2381
10025180:	1002534c 	andi	zero,r2,2381
10025184:	1002534c 	andi	zero,r2,2381
10025188:	1002534c 	andi	zero,r2,2381
1002518c:	1002534c 	andi	zero,r2,2381
10025190:	1002534c 	andi	zero,r2,2381
10025194:	1002534c 	andi	zero,r2,2381
10025198:	1002534c 	andi	zero,r2,2381
1002519c:	1002534c 	andi	zero,r2,2381
100251a0:	1002534c 	andi	zero,r2,2381
100251a4:	1002534c 	andi	zero,r2,2381
100251a8:	1002534c 	andi	zero,r2,2381
100251ac:	1002534c 	andi	zero,r2,2381
100251b0:	1002534c 	andi	zero,r2,2381
100251b4:	1002534c 	andi	zero,r2,2381
100251b8:	1002534c 	andi	zero,r2,2381
100251bc:	1002534c 	andi	zero,r2,2381
100251c0:	1002534c 	andi	zero,r2,2381
100251c4:	1002534c 	andi	zero,r2,2381
100251c8:	1002534c 	andi	zero,r2,2381
100251cc:	1002534c 	andi	zero,r2,2381
100251d0:	1002534c 	andi	zero,r2,2381
100251d4:	1002534c 	andi	zero,r2,2381
100251d8:	1002534c 	andi	zero,r2,2381
100251dc:	1002534c 	andi	zero,r2,2381
100251e0:	1002534c 	andi	zero,r2,2381
100251e4:	1002534c 	andi	zero,r2,2381
100251e8:	1002534c 	andi	zero,r2,2381
100251ec:	1002534c 	andi	zero,r2,2381
100251f0:	1002534c 	andi	zero,r2,2381
100251f4:	1002534c 	andi	zero,r2,2381
100251f8:	1002534c 	andi	zero,r2,2381
100251fc:	100250d0 	cmplti	zero,r2,2371
10025200:	1002534c 	andi	zero,r2,2381
10025204:	1002534c 	andi	zero,r2,2381
10025208:	1002534c 	andi	zero,r2,2381
1002520c:	1002534c 	andi	zero,r2,2381
10025210:	10026370 	cmpltui	zero,r2,2445
10025214:	1002534c 	andi	zero,r2,2381
10025218:	1002534c 	andi	zero,r2,2381
1002521c:	1002534c 	andi	zero,r2,2381
10025220:	1002534c 	andi	zero,r2,2381
10025224:	1002534c 	andi	zero,r2,2381
10025228:	10025d6c 	andhi	zero,r2,2421
1002522c:	10025d6c 	andhi	zero,r2,2421
10025230:	10025d6c 	andhi	zero,r2,2421
10025234:	10025d6c 	andhi	zero,r2,2421
10025238:	10025d6c 	andhi	zero,r2,2421
1002523c:	10025d6c 	andhi	zero,r2,2421
10025240:	10025d6c 	andhi	zero,r2,2421
10025244:	10025d6c 	andhi	zero,r2,2421
10025248:	10025d6c 	andhi	zero,r2,2421
1002524c:	10025d6c 	andhi	zero,r2,2421
10025250:	1002534c 	andi	zero,r2,2381
10025254:	1002534c 	andi	zero,r2,2381
10025258:	1002534c 	andi	zero,r2,2381
1002525c:	1002534c 	andi	zero,r2,2381
10025260:	1002534c 	andi	zero,r2,2381
10025264:	1002534c 	andi	zero,r2,2381
10025268:	1002534c 	andi	zero,r2,2381
1002526c:	1002534c 	andi	zero,r2,2381
10025270:	1002534c 	andi	zero,r2,2381
10025274:	1002534c 	andi	zero,r2,2381
10025278:	100264ec 	andhi	zero,r2,2451
1002527c:	100264e4 	muli	zero,r2,2451
10025280:	1002534c 	andi	zero,r2,2381
10025284:	100264e4 	muli	zero,r2,2451
10025288:	1002534c 	andi	zero,r2,2381
1002528c:	1002534c 	andi	zero,r2,2381
10025290:	1002534c 	andi	zero,r2,2381
10025294:	1002534c 	andi	zero,r2,2381
10025298:	1002657c 	xorhi	zero,r2,2453
1002529c:	1002534c 	andi	zero,r2,2381
100252a0:	1002534c 	andi	zero,r2,2381
100252a4:	10026534 	orhi	zero,r2,2452
100252a8:	1002534c 	andi	zero,r2,2381
100252ac:	1002534c 	andi	zero,r2,2381
100252b0:	1002534c 	andi	zero,r2,2381
100252b4:	1002534c 	andi	zero,r2,2381
100252b8:	1002534c 	andi	zero,r2,2381
100252bc:	1002534c 	andi	zero,r2,2381
100252c0:	1002534c 	andi	zero,r2,2381
100252c4:	1002534c 	andi	zero,r2,2381
100252c8:	10026378 	rdprs	zero,r2,2445
100252cc:	1002534c 	andi	zero,r2,2381
100252d0:	1002534c 	andi	zero,r2,2381
100252d4:	10026518 	cmpnei	zero,r2,2452
100252d8:	1002534c 	andi	zero,r2,2381
100252dc:	1002534c 	andi	zero,r2,2381
100252e0:	1002534c 	andi	zero,r2,2381
100252e4:	1002534c 	andi	zero,r2,2381
100252e8:	1002534c 	andi	zero,r2,2381
100252ec:	1002534c 	andi	zero,r2,2381
100252f0:	1002534c 	andi	zero,r2,2381
100252f4:	1002650c 	andi	zero,r2,2452
100252f8:	100264f0 	cmpltui	zero,r2,2451
100252fc:	100264e4 	muli	zero,r2,2451
10025300:	100264e4 	muli	zero,r2,2451
10025304:	100264e4 	muli	zero,r2,2451
10025308:	100264dc 	xori	zero,r2,2451
1002530c:	100265d0 	cmplti	zero,r2,2455
10025310:	1002534c 	andi	zero,r2,2381
10025314:	1002534c 	andi	zero,r2,2381
10025318:	100265bc 	xorhi	zero,r2,2454
1002531c:	1002534c 	andi	zero,r2,2381
10025320:	10026554 	ori	zero,r2,2453
10025324:	10026538 	rdprs	zero,r2,2452
10025328:	1002658c 	andi	zero,r2,2454
1002532c:	1002534c 	andi	zero,r2,2381
10025330:	1002534c 	andi	zero,r2,2381
10025334:	10026584 	addi	zero,r2,2454
10025338:	1002534c 	andi	zero,r2,2381
1002533c:	100258bc 	xorhi	zero,r2,2402
10025340:	1002534c 	andi	zero,r2,2381
10025344:	1002534c 	andi	zero,r2,2381
10025348:	10026378 	rdprs	zero,r2,2445
1002534c:	2987883a 	add	r3,r5,r6
10025350:	18800003 	ldbu	r2,0(r3)
10025354:	1080004c 	andi	r2,r2,1
10025358:	1005003a 	cmpeq	r2,r2,zero
1002535c:	10002c26 	beq	r2,zero,10025410 <__svfscanf_r+0x450>
10025360:	010400f4 	movhi	r4,4099
10025364:	2132f904 	addi	r4,r4,-13340
10025368:	00800284 	movi	r2,10
1002536c:	d900a015 	stw	r4,640(sp)
10025370:	054000c4 	movi	r21,3
10025374:	d880a115 	stw	r2,644(sp)
10025378:	80c00117 	ldw	r3,4(r16)
1002537c:	00c14a0e 	bge	zero,r3,100258a8 <__svfscanf_r+0x8e8>
10025380:	9880100c 	andi	r2,r19,64
10025384:	10001326 	beq	r2,zero,100253d4 <__svfscanf_r+0x414>
10025388:	00800104 	movi	r2,4
1002538c:	157f1f36 	bltu	r2,r21,1002500c <__svfscanf_r+0x4c>
10025390:	ad45883a 	add	r2,r21,r21
10025394:	1085883a 	add	r2,r2,r2
10025398:	00c400b4 	movhi	r3,4098
1002539c:	18d4eb04 	addi	r3,r3,21420
100253a0:	10c5883a 	add	r2,r2,r3
100253a4:	11000017 	ldw	r4,0(r2)
100253a8:	2000683a 	jmp	r4
100253ac:	10025418 	cmpnei	zero,r2,2384
100253b0:	10025524 	muli	zero,r2,2388
100253b4:	10025598 	cmpnei	zero,r2,2390
100253b8:	10025884 	addi	zero,r2,2402
100253bc:	100256d0 	cmplti	zero,r2,2395
100253c0:	b009883a 	mov	r4,r22
100253c4:	800b883a 	mov	r5,r16
100253c8:	002af840 	call	1002af84 <__srefill_r>
100253cc:	103f511e 	bne	r2,zero,10025114 <__svfscanf_r+0x154>
100253d0:	8c400044 	addi	r17,r17,1
100253d4:	81400017 	ldw	r5,0(r16)
100253d8:	90800017 	ldw	r2,0(r18)
100253dc:	28c00003 	ldbu	r3,0(r5)
100253e0:	1887883a 	add	r3,r3,r2
100253e4:	19000003 	ldbu	r4,0(r3)
100253e8:	2100020c 	andi	r4,r4,8
100253ec:	203fe626 	beq	r4,zero,10025388 <__svfscanf_r+0x3c8>
100253f0:	80c00117 	ldw	r3,4(r16)
100253f4:	18ffffc4 	addi	r3,r3,-1
100253f8:	80c00115 	stw	r3,4(r16)
100253fc:	00fff00e 	bge	zero,r3,100253c0 <__svfscanf_r+0x400>
10025400:	29800044 	addi	r6,r5,1
10025404:	8c400044 	addi	r17,r17,1
10025408:	81800015 	stw	r6,0(r16)
1002540c:	003ff106 	br	100253d4 <__svfscanf_r+0x414>
10025410:	9cc00054 	ori	r19,r19,1
10025414:	003fd206 	br	10025360 <__svfscanf_r+0x3a0>
10025418:	d8c0a317 	ldw	r3,652(sp)
1002541c:	1800021e 	bne	r3,zero,10025428 <__svfscanf_r+0x468>
10025420:	01000044 	movi	r4,1
10025424:	d900a315 	stw	r4,652(sp)
10025428:	9880004c 	andi	r2,r19,1
1002542c:	1005003a 	cmpeq	r2,r2,zero
10025430:	1003d91e 	bne	r2,zero,10026398 <__svfscanf_r+0x13d8>
10025434:	9d40040c 	andi	r21,r19,16
10025438:	a839003a 	cmpeq	fp,r21,zero
1002543c:	e0042526 	beq	fp,zero,100264d4 <__svfscanf_r+0x1514>
10025440:	d880a417 	ldw	r2,656(sp)
10025444:	14c00017 	ldw	r19,0(r2)
10025448:	10800104 	addi	r2,r2,4
1002544c:	d880a415 	stw	r2,656(sp)
10025450:	d8c0a317 	ldw	r3,652(sp)
10025454:	18041a26 	beq	r3,zero,100264c0 <__svfscanf_r+0x1500>
10025458:	01000034 	movhi	r4,0
1002545c:	210b0c04 	addi	r4,r4,11312
10025460:	20800017 	ldw	r2,0(r4)
10025464:	103f2b26 	beq	r2,zero,10025114 <__svfscanf_r+0x154>
10025468:	d8804404 	addi	r2,sp,272
1002546c:	0025883a 	mov	r18,zero
10025470:	d880a615 	stw	r2,664(sp)
10025474:	05ffffc4 	movi	r23,-1
10025478:	80800017 	ldw	r2,0(r16)
1002547c:	80c00117 	ldw	r3,4(r16)
10025480:	d900a617 	ldw	r4,664(sp)
10025484:	12000003 	ldbu	r8,0(r2)
10025488:	18ffffc4 	addi	r3,r3,-1
1002548c:	11800044 	addi	r6,r2,1
10025490:	248f883a 	add	r7,r4,r18
10025494:	80c00115 	stw	r3,4(r16)
10025498:	81800015 	stw	r6,0(r16)
1002549c:	3a000005 	stb	r8,0(r7)
100254a0:	d9000204 	addi	r4,sp,8
100254a4:	000b883a 	mov	r5,zero
100254a8:	01800204 	movi	r6,8
100254ac:	00297180 	call	10029718 <memset>
100254b0:	d980a617 	ldw	r6,664(sp)
100254b4:	94800044 	addi	r18,r18,1
100254b8:	d8800204 	addi	r2,sp,8
100254bc:	b009883a 	mov	r4,r22
100254c0:	980b883a 	mov	r5,r19
100254c4:	900f883a 	mov	r7,r18
100254c8:	d8800015 	stw	r2,0(sp)
100254cc:	00294540 	call	10029454 <_mbrtowc_r>
100254d0:	1007883a 	mov	r3,r2
100254d4:	15ff0f26 	beq	r2,r23,10025114 <__svfscanf_r+0x154>
100254d8:	1003f11e 	bne	r2,zero,100264a0 <__svfscanf_r+0x14e0>
100254dc:	a800011e 	bne	r21,zero,100254e4 <__svfscanf_r+0x524>
100254e0:	98000015 	stw	zero,0(r19)
100254e4:	d8c0a317 	ldw	r3,652(sp)
100254e8:	8ca3883a 	add	r17,r17,r18
100254ec:	18ffffc4 	addi	r3,r3,-1
100254f0:	d8c0a315 	stw	r3,652(sp)
100254f4:	e0000126 	beq	fp,zero,100254fc <__svfscanf_r+0x53c>
100254f8:	9cc00104 	addi	r19,r19,4
100254fc:	0025883a 	mov	r18,zero
10025500:	80c00117 	ldw	r3,4(r16)
10025504:	00c3e90e 	bge	zero,r3,100264ac <__svfscanf_r+0x14ec>
10025508:	d900a317 	ldw	r4,652(sp)
1002550c:	2003ec26 	beq	r4,zero,100264c0 <__svfscanf_r+0x1500>
10025510:	00c00034 	movhi	r3,0
10025514:	18cb0c04 	addi	r3,r3,11312
10025518:	18800017 	ldw	r2,0(r3)
1002551c:	90bfd61e 	bne	r18,r2,10025478 <__svfscanf_r+0x4b8>
10025520:	003efc06 	br	10025114 <__svfscanf_r+0x154>
10025524:	d880a317 	ldw	r2,652(sp)
10025528:	1000021e 	bne	r2,zero,10025534 <__svfscanf_r+0x574>
1002552c:	00ffffc4 	movi	r3,-1
10025530:	d8c0a315 	stw	r3,652(sp)
10025534:	9880040c 	andi	r2,r19,16
10025538:	10036526 	beq	r2,zero,100262d0 <__svfscanf_r+0x1310>
1002553c:	0027883a 	mov	r19,zero
10025540:	dd400404 	addi	r21,sp,16
10025544:	81000017 	ldw	r4,0(r16)
10025548:	20800003 	ldbu	r2,0(r4)
1002554c:	a885883a 	add	r2,r21,r2
10025550:	10c00007 	ldb	r3,0(r2)
10025554:	1803be26 	beq	r3,zero,10026450 <__svfscanf_r+0x1490>
10025558:	80c00117 	ldw	r3,4(r16)
1002555c:	21800044 	addi	r6,r4,1
10025560:	d900a317 	ldw	r4,652(sp)
10025564:	18ffffc4 	addi	r3,r3,-1
10025568:	9cc00044 	addi	r19,r19,1
1002556c:	81800015 	stw	r6,0(r16)
10025570:	80c00115 	stw	r3,4(r16)
10025574:	24c3b626 	beq	r4,r19,10026450 <__svfscanf_r+0x1490>
10025578:	00fff216 	blt	zero,r3,10025544 <__svfscanf_r+0x584>
1002557c:	b009883a 	mov	r4,r22
10025580:	800b883a 	mov	r5,r16
10025584:	002af840 	call	1002af84 <__srefill_r>
10025588:	103fee26 	beq	r2,zero,10025544 <__svfscanf_r+0x584>
1002558c:	983ee126 	beq	r19,zero,10025114 <__svfscanf_r+0x154>
10025590:	8ce3883a 	add	r17,r17,r19
10025594:	003e9d06 	br	1002500c <__svfscanf_r+0x4c>
10025598:	d900a317 	ldw	r4,652(sp)
1002559c:	2000021e 	bne	r4,zero,100255a8 <__svfscanf_r+0x5e8>
100255a0:	00bfffc4 	movi	r2,-1
100255a4:	d880a315 	stw	r2,652(sp)
100255a8:	9880004c 	andi	r2,r19,1
100255ac:	1005003a 	cmpeq	r2,r2,zero
100255b0:	1001f41e 	bne	r2,zero,10025d84 <__svfscanf_r+0xdc4>
100255b4:	9dc0040c 	andi	r23,r19,16
100255b8:	b807003a 	cmpeq	r3,r23,zero
100255bc:	d8c0a515 	stw	r3,660(sp)
100255c0:	1803b21e 	bne	r3,zero,1002648c <__svfscanf_r+0x14cc>
100255c4:	dd400104 	addi	r21,sp,4
100255c8:	0027883a 	mov	r19,zero
100255cc:	073fffc4 	movi	fp,-1
100255d0:	81400017 	ldw	r5,0(r16)
100255d4:	90800017 	ldw	r2,0(r18)
100255d8:	29c00003 	ldbu	r7,0(r5)
100255dc:	38c03fcc 	andi	r3,r7,255
100255e0:	1887883a 	add	r3,r3,r2
100255e4:	19000003 	ldbu	r4,0(r3)
100255e8:	2100020c 	andi	r4,r4,8
100255ec:	2000321e 	bne	r4,zero,100256b8 <__svfscanf_r+0x6f8>
100255f0:	d8c0a317 	ldw	r3,652(sp)
100255f4:	18003026 	beq	r3,zero,100256b8 <__svfscanf_r+0x6f8>
100255f8:	00800034 	movhi	r2,0
100255fc:	108b0c04 	addi	r2,r2,11312
10025600:	10c00017 	ldw	r3,0(r2)
10025604:	98fec326 	beq	r19,r3,10025114 <__svfscanf_r+0x154>
10025608:	d8c04404 	addi	r3,sp,272
1002560c:	80800117 	ldw	r2,4(r16)
10025610:	d8c0a615 	stw	r3,664(sp)
10025614:	d900a617 	ldw	r4,664(sp)
10025618:	10ffffc4 	addi	r3,r2,-1
1002561c:	29800044 	addi	r6,r5,1
10025620:	80c00115 	stw	r3,4(r16)
10025624:	24c5883a 	add	r2,r4,r19
10025628:	81800015 	stw	r6,0(r16)
1002562c:	d9000204 	addi	r4,sp,8
10025630:	000b883a 	mov	r5,zero
10025634:	01800204 	movi	r6,8
10025638:	11c00005 	stb	r7,0(r2)
1002563c:	00297180 	call	10029718 <memset>
10025640:	d980a617 	ldw	r6,664(sp)
10025644:	9cc00044 	addi	r19,r19,1
10025648:	d8800204 	addi	r2,sp,8
1002564c:	b009883a 	mov	r4,r22
10025650:	a80b883a 	mov	r5,r21
10025654:	980f883a 	mov	r7,r19
10025658:	d8800015 	stw	r2,0(sp)
1002565c:	00294540 	call	10029454 <_mbrtowc_r>
10025660:	1007883a 	mov	r3,r2
10025664:	173eab26 	beq	r2,fp,10025114 <__svfscanf_r+0x154>
10025668:	1003851e 	bne	r2,zero,10026480 <__svfscanf_r+0x14c0>
1002566c:	a8000015 	stw	zero,0(r21)
10025670:	a9000017 	ldw	r4,0(r21)
10025674:	00291d00 	call	100291d0 <iswspace>
10025678:	1003781e 	bne	r2,zero,1002645c <__svfscanf_r+0x149c>
1002567c:	d900a317 	ldw	r4,652(sp)
10025680:	d880a517 	ldw	r2,660(sp)
10025684:	8ce3883a 	add	r17,r17,r19
10025688:	213fffc4 	addi	r4,r4,-1
1002568c:	d900a315 	stw	r4,652(sp)
10025690:	10000126 	beq	r2,zero,10025698 <__svfscanf_r+0x6d8>
10025694:	ad400104 	addi	r21,r21,4
10025698:	0027883a 	mov	r19,zero
1002569c:	80c00117 	ldw	r3,4(r16)
100256a0:	00ffcb16 	blt	zero,r3,100255d0 <__svfscanf_r+0x610>
100256a4:	b009883a 	mov	r4,r22
100256a8:	800b883a 	mov	r5,r16
100256ac:	002af840 	call	1002af84 <__srefill_r>
100256b0:	103fc726 	beq	r2,zero,100255d0 <__svfscanf_r+0x610>
100256b4:	983e971e 	bne	r19,zero,10025114 <__svfscanf_r+0x154>
100256b8:	b83e541e 	bne	r23,zero,1002500c <__svfscanf_r+0x4c>
100256bc:	d900a217 	ldw	r4,648(sp)
100256c0:	a8000015 	stw	zero,0(r21)
100256c4:	21000044 	addi	r4,r4,1
100256c8:	d900a215 	stw	r4,648(sp)
100256cc:	003e4f06 	br	1002500c <__svfscanf_r+0x4c>
100256d0:	d900a317 	ldw	r4,652(sp)
100256d4:	00805704 	movi	r2,348
100256d8:	20ffffc4 	addi	r3,r4,-1
100256dc:	10c1ed2e 	bgeu	r2,r3,10025e94 <__svfscanf_r+0xed4>
100256e0:	00805744 	movi	r2,349
100256e4:	21bfa8c4 	addi	r6,r4,-349
100256e8:	9d41e014 	ori	r21,r19,1920
100256ec:	d880a315 	stw	r2,652(sp)
100256f0:	d8c04404 	addi	r3,sp,272
100256f4:	d8c0a615 	stw	r3,664(sp)
100256f8:	182f883a 	mov	r23,r3
100256fc:	d8009f15 	stw	zero,636(sp)
10025700:	d8009e15 	stw	zero,632(sp)
10025704:	d8009d15 	stw	zero,628(sp)
10025708:	d8009c15 	stw	zero,624(sp)
1002570c:	0039883a 	mov	fp,zero
10025710:	0025883a 	mov	r18,zero
10025714:	80800017 	ldw	r2,0(r16)
10025718:	11400003 	ldbu	r5,0(r2)
1002571c:	00801384 	movi	r2,78
10025720:	28fff544 	addi	r3,r5,-43
10025724:	18c03fcc 	andi	r3,r3,255
10025728:	10c07d36 	bltu	r2,r3,10025920 <__svfscanf_r+0x960>
1002572c:	18c5883a 	add	r2,r3,r3
10025730:	1085883a 	add	r2,r2,r2
10025734:	00c400b4 	movhi	r3,4098
10025738:	18d5d204 	addi	r3,r3,22344
1002573c:	10c5883a 	add	r2,r2,r3
10025740:	11000017 	ldw	r4,0(r2)
10025744:	2000683a 	jmp	r4
10025748:	100258d8 	cmpnei	zero,r2,2403
1002574c:	10025920 	cmpeqi	zero,r2,2404
10025750:	100258d8 	cmpnei	zero,r2,2403
10025754:	10025a6c 	andhi	zero,r2,2409
10025758:	10025920 	cmpeqi	zero,r2,2404
1002575c:	10025aa4 	muli	zero,r2,2410
10025760:	10025ad8 	cmpnei	zero,r2,2411
10025764:	10025ad8 	cmpnei	zero,r2,2411
10025768:	10025ad8 	cmpnei	zero,r2,2411
1002576c:	10025ad8 	cmpnei	zero,r2,2411
10025770:	10025ad8 	cmpnei	zero,r2,2411
10025774:	10025ad8 	cmpnei	zero,r2,2411
10025778:	10025ad8 	cmpnei	zero,r2,2411
1002577c:	10025ad8 	cmpnei	zero,r2,2411
10025780:	10025ad8 	cmpnei	zero,r2,2411
10025784:	10025920 	cmpeqi	zero,r2,2404
10025788:	10025920 	cmpeqi	zero,r2,2404
1002578c:	10025920 	cmpeqi	zero,r2,2404
10025790:	10025920 	cmpeqi	zero,r2,2404
10025794:	10025920 	cmpeqi	zero,r2,2404
10025798:	10025920 	cmpeqi	zero,r2,2404
1002579c:	10025920 	cmpeqi	zero,r2,2404
100257a0:	10025af8 	rdprs	zero,r2,2411
100257a4:	10025920 	cmpeqi	zero,r2,2404
100257a8:	10025920 	cmpeqi	zero,r2,2404
100257ac:	10025920 	cmpeqi	zero,r2,2404
100257b0:	10025b08 	cmpgei	zero,r2,2412
100257b4:	10025ba4 	muli	zero,r2,2414
100257b8:	10025920 	cmpeqi	zero,r2,2404
100257bc:	10025920 	cmpeqi	zero,r2,2404
100257c0:	10025bc0 	call	110025bc <__flash_rwdata_start+0xfce3a0>
100257c4:	10025920 	cmpeqi	zero,r2,2404
100257c8:	10025920 	cmpeqi	zero,r2,2404
100257cc:	10025920 	cmpeqi	zero,r2,2404
100257d0:	10025920 	cmpeqi	zero,r2,2404
100257d4:	10025bec 	andhi	zero,r2,2415
100257d8:	10025920 	cmpeqi	zero,r2,2404
100257dc:	10025920 	cmpeqi	zero,r2,2404
100257e0:	10025920 	cmpeqi	zero,r2,2404
100257e4:	10025920 	cmpeqi	zero,r2,2404
100257e8:	10025920 	cmpeqi	zero,r2,2404
100257ec:	10025c40 	call	110025c4 <__flash_rwdata_start+0xfce3a8>
100257f0:	10025920 	cmpeqi	zero,r2,2404
100257f4:	10025920 	cmpeqi	zero,r2,2404
100257f8:	10025920 	cmpeqi	zero,r2,2404
100257fc:	10025920 	cmpeqi	zero,r2,2404
10025800:	10025d50 	cmplti	zero,r2,2421
10025804:	10025920 	cmpeqi	zero,r2,2404
10025808:	10025920 	cmpeqi	zero,r2,2404
1002580c:	10025920 	cmpeqi	zero,r2,2404
10025810:	10025920 	cmpeqi	zero,r2,2404
10025814:	10025920 	cmpeqi	zero,r2,2404
10025818:	10025920 	cmpeqi	zero,r2,2404
1002581c:	10025920 	cmpeqi	zero,r2,2404
10025820:	10025af8 	rdprs	zero,r2,2411
10025824:	10025920 	cmpeqi	zero,r2,2404
10025828:	10025920 	cmpeqi	zero,r2,2404
1002582c:	10025920 	cmpeqi	zero,r2,2404
10025830:	10025b08 	cmpgei	zero,r2,2412
10025834:	10025ba4 	muli	zero,r2,2414
10025838:	10025920 	cmpeqi	zero,r2,2404
1002583c:	10025920 	cmpeqi	zero,r2,2404
10025840:	10025bc0 	call	110025bc <__flash_rwdata_start+0xfce3a0>
10025844:	10025920 	cmpeqi	zero,r2,2404
10025848:	10025920 	cmpeqi	zero,r2,2404
1002584c:	10025920 	cmpeqi	zero,r2,2404
10025850:	10025920 	cmpeqi	zero,r2,2404
10025854:	10025bec 	andhi	zero,r2,2415
10025858:	10025920 	cmpeqi	zero,r2,2404
1002585c:	10025920 	cmpeqi	zero,r2,2404
10025860:	10025920 	cmpeqi	zero,r2,2404
10025864:	10025920 	cmpeqi	zero,r2,2404
10025868:	10025920 	cmpeqi	zero,r2,2404
1002586c:	10025c40 	call	110025c4 <__flash_rwdata_start+0xfce3a8>
10025870:	10025920 	cmpeqi	zero,r2,2404
10025874:	10025920 	cmpeqi	zero,r2,2404
10025878:	10025920 	cmpeqi	zero,r2,2404
1002587c:	10025920 	cmpeqi	zero,r2,2404
10025880:	10025d50 	cmplti	zero,r2,2421
10025884:	d900a317 	ldw	r4,652(sp)
10025888:	00805704 	movi	r2,348
1002588c:	20ffffc4 	addi	r3,r4,-1
10025890:	10c18c2e 	bgeu	r2,r3,10025ec4 <__svfscanf_r+0xf04>
10025894:	00805744 	movi	r2,349
10025898:	257fa8c4 	addi	r21,r4,-349
1002589c:	9c836014 	ori	r18,r19,3456
100258a0:	d880a315 	stw	r2,652(sp)
100258a4:	0001a106 	br	10025f2c <__svfscanf_r+0xf6c>
100258a8:	b009883a 	mov	r4,r22
100258ac:	800b883a 	mov	r5,r16
100258b0:	002af840 	call	1002af84 <__srefill_r>
100258b4:	103eb226 	beq	r2,zero,10025380 <__svfscanf_r+0x3c0>
100258b8:	003e1606 	br	10025114 <__svfscanf_r+0x154>
100258bc:	01000284 	movi	r4,10
100258c0:	008400f4 	movhi	r2,4099
100258c4:	10b45904 	addi	r2,r2,-11932
100258c8:	054000c4 	movi	r21,3
100258cc:	d900a115 	stw	r4,644(sp)
100258d0:	d880a015 	stw	r2,640(sp)
100258d4:	003ea806 	br	10025378 <__svfscanf_r+0x3b8>
100258d8:	a880200c 	andi	r2,r21,128
100258dc:	10001026 	beq	r2,zero,10025920 <__svfscanf_r+0x960>
100258e0:	00bfdfc4 	movi	r2,-129
100258e4:	a8aa703a 	and	r21,r21,r2
100258e8:	b9400005 	stb	r5,0(r23)
100258ec:	bdc00044 	addi	r23,r23,1
100258f0:	80c00117 	ldw	r3,4(r16)
100258f4:	8c400044 	addi	r17,r17,1
100258f8:	18bfffc4 	addi	r2,r3,-1
100258fc:	80800115 	stw	r2,4(r16)
10025900:	0080610e 	bge	zero,r2,10025a88 <__svfscanf_r+0xac8>
10025904:	80800017 	ldw	r2,0(r16)
10025908:	10800044 	addi	r2,r2,1
1002590c:	80800015 	stw	r2,0(r16)
10025910:	d880a317 	ldw	r2,652(sp)
10025914:	10bfffc4 	addi	r2,r2,-1
10025918:	d880a315 	stw	r2,652(sp)
1002591c:	103f7d1e 	bne	r2,zero,10025714 <__svfscanf_r+0x754>
10025920:	d8c09e17 	ldw	r3,632(sp)
10025924:	18000226 	beq	r3,zero,10025930 <__svfscanf_r+0x970>
10025928:	00bfbfc4 	movi	r2,-257
1002592c:	a8aa703a 	and	r21,r21,r2
10025930:	90ffffc4 	addi	r3,r18,-1
10025934:	00800044 	movi	r2,1
10025938:	10c0cd2e 	bgeu	r2,r3,10025c70 <__svfscanf_r+0xcb0>
1002593c:	e1003fcc 	andi	r4,fp,255
10025940:	2100201c 	xori	r4,r4,128
10025944:	213fe004 	addi	r4,r4,-128
10025948:	20ffffc4 	addi	r3,r4,-1
1002594c:	00800184 	movi	r2,6
10025950:	10c01736 	bltu	r2,r3,100259b0 <__svfscanf_r+0x9f0>
10025954:	00c00084 	movi	r3,2
10025958:	1900880e 	bge	r3,r4,10025b7c <__svfscanf_r+0xbbc>
1002595c:	008000c4 	movi	r2,3
10025960:	1100130e 	bge	r2,r4,100259b0 <__svfscanf_r+0x9f0>
10025964:	e4ffffc4 	addi	r19,fp,-1
10025968:	b825883a 	mov	r18,r23
1002596c:	94bfffc4 	addi	r18,r18,-1
10025970:	91400007 	ldb	r5,0(r18)
10025974:	b009883a 	mov	r4,r22
10025978:	800d883a 	mov	r6,r16
1002597c:	002d7840 	call	1002d784 <_ungetc_r>
10025980:	9cffffc4 	addi	r19,r19,-1
10025984:	98c03fcc 	andi	r3,r19,255
10025988:	18c0201c 	xori	r3,r3,128
1002598c:	18ffe004 	addi	r3,r3,-128
10025990:	00800084 	movi	r2,2
10025994:	18bff51e 	bne	r3,r2,1002596c <__svfscanf_r+0x9ac>
10025998:	e0bfff04 	addi	r2,fp,-4
1002599c:	10803fcc 	andi	r2,r2,255
100259a0:	b887c83a 	sub	r3,r23,r2
100259a4:	8885c83a 	sub	r2,r17,r2
100259a8:	147fffc4 	addi	r17,r2,-1
100259ac:	1dffffc4 	addi	r23,r3,-1
100259b0:	a880400c 	andi	r2,r21,256
100259b4:	10001226 	beq	r2,zero,10025a00 <__svfscanf_r+0xa40>
100259b8:	a881000c 	andi	r2,r21,1024
100259bc:	1000651e 	bne	r2,zero,10025b54 <__svfscanf_r+0xb94>
100259c0:	bdffffc4 	addi	r23,r23,-1
100259c4:	b9400007 	ldb	r5,0(r23)
100259c8:	00801944 	movi	r2,101
100259cc:	8c7fffc4 	addi	r17,r17,-1
100259d0:	28800826 	beq	r5,r2,100259f4 <__svfscanf_r+0xa34>
100259d4:	00801144 	movi	r2,69
100259d8:	28800626 	beq	r5,r2,100259f4 <__svfscanf_r+0xa34>
100259dc:	bdffffc4 	addi	r23,r23,-1
100259e0:	b009883a 	mov	r4,r22
100259e4:	800d883a 	mov	r6,r16
100259e8:	002d7840 	call	1002d784 <_ungetc_r>
100259ec:	b9400007 	ldb	r5,0(r23)
100259f0:	8c7fffc4 	addi	r17,r17,-1
100259f4:	b009883a 	mov	r4,r22
100259f8:	800d883a 	mov	r6,r16
100259fc:	002d7840 	call	1002d784 <_ungetc_r>
10025a00:	a880040c 	andi	r2,r21,16
10025a04:	103d811e 	bne	r2,zero,1002500c <__svfscanf_r+0x4c>
10025a08:	a8c1800c 	andi	r3,r21,1536
10025a0c:	00810004 	movi	r2,1024
10025a10:	b8000005 	stb	zero,0(r23)
10025a14:	1880bb26 	beq	r3,r2,10025d04 <__svfscanf_r+0xd44>
10025a18:	d8809d17 	ldw	r2,628(sp)
10025a1c:	1000a61e 	bne	r2,zero,10025cb8 <__svfscanf_r+0xcf8>
10025a20:	d940a617 	ldw	r5,664(sp)
10025a24:	b009883a 	mov	r4,r22
10025a28:	000d883a 	mov	r6,zero
10025a2c:	002b5c00 	call	1002b5c0 <_strtod_r>
10025a30:	a900004c 	andi	r4,r21,1
10025a34:	2009003a 	cmpeq	r4,r4,zero
10025a38:	1025883a 	mov	r18,r2
10025a3c:	1827883a 	mov	r19,r3
10025a40:	2000951e 	bne	r4,zero,10025c98 <__svfscanf_r+0xcd8>
10025a44:	d8c0a417 	ldw	r3,656(sp)
10025a48:	18800017 	ldw	r2,0(r3)
10025a4c:	1d400104 	addi	r21,r3,4
10025a50:	14c00115 	stw	r19,4(r2)
10025a54:	14800015 	stw	r18,0(r2)
10025a58:	d8c0a217 	ldw	r3,648(sp)
10025a5c:	dd40a415 	stw	r21,656(sp)
10025a60:	18c00044 	addi	r3,r3,1
10025a64:	d8c0a215 	stw	r3,648(sp)
10025a68:	003d6806 	br	1002500c <__svfscanf_r+0x4c>
10025a6c:	a880800c 	andi	r2,r21,512
10025a70:	103fab26 	beq	r2,zero,10025920 <__svfscanf_r+0x960>
10025a74:	d9009e17 	ldw	r4,632(sp)
10025a78:	00bf5fc4 	movi	r2,-641
10025a7c:	a8aa703a 	and	r21,r21,r2
10025a80:	d9009f15 	stw	r4,636(sp)
10025a84:	003f9806 	br	100258e8 <__svfscanf_r+0x928>
10025a88:	b009883a 	mov	r4,r22
10025a8c:	800b883a 	mov	r5,r16
10025a90:	d980a715 	stw	r6,668(sp)
10025a94:	002af840 	call	1002af84 <__srefill_r>
10025a98:	d980a717 	ldw	r6,668(sp)
10025a9c:	103f9c26 	beq	r2,zero,10025910 <__svfscanf_r+0x950>
10025aa0:	003f9f06 	br	10025920 <__svfscanf_r+0x960>
10025aa4:	a880400c 	andi	r2,r21,256
10025aa8:	10000b26 	beq	r2,zero,10025ad8 <__svfscanf_r+0xb18>
10025aac:	00bfdfc4 	movi	r2,-129
10025ab0:	a8aa703a 	and	r21,r21,r2
10025ab4:	d8809e17 	ldw	r2,632(sp)
10025ab8:	10800044 	addi	r2,r2,1
10025abc:	d8809e15 	stw	r2,632(sp)
10025ac0:	303f8b26 	beq	r6,zero,100258f0 <__svfscanf_r+0x930>
10025ac4:	d8c0a317 	ldw	r3,652(sp)
10025ac8:	31bfffc4 	addi	r6,r6,-1
10025acc:	18c00044 	addi	r3,r3,1
10025ad0:	d8c0a315 	stw	r3,652(sp)
10025ad4:	003f8606 	br	100258f0 <__svfscanf_r+0x930>
10025ad8:	e0803fcc 	andi	r2,fp,255
10025adc:	1080201c 	xori	r2,r2,128
10025ae0:	10bfe004 	addi	r2,r2,-128
10025ae4:	9085883a 	add	r2,r18,r2
10025ae8:	103f8d1e 	bne	r2,zero,10025920 <__svfscanf_r+0x960>
10025aec:	00bf9fc4 	movi	r2,-385
10025af0:	a8aa703a 	and	r21,r21,r2
10025af4:	003f7c06 	br	100258e8 <__svfscanf_r+0x928>
10025af8:	00800044 	movi	r2,1
10025afc:	90bf881e 	bne	r18,r2,10025920 <__svfscanf_r+0x960>
10025b00:	04800084 	movi	r18,2
10025b04:	003f7806 	br	100258e8 <__svfscanf_r+0x928>
10025b08:	a8c1400c 	andi	r3,r21,1280
10025b0c:	00810004 	movi	r2,1024
10025b10:	18800426 	beq	r3,r2,10025b24 <__svfscanf_r+0xb64>
10025b14:	a884703a 	and	r2,r21,r2
10025b18:	103f8126 	beq	r2,zero,10025920 <__svfscanf_r+0x960>
10025b1c:	d8809e17 	ldw	r2,632(sp)
10025b20:	103f8326 	beq	r2,zero,10025930 <__svfscanf_r+0x970>
10025b24:	a880800c 	andi	r2,r21,512
10025b28:	1000051e 	bne	r2,zero,10025b40 <__svfscanf_r+0xb80>
10025b2c:	d8c09e17 	ldw	r3,632(sp)
10025b30:	d9009f17 	ldw	r4,636(sp)
10025b34:	ddc09c15 	stw	r23,624(sp)
10025b38:	1907c83a 	sub	r3,r3,r4
10025b3c:	d8c09d15 	stw	r3,628(sp)
10025b40:	00be7fc4 	movi	r2,-1537
10025b44:	a884703a 	and	r2,r21,r2
10025b48:	15406014 	ori	r21,r2,384
10025b4c:	d8009e15 	stw	zero,632(sp)
10025b50:	003f6506 	br	100258e8 <__svfscanf_r+0x928>
10025b54:	d900a617 	ldw	r4,664(sp)
10025b58:	25fd4e2e 	bgeu	r4,r23,10025094 <__svfscanf_r+0xd4>
10025b5c:	bdffffc4 	addi	r23,r23,-1
10025b60:	b9400007 	ldb	r5,0(r23)
10025b64:	b009883a 	mov	r4,r22
10025b68:	800d883a 	mov	r6,r16
10025b6c:	002d7840 	call	1002d784 <_ungetc_r>
10025b70:	d880a617 	ldw	r2,664(sp)
10025b74:	15fff936 	bltu	r2,r23,10025b5c <__svfscanf_r+0xb9c>
10025b78:	003d4606 	br	10025094 <__svfscanf_r+0xd4>
10025b7c:	d900a617 	ldw	r4,664(sp)
10025b80:	25fd442e 	bgeu	r4,r23,10025094 <__svfscanf_r+0xd4>
10025b84:	bdffffc4 	addi	r23,r23,-1
10025b88:	b9400007 	ldb	r5,0(r23)
10025b8c:	b009883a 	mov	r4,r22
10025b90:	800d883a 	mov	r6,r16
10025b94:	002d7840 	call	1002d784 <_ungetc_r>
10025b98:	d8c0a617 	ldw	r3,664(sp)
10025b9c:	1dfff936 	bltu	r3,r23,10025b84 <__svfscanf_r+0xbc4>
10025ba0:	003d3c06 	br	10025094 <__svfscanf_r+0xd4>
10025ba4:	e0c03fcc 	andi	r3,fp,255
10025ba8:	18c0201c 	xori	r3,r3,128
10025bac:	18ffe004 	addi	r3,r3,-128
10025bb0:	00800084 	movi	r2,2
10025bb4:	18bf5a1e 	bne	r3,r2,10025920 <__svfscanf_r+0x960>
10025bb8:	070000c4 	movi	fp,3
10025bbc:	003f4a06 	br	100258e8 <__svfscanf_r+0x928>
10025bc0:	e0c03fcc 	andi	r3,fp,255
10025bc4:	18c0201c 	xori	r3,r3,128
10025bc8:	18ffe004 	addi	r3,r3,-128
10025bcc:	1800231e 	bne	r3,zero,10025c5c <__svfscanf_r+0xc9c>
10025bd0:	a8c1c00c 	andi	r3,r21,1792
10025bd4:	0081c004 	movi	r2,1792
10025bd8:	18bf511e 	bne	r3,r2,10025920 <__svfscanf_r+0x960>
10025bdc:	00be1fc4 	movi	r2,-1921
10025be0:	a8aa703a 	and	r21,r21,r2
10025be4:	07000044 	movi	fp,1
10025be8:	003f3f06 	br	100258e8 <__svfscanf_r+0x928>
10025bec:	9000101e 	bne	r18,zero,10025c30 <__svfscanf_r+0xc70>
10025bf0:	a8c1c00c 	andi	r3,r21,1792
10025bf4:	0081c004 	movi	r2,1792
10025bf8:	18800926 	beq	r3,r2,10025c20 <__svfscanf_r+0xc60>
10025bfc:	e0c03fcc 	andi	r3,fp,255
10025c00:	18c0201c 	xori	r3,r3,128
10025c04:	18ffe004 	addi	r3,r3,-128
10025c08:	00800044 	movi	r2,1
10025c0c:	18800226 	beq	r3,r2,10025c18 <__svfscanf_r+0xc58>
10025c10:	00800104 	movi	r2,4
10025c14:	18bf421e 	bne	r3,r2,10025920 <__svfscanf_r+0x960>
10025c18:	e7000044 	addi	fp,fp,1
10025c1c:	003f3206 	br	100258e8 <__svfscanf_r+0x928>
10025c20:	00be1fc4 	movi	r2,-1921
10025c24:	a8aa703a 	and	r21,r21,r2
10025c28:	04800044 	movi	r18,1
10025c2c:	003f2e06 	br	100258e8 <__svfscanf_r+0x928>
10025c30:	00800084 	movi	r2,2
10025c34:	90bff11e 	bne	r18,r2,10025bfc <__svfscanf_r+0xc3c>
10025c38:	048000c4 	movi	r18,3
10025c3c:	003f2a06 	br	100258e8 <__svfscanf_r+0x928>
10025c40:	e0c03fcc 	andi	r3,fp,255
10025c44:	18c0201c 	xori	r3,r3,128
10025c48:	18ffe004 	addi	r3,r3,-128
10025c4c:	00800184 	movi	r2,6
10025c50:	18bf331e 	bne	r3,r2,10025920 <__svfscanf_r+0x960>
10025c54:	070001c4 	movi	fp,7
10025c58:	003f2306 	br	100258e8 <__svfscanf_r+0x928>
10025c5c:	008000c4 	movi	r2,3
10025c60:	18bfed26 	beq	r3,r2,10025c18 <__svfscanf_r+0xc58>
10025c64:	00800144 	movi	r2,5
10025c68:	18bfeb26 	beq	r3,r2,10025c18 <__svfscanf_r+0xc58>
10025c6c:	003f2c06 	br	10025920 <__svfscanf_r+0x960>
10025c70:	d900a617 	ldw	r4,664(sp)
10025c74:	25fd072e 	bgeu	r4,r23,10025094 <__svfscanf_r+0xd4>
10025c78:	bdffffc4 	addi	r23,r23,-1
10025c7c:	b9400007 	ldb	r5,0(r23)
10025c80:	b009883a 	mov	r4,r22
10025c84:	800d883a 	mov	r6,r16
10025c88:	002d7840 	call	1002d784 <_ungetc_r>
10025c8c:	d880a617 	ldw	r2,664(sp)
10025c90:	15fff936 	bltu	r2,r23,10025c78 <__svfscanf_r+0xcb8>
10025c94:	003cff06 	br	10025094 <__svfscanf_r+0xd4>
10025c98:	a880008c 	andi	r2,r21,2
10025c9c:	10002026 	beq	r2,zero,10025d20 <__svfscanf_r+0xd60>
10025ca0:	d900a417 	ldw	r4,656(sp)
10025ca4:	20800017 	ldw	r2,0(r4)
10025ca8:	25400104 	addi	r21,r4,4
10025cac:	10c00115 	stw	r3,4(r2)
10025cb0:	14800015 	stw	r18,0(r2)
10025cb4:	003f6806 	br	10025a58 <__svfscanf_r+0xa98>
10025cb8:	d8c09c17 	ldw	r3,624(sp)
10025cbc:	b009883a 	mov	r4,r22
10025cc0:	000d883a 	mov	r6,zero
10025cc4:	19400044 	addi	r5,r3,1
10025cc8:	01c00284 	movi	r7,10
10025ccc:	002cbe40 	call	1002cbe4 <_strtol_r>
10025cd0:	d9009d17 	ldw	r4,628(sp)
10025cd4:	110dc83a 	sub	r6,r2,r4
10025cd8:	d8c0a617 	ldw	r3,664(sp)
10025cdc:	d9009c17 	ldw	r4,624(sp)
10025ce0:	188054c4 	addi	r2,r3,339
10025ce4:	20800236 	bltu	r4,r2,10025cf0 <__svfscanf_r+0xd30>
10025ce8:	18805484 	addi	r2,r3,338
10025cec:	d8809c15 	stw	r2,624(sp)
10025cf0:	d9009c17 	ldw	r4,624(sp)
10025cf4:	01400034 	movhi	r5,0
10025cf8:	2942d904 	addi	r5,r5,2916
10025cfc:	002b29c0 	call	1002b29c <sprintf>
10025d00:	003f4706 	br	10025a20 <__svfscanf_r+0xa60>
10025d04:	d8c09e17 	ldw	r3,632(sp)
10025d08:	d9009f17 	ldw	r4,636(sp)
10025d0c:	1905c83a 	sub	r2,r3,r4
10025d10:	103f4326 	beq	r2,zero,10025a20 <__svfscanf_r+0xa60>
10025d14:	008dc83a 	sub	r6,zero,r2
10025d18:	ddc09c15 	stw	r23,624(sp)
10025d1c:	003fee06 	br	10025cd8 <__svfscanf_r+0xd18>
10025d20:	d880a417 	ldw	r2,656(sp)
10025d24:	9009883a 	mov	r4,r18
10025d28:	180b883a 	mov	r5,r3
10025d2c:	15c00017 	ldw	r23,0(r2)
10025d30:	15400104 	addi	r21,r2,4
10025d34:	002b1a40 	call	1002b1a4 <__isnand>
10025d38:	10021c1e 	bne	r2,zero,100265ac <__svfscanf_r+0x15ec>
10025d3c:	980b883a 	mov	r5,r19
10025d40:	9009883a 	mov	r4,r18
10025d44:	00308f40 	call	100308f4 <__truncdfsf2>
10025d48:	b8800015 	stw	r2,0(r23)
10025d4c:	003f4206 	br	10025a58 <__svfscanf_r+0xa98>
10025d50:	e0c03fcc 	andi	r3,fp,255
10025d54:	18c0201c 	xori	r3,r3,128
10025d58:	18ffe004 	addi	r3,r3,-128
10025d5c:	008001c4 	movi	r2,7
10025d60:	18beef1e 	bne	r3,r2,10025920 <__svfscanf_r+0x960>
10025d64:	07000204 	movi	fp,8
10025d68:	003edf06 	br	100258e8 <__svfscanf_r+0x928>
10025d6c:	d900a317 	ldw	r4,652(sp)
10025d70:	208002a4 	muli	r2,r4,10
10025d74:	1145883a 	add	r2,r2,r5
10025d78:	10bff404 	addi	r2,r2,-48
10025d7c:	d880a315 	stw	r2,652(sp)
10025d80:	003ceb06 	br	10025130 <__svfscanf_r+0x170>
10025d84:	9880040c 	andi	r2,r19,16
10025d88:	10001426 	beq	r2,zero,10025ddc <__svfscanf_r+0xe1c>
10025d8c:	0027883a 	mov	r19,zero
10025d90:	00000906 	br	10025db8 <__svfscanf_r+0xdf8>
10025d94:	80c00117 	ldw	r3,4(r16)
10025d98:	d880a317 	ldw	r2,652(sp)
10025d9c:	29800044 	addi	r6,r5,1
10025da0:	18ffffc4 	addi	r3,r3,-1
10025da4:	9cc00044 	addi	r19,r19,1
10025da8:	81800015 	stw	r6,0(r16)
10025dac:	80c00115 	stw	r3,4(r16)
10025db0:	14fdf726 	beq	r2,r19,10025590 <__svfscanf_r+0x5d0>
10025db4:	00c02c0e 	bge	zero,r3,10025e68 <__svfscanf_r+0xea8>
10025db8:	81400017 	ldw	r5,0(r16)
10025dbc:	90800017 	ldw	r2,0(r18)
10025dc0:	28c00003 	ldbu	r3,0(r5)
10025dc4:	1887883a 	add	r3,r3,r2
10025dc8:	19000003 	ldbu	r4,0(r3)
10025dcc:	2100020c 	andi	r4,r4,8
10025dd0:	203ff026 	beq	r4,zero,10025d94 <__svfscanf_r+0xdd4>
10025dd4:	8ce3883a 	add	r17,r17,r19
10025dd8:	003c8c06 	br	1002500c <__svfscanf_r+0x4c>
10025ddc:	d8c0a417 	ldw	r3,656(sp)
10025de0:	1d400017 	ldw	r21,0(r3)
10025de4:	a827883a 	mov	r19,r21
10025de8:	00000e06 	br	10025e24 <__svfscanf_r+0xe64>
10025dec:	80800117 	ldw	r2,4(r16)
10025df0:	d900a317 	ldw	r4,652(sp)
10025df4:	29800044 	addi	r6,r5,1
10025df8:	10ffffc4 	addi	r3,r2,-1
10025dfc:	213fffc4 	addi	r4,r4,-1
10025e00:	d900a315 	stw	r4,652(sp)
10025e04:	80c00115 	stw	r3,4(r16)
10025e08:	28800003 	ldbu	r2,0(r5)
10025e0c:	98800005 	stb	r2,0(r19)
10025e10:	81800015 	stw	r6,0(r16)
10025e14:	9cc00044 	addi	r19,r19,1
10025e18:	20000926 	beq	r4,zero,10025e40 <__svfscanf_r+0xe80>
10025e1c:	80800117 	ldw	r2,4(r16)
10025e20:	0080170e 	bge	zero,r2,10025e80 <__svfscanf_r+0xec0>
10025e24:	81400017 	ldw	r5,0(r16)
10025e28:	90800017 	ldw	r2,0(r18)
10025e2c:	28c00003 	ldbu	r3,0(r5)
10025e30:	1887883a 	add	r3,r3,r2
10025e34:	19000003 	ldbu	r4,0(r3)
10025e38:	2100020c 	andi	r4,r4,8
10025e3c:	203feb26 	beq	r4,zero,10025dec <__svfscanf_r+0xe2c>
10025e40:	9d45c83a 	sub	r2,r19,r21
10025e44:	d8c0a217 	ldw	r3,648(sp)
10025e48:	88a3883a 	add	r17,r17,r2
10025e4c:	d880a417 	ldw	r2,656(sp)
10025e50:	18c00044 	addi	r3,r3,1
10025e54:	d8c0a215 	stw	r3,648(sp)
10025e58:	10800104 	addi	r2,r2,4
10025e5c:	d880a415 	stw	r2,656(sp)
10025e60:	98000005 	stb	zero,0(r19)
10025e64:	003c6906 	br	1002500c <__svfscanf_r+0x4c>
10025e68:	b009883a 	mov	r4,r22
10025e6c:	800b883a 	mov	r5,r16
10025e70:	002af840 	call	1002af84 <__srefill_r>
10025e74:	103fd026 	beq	r2,zero,10025db8 <__svfscanf_r+0xdf8>
10025e78:	8ce3883a 	add	r17,r17,r19
10025e7c:	003c6306 	br	1002500c <__svfscanf_r+0x4c>
10025e80:	b009883a 	mov	r4,r22
10025e84:	800b883a 	mov	r5,r16
10025e88:	002af840 	call	1002af84 <__srefill_r>
10025e8c:	103fe526 	beq	r2,zero,10025e24 <__svfscanf_r+0xe64>
10025e90:	003feb06 	br	10025e40 <__svfscanf_r+0xe80>
10025e94:	d900a317 	ldw	r4,652(sp)
10025e98:	9d41e014 	ori	r21,r19,1920
10025e9c:	2000821e 	bne	r4,zero,100260a8 <__svfscanf_r+0x10e8>
10025ea0:	d8c04404 	addi	r3,sp,272
10025ea4:	182f883a 	mov	r23,r3
10025ea8:	0039883a 	mov	fp,zero
10025eac:	d8c0a615 	stw	r3,664(sp)
10025eb0:	d8009c15 	stw	zero,624(sp)
10025eb4:	d8009d15 	stw	zero,628(sp)
10025eb8:	d8009f15 	stw	zero,636(sp)
10025ebc:	d8009e15 	stw	zero,632(sp)
10025ec0:	003e9e06 	br	1002593c <__svfscanf_r+0x97c>
10025ec4:	d900a317 	ldw	r4,652(sp)
10025ec8:	9c836014 	ori	r18,r19,3456
10025ecc:	2000161e 	bne	r4,zero,10025f28 <__svfscanf_r+0xf68>
10025ed0:	d8804404 	addi	r2,sp,272
10025ed4:	d880a615 	stw	r2,664(sp)
10025ed8:	002f883a 	mov	r23,zero
10025edc:	1027883a 	mov	r19,r2
10025ee0:	9080400c 	andi	r2,r18,256
10025ee4:	10000926 	beq	r2,zero,10025f0c <__svfscanf_r+0xf4c>
10025ee8:	d8c0a617 	ldw	r3,664(sp)
10025eec:	1cc0052e 	bgeu	r3,r19,10025f04 <__svfscanf_r+0xf44>
10025ef0:	9cffffc4 	addi	r19,r19,-1
10025ef4:	99400007 	ldb	r5,0(r19)
10025ef8:	b009883a 	mov	r4,r22
10025efc:	800d883a 	mov	r6,r16
10025f00:	002d7840 	call	1002d784 <_ungetc_r>
10025f04:	d900a617 	ldw	r4,664(sp)
10025f08:	24fc6226 	beq	r4,r19,10025094 <__svfscanf_r+0xd4>
10025f0c:	9080040c 	andi	r2,r18,16
10025f10:	10006726 	beq	r2,zero,100260b0 <__svfscanf_r+0x10f0>
10025f14:	d8c0a617 	ldw	r3,664(sp)
10025f18:	98c5c83a 	sub	r2,r19,r3
10025f1c:	b885883a 	add	r2,r23,r2
10025f20:	88a3883a 	add	r17,r17,r2
10025f24:	003c3906 	br	1002500c <__svfscanf_r+0x4c>
10025f28:	002b883a 	mov	r21,zero
10025f2c:	d8c04404 	addi	r3,sp,272
10025f30:	d8c0a615 	stw	r3,664(sp)
10025f34:	002f883a 	mov	r23,zero
10025f38:	1827883a 	mov	r19,r3
10025f3c:	81800017 	ldw	r6,0(r16)
10025f40:	00c01344 	movi	r3,77
10025f44:	31400003 	ldbu	r5,0(r6)
10025f48:	28bff544 	addi	r2,r5,-43
10025f4c:	10803fcc 	andi	r2,r2,255
10025f50:	18bfe336 	bltu	r3,r2,10025ee0 <__svfscanf_r+0xf20>
10025f54:	1085883a 	add	r2,r2,r2
10025f58:	1085883a 	add	r2,r2,r2
10025f5c:	00c400b4 	movhi	r3,4098
10025f60:	18d7dc04 	addi	r3,r3,24432
10025f64:	10c5883a 	add	r2,r2,r3
10025f68:	11000017 	ldw	r4,0(r2)
10025f6c:	2000683a 	jmp	r4
10025f70:	10026104 	addi	zero,r2,2436
10025f74:	10025ee0 	cmpeqi	zero,r2,2427
10025f78:	10026104 	addi	zero,r2,2436
10025f7c:	10025ee0 	cmpeqi	zero,r2,2427
10025f80:	10025ee0 	cmpeqi	zero,r2,2427
10025f84:	10026148 	cmpgei	zero,r2,2437
10025f88:	10026244 	addi	zero,r2,2441
10025f8c:	10026244 	addi	zero,r2,2441
10025f90:	10026244 	addi	zero,r2,2441
10025f94:	10026244 	addi	zero,r2,2441
10025f98:	10026244 	addi	zero,r2,2441
10025f9c:	10026244 	addi	zero,r2,2441
10025fa0:	10026244 	addi	zero,r2,2441
10025fa4:	1002626c 	andhi	zero,r2,2441
10025fa8:	1002626c 	andhi	zero,r2,2441
10025fac:	10025ee0 	cmpeqi	zero,r2,2427
10025fb0:	10025ee0 	cmpeqi	zero,r2,2427
10025fb4:	10025ee0 	cmpeqi	zero,r2,2427
10025fb8:	10025ee0 	cmpeqi	zero,r2,2427
10025fbc:	10025ee0 	cmpeqi	zero,r2,2427
10025fc0:	10025ee0 	cmpeqi	zero,r2,2427
10025fc4:	10025ee0 	cmpeqi	zero,r2,2427
10025fc8:	1002629c 	xori	zero,r2,2442
10025fcc:	1002629c 	xori	zero,r2,2442
10025fd0:	1002629c 	xori	zero,r2,2442
10025fd4:	1002629c 	xori	zero,r2,2442
10025fd8:	1002629c 	xori	zero,r2,2442
10025fdc:	1002629c 	xori	zero,r2,2442
10025fe0:	10025ee0 	cmpeqi	zero,r2,2427
10025fe4:	10025ee0 	cmpeqi	zero,r2,2427
10025fe8:	10025ee0 	cmpeqi	zero,r2,2427
10025fec:	10025ee0 	cmpeqi	zero,r2,2427
10025ff0:	10025ee0 	cmpeqi	zero,r2,2427
10025ff4:	10025ee0 	cmpeqi	zero,r2,2427
10025ff8:	10025ee0 	cmpeqi	zero,r2,2427
10025ffc:	10025ee0 	cmpeqi	zero,r2,2427
10026000:	10025ee0 	cmpeqi	zero,r2,2427
10026004:	10025ee0 	cmpeqi	zero,r2,2427
10026008:	10025ee0 	cmpeqi	zero,r2,2427
1002600c:	10025ee0 	cmpeqi	zero,r2,2427
10026010:	10025ee0 	cmpeqi	zero,r2,2427
10026014:	10025ee0 	cmpeqi	zero,r2,2427
10026018:	10025ee0 	cmpeqi	zero,r2,2427
1002601c:	10025ee0 	cmpeqi	zero,r2,2427
10026020:	10025ee0 	cmpeqi	zero,r2,2427
10026024:	100262ac 	andhi	zero,r2,2442
10026028:	10025ee0 	cmpeqi	zero,r2,2427
1002602c:	10025ee0 	cmpeqi	zero,r2,2427
10026030:	10025ee0 	cmpeqi	zero,r2,2427
10026034:	10025ee0 	cmpeqi	zero,r2,2427
10026038:	10025ee0 	cmpeqi	zero,r2,2427
1002603c:	10025ee0 	cmpeqi	zero,r2,2427
10026040:	10025ee0 	cmpeqi	zero,r2,2427
10026044:	10025ee0 	cmpeqi	zero,r2,2427
10026048:	1002629c 	xori	zero,r2,2442
1002604c:	1002629c 	xori	zero,r2,2442
10026050:	1002629c 	xori	zero,r2,2442
10026054:	1002629c 	xori	zero,r2,2442
10026058:	1002629c 	xori	zero,r2,2442
1002605c:	1002629c 	xori	zero,r2,2442
10026060:	10025ee0 	cmpeqi	zero,r2,2427
10026064:	10025ee0 	cmpeqi	zero,r2,2427
10026068:	10025ee0 	cmpeqi	zero,r2,2427
1002606c:	10025ee0 	cmpeqi	zero,r2,2427
10026070:	10025ee0 	cmpeqi	zero,r2,2427
10026074:	10025ee0 	cmpeqi	zero,r2,2427
10026078:	10025ee0 	cmpeqi	zero,r2,2427
1002607c:	10025ee0 	cmpeqi	zero,r2,2427
10026080:	10025ee0 	cmpeqi	zero,r2,2427
10026084:	10025ee0 	cmpeqi	zero,r2,2427
10026088:	10025ee0 	cmpeqi	zero,r2,2427
1002608c:	10025ee0 	cmpeqi	zero,r2,2427
10026090:	10025ee0 	cmpeqi	zero,r2,2427
10026094:	10025ee0 	cmpeqi	zero,r2,2427
10026098:	10025ee0 	cmpeqi	zero,r2,2427
1002609c:	10025ee0 	cmpeqi	zero,r2,2427
100260a0:	10025ee0 	cmpeqi	zero,r2,2427
100260a4:	100262ac 	andhi	zero,r2,2442
100260a8:	000d883a 	mov	r6,zero
100260ac:	003d9006 	br	100256f0 <__svfscanf_r+0x730>
100260b0:	98000005 	stb	zero,0(r19)
100260b4:	d8c0a017 	ldw	r3,640(sp)
100260b8:	d940a617 	ldw	r5,664(sp)
100260bc:	d9c0a117 	ldw	r7,644(sp)
100260c0:	b009883a 	mov	r4,r22
100260c4:	000d883a 	mov	r6,zero
100260c8:	183ee83a 	callr	r3
100260cc:	1007883a 	mov	r3,r2
100260d0:	9080080c 	andi	r2,r18,32
100260d4:	10004d1e 	bne	r2,zero,1002620c <__svfscanf_r+0x124c>
100260d8:	9080010c 	andi	r2,r18,4
100260dc:	10003426 	beq	r2,zero,100261b0 <__svfscanf_r+0x11f0>
100260e0:	d900a417 	ldw	r4,656(sp)
100260e4:	20800017 	ldw	r2,0(r4)
100260e8:	21000104 	addi	r4,r4,4
100260ec:	d900a415 	stw	r4,656(sp)
100260f0:	10c0000d 	sth	r3,0(r2)
100260f4:	d880a217 	ldw	r2,648(sp)
100260f8:	10800044 	addi	r2,r2,1
100260fc:	d880a215 	stw	r2,648(sp)
10026100:	003f8406 	br	10025f14 <__svfscanf_r+0xf54>
10026104:	9080200c 	andi	r2,r18,128
10026108:	103f7526 	beq	r2,zero,10025ee0 <__svfscanf_r+0xf20>
1002610c:	00bfdfc4 	movi	r2,-129
10026110:	90a4703a 	and	r18,r18,r2
10026114:	99400005 	stb	r5,0(r19)
10026118:	9cc00044 	addi	r19,r19,1
1002611c:	80c00117 	ldw	r3,4(r16)
10026120:	18ffffc4 	addi	r3,r3,-1
10026124:	80c00115 	stw	r3,4(r16)
10026128:	00c0130e 	bge	zero,r3,10026178 <__svfscanf_r+0x11b8>
1002612c:	31800044 	addi	r6,r6,1
10026130:	81800015 	stw	r6,0(r16)
10026134:	d880a317 	ldw	r2,652(sp)
10026138:	10bfffc4 	addi	r2,r2,-1
1002613c:	d880a315 	stw	r2,652(sp)
10026140:	103f7e1e 	bne	r2,zero,10025f3c <__svfscanf_r+0xf7c>
10026144:	003f6606 	br	10025ee0 <__svfscanf_r+0xf20>
10026148:	9082000c 	andi	r2,r18,2048
1002614c:	103ff126 	beq	r2,zero,10026114 <__svfscanf_r+0x1154>
10026150:	d8c0a117 	ldw	r3,644(sp)
10026154:	1800031e 	bne	r3,zero,10026164 <__svfscanf_r+0x11a4>
10026158:	01000204 	movi	r4,8
1002615c:	94808014 	ori	r18,r18,512
10026160:	d900a115 	stw	r4,644(sp)
10026164:	9081000c 	andi	r2,r18,1024
10026168:	10000826 	beq	r2,zero,1002618c <__svfscanf_r+0x11cc>
1002616c:	00be9fc4 	movi	r2,-1409
10026170:	90a4703a 	and	r18,r18,r2
10026174:	003fe706 	br	10026114 <__svfscanf_r+0x1154>
10026178:	b009883a 	mov	r4,r22
1002617c:	800b883a 	mov	r5,r16
10026180:	002af840 	call	1002af84 <__srefill_r>
10026184:	103feb26 	beq	r2,zero,10026134 <__svfscanf_r+0x1174>
10026188:	003f5506 	br	10025ee0 <__svfscanf_r+0xf20>
1002618c:	a8000426 	beq	r21,zero,100261a0 <__svfscanf_r+0x11e0>
10026190:	d880a317 	ldw	r2,652(sp)
10026194:	ad7fffc4 	addi	r21,r21,-1
10026198:	10800044 	addi	r2,r2,1
1002619c:	d880a315 	stw	r2,652(sp)
100261a0:	00bf1fc4 	movi	r2,-897
100261a4:	90a4703a 	and	r18,r18,r2
100261a8:	bdc00044 	addi	r23,r23,1
100261ac:	003fdb06 	br	1002611c <__svfscanf_r+0x115c>
100261b0:	9080004c 	andi	r2,r18,1
100261b4:	1005003a 	cmpeq	r2,r2,zero
100261b8:	10001426 	beq	r2,zero,1002620c <__svfscanf_r+0x124c>
100261bc:	9080008c 	andi	r2,r18,2
100261c0:	10001226 	beq	r2,zero,1002620c <__svfscanf_r+0x124c>
100261c4:	d8c0a017 	ldw	r3,640(sp)
100261c8:	008400f4 	movhi	r2,4099
100261cc:	10b45904 	addi	r2,r2,-11932
100261d0:	18801426 	beq	r3,r2,10026224 <__svfscanf_r+0x1264>
100261d4:	d9c0a117 	ldw	r7,644(sp)
100261d8:	d940a617 	ldw	r5,664(sp)
100261dc:	000d883a 	mov	r6,zero
100261e0:	b009883a 	mov	r4,r22
100261e4:	002ce4c0 	call	1002ce4c <_strtoll_r>
100261e8:	100d883a 	mov	r6,r2
100261ec:	180f883a 	mov	r7,r3
100261f0:	d900a417 	ldw	r4,656(sp)
100261f4:	20800017 	ldw	r2,0(r4)
100261f8:	21000104 	addi	r4,r4,4
100261fc:	d900a415 	stw	r4,656(sp)
10026200:	11c00115 	stw	r7,4(r2)
10026204:	11800015 	stw	r6,0(r2)
10026208:	003fba06 	br	100260f4 <__svfscanf_r+0x1134>
1002620c:	d900a417 	ldw	r4,656(sp)
10026210:	20800017 	ldw	r2,0(r4)
10026214:	21000104 	addi	r4,r4,4
10026218:	d900a415 	stw	r4,656(sp)
1002621c:	10c00015 	stw	r3,0(r2)
10026220:	003fb406 	br	100260f4 <__svfscanf_r+0x1134>
10026224:	d9c0a117 	ldw	r7,644(sp)
10026228:	d940a617 	ldw	r5,664(sp)
1002622c:	000d883a 	mov	r6,zero
10026230:	b009883a 	mov	r4,r22
10026234:	002d3b80 	call	1002d3b8 <_strtoull_r>
10026238:	100d883a 	mov	r6,r2
1002623c:	180f883a 	mov	r7,r3
10026240:	003feb06 	br	100261f0 <__svfscanf_r+0x1230>
10026244:	d8c0a117 	ldw	r3,644(sp)
10026248:	18c5883a 	add	r2,r3,r3
1002624c:	00c00034 	movhi	r3,0
10026250:	18c2da84 	addi	r3,r3,2922
10026254:	10c5883a 	add	r2,r2,r3
10026258:	1080000f 	ldh	r2,0(r2)
1002625c:	00fd1fc4 	movi	r3,-2945
10026260:	90e4703a 	and	r18,r18,r3
10026264:	d880a115 	stw	r2,644(sp)
10026268:	003faa06 	br	10026114 <__svfscanf_r+0x1154>
1002626c:	d900a117 	ldw	r4,644(sp)
10026270:	00c00034 	movhi	r3,0
10026274:	18c2da84 	addi	r3,r3,2922
10026278:	2105883a 	add	r2,r4,r4
1002627c:	10c5883a 	add	r2,r2,r3
10026280:	1080000f 	ldh	r2,0(r2)
10026284:	00c00204 	movi	r3,8
10026288:	d880a115 	stw	r2,644(sp)
1002628c:	18bf140e 	bge	r3,r2,10025ee0 <__svfscanf_r+0xf20>
10026290:	00bd1fc4 	movi	r2,-2945
10026294:	90a4703a 	and	r18,r18,r2
10026298:	003f9e06 	br	10026114 <__svfscanf_r+0x1154>
1002629c:	d8c0a117 	ldw	r3,644(sp)
100262a0:	00800284 	movi	r2,10
100262a4:	10fffa16 	blt	r2,r3,10026290 <__svfscanf_r+0x12d0>
100262a8:	003f0d06 	br	10025ee0 <__svfscanf_r+0xf20>
100262ac:	90c1800c 	andi	r3,r18,1536
100262b0:	00808004 	movi	r2,512
100262b4:	18bf0a1e 	bne	r3,r2,10025ee0 <__svfscanf_r+0xf20>
100262b8:	00bf7fc4 	movi	r2,-513
100262bc:	9084703a 	and	r2,r18,r2
100262c0:	01000404 	movi	r4,16
100262c4:	14814014 	ori	r18,r2,1280
100262c8:	d900a115 	stw	r4,644(sp)
100262cc:	003f9106 	br	10026114 <__svfscanf_r+0x1154>
100262d0:	d880a417 	ldw	r2,656(sp)
100262d4:	dd400404 	addi	r21,sp,16
100262d8:	14800017 	ldw	r18,0(r2)
100262dc:	9027883a 	mov	r19,r18
100262e0:	81000017 	ldw	r4,0(r16)
100262e4:	20800003 	ldbu	r2,0(r4)
100262e8:	a885883a 	add	r2,r21,r2
100262ec:	10c00007 	ldb	r3,0(r2)
100262f0:	18001426 	beq	r3,zero,10026344 <__svfscanf_r+0x1384>
100262f4:	d8c0a317 	ldw	r3,652(sp)
100262f8:	80800117 	ldw	r2,4(r16)
100262fc:	21800044 	addi	r6,r4,1
10026300:	18ffffc4 	addi	r3,r3,-1
10026304:	d8c0a315 	stw	r3,652(sp)
10026308:	10ffffc4 	addi	r3,r2,-1
1002630c:	80c00115 	stw	r3,4(r16)
10026310:	20800003 	ldbu	r2,0(r4)
10026314:	90800005 	stb	r2,0(r18)
10026318:	d900a317 	ldw	r4,652(sp)
1002631c:	81800015 	stw	r6,0(r16)
10026320:	94800044 	addi	r18,r18,1
10026324:	20000726 	beq	r4,zero,10026344 <__svfscanf_r+0x1384>
10026328:	80800117 	ldw	r2,4(r16)
1002632c:	00bfec16 	blt	zero,r2,100262e0 <__svfscanf_r+0x1320>
10026330:	b009883a 	mov	r4,r22
10026334:	800b883a 	mov	r5,r16
10026338:	002af840 	call	1002af84 <__srefill_r>
1002633c:	103fe826 	beq	r2,zero,100262e0 <__svfscanf_r+0x1320>
10026340:	9cbb7426 	beq	r19,r18,10025114 <__svfscanf_r+0x154>
10026344:	94e7c83a 	sub	r19,r18,r19
10026348:	983b5226 	beq	r19,zero,10025094 <__svfscanf_r+0xd4>
1002634c:	90000005 	stb	zero,0(r18)
10026350:	d880a417 	ldw	r2,656(sp)
10026354:	d8c0a217 	ldw	r3,648(sp)
10026358:	8ce3883a 	add	r17,r17,r19
1002635c:	10800104 	addi	r2,r2,4
10026360:	18c00044 	addi	r3,r3,1
10026364:	d880a415 	stw	r2,656(sp)
10026368:	d8c0a215 	stw	r3,648(sp)
1002636c:	003b2706 	br	1002500c <__svfscanf_r+0x4c>
10026370:	9cc00414 	ori	r19,r19,16
10026374:	003b6e06 	br	10025130 <__svfscanf_r+0x170>
10026378:	00c00404 	movi	r3,16
1002637c:	010400f4 	movhi	r4,4099
10026380:	21345904 	addi	r4,r4,-11932
10026384:	9cc08014 	ori	r19,r19,512
10026388:	054000c4 	movi	r21,3
1002638c:	d8c0a115 	stw	r3,644(sp)
10026390:	d900a015 	stw	r4,640(sp)
10026394:	003bf806 	br	10025378 <__svfscanf_r+0x3b8>
10026398:	9880040c 	andi	r2,r19,16
1002639c:	10001926 	beq	r2,zero,10026404 <__svfscanf_r+0x1444>
100263a0:	0027883a 	mov	r19,zero
100263a4:	00000b06 	br	100263d4 <__svfscanf_r+0x1414>
100263a8:	80800017 	ldw	r2,0(r16)
100263ac:	b009883a 	mov	r4,r22
100263b0:	800b883a 	mov	r5,r16
100263b4:	148d883a 	add	r6,r2,r18
100263b8:	81800015 	stw	r6,0(r16)
100263bc:	9ca7883a 	add	r19,r19,r18
100263c0:	002af840 	call	1002af84 <__srefill_r>
100263c4:	103c711e 	bne	r2,zero,1002558c <__svfscanf_r+0x5cc>
100263c8:	d900a317 	ldw	r4,652(sp)
100263cc:	2489c83a 	sub	r4,r4,r18
100263d0:	d900a315 	stw	r4,652(sp)
100263d4:	84800117 	ldw	r18,4(r16)
100263d8:	d8c0a317 	ldw	r3,652(sp)
100263dc:	90fff216 	blt	r18,r3,100263a8 <__svfscanf_r+0x13e8>
100263e0:	d900a317 	ldw	r4,652(sp)
100263e4:	80800017 	ldw	r2,0(r16)
100263e8:	9927883a 	add	r19,r19,r4
100263ec:	9107c83a 	sub	r3,r18,r4
100263f0:	110d883a 	add	r6,r2,r4
100263f4:	8ce3883a 	add	r17,r17,r19
100263f8:	80c00115 	stw	r3,4(r16)
100263fc:	81800015 	stw	r6,0(r16)
10026400:	003b0206 	br	1002500c <__svfscanf_r+0x4c>
10026404:	d880a417 	ldw	r2,656(sp)
10026408:	d980a317 	ldw	r6,652(sp)
1002640c:	01400044 	movi	r5,1
10026410:	11000017 	ldw	r4,0(r2)
10026414:	800f883a 	mov	r7,r16
10026418:	00287340 	call	10028734 <fread>
1002641c:	103b3d26 	beq	r2,zero,10025114 <__svfscanf_r+0x154>
10026420:	d8c0a417 	ldw	r3,656(sp)
10026424:	d900a217 	ldw	r4,648(sp)
10026428:	88a3883a 	add	r17,r17,r2
1002642c:	18c00104 	addi	r3,r3,4
10026430:	21000044 	addi	r4,r4,1
10026434:	d8c0a415 	stw	r3,656(sp)
10026438:	d900a215 	stw	r4,648(sp)
1002643c:	003af306 	br	1002500c <__svfscanf_r+0x4c>
10026440:	8080030b 	ldhu	r2,12(r16)
10026444:	1080100c 	andi	r2,r2,64
10026448:	103b1226 	beq	r2,zero,10025094 <__svfscanf_r+0xd4>
1002644c:	003b3306 	br	1002511c <__svfscanf_r+0x15c>
10026450:	983b1026 	beq	r19,zero,10025094 <__svfscanf_r+0xd4>
10026454:	8ce3883a 	add	r17,r17,r19
10026458:	003aec06 	br	1002500c <__svfscanf_r+0x4c>
1002645c:	983c9626 	beq	r19,zero,100256b8 <__svfscanf_r+0x6f8>
10026460:	9cffffc4 	addi	r19,r19,-1
10026464:	d8c04404 	addi	r3,sp,272
10026468:	1cc5883a 	add	r2,r3,r19
1002646c:	11400003 	ldbu	r5,0(r2)
10026470:	b009883a 	mov	r4,r22
10026474:	800d883a 	mov	r6,r16
10026478:	002d7840 	call	1002d784 <_ungetc_r>
1002647c:	003ff706 	br	1002645c <__svfscanf_r+0x149c>
10026480:	00bfff84 	movi	r2,-2
10026484:	18bc7a1e 	bne	r3,r2,10025670 <__svfscanf_r+0x6b0>
10026488:	003c8406 	br	1002569c <__svfscanf_r+0x6dc>
1002648c:	d900a417 	ldw	r4,656(sp)
10026490:	25400017 	ldw	r21,0(r4)
10026494:	21000104 	addi	r4,r4,4
10026498:	d900a415 	stw	r4,656(sp)
1002649c:	003c4a06 	br	100255c8 <__svfscanf_r+0x608>
100264a0:	00bfff84 	movi	r2,-2
100264a4:	18bc0f1e 	bne	r3,r2,100254e4 <__svfscanf_r+0x524>
100264a8:	003c1506 	br	10025500 <__svfscanf_r+0x540>
100264ac:	b009883a 	mov	r4,r22
100264b0:	800b883a 	mov	r5,r16
100264b4:	002af840 	call	1002af84 <__srefill_r>
100264b8:	103c1326 	beq	r2,zero,10025508 <__svfscanf_r+0x548>
100264bc:	903b151e 	bne	r18,zero,10025114 <__svfscanf_r+0x154>
100264c0:	a83ad21e 	bne	r21,zero,1002500c <__svfscanf_r+0x4c>
100264c4:	d880a217 	ldw	r2,648(sp)
100264c8:	10800044 	addi	r2,r2,1
100264cc:	d880a215 	stw	r2,648(sp)
100264d0:	003ace06 	br	1002500c <__svfscanf_r+0x4c>
100264d4:	0027883a 	mov	r19,zero
100264d8:	003bdd06 	br	10025450 <__svfscanf_r+0x490>
100264dc:	9cc00114 	ori	r19,r19,4
100264e0:	003b1306 	br	10025130 <__svfscanf_r+0x170>
100264e4:	05400104 	movi	r21,4
100264e8:	003ba306 	br	10025378 <__svfscanf_r+0x3b8>
100264ec:	9cc00054 	ori	r19,r19,1
100264f0:	008400f4 	movhi	r2,4099
100264f4:	10b2f904 	addi	r2,r2,-13340
100264f8:	00c00284 	movi	r3,10
100264fc:	054000c4 	movi	r21,3
10026500:	d880a015 	stw	r2,640(sp)
10026504:	d8c0a115 	stw	r3,644(sp)
10026508:	003b9b06 	br	10025378 <__svfscanf_r+0x3b8>
1002650c:	9cc01014 	ori	r19,r19,64
10026510:	002b883a 	mov	r21,zero
10026514:	003b9806 	br	10025378 <__svfscanf_r+0x3b8>
10026518:	a00b883a 	mov	r5,r20
1002651c:	d9000404 	addi	r4,sp,16
10026520:	002b1d40 	call	1002b1d4 <__sccl>
10026524:	1029883a 	mov	r20,r2
10026528:	9cc01014 	ori	r19,r19,64
1002652c:	05400044 	movi	r21,1
10026530:	003b9106 	br	10025378 <__svfscanf_r+0x3b8>
10026534:	9cc00054 	ori	r19,r19,1
10026538:	00800204 	movi	r2,8
1002653c:	00c400f4 	movhi	r3,4099
10026540:	18f45904 	addi	r3,r3,-11932
10026544:	054000c4 	movi	r21,3
10026548:	d880a115 	stw	r2,644(sp)
1002654c:	d8c0a015 	stw	r3,640(sp)
10026550:	003b8906 	br	10025378 <__svfscanf_r+0x3b8>
10026554:	9880040c 	andi	r2,r19,16
10026558:	103aac1e 	bne	r2,zero,1002500c <__svfscanf_r+0x4c>
1002655c:	9880010c 	andi	r2,r19,4
10026560:	10002426 	beq	r2,zero,100265f4 <__svfscanf_r+0x1634>
10026564:	d900a417 	ldw	r4,656(sp)
10026568:	20800017 	ldw	r2,0(r4)
1002656c:	21000104 	addi	r4,r4,4
10026570:	d900a415 	stw	r4,656(sp)
10026574:	1440000d 	sth	r17,0(r2)
10026578:	003aa406 	br	1002500c <__svfscanf_r+0x4c>
1002657c:	9cc00094 	ori	r19,r19,2
10026580:	003aeb06 	br	10025130 <__svfscanf_r+0x170>
10026584:	05400084 	movi	r21,2
10026588:	003b7b06 	br	10025378 <__svfscanf_r+0x3b8>
1002658c:	00800404 	movi	r2,16
10026590:	00c400f4 	movhi	r3,4099
10026594:	18f45904 	addi	r3,r3,-11932
10026598:	9cc08814 	ori	r19,r19,544
1002659c:	054000c4 	movi	r21,3
100265a0:	d880a115 	stw	r2,644(sp)
100265a4:	d8c0a015 	stw	r3,640(sp)
100265a8:	003b7306 	br	10025378 <__svfscanf_r+0x3b8>
100265ac:	0009883a 	mov	r4,zero
100265b0:	002b2940 	call	1002b294 <nanf>
100265b4:	b8800015 	stw	r2,0(r23)
100265b8:	003d2706 	br	10025a58 <__svfscanf_r+0xa98>
100265bc:	a0c00007 	ldb	r3,0(r20)
100265c0:	00801b04 	movi	r2,108
100265c4:	18800826 	beq	r3,r2,100265e8 <__svfscanf_r+0x1628>
100265c8:	9cc00054 	ori	r19,r19,1
100265cc:	003ad806 	br	10025130 <__svfscanf_r+0x170>
100265d0:	010400f4 	movhi	r4,4099
100265d4:	2132f904 	addi	r4,r4,-13340
100265d8:	054000c4 	movi	r21,3
100265dc:	d900a015 	stw	r4,640(sp)
100265e0:	d800a115 	stw	zero,644(sp)
100265e4:	003b6406 	br	10025378 <__svfscanf_r+0x3b8>
100265e8:	a5000044 	addi	r20,r20,1
100265ec:	9cc00094 	ori	r19,r19,2
100265f0:	003acf06 	br	10025130 <__svfscanf_r+0x170>
100265f4:	9880004c 	andi	r2,r19,1
100265f8:	1005003a 	cmpeq	r2,r2,zero
100265fc:	10000a26 	beq	r2,zero,10026628 <__svfscanf_r+0x1668>
10026600:	9880008c 	andi	r2,r19,2
10026604:	10000826 	beq	r2,zero,10026628 <__svfscanf_r+0x1668>
10026608:	d900a417 	ldw	r4,656(sp)
1002660c:	8807d7fa 	srai	r3,r17,31
10026610:	20800017 	ldw	r2,0(r4)
10026614:	21000104 	addi	r4,r4,4
10026618:	d900a415 	stw	r4,656(sp)
1002661c:	14400015 	stw	r17,0(r2)
10026620:	10c00115 	stw	r3,4(r2)
10026624:	003a7906 	br	1002500c <__svfscanf_r+0x4c>
10026628:	d8c0a417 	ldw	r3,656(sp)
1002662c:	18800017 	ldw	r2,0(r3)
10026630:	18c00104 	addi	r3,r3,4
10026634:	d8c0a415 	stw	r3,656(sp)
10026638:	14400015 	stw	r17,0(r2)
1002663c:	003a7306 	br	1002500c <__svfscanf_r+0x4c>

10026640 <__svfscanf>:
10026640:	00800034 	movhi	r2,0
10026644:	108b0704 	addi	r2,r2,11292
10026648:	2013883a 	mov	r9,r4
1002664c:	11000017 	ldw	r4,0(r2)
10026650:	2805883a 	mov	r2,r5
10026654:	300f883a 	mov	r7,r6
10026658:	480b883a 	mov	r5,r9
1002665c:	100d883a 	mov	r6,r2
10026660:	0024fc01 	jmpi	10024fc0 <__svfscanf_r>

10026664 <_vfscanf_r>:
10026664:	defffb04 	addi	sp,sp,-20
10026668:	dcc00315 	stw	r19,12(sp)
1002666c:	dc800215 	stw	r18,8(sp)
10026670:	dc400115 	stw	r17,4(sp)
10026674:	dc000015 	stw	r16,0(sp)
10026678:	dfc00415 	stw	ra,16(sp)
1002667c:	2021883a 	mov	r16,r4
10026680:	2823883a 	mov	r17,r5
10026684:	3025883a 	mov	r18,r6
10026688:	3827883a 	mov	r19,r7
1002668c:	20000226 	beq	r4,zero,10026698 <_vfscanf_r+0x34>
10026690:	20800e17 	ldw	r2,56(r4)
10026694:	10000b26 	beq	r2,zero,100266c4 <_vfscanf_r+0x60>
10026698:	8009883a 	mov	r4,r16
1002669c:	880b883a 	mov	r5,r17
100266a0:	900d883a 	mov	r6,r18
100266a4:	980f883a 	mov	r7,r19
100266a8:	dfc00417 	ldw	ra,16(sp)
100266ac:	dcc00317 	ldw	r19,12(sp)
100266b0:	dc800217 	ldw	r18,8(sp)
100266b4:	dc400117 	ldw	r17,4(sp)
100266b8:	dc000017 	ldw	r16,0(sp)
100266bc:	dec00504 	addi	sp,sp,20
100266c0:	0024fc01 	jmpi	10024fc0 <__svfscanf_r>
100266c4:	00282e00 	call	100282e0 <__sinit>
100266c8:	003ff306 	br	10026698 <_vfscanf_r+0x34>

100266cc <vfscanf>:
100266cc:	defffb04 	addi	sp,sp,-20
100266d0:	dcc00315 	stw	r19,12(sp)
100266d4:	04c00034 	movhi	r19,0
100266d8:	9ccb0704 	addi	r19,r19,11292
100266dc:	98c00017 	ldw	r3,0(r19)
100266e0:	dc800215 	stw	r18,8(sp)
100266e4:	dc400115 	stw	r17,4(sp)
100266e8:	dc000015 	stw	r16,0(sp)
100266ec:	dfc00415 	stw	ra,16(sp)
100266f0:	2021883a 	mov	r16,r4
100266f4:	2823883a 	mov	r17,r5
100266f8:	3025883a 	mov	r18,r6
100266fc:	18000326 	beq	r3,zero,1002670c <vfscanf+0x40>
10026700:	18800e17 	ldw	r2,56(r3)
10026704:	1809883a 	mov	r4,r3
10026708:	10000b26 	beq	r2,zero,10026738 <vfscanf+0x6c>
1002670c:	99000017 	ldw	r4,0(r19)
10026710:	800b883a 	mov	r5,r16
10026714:	880d883a 	mov	r6,r17
10026718:	900f883a 	mov	r7,r18
1002671c:	dfc00417 	ldw	ra,16(sp)
10026720:	dcc00317 	ldw	r19,12(sp)
10026724:	dc800217 	ldw	r18,8(sp)
10026728:	dc400117 	ldw	r17,4(sp)
1002672c:	dc000017 	ldw	r16,0(sp)
10026730:	dec00504 	addi	sp,sp,20
10026734:	0024fc01 	jmpi	10024fc0 <__svfscanf_r>
10026738:	00282e00 	call	100282e0 <__sinit>
1002673c:	003ff306 	br	1002670c <vfscanf+0x40>

10026740 <__swsetup_r>:
10026740:	00800034 	movhi	r2,0
10026744:	108b0704 	addi	r2,r2,11292
10026748:	10c00017 	ldw	r3,0(r2)
1002674c:	defffd04 	addi	sp,sp,-12
10026750:	dc400115 	stw	r17,4(sp)
10026754:	dc000015 	stw	r16,0(sp)
10026758:	dfc00215 	stw	ra,8(sp)
1002675c:	2023883a 	mov	r17,r4
10026760:	2821883a 	mov	r16,r5
10026764:	18000226 	beq	r3,zero,10026770 <__swsetup_r+0x30>
10026768:	18800e17 	ldw	r2,56(r3)
1002676c:	10001f26 	beq	r2,zero,100267ec <__swsetup_r+0xac>
10026770:	8100030b 	ldhu	r4,12(r16)
10026774:	2080020c 	andi	r2,r4,8
10026778:	10002826 	beq	r2,zero,1002681c <__swsetup_r+0xdc>
1002677c:	81400417 	ldw	r5,16(r16)
10026780:	28001d26 	beq	r5,zero,100267f8 <__swsetup_r+0xb8>
10026784:	2080004c 	andi	r2,r4,1
10026788:	1005003a 	cmpeq	r2,r2,zero
1002678c:	10000b26 	beq	r2,zero,100267bc <__swsetup_r+0x7c>
10026790:	2080008c 	andi	r2,r4,2
10026794:	10001226 	beq	r2,zero,100267e0 <__swsetup_r+0xa0>
10026798:	0005883a 	mov	r2,zero
1002679c:	80800215 	stw	r2,8(r16)
100267a0:	28000b26 	beq	r5,zero,100267d0 <__swsetup_r+0x90>
100267a4:	0005883a 	mov	r2,zero
100267a8:	dfc00217 	ldw	ra,8(sp)
100267ac:	dc400117 	ldw	r17,4(sp)
100267b0:	dc000017 	ldw	r16,0(sp)
100267b4:	dec00304 	addi	sp,sp,12
100267b8:	f800283a 	ret
100267bc:	80800517 	ldw	r2,20(r16)
100267c0:	80000215 	stw	zero,8(r16)
100267c4:	0085c83a 	sub	r2,zero,r2
100267c8:	80800615 	stw	r2,24(r16)
100267cc:	283ff51e 	bne	r5,zero,100267a4 <__swsetup_r+0x64>
100267d0:	2080200c 	andi	r2,r4,128
100267d4:	103ff326 	beq	r2,zero,100267a4 <__swsetup_r+0x64>
100267d8:	00bfffc4 	movi	r2,-1
100267dc:	003ff206 	br	100267a8 <__swsetup_r+0x68>
100267e0:	80800517 	ldw	r2,20(r16)
100267e4:	80800215 	stw	r2,8(r16)
100267e8:	003fed06 	br	100267a0 <__swsetup_r+0x60>
100267ec:	1809883a 	mov	r4,r3
100267f0:	00282e00 	call	100282e0 <__sinit>
100267f4:	003fde06 	br	10026770 <__swsetup_r+0x30>
100267f8:	20c0a00c 	andi	r3,r4,640
100267fc:	00808004 	movi	r2,512
10026800:	18bfe026 	beq	r3,r2,10026784 <__swsetup_r+0x44>
10026804:	8809883a 	mov	r4,r17
10026808:	800b883a 	mov	r5,r16
1002680c:	00292c00 	call	100292c0 <__smakebuf_r>
10026810:	8100030b 	ldhu	r4,12(r16)
10026814:	81400417 	ldw	r5,16(r16)
10026818:	003fda06 	br	10026784 <__swsetup_r+0x44>
1002681c:	2080040c 	andi	r2,r4,16
10026820:	103fed26 	beq	r2,zero,100267d8 <__swsetup_r+0x98>
10026824:	2080010c 	andi	r2,r4,4
10026828:	10001226 	beq	r2,zero,10026874 <__swsetup_r+0x134>
1002682c:	81400c17 	ldw	r5,48(r16)
10026830:	28000526 	beq	r5,zero,10026848 <__swsetup_r+0x108>
10026834:	80801004 	addi	r2,r16,64
10026838:	28800226 	beq	r5,r2,10026844 <__swsetup_r+0x104>
1002683c:	8809883a 	mov	r4,r17
10026840:	00288a00 	call	100288a0 <_free_r>
10026844:	80000c15 	stw	zero,48(r16)
10026848:	8080030b 	ldhu	r2,12(r16)
1002684c:	81400417 	ldw	r5,16(r16)
10026850:	80000115 	stw	zero,4(r16)
10026854:	10bff6cc 	andi	r2,r2,65499
10026858:	8080030d 	sth	r2,12(r16)
1002685c:	81400015 	stw	r5,0(r16)
10026860:	8080030b 	ldhu	r2,12(r16)
10026864:	10800214 	ori	r2,r2,8
10026868:	113fffcc 	andi	r4,r2,65535
1002686c:	8080030d 	sth	r2,12(r16)
10026870:	003fc306 	br	10026780 <__swsetup_r+0x40>
10026874:	81400417 	ldw	r5,16(r16)
10026878:	003ff906 	br	10026860 <__swsetup_r+0x120>

1002687c <quorem>:
1002687c:	28c00417 	ldw	r3,16(r5)
10026880:	20800417 	ldw	r2,16(r4)
10026884:	defff604 	addi	sp,sp,-40
10026888:	ddc00715 	stw	r23,28(sp)
1002688c:	dd400515 	stw	r21,20(sp)
10026890:	dfc00915 	stw	ra,36(sp)
10026894:	df000815 	stw	fp,32(sp)
10026898:	dd800615 	stw	r22,24(sp)
1002689c:	dd000415 	stw	r20,16(sp)
100268a0:	dcc00315 	stw	r19,12(sp)
100268a4:	dc800215 	stw	r18,8(sp)
100268a8:	dc400115 	stw	r17,4(sp)
100268ac:	dc000015 	stw	r16,0(sp)
100268b0:	202f883a 	mov	r23,r4
100268b4:	282b883a 	mov	r21,r5
100268b8:	10c07416 	blt	r2,r3,10026a8c <quorem+0x210>
100268bc:	1c7fffc4 	addi	r17,r3,-1
100268c0:	8c45883a 	add	r2,r17,r17
100268c4:	1085883a 	add	r2,r2,r2
100268c8:	2c000504 	addi	r16,r5,20
100268cc:	24c00504 	addi	r19,r4,20
100268d0:	14ed883a 	add	r22,r2,r19
100268d4:	80a5883a 	add	r18,r16,r2
100268d8:	b7000017 	ldw	fp,0(r22)
100268dc:	91400017 	ldw	r5,0(r18)
100268e0:	e009883a 	mov	r4,fp
100268e4:	29400044 	addi	r5,r5,1
100268e8:	002233c0 	call	1002233c <__udivsi3>
100268ec:	1029883a 	mov	r20,r2
100268f0:	10003c1e 	bne	r2,zero,100269e4 <quorem+0x168>
100268f4:	a80b883a 	mov	r5,r21
100268f8:	b809883a 	mov	r4,r23
100268fc:	002990c0 	call	1002990c <__mcmp>
10026900:	10002b16 	blt	r2,zero,100269b0 <quorem+0x134>
10026904:	a5000044 	addi	r20,r20,1
10026908:	980f883a 	mov	r7,r19
1002690c:	0011883a 	mov	r8,zero
10026910:	0009883a 	mov	r4,zero
10026914:	81400017 	ldw	r5,0(r16)
10026918:	38c00017 	ldw	r3,0(r7)
1002691c:	84000104 	addi	r16,r16,4
10026920:	28bfffcc 	andi	r2,r5,65535
10026924:	2085883a 	add	r2,r4,r2
10026928:	11bfffcc 	andi	r6,r2,65535
1002692c:	193fffcc 	andi	r4,r3,65535
10026930:	1004d43a 	srli	r2,r2,16
10026934:	280ad43a 	srli	r5,r5,16
10026938:	2189c83a 	sub	r4,r4,r6
1002693c:	2209883a 	add	r4,r4,r8
10026940:	1806d43a 	srli	r3,r3,16
10026944:	288b883a 	add	r5,r5,r2
10026948:	200dd43a 	srai	r6,r4,16
1002694c:	28bfffcc 	andi	r2,r5,65535
10026950:	1887c83a 	sub	r3,r3,r2
10026954:	1987883a 	add	r3,r3,r6
10026958:	3900000d 	sth	r4,0(r7)
1002695c:	38c0008d 	sth	r3,2(r7)
10026960:	2808d43a 	srli	r4,r5,16
10026964:	39c00104 	addi	r7,r7,4
10026968:	1811d43a 	srai	r8,r3,16
1002696c:	943fe92e 	bgeu	r18,r16,10026914 <quorem+0x98>
10026970:	8c45883a 	add	r2,r17,r17
10026974:	1085883a 	add	r2,r2,r2
10026978:	9885883a 	add	r2,r19,r2
1002697c:	10c00017 	ldw	r3,0(r2)
10026980:	18000b1e 	bne	r3,zero,100269b0 <quorem+0x134>
10026984:	113fff04 	addi	r4,r2,-4
10026988:	9900082e 	bgeu	r19,r4,100269ac <quorem+0x130>
1002698c:	10bfff17 	ldw	r2,-4(r2)
10026990:	10000326 	beq	r2,zero,100269a0 <quorem+0x124>
10026994:	00000506 	br	100269ac <quorem+0x130>
10026998:	20800017 	ldw	r2,0(r4)
1002699c:	1000031e 	bne	r2,zero,100269ac <quorem+0x130>
100269a0:	213fff04 	addi	r4,r4,-4
100269a4:	8c7fffc4 	addi	r17,r17,-1
100269a8:	993ffb36 	bltu	r19,r4,10026998 <quorem+0x11c>
100269ac:	bc400415 	stw	r17,16(r23)
100269b0:	a005883a 	mov	r2,r20
100269b4:	dfc00917 	ldw	ra,36(sp)
100269b8:	df000817 	ldw	fp,32(sp)
100269bc:	ddc00717 	ldw	r23,28(sp)
100269c0:	dd800617 	ldw	r22,24(sp)
100269c4:	dd400517 	ldw	r21,20(sp)
100269c8:	dd000417 	ldw	r20,16(sp)
100269cc:	dcc00317 	ldw	r19,12(sp)
100269d0:	dc800217 	ldw	r18,8(sp)
100269d4:	dc400117 	ldw	r17,4(sp)
100269d8:	dc000017 	ldw	r16,0(sp)
100269dc:	dec00a04 	addi	sp,sp,40
100269e0:	f800283a 	ret
100269e4:	980f883a 	mov	r7,r19
100269e8:	8011883a 	mov	r8,r16
100269ec:	0013883a 	mov	r9,zero
100269f0:	000d883a 	mov	r6,zero
100269f4:	40c00017 	ldw	r3,0(r8)
100269f8:	39000017 	ldw	r4,0(r7)
100269fc:	42000104 	addi	r8,r8,4
10026a00:	18bfffcc 	andi	r2,r3,65535
10026a04:	a085383a 	mul	r2,r20,r2
10026a08:	1806d43a 	srli	r3,r3,16
10026a0c:	217fffcc 	andi	r5,r4,65535
10026a10:	3085883a 	add	r2,r6,r2
10026a14:	11bfffcc 	andi	r6,r2,65535
10026a18:	a0c7383a 	mul	r3,r20,r3
10026a1c:	1004d43a 	srli	r2,r2,16
10026a20:	298bc83a 	sub	r5,r5,r6
10026a24:	2a4b883a 	add	r5,r5,r9
10026a28:	2008d43a 	srli	r4,r4,16
10026a2c:	1887883a 	add	r3,r3,r2
10026a30:	280dd43a 	srai	r6,r5,16
10026a34:	18bfffcc 	andi	r2,r3,65535
10026a38:	2089c83a 	sub	r4,r4,r2
10026a3c:	2189883a 	add	r4,r4,r6
10026a40:	3900008d 	sth	r4,2(r7)
10026a44:	3940000d 	sth	r5,0(r7)
10026a48:	180cd43a 	srli	r6,r3,16
10026a4c:	39c00104 	addi	r7,r7,4
10026a50:	2013d43a 	srai	r9,r4,16
10026a54:	923fe72e 	bgeu	r18,r8,100269f4 <quorem+0x178>
10026a58:	e03fa61e 	bne	fp,zero,100268f4 <quorem+0x78>
10026a5c:	b0ffff04 	addi	r3,r22,-4
10026a60:	98c0082e 	bgeu	r19,r3,10026a84 <quorem+0x208>
10026a64:	b0bfff17 	ldw	r2,-4(r22)
10026a68:	10000326 	beq	r2,zero,10026a78 <quorem+0x1fc>
10026a6c:	00000506 	br	10026a84 <quorem+0x208>
10026a70:	18800017 	ldw	r2,0(r3)
10026a74:	1000031e 	bne	r2,zero,10026a84 <quorem+0x208>
10026a78:	18ffff04 	addi	r3,r3,-4
10026a7c:	8c7fffc4 	addi	r17,r17,-1
10026a80:	98fffb36 	bltu	r19,r3,10026a70 <quorem+0x1f4>
10026a84:	bc400415 	stw	r17,16(r23)
10026a88:	003f9a06 	br	100268f4 <quorem+0x78>
10026a8c:	0005883a 	mov	r2,zero
10026a90:	003fc806 	br	100269b4 <quorem+0x138>

10026a94 <_dtoa_r>:
10026a94:	22001017 	ldw	r8,64(r4)
10026a98:	deffda04 	addi	sp,sp,-152
10026a9c:	dd402115 	stw	r21,132(sp)
10026aa0:	dd002015 	stw	r20,128(sp)
10026aa4:	dc801e15 	stw	r18,120(sp)
10026aa8:	dc401d15 	stw	r17,116(sp)
10026aac:	dfc02515 	stw	ra,148(sp)
10026ab0:	df002415 	stw	fp,144(sp)
10026ab4:	ddc02315 	stw	r23,140(sp)
10026ab8:	dd802215 	stw	r22,136(sp)
10026abc:	dcc01f15 	stw	r19,124(sp)
10026ac0:	dc001c15 	stw	r16,112(sp)
10026ac4:	d9001615 	stw	r4,88(sp)
10026ac8:	3023883a 	mov	r17,r6
10026acc:	2829883a 	mov	r20,r5
10026ad0:	d9c01715 	stw	r7,92(sp)
10026ad4:	dc802817 	ldw	r18,160(sp)
10026ad8:	302b883a 	mov	r21,r6
10026adc:	40000a26 	beq	r8,zero,10026b08 <_dtoa_r+0x74>
10026ae0:	20801117 	ldw	r2,68(r4)
10026ae4:	400b883a 	mov	r5,r8
10026ae8:	40800115 	stw	r2,4(r8)
10026aec:	20c01117 	ldw	r3,68(r4)
10026af0:	00800044 	movi	r2,1
10026af4:	10c4983a 	sll	r2,r2,r3
10026af8:	40800215 	stw	r2,8(r8)
10026afc:	00297b00 	call	100297b0 <_Bfree>
10026b00:	d8c01617 	ldw	r3,88(sp)
10026b04:	18001015 	stw	zero,64(r3)
10026b08:	8800a316 	blt	r17,zero,10026d98 <_dtoa_r+0x304>
10026b0c:	90000015 	stw	zero,0(r18)
10026b10:	a8dffc2c 	andhi	r3,r21,32752
10026b14:	009ffc34 	movhi	r2,32752
10026b18:	18809126 	beq	r3,r2,10026d60 <_dtoa_r+0x2cc>
10026b1c:	000d883a 	mov	r6,zero
10026b20:	000f883a 	mov	r7,zero
10026b24:	a009883a 	mov	r4,r20
10026b28:	a80b883a 	mov	r5,r21
10026b2c:	dd001215 	stw	r20,72(sp)
10026b30:	dd401315 	stw	r21,76(sp)
10026b34:	003047c0 	call	1003047c <__nedf2>
10026b38:	1000171e 	bne	r2,zero,10026b98 <_dtoa_r+0x104>
10026b3c:	d9802717 	ldw	r6,156(sp)
10026b40:	00800044 	movi	r2,1
10026b44:	30800015 	stw	r2,0(r6)
10026b48:	d8802917 	ldw	r2,164(sp)
10026b4c:	10029b26 	beq	r2,zero,100275bc <_dtoa_r+0xb28>
10026b50:	d9002917 	ldw	r4,164(sp)
10026b54:	00800034 	movhi	r2,0
10026b58:	1082d044 	addi	r2,r2,2881
10026b5c:	10ffffc4 	addi	r3,r2,-1
10026b60:	20800015 	stw	r2,0(r4)
10026b64:	1805883a 	mov	r2,r3
10026b68:	dfc02517 	ldw	ra,148(sp)
10026b6c:	df002417 	ldw	fp,144(sp)
10026b70:	ddc02317 	ldw	r23,140(sp)
10026b74:	dd802217 	ldw	r22,136(sp)
10026b78:	dd402117 	ldw	r21,132(sp)
10026b7c:	dd002017 	ldw	r20,128(sp)
10026b80:	dcc01f17 	ldw	r19,124(sp)
10026b84:	dc801e17 	ldw	r18,120(sp)
10026b88:	dc401d17 	ldw	r17,116(sp)
10026b8c:	dc001c17 	ldw	r16,112(sp)
10026b90:	dec02604 	addi	sp,sp,152
10026b94:	f800283a 	ret
10026b98:	d9001617 	ldw	r4,88(sp)
10026b9c:	d9401217 	ldw	r5,72(sp)
10026ba0:	d8800104 	addi	r2,sp,4
10026ba4:	a80d883a 	mov	r6,r21
10026ba8:	d9c00204 	addi	r7,sp,8
10026bac:	d8800015 	stw	r2,0(sp)
10026bb0:	0029dec0 	call	10029dec <__d2b>
10026bb4:	d8800715 	stw	r2,28(sp)
10026bb8:	a804d53a 	srli	r2,r21,20
10026bbc:	1101ffcc 	andi	r4,r2,2047
10026bc0:	20008626 	beq	r4,zero,10026ddc <_dtoa_r+0x348>
10026bc4:	d8c01217 	ldw	r3,72(sp)
10026bc8:	00800434 	movhi	r2,16
10026bcc:	10bfffc4 	addi	r2,r2,-1
10026bd0:	ddc00117 	ldw	r23,4(sp)
10026bd4:	a884703a 	and	r2,r21,r2
10026bd8:	1811883a 	mov	r8,r3
10026bdc:	124ffc34 	orhi	r9,r2,16368
10026be0:	25bf0044 	addi	r22,r4,-1023
10026be4:	d8000815 	stw	zero,32(sp)
10026be8:	0005883a 	mov	r2,zero
10026bec:	00cffe34 	movhi	r3,16376
10026bf0:	480b883a 	mov	r5,r9
10026bf4:	4009883a 	mov	r4,r8
10026bf8:	180f883a 	mov	r7,r3
10026bfc:	100d883a 	mov	r6,r2
10026c00:	002fce40 	call	1002fce4 <__subdf3>
10026c04:	0218dbf4 	movhi	r8,25455
10026c08:	4210d844 	addi	r8,r8,17249
10026c0c:	024ff4f4 	movhi	r9,16339
10026c10:	4a61e9c4 	addi	r9,r9,-30809
10026c14:	480f883a 	mov	r7,r9
10026c18:	400d883a 	mov	r6,r8
10026c1c:	180b883a 	mov	r5,r3
10026c20:	1009883a 	mov	r4,r2
10026c24:	002fdd80 	call	1002fdd8 <__muldf3>
10026c28:	0222d874 	movhi	r8,35681
10026c2c:	42322cc4 	addi	r8,r8,-14157
10026c30:	024ff1f4 	movhi	r9,16327
10026c34:	4a628a04 	addi	r9,r9,-30168
10026c38:	480f883a 	mov	r7,r9
10026c3c:	400d883a 	mov	r6,r8
10026c40:	180b883a 	mov	r5,r3
10026c44:	1009883a 	mov	r4,r2
10026c48:	002fd640 	call	1002fd64 <__adddf3>
10026c4c:	b009883a 	mov	r4,r22
10026c50:	1021883a 	mov	r16,r2
10026c54:	1823883a 	mov	r17,r3
10026c58:	00307240 	call	10030724 <__floatsidf>
10026c5c:	021427f4 	movhi	r8,20639
10026c60:	421e7ec4 	addi	r8,r8,31227
10026c64:	024ff4f4 	movhi	r9,16339
10026c68:	4a5104c4 	addi	r9,r9,17427
10026c6c:	480f883a 	mov	r7,r9
10026c70:	400d883a 	mov	r6,r8
10026c74:	180b883a 	mov	r5,r3
10026c78:	1009883a 	mov	r4,r2
10026c7c:	002fdd80 	call	1002fdd8 <__muldf3>
10026c80:	180f883a 	mov	r7,r3
10026c84:	880b883a 	mov	r5,r17
10026c88:	100d883a 	mov	r6,r2
10026c8c:	8009883a 	mov	r4,r16
10026c90:	002fd640 	call	1002fd64 <__adddf3>
10026c94:	1009883a 	mov	r4,r2
10026c98:	180b883a 	mov	r5,r3
10026c9c:	1021883a 	mov	r16,r2
10026ca0:	1823883a 	mov	r17,r3
10026ca4:	003081c0 	call	1003081c <__fixdfsi>
10026ca8:	000d883a 	mov	r6,zero
10026cac:	000f883a 	mov	r7,zero
10026cb0:	8009883a 	mov	r4,r16
10026cb4:	880b883a 	mov	r5,r17
10026cb8:	d8800d15 	stw	r2,52(sp)
10026cbc:	00306140 	call	10030614 <__ltdf2>
10026cc0:	10031716 	blt	r2,zero,10027920 <_dtoa_r+0xe8c>
10026cc4:	d8c00d17 	ldw	r3,52(sp)
10026cc8:	00800584 	movi	r2,22
10026ccc:	10c1482e 	bgeu	r2,r3,100271f0 <_dtoa_r+0x75c>
10026cd0:	01000044 	movi	r4,1
10026cd4:	d9000c15 	stw	r4,48(sp)
10026cd8:	bd85c83a 	sub	r2,r23,r22
10026cdc:	11bfffc4 	addi	r6,r2,-1
10026ce0:	30030b16 	blt	r6,zero,10027910 <_dtoa_r+0xe7c>
10026ce4:	d9800a15 	stw	r6,40(sp)
10026ce8:	d8001115 	stw	zero,68(sp)
10026cec:	d8c00d17 	ldw	r3,52(sp)
10026cf0:	1802ff16 	blt	r3,zero,100278f0 <_dtoa_r+0xe5c>
10026cf4:	d9000a17 	ldw	r4,40(sp)
10026cf8:	d8c00915 	stw	r3,36(sp)
10026cfc:	d8001015 	stw	zero,64(sp)
10026d00:	20c9883a 	add	r4,r4,r3
10026d04:	d9000a15 	stw	r4,40(sp)
10026d08:	d9001717 	ldw	r4,92(sp)
10026d0c:	00800244 	movi	r2,9
10026d10:	11004636 	bltu	r2,r4,10026e2c <_dtoa_r+0x398>
10026d14:	00800144 	movi	r2,5
10026d18:	11020416 	blt	r2,r4,1002752c <_dtoa_r+0xa98>
10026d1c:	04400044 	movi	r17,1
10026d20:	d8c01717 	ldw	r3,92(sp)
10026d24:	00800144 	movi	r2,5
10026d28:	10c1ed36 	bltu	r2,r3,100274e0 <_dtoa_r+0xa4c>
10026d2c:	18c5883a 	add	r2,r3,r3
10026d30:	1085883a 	add	r2,r2,r2
10026d34:	00c400b4 	movhi	r3,4098
10026d38:	18db5204 	addi	r3,r3,27976
10026d3c:	10c5883a 	add	r2,r2,r3
10026d40:	11000017 	ldw	r4,0(r2)
10026d44:	2000683a 	jmp	r4
10026d48:	10026e34 	orhi	zero,r2,2488
10026d4c:	10026e34 	orhi	zero,r2,2488
10026d50:	10027834 	orhi	zero,r2,2528
10026d54:	1002780c 	andi	zero,r2,2528
10026d58:	10027850 	cmplti	zero,r2,2529
10026d5c:	1002785c 	xori	zero,r2,2529
10026d60:	d9002717 	ldw	r4,156(sp)
10026d64:	0089c3c4 	movi	r2,9999
10026d68:	20800015 	stw	r2,0(r4)
10026d6c:	a0001026 	beq	r20,zero,10026db0 <_dtoa_r+0x31c>
10026d70:	00c00034 	movhi	r3,0
10026d74:	18c38704 	addi	r3,r3,3612
10026d78:	d9802917 	ldw	r6,164(sp)
10026d7c:	303f7926 	beq	r6,zero,10026b64 <_dtoa_r+0xd0>
10026d80:	188000c7 	ldb	r2,3(r3)
10026d84:	190000c4 	addi	r4,r3,3
10026d88:	1000101e 	bne	r2,zero,10026dcc <_dtoa_r+0x338>
10026d8c:	d8802917 	ldw	r2,164(sp)
10026d90:	11000015 	stw	r4,0(r2)
10026d94:	003f7306 	br	10026b64 <_dtoa_r+0xd0>
10026d98:	00a00034 	movhi	r2,32768
10026d9c:	10bfffc4 	addi	r2,r2,-1
10026da0:	00c00044 	movi	r3,1
10026da4:	88aa703a 	and	r21,r17,r2
10026da8:	90c00015 	stw	r3,0(r18)
10026dac:	003f5806 	br	10026b10 <_dtoa_r+0x7c>
10026db0:	00800434 	movhi	r2,16
10026db4:	10bfffc4 	addi	r2,r2,-1
10026db8:	a884703a 	and	r2,r21,r2
10026dbc:	103fec1e 	bne	r2,zero,10026d70 <_dtoa_r+0x2dc>
10026dc0:	00c00034 	movhi	r3,0
10026dc4:	18c38404 	addi	r3,r3,3600
10026dc8:	003feb06 	br	10026d78 <_dtoa_r+0x2e4>
10026dcc:	d8802917 	ldw	r2,164(sp)
10026dd0:	19000204 	addi	r4,r3,8
10026dd4:	11000015 	stw	r4,0(r2)
10026dd8:	003f6206 	br	10026b64 <_dtoa_r+0xd0>
10026ddc:	ddc00117 	ldw	r23,4(sp)
10026de0:	d8800217 	ldw	r2,8(sp)
10026de4:	01000804 	movi	r4,32
10026de8:	b8c10c84 	addi	r3,r23,1074
10026dec:	18a3883a 	add	r17,r3,r2
10026df0:	2441b80e 	bge	r4,r17,100274d4 <_dtoa_r+0xa40>
10026df4:	00c01004 	movi	r3,64
10026df8:	1c47c83a 	sub	r3,r3,r17
10026dfc:	88bff804 	addi	r2,r17,-32
10026e00:	a8c6983a 	sll	r3,r21,r3
10026e04:	a084d83a 	srl	r2,r20,r2
10026e08:	1888b03a 	or	r4,r3,r2
10026e0c:	00309680 	call	10030968 <__floatunsidf>
10026e10:	1011883a 	mov	r8,r2
10026e14:	00bf8434 	movhi	r2,65040
10026e18:	01000044 	movi	r4,1
10026e1c:	10d3883a 	add	r9,r2,r3
10026e20:	8dbef344 	addi	r22,r17,-1075
10026e24:	d9000815 	stw	r4,32(sp)
10026e28:	003f6f06 	br	10026be8 <_dtoa_r+0x154>
10026e2c:	d8001715 	stw	zero,92(sp)
10026e30:	04400044 	movi	r17,1
10026e34:	00bfffc4 	movi	r2,-1
10026e38:	00c00044 	movi	r3,1
10026e3c:	d8800e15 	stw	r2,56(sp)
10026e40:	d8002615 	stw	zero,152(sp)
10026e44:	d8800f15 	stw	r2,60(sp)
10026e48:	d8c00b15 	stw	r3,44(sp)
10026e4c:	1021883a 	mov	r16,r2
10026e50:	d8801617 	ldw	r2,88(sp)
10026e54:	10001115 	stw	zero,68(r2)
10026e58:	d8801617 	ldw	r2,88(sp)
10026e5c:	11401117 	ldw	r5,68(r2)
10026e60:	1009883a 	mov	r4,r2
10026e64:	0029d300 	call	10029d30 <_Balloc>
10026e68:	d8c01617 	ldw	r3,88(sp)
10026e6c:	d8800515 	stw	r2,20(sp)
10026e70:	18801015 	stw	r2,64(r3)
10026e74:	00800384 	movi	r2,14
10026e78:	14006836 	bltu	r2,r16,1002701c <_dtoa_r+0x588>
10026e7c:	8805003a 	cmpeq	r2,r17,zero
10026e80:	1000661e 	bne	r2,zero,1002701c <_dtoa_r+0x588>
10026e84:	d9000d17 	ldw	r4,52(sp)
10026e88:	0102300e 	bge	zero,r4,1002774c <_dtoa_r+0xcb8>
10026e8c:	208003cc 	andi	r2,r4,15
10026e90:	100490fa 	slli	r2,r2,3
10026e94:	2025d13a 	srai	r18,r4,4
10026e98:	00c00034 	movhi	r3,0
10026e9c:	18c39804 	addi	r3,r3,3680
10026ea0:	10c5883a 	add	r2,r2,r3
10026ea4:	90c0040c 	andi	r3,r18,16
10026ea8:	14000017 	ldw	r16,0(r2)
10026eac:	14400117 	ldw	r17,4(r2)
10026eb0:	18036a1e 	bne	r3,zero,10027c5c <_dtoa_r+0x11c8>
10026eb4:	05800084 	movi	r22,2
10026eb8:	90001026 	beq	r18,zero,10026efc <_dtoa_r+0x468>
10026ebc:	04c00034 	movhi	r19,0
10026ec0:	9cc3ca04 	addi	r19,r19,3880
10026ec4:	9080004c 	andi	r2,r18,1
10026ec8:	1005003a 	cmpeq	r2,r2,zero
10026ecc:	1000081e 	bne	r2,zero,10026ef0 <_dtoa_r+0x45c>
10026ed0:	99800017 	ldw	r6,0(r19)
10026ed4:	99c00117 	ldw	r7,4(r19)
10026ed8:	880b883a 	mov	r5,r17
10026edc:	8009883a 	mov	r4,r16
10026ee0:	002fdd80 	call	1002fdd8 <__muldf3>
10026ee4:	1021883a 	mov	r16,r2
10026ee8:	b5800044 	addi	r22,r22,1
10026eec:	1823883a 	mov	r17,r3
10026ef0:	9025d07a 	srai	r18,r18,1
10026ef4:	9cc00204 	addi	r19,r19,8
10026ef8:	903ff21e 	bne	r18,zero,10026ec4 <_dtoa_r+0x430>
10026efc:	a80b883a 	mov	r5,r21
10026f00:	a009883a 	mov	r4,r20
10026f04:	880f883a 	mov	r7,r17
10026f08:	800d883a 	mov	r6,r16
10026f0c:	003019c0 	call	1003019c <__divdf3>
10026f10:	1029883a 	mov	r20,r2
10026f14:	182b883a 	mov	r21,r3
10026f18:	d8c00c17 	ldw	r3,48(sp)
10026f1c:	1805003a 	cmpeq	r2,r3,zero
10026f20:	1000081e 	bne	r2,zero,10026f44 <_dtoa_r+0x4b0>
10026f24:	0005883a 	mov	r2,zero
10026f28:	00cffc34 	movhi	r3,16368
10026f2c:	180f883a 	mov	r7,r3
10026f30:	a009883a 	mov	r4,r20
10026f34:	a80b883a 	mov	r5,r21
10026f38:	100d883a 	mov	r6,r2
10026f3c:	00306140 	call	10030614 <__ltdf2>
10026f40:	1003fe16 	blt	r2,zero,10027f3c <_dtoa_r+0x14a8>
10026f44:	b009883a 	mov	r4,r22
10026f48:	00307240 	call	10030724 <__floatsidf>
10026f4c:	180b883a 	mov	r5,r3
10026f50:	1009883a 	mov	r4,r2
10026f54:	a00d883a 	mov	r6,r20
10026f58:	a80f883a 	mov	r7,r21
10026f5c:	002fdd80 	call	1002fdd8 <__muldf3>
10026f60:	0011883a 	mov	r8,zero
10026f64:	02500734 	movhi	r9,16412
10026f68:	1009883a 	mov	r4,r2
10026f6c:	180b883a 	mov	r5,r3
10026f70:	480f883a 	mov	r7,r9
10026f74:	400d883a 	mov	r6,r8
10026f78:	002fd640 	call	1002fd64 <__adddf3>
10026f7c:	d9000f17 	ldw	r4,60(sp)
10026f80:	102d883a 	mov	r22,r2
10026f84:	00bf3034 	movhi	r2,64704
10026f88:	18b9883a 	add	fp,r3,r2
10026f8c:	e02f883a 	mov	r23,fp
10026f90:	20028f1e 	bne	r4,zero,100279d0 <_dtoa_r+0xf3c>
10026f94:	0005883a 	mov	r2,zero
10026f98:	00d00534 	movhi	r3,16404
10026f9c:	a009883a 	mov	r4,r20
10026fa0:	a80b883a 	mov	r5,r21
10026fa4:	180f883a 	mov	r7,r3
10026fa8:	100d883a 	mov	r6,r2
10026fac:	002fce40 	call	1002fce4 <__subdf3>
10026fb0:	1009883a 	mov	r4,r2
10026fb4:	e00f883a 	mov	r7,fp
10026fb8:	180b883a 	mov	r5,r3
10026fbc:	b00d883a 	mov	r6,r22
10026fc0:	1025883a 	mov	r18,r2
10026fc4:	1827883a 	mov	r19,r3
10026fc8:	00305040 	call	10030504 <__gtdf2>
10026fcc:	00834f16 	blt	zero,r2,10027d0c <_dtoa_r+0x1278>
10026fd0:	e0e0003c 	xorhi	r3,fp,32768
10026fd4:	9009883a 	mov	r4,r18
10026fd8:	980b883a 	mov	r5,r19
10026fdc:	180f883a 	mov	r7,r3
10026fe0:	b00d883a 	mov	r6,r22
10026fe4:	00306140 	call	10030614 <__ltdf2>
10026fe8:	1000080e 	bge	r2,zero,1002700c <_dtoa_r+0x578>
10026fec:	0027883a 	mov	r19,zero
10026ff0:	0025883a 	mov	r18,zero
10026ff4:	d8802617 	ldw	r2,152(sp)
10026ff8:	df000517 	ldw	fp,20(sp)
10026ffc:	d8000615 	stw	zero,24(sp)
10027000:	0084303a 	nor	r2,zero,r2
10027004:	d8800d15 	stw	r2,52(sp)
10027008:	00019b06 	br	10027678 <_dtoa_r+0xbe4>
1002700c:	d9801217 	ldw	r6,72(sp)
10027010:	d8801317 	ldw	r2,76(sp)
10027014:	3029883a 	mov	r20,r6
10027018:	102b883a 	mov	r21,r2
1002701c:	d8c00217 	ldw	r3,8(sp)
10027020:	18008516 	blt	r3,zero,10027238 <_dtoa_r+0x7a4>
10027024:	d9000d17 	ldw	r4,52(sp)
10027028:	00800384 	movi	r2,14
1002702c:	11008216 	blt	r2,r4,10027238 <_dtoa_r+0x7a4>
10027030:	200490fa 	slli	r2,r4,3
10027034:	d9802617 	ldw	r6,152(sp)
10027038:	00c00034 	movhi	r3,0
1002703c:	18c39804 	addi	r3,r3,3680
10027040:	10c5883a 	add	r2,r2,r3
10027044:	14800017 	ldw	r18,0(r2)
10027048:	14c00117 	ldw	r19,4(r2)
1002704c:	30031e16 	blt	r6,zero,10027cc8 <_dtoa_r+0x1234>
10027050:	d9000517 	ldw	r4,20(sp)
10027054:	d8c00f17 	ldw	r3,60(sp)
10027058:	a823883a 	mov	r17,r21
1002705c:	a021883a 	mov	r16,r20
10027060:	192b883a 	add	r21,r3,r4
10027064:	2039883a 	mov	fp,r4
10027068:	00000f06 	br	100270a8 <_dtoa_r+0x614>
1002706c:	0005883a 	mov	r2,zero
10027070:	00d00934 	movhi	r3,16420
10027074:	5009883a 	mov	r4,r10
10027078:	580b883a 	mov	r5,r11
1002707c:	180f883a 	mov	r7,r3
10027080:	100d883a 	mov	r6,r2
10027084:	002fdd80 	call	1002fdd8 <__muldf3>
10027088:	180b883a 	mov	r5,r3
1002708c:	000d883a 	mov	r6,zero
10027090:	000f883a 	mov	r7,zero
10027094:	1009883a 	mov	r4,r2
10027098:	1021883a 	mov	r16,r2
1002709c:	1823883a 	mov	r17,r3
100270a0:	003047c0 	call	1003047c <__nedf2>
100270a4:	10004526 	beq	r2,zero,100271bc <_dtoa_r+0x728>
100270a8:	900d883a 	mov	r6,r18
100270ac:	980f883a 	mov	r7,r19
100270b0:	8009883a 	mov	r4,r16
100270b4:	880b883a 	mov	r5,r17
100270b8:	003019c0 	call	1003019c <__divdf3>
100270bc:	180b883a 	mov	r5,r3
100270c0:	1009883a 	mov	r4,r2
100270c4:	003081c0 	call	1003081c <__fixdfsi>
100270c8:	1009883a 	mov	r4,r2
100270cc:	1029883a 	mov	r20,r2
100270d0:	00307240 	call	10030724 <__floatsidf>
100270d4:	180f883a 	mov	r7,r3
100270d8:	9009883a 	mov	r4,r18
100270dc:	980b883a 	mov	r5,r19
100270e0:	100d883a 	mov	r6,r2
100270e4:	002fdd80 	call	1002fdd8 <__muldf3>
100270e8:	180f883a 	mov	r7,r3
100270ec:	880b883a 	mov	r5,r17
100270f0:	8009883a 	mov	r4,r16
100270f4:	100d883a 	mov	r6,r2
100270f8:	002fce40 	call	1002fce4 <__subdf3>
100270fc:	1015883a 	mov	r10,r2
10027100:	a0800c04 	addi	r2,r20,48
10027104:	e0800005 	stb	r2,0(fp)
10027108:	e7000044 	addi	fp,fp,1
1002710c:	1817883a 	mov	r11,r3
10027110:	e57fd61e 	bne	fp,r21,1002706c <_dtoa_r+0x5d8>
10027114:	500d883a 	mov	r6,r10
10027118:	180f883a 	mov	r7,r3
1002711c:	5009883a 	mov	r4,r10
10027120:	180b883a 	mov	r5,r3
10027124:	002fd640 	call	1002fd64 <__adddf3>
10027128:	100d883a 	mov	r6,r2
1002712c:	9009883a 	mov	r4,r18
10027130:	980b883a 	mov	r5,r19
10027134:	180f883a 	mov	r7,r3
10027138:	1021883a 	mov	r16,r2
1002713c:	1823883a 	mov	r17,r3
10027140:	00306140 	call	10030614 <__ltdf2>
10027144:	10000816 	blt	r2,zero,10027168 <_dtoa_r+0x6d4>
10027148:	980b883a 	mov	r5,r19
1002714c:	800d883a 	mov	r6,r16
10027150:	880f883a 	mov	r7,r17
10027154:	9009883a 	mov	r4,r18
10027158:	00303f40 	call	100303f4 <__eqdf2>
1002715c:	1000171e 	bne	r2,zero,100271bc <_dtoa_r+0x728>
10027160:	a080004c 	andi	r2,r20,1
10027164:	10001526 	beq	r2,zero,100271bc <_dtoa_r+0x728>
10027168:	d8800d17 	ldw	r2,52(sp)
1002716c:	d8800415 	stw	r2,16(sp)
10027170:	e009883a 	mov	r4,fp
10027174:	213fffc4 	addi	r4,r4,-1
10027178:	20c00007 	ldb	r3,0(r4)
1002717c:	00800e44 	movi	r2,57
10027180:	1880081e 	bne	r3,r2,100271a4 <_dtoa_r+0x710>
10027184:	d8800517 	ldw	r2,20(sp)
10027188:	113ffa1e 	bne	r2,r4,10027174 <_dtoa_r+0x6e0>
1002718c:	d8c00417 	ldw	r3,16(sp)
10027190:	d9800517 	ldw	r6,20(sp)
10027194:	00800c04 	movi	r2,48
10027198:	18c00044 	addi	r3,r3,1
1002719c:	d8c00415 	stw	r3,16(sp)
100271a0:	30800005 	stb	r2,0(r6)
100271a4:	20800003 	ldbu	r2,0(r4)
100271a8:	d8c00417 	ldw	r3,16(sp)
100271ac:	27000044 	addi	fp,r4,1
100271b0:	10800044 	addi	r2,r2,1
100271b4:	d8c00d15 	stw	r3,52(sp)
100271b8:	20800005 	stb	r2,0(r4)
100271bc:	d9001617 	ldw	r4,88(sp)
100271c0:	d9400717 	ldw	r5,28(sp)
100271c4:	00297b00 	call	100297b0 <_Bfree>
100271c8:	e0000005 	stb	zero,0(fp)
100271cc:	d9800d17 	ldw	r6,52(sp)
100271d0:	d8c02717 	ldw	r3,156(sp)
100271d4:	d9002917 	ldw	r4,164(sp)
100271d8:	30800044 	addi	r2,r6,1
100271dc:	18800015 	stw	r2,0(r3)
100271e0:	20029c26 	beq	r4,zero,10027c54 <_dtoa_r+0x11c0>
100271e4:	d8c00517 	ldw	r3,20(sp)
100271e8:	27000015 	stw	fp,0(r4)
100271ec:	003e5d06 	br	10026b64 <_dtoa_r+0xd0>
100271f0:	d9800d17 	ldw	r6,52(sp)
100271f4:	00c00034 	movhi	r3,0
100271f8:	18c39804 	addi	r3,r3,3680
100271fc:	d9001217 	ldw	r4,72(sp)
10027200:	300490fa 	slli	r2,r6,3
10027204:	d9401317 	ldw	r5,76(sp)
10027208:	10c5883a 	add	r2,r2,r3
1002720c:	12000017 	ldw	r8,0(r2)
10027210:	12400117 	ldw	r9,4(r2)
10027214:	400d883a 	mov	r6,r8
10027218:	480f883a 	mov	r7,r9
1002721c:	00306140 	call	10030614 <__ltdf2>
10027220:	1000030e 	bge	r2,zero,10027230 <_dtoa_r+0x79c>
10027224:	d8800d17 	ldw	r2,52(sp)
10027228:	10bfffc4 	addi	r2,r2,-1
1002722c:	d8800d15 	stw	r2,52(sp)
10027230:	d8000c15 	stw	zero,48(sp)
10027234:	003ea806 	br	10026cd8 <_dtoa_r+0x244>
10027238:	d9000b17 	ldw	r4,44(sp)
1002723c:	202cc03a 	cmpne	r22,r4,zero
10027240:	b000c71e 	bne	r22,zero,10027560 <_dtoa_r+0xacc>
10027244:	dc001117 	ldw	r16,68(sp)
10027248:	dc801017 	ldw	r18,64(sp)
1002724c:	0027883a 	mov	r19,zero
10027250:	04000b0e 	bge	zero,r16,10027280 <_dtoa_r+0x7ec>
10027254:	d8c00a17 	ldw	r3,40(sp)
10027258:	00c0090e 	bge	zero,r3,10027280 <_dtoa_r+0x7ec>
1002725c:	8005883a 	mov	r2,r16
10027260:	1c011316 	blt	r3,r16,100276b0 <_dtoa_r+0xc1c>
10027264:	d9000a17 	ldw	r4,40(sp)
10027268:	d9801117 	ldw	r6,68(sp)
1002726c:	80a1c83a 	sub	r16,r16,r2
10027270:	2089c83a 	sub	r4,r4,r2
10027274:	308dc83a 	sub	r6,r6,r2
10027278:	d9000a15 	stw	r4,40(sp)
1002727c:	d9801115 	stw	r6,68(sp)
10027280:	d8801017 	ldw	r2,64(sp)
10027284:	0080150e 	bge	zero,r2,100272dc <_dtoa_r+0x848>
10027288:	d8c00b17 	ldw	r3,44(sp)
1002728c:	1805003a 	cmpeq	r2,r3,zero
10027290:	1001c91e 	bne	r2,zero,100279b8 <_dtoa_r+0xf24>
10027294:	04800e0e 	bge	zero,r18,100272d0 <_dtoa_r+0x83c>
10027298:	d9001617 	ldw	r4,88(sp)
1002729c:	980b883a 	mov	r5,r19
100272a0:	900d883a 	mov	r6,r18
100272a4:	002a5640 	call	1002a564 <__pow5mult>
100272a8:	d9001617 	ldw	r4,88(sp)
100272ac:	d9800717 	ldw	r6,28(sp)
100272b0:	100b883a 	mov	r5,r2
100272b4:	1027883a 	mov	r19,r2
100272b8:	002a2400 	call	1002a240 <__multiply>
100272bc:	d9001617 	ldw	r4,88(sp)
100272c0:	d9400717 	ldw	r5,28(sp)
100272c4:	1023883a 	mov	r17,r2
100272c8:	00297b00 	call	100297b0 <_Bfree>
100272cc:	dc400715 	stw	r17,28(sp)
100272d0:	d9001017 	ldw	r4,64(sp)
100272d4:	248dc83a 	sub	r6,r4,r18
100272d8:	30010e1e 	bne	r6,zero,10027714 <_dtoa_r+0xc80>
100272dc:	d9001617 	ldw	r4,88(sp)
100272e0:	04400044 	movi	r17,1
100272e4:	880b883a 	mov	r5,r17
100272e8:	002a4280 	call	1002a428 <__i2b>
100272ec:	d9800917 	ldw	r6,36(sp)
100272f0:	1025883a 	mov	r18,r2
100272f4:	0180040e 	bge	zero,r6,10027308 <_dtoa_r+0x874>
100272f8:	d9001617 	ldw	r4,88(sp)
100272fc:	100b883a 	mov	r5,r2
10027300:	002a5640 	call	1002a564 <__pow5mult>
10027304:	1025883a 	mov	r18,r2
10027308:	d8801717 	ldw	r2,92(sp)
1002730c:	8880f30e 	bge	r17,r2,100276dc <_dtoa_r+0xc48>
10027310:	0023883a 	mov	r17,zero
10027314:	d9800917 	ldw	r6,36(sp)
10027318:	30019e1e 	bne	r6,zero,10027994 <_dtoa_r+0xf00>
1002731c:	00c00044 	movi	r3,1
10027320:	d9000a17 	ldw	r4,40(sp)
10027324:	20c5883a 	add	r2,r4,r3
10027328:	10c007cc 	andi	r3,r2,31
1002732c:	1800841e 	bne	r3,zero,10027540 <_dtoa_r+0xaac>
10027330:	00800704 	movi	r2,28
10027334:	d9000a17 	ldw	r4,40(sp)
10027338:	d9801117 	ldw	r6,68(sp)
1002733c:	80a1883a 	add	r16,r16,r2
10027340:	2089883a 	add	r4,r4,r2
10027344:	308d883a 	add	r6,r6,r2
10027348:	d9000a15 	stw	r4,40(sp)
1002734c:	d9801115 	stw	r6,68(sp)
10027350:	d8801117 	ldw	r2,68(sp)
10027354:	0080050e 	bge	zero,r2,1002736c <_dtoa_r+0x8d8>
10027358:	d9400717 	ldw	r5,28(sp)
1002735c:	d9001617 	ldw	r4,88(sp)
10027360:	100d883a 	mov	r6,r2
10027364:	002a0f40 	call	1002a0f4 <__lshift>
10027368:	d8800715 	stw	r2,28(sp)
1002736c:	d8c00a17 	ldw	r3,40(sp)
10027370:	00c0050e 	bge	zero,r3,10027388 <_dtoa_r+0x8f4>
10027374:	d9001617 	ldw	r4,88(sp)
10027378:	900b883a 	mov	r5,r18
1002737c:	180d883a 	mov	r6,r3
10027380:	002a0f40 	call	1002a0f4 <__lshift>
10027384:	1025883a 	mov	r18,r2
10027388:	d9000c17 	ldw	r4,48(sp)
1002738c:	2005003a 	cmpeq	r2,r4,zero
10027390:	10016f26 	beq	r2,zero,10027950 <_dtoa_r+0xebc>
10027394:	d9000f17 	ldw	r4,60(sp)
10027398:	0102170e 	bge	zero,r4,10027bf8 <_dtoa_r+0x1164>
1002739c:	d9800b17 	ldw	r6,44(sp)
100273a0:	3005003a 	cmpeq	r2,r6,zero
100273a4:	1000881e 	bne	r2,zero,100275c8 <_dtoa_r+0xb34>
100273a8:	0400050e 	bge	zero,r16,100273c0 <_dtoa_r+0x92c>
100273ac:	d9001617 	ldw	r4,88(sp)
100273b0:	980b883a 	mov	r5,r19
100273b4:	800d883a 	mov	r6,r16
100273b8:	002a0f40 	call	1002a0f4 <__lshift>
100273bc:	1027883a 	mov	r19,r2
100273c0:	8804c03a 	cmpne	r2,r17,zero
100273c4:	1002541e 	bne	r2,zero,10027d18 <_dtoa_r+0x1284>
100273c8:	980b883a 	mov	r5,r19
100273cc:	dd800517 	ldw	r22,20(sp)
100273d0:	dcc00615 	stw	r19,24(sp)
100273d4:	a700004c 	andi	fp,r20,1
100273d8:	2827883a 	mov	r19,r5
100273dc:	d9000717 	ldw	r4,28(sp)
100273e0:	900b883a 	mov	r5,r18
100273e4:	002687c0 	call	1002687c <quorem>
100273e8:	d9000717 	ldw	r4,28(sp)
100273ec:	d9400617 	ldw	r5,24(sp)
100273f0:	1023883a 	mov	r17,r2
100273f4:	8dc00c04 	addi	r23,r17,48
100273f8:	002990c0 	call	1002990c <__mcmp>
100273fc:	d9001617 	ldw	r4,88(sp)
10027400:	900b883a 	mov	r5,r18
10027404:	980d883a 	mov	r6,r19
10027408:	1029883a 	mov	r20,r2
1002740c:	0029f680 	call	10029f68 <__mdiff>
10027410:	102b883a 	mov	r21,r2
10027414:	10800317 	ldw	r2,12(r2)
10027418:	1001281e 	bne	r2,zero,100278bc <_dtoa_r+0xe28>
1002741c:	d9000717 	ldw	r4,28(sp)
10027420:	a80b883a 	mov	r5,r21
10027424:	002990c0 	call	1002990c <__mcmp>
10027428:	d9001617 	ldw	r4,88(sp)
1002742c:	1021883a 	mov	r16,r2
10027430:	a80b883a 	mov	r5,r21
10027434:	00297b00 	call	100297b0 <_Bfree>
10027438:	8000041e 	bne	r16,zero,1002744c <_dtoa_r+0x9b8>
1002743c:	d8801717 	ldw	r2,92(sp)
10027440:	1000021e 	bne	r2,zero,1002744c <_dtoa_r+0x9b8>
10027444:	e004c03a 	cmpne	r2,fp,zero
10027448:	10011726 	beq	r2,zero,100278a8 <_dtoa_r+0xe14>
1002744c:	a0010616 	blt	r20,zero,10027868 <_dtoa_r+0xdd4>
10027450:	a000041e 	bne	r20,zero,10027464 <_dtoa_r+0x9d0>
10027454:	d8c01717 	ldw	r3,92(sp)
10027458:	1800021e 	bne	r3,zero,10027464 <_dtoa_r+0x9d0>
1002745c:	e004c03a 	cmpne	r2,fp,zero
10027460:	10010126 	beq	r2,zero,10027868 <_dtoa_r+0xdd4>
10027464:	04023d16 	blt	zero,r16,10027d5c <_dtoa_r+0x12c8>
10027468:	b5c00005 	stb	r23,0(r22)
1002746c:	d9800517 	ldw	r6,20(sp)
10027470:	d9000f17 	ldw	r4,60(sp)
10027474:	b5800044 	addi	r22,r22,1
10027478:	3105883a 	add	r2,r6,r4
1002747c:	b0806526 	beq	r22,r2,10027614 <_dtoa_r+0xb80>
10027480:	d9400717 	ldw	r5,28(sp)
10027484:	d9001617 	ldw	r4,88(sp)
10027488:	01800284 	movi	r6,10
1002748c:	000f883a 	mov	r7,zero
10027490:	002a4640 	call	1002a464 <__multadd>
10027494:	d8800715 	stw	r2,28(sp)
10027498:	d8800617 	ldw	r2,24(sp)
1002749c:	14c10c26 	beq	r2,r19,100278d0 <_dtoa_r+0xe3c>
100274a0:	d9400617 	ldw	r5,24(sp)
100274a4:	d9001617 	ldw	r4,88(sp)
100274a8:	01800284 	movi	r6,10
100274ac:	000f883a 	mov	r7,zero
100274b0:	002a4640 	call	1002a464 <__multadd>
100274b4:	d9001617 	ldw	r4,88(sp)
100274b8:	980b883a 	mov	r5,r19
100274bc:	01800284 	movi	r6,10
100274c0:	000f883a 	mov	r7,zero
100274c4:	d8800615 	stw	r2,24(sp)
100274c8:	002a4640 	call	1002a464 <__multadd>
100274cc:	1027883a 	mov	r19,r2
100274d0:	003fc206 	br	100273dc <_dtoa_r+0x948>
100274d4:	2445c83a 	sub	r2,r4,r17
100274d8:	a088983a 	sll	r4,r20,r2
100274dc:	003e4b06 	br	10026e0c <_dtoa_r+0x378>
100274e0:	01bfffc4 	movi	r6,-1
100274e4:	00800044 	movi	r2,1
100274e8:	d9800e15 	stw	r6,56(sp)
100274ec:	d9800f15 	stw	r6,60(sp)
100274f0:	d8800b15 	stw	r2,44(sp)
100274f4:	d8c01617 	ldw	r3,88(sp)
100274f8:	008005c4 	movi	r2,23
100274fc:	18001115 	stw	zero,68(r3)
10027500:	1580082e 	bgeu	r2,r22,10027524 <_dtoa_r+0xa90>
10027504:	00c00104 	movi	r3,4
10027508:	0009883a 	mov	r4,zero
1002750c:	18c7883a 	add	r3,r3,r3
10027510:	18800504 	addi	r2,r3,20
10027514:	21000044 	addi	r4,r4,1
10027518:	b0bffc2e 	bgeu	r22,r2,1002750c <_dtoa_r+0xa78>
1002751c:	d9801617 	ldw	r6,88(sp)
10027520:	31001115 	stw	r4,68(r6)
10027524:	dc000f17 	ldw	r16,60(sp)
10027528:	003e4b06 	br	10026e58 <_dtoa_r+0x3c4>
1002752c:	d9801717 	ldw	r6,92(sp)
10027530:	0023883a 	mov	r17,zero
10027534:	31bfff04 	addi	r6,r6,-4
10027538:	d9801715 	stw	r6,92(sp)
1002753c:	003df806 	br	10026d20 <_dtoa_r+0x28c>
10027540:	00800804 	movi	r2,32
10027544:	10c9c83a 	sub	r4,r2,r3
10027548:	00c00104 	movi	r3,4
1002754c:	19005a16 	blt	r3,r4,100276b8 <_dtoa_r+0xc24>
10027550:	008000c4 	movi	r2,3
10027554:	113f7e16 	blt	r2,r4,10027350 <_dtoa_r+0x8bc>
10027558:	20800704 	addi	r2,r4,28
1002755c:	003f7506 	br	10027334 <_dtoa_r+0x8a0>
10027560:	d9801717 	ldw	r6,92(sp)
10027564:	00800044 	movi	r2,1
10027568:	1180a10e 	bge	r2,r6,100277f0 <_dtoa_r+0xd5c>
1002756c:	d9800f17 	ldw	r6,60(sp)
10027570:	d8c01017 	ldw	r3,64(sp)
10027574:	30bfffc4 	addi	r2,r6,-1
10027578:	1881c616 	blt	r3,r2,10027c94 <_dtoa_r+0x1200>
1002757c:	18a5c83a 	sub	r18,r3,r2
10027580:	d8800f17 	ldw	r2,60(sp)
10027584:	10026216 	blt	r2,zero,10027f10 <_dtoa_r+0x147c>
10027588:	dc001117 	ldw	r16,68(sp)
1002758c:	1007883a 	mov	r3,r2
10027590:	d9800a17 	ldw	r6,40(sp)
10027594:	d8801117 	ldw	r2,68(sp)
10027598:	d9001617 	ldw	r4,88(sp)
1002759c:	30cd883a 	add	r6,r6,r3
100275a0:	10c5883a 	add	r2,r2,r3
100275a4:	01400044 	movi	r5,1
100275a8:	d9800a15 	stw	r6,40(sp)
100275ac:	d8801115 	stw	r2,68(sp)
100275b0:	002a4280 	call	1002a428 <__i2b>
100275b4:	1027883a 	mov	r19,r2
100275b8:	003f2506 	br	10027250 <_dtoa_r+0x7bc>
100275bc:	00c00034 	movhi	r3,0
100275c0:	18c2d004 	addi	r3,r3,2880
100275c4:	003d6706 	br	10026b64 <_dtoa_r+0xd0>
100275c8:	dd800517 	ldw	r22,20(sp)
100275cc:	04000044 	movi	r16,1
100275d0:	00000706 	br	100275f0 <_dtoa_r+0xb5c>
100275d4:	d9400717 	ldw	r5,28(sp)
100275d8:	d9001617 	ldw	r4,88(sp)
100275dc:	01800284 	movi	r6,10
100275e0:	000f883a 	mov	r7,zero
100275e4:	002a4640 	call	1002a464 <__multadd>
100275e8:	d8800715 	stw	r2,28(sp)
100275ec:	84000044 	addi	r16,r16,1
100275f0:	d9000717 	ldw	r4,28(sp)
100275f4:	900b883a 	mov	r5,r18
100275f8:	002687c0 	call	1002687c <quorem>
100275fc:	15c00c04 	addi	r23,r2,48
10027600:	b5c00005 	stb	r23,0(r22)
10027604:	d8c00f17 	ldw	r3,60(sp)
10027608:	b5800044 	addi	r22,r22,1
1002760c:	80fff116 	blt	r16,r3,100275d4 <_dtoa_r+0xb40>
10027610:	d8000615 	stw	zero,24(sp)
10027614:	d9400717 	ldw	r5,28(sp)
10027618:	d9001617 	ldw	r4,88(sp)
1002761c:	01800044 	movi	r6,1
10027620:	002a0f40 	call	1002a0f4 <__lshift>
10027624:	1009883a 	mov	r4,r2
10027628:	900b883a 	mov	r5,r18
1002762c:	d8800715 	stw	r2,28(sp)
10027630:	002990c0 	call	1002990c <__mcmp>
10027634:	00803c0e 	bge	zero,r2,10027728 <_dtoa_r+0xc94>
10027638:	b009883a 	mov	r4,r22
1002763c:	213fffc4 	addi	r4,r4,-1
10027640:	21400003 	ldbu	r5,0(r4)
10027644:	00800e44 	movi	r2,57
10027648:	28c03fcc 	andi	r3,r5,255
1002764c:	18c0201c 	xori	r3,r3,128
10027650:	18ffe004 	addi	r3,r3,-128
10027654:	1881981e 	bne	r3,r2,10027cb8 <_dtoa_r+0x1224>
10027658:	d9800517 	ldw	r6,20(sp)
1002765c:	21bff71e 	bne	r4,r6,1002763c <_dtoa_r+0xba8>
10027660:	d8800d17 	ldw	r2,52(sp)
10027664:	37000044 	addi	fp,r6,1
10027668:	10800044 	addi	r2,r2,1
1002766c:	d8800d15 	stw	r2,52(sp)
10027670:	00800c44 	movi	r2,49
10027674:	30800005 	stb	r2,0(r6)
10027678:	d9001617 	ldw	r4,88(sp)
1002767c:	900b883a 	mov	r5,r18
10027680:	00297b00 	call	100297b0 <_Bfree>
10027684:	983ecd26 	beq	r19,zero,100271bc <_dtoa_r+0x728>
10027688:	d8c00617 	ldw	r3,24(sp)
1002768c:	18000426 	beq	r3,zero,100276a0 <_dtoa_r+0xc0c>
10027690:	1cc00326 	beq	r3,r19,100276a0 <_dtoa_r+0xc0c>
10027694:	d9001617 	ldw	r4,88(sp)
10027698:	180b883a 	mov	r5,r3
1002769c:	00297b00 	call	100297b0 <_Bfree>
100276a0:	d9001617 	ldw	r4,88(sp)
100276a4:	980b883a 	mov	r5,r19
100276a8:	00297b00 	call	100297b0 <_Bfree>
100276ac:	003ec306 	br	100271bc <_dtoa_r+0x728>
100276b0:	1805883a 	mov	r2,r3
100276b4:	003eeb06 	br	10027264 <_dtoa_r+0x7d0>
100276b8:	d9800a17 	ldw	r6,40(sp)
100276bc:	d8c01117 	ldw	r3,68(sp)
100276c0:	20bfff04 	addi	r2,r4,-4
100276c4:	308d883a 	add	r6,r6,r2
100276c8:	1887883a 	add	r3,r3,r2
100276cc:	80a1883a 	add	r16,r16,r2
100276d0:	d9800a15 	stw	r6,40(sp)
100276d4:	d8c01115 	stw	r3,68(sp)
100276d8:	003f1d06 	br	10027350 <_dtoa_r+0x8bc>
100276dc:	a03f0c1e 	bne	r20,zero,10027310 <_dtoa_r+0x87c>
100276e0:	00800434 	movhi	r2,16
100276e4:	10bfffc4 	addi	r2,r2,-1
100276e8:	a884703a 	and	r2,r21,r2
100276ec:	103f081e 	bne	r2,zero,10027310 <_dtoa_r+0x87c>
100276f0:	a89ffc2c 	andhi	r2,r21,32752
100276f4:	103f0626 	beq	r2,zero,10027310 <_dtoa_r+0x87c>
100276f8:	d8c01117 	ldw	r3,68(sp)
100276fc:	d9000a17 	ldw	r4,40(sp)
10027700:	18c00044 	addi	r3,r3,1
10027704:	21000044 	addi	r4,r4,1
10027708:	d8c01115 	stw	r3,68(sp)
1002770c:	d9000a15 	stw	r4,40(sp)
10027710:	003f0006 	br	10027314 <_dtoa_r+0x880>
10027714:	d9400717 	ldw	r5,28(sp)
10027718:	d9001617 	ldw	r4,88(sp)
1002771c:	002a5640 	call	1002a564 <__pow5mult>
10027720:	d8800715 	stw	r2,28(sp)
10027724:	003eed06 	br	100272dc <_dtoa_r+0x848>
10027728:	1000021e 	bne	r2,zero,10027734 <_dtoa_r+0xca0>
1002772c:	b880004c 	andi	r2,r23,1
10027730:	103fc11e 	bne	r2,zero,10027638 <_dtoa_r+0xba4>
10027734:	b5bfffc4 	addi	r22,r22,-1
10027738:	b0c00007 	ldb	r3,0(r22)
1002773c:	00800c04 	movi	r2,48
10027740:	18bffc26 	beq	r3,r2,10027734 <_dtoa_r+0xca0>
10027744:	b7000044 	addi	fp,r22,1
10027748:	003fcb06 	br	10027678 <_dtoa_r+0xbe4>
1002774c:	d9800d17 	ldw	r6,52(sp)
10027750:	018fc83a 	sub	r7,zero,r6
10027754:	3801f726 	beq	r7,zero,10027f34 <_dtoa_r+0x14a0>
10027758:	398003cc 	andi	r6,r7,15
1002775c:	300c90fa 	slli	r6,r6,3
10027760:	01400034 	movhi	r5,0
10027764:	29439804 	addi	r5,r5,3680
10027768:	d9001217 	ldw	r4,72(sp)
1002776c:	314d883a 	add	r6,r6,r5
10027770:	30c00117 	ldw	r3,4(r6)
10027774:	30800017 	ldw	r2,0(r6)
10027778:	d9401317 	ldw	r5,76(sp)
1002777c:	3821d13a 	srai	r16,r7,4
10027780:	100d883a 	mov	r6,r2
10027784:	180f883a 	mov	r7,r3
10027788:	002fdd80 	call	1002fdd8 <__muldf3>
1002778c:	1011883a 	mov	r8,r2
10027790:	1813883a 	mov	r9,r3
10027794:	1029883a 	mov	r20,r2
10027798:	182b883a 	mov	r21,r3
1002779c:	8001e526 	beq	r16,zero,10027f34 <_dtoa_r+0x14a0>
100277a0:	05800084 	movi	r22,2
100277a4:	04400034 	movhi	r17,0
100277a8:	8c43ca04 	addi	r17,r17,3880
100277ac:	8080004c 	andi	r2,r16,1
100277b0:	1005003a 	cmpeq	r2,r2,zero
100277b4:	1000081e 	bne	r2,zero,100277d8 <_dtoa_r+0xd44>
100277b8:	89800017 	ldw	r6,0(r17)
100277bc:	89c00117 	ldw	r7,4(r17)
100277c0:	480b883a 	mov	r5,r9
100277c4:	4009883a 	mov	r4,r8
100277c8:	002fdd80 	call	1002fdd8 <__muldf3>
100277cc:	1011883a 	mov	r8,r2
100277d0:	b5800044 	addi	r22,r22,1
100277d4:	1813883a 	mov	r9,r3
100277d8:	8021d07a 	srai	r16,r16,1
100277dc:	8c400204 	addi	r17,r17,8
100277e0:	803ff21e 	bne	r16,zero,100277ac <_dtoa_r+0xd18>
100277e4:	4029883a 	mov	r20,r8
100277e8:	482b883a 	mov	r21,r9
100277ec:	003dca06 	br	10026f18 <_dtoa_r+0x484>
100277f0:	d9000817 	ldw	r4,32(sp)
100277f4:	2005003a 	cmpeq	r2,r4,zero
100277f8:	1001f61e 	bne	r2,zero,10027fd4 <_dtoa_r+0x1540>
100277fc:	dc001117 	ldw	r16,68(sp)
10027800:	dc801017 	ldw	r18,64(sp)
10027804:	18c10cc4 	addi	r3,r3,1075
10027808:	003f6106 	br	10027590 <_dtoa_r+0xafc>
1002780c:	d8000b15 	stw	zero,44(sp)
10027810:	d9802617 	ldw	r6,152(sp)
10027814:	d8c00d17 	ldw	r3,52(sp)
10027818:	30800044 	addi	r2,r6,1
1002781c:	18ad883a 	add	r22,r3,r2
10027820:	b13fffc4 	addi	r4,r22,-1
10027824:	d9000e15 	stw	r4,56(sp)
10027828:	0581f60e 	bge	zero,r22,10028004 <_dtoa_r+0x1570>
1002782c:	dd800f15 	stw	r22,60(sp)
10027830:	003f3006 	br	100274f4 <_dtoa_r+0xa60>
10027834:	d8000b15 	stw	zero,44(sp)
10027838:	d9002617 	ldw	r4,152(sp)
1002783c:	0101eb0e 	bge	zero,r4,10027fec <_dtoa_r+0x1558>
10027840:	202d883a 	mov	r22,r4
10027844:	d9000e15 	stw	r4,56(sp)
10027848:	d9000f15 	stw	r4,60(sp)
1002784c:	003f2906 	br	100274f4 <_dtoa_r+0xa60>
10027850:	01800044 	movi	r6,1
10027854:	d9800b15 	stw	r6,44(sp)
10027858:	003ff706 	br	10027838 <_dtoa_r+0xda4>
1002785c:	01000044 	movi	r4,1
10027860:	d9000b15 	stw	r4,44(sp)
10027864:	003fea06 	br	10027810 <_dtoa_r+0xd7c>
10027868:	04000c0e 	bge	zero,r16,1002789c <_dtoa_r+0xe08>
1002786c:	d9400717 	ldw	r5,28(sp)
10027870:	d9001617 	ldw	r4,88(sp)
10027874:	01800044 	movi	r6,1
10027878:	002a0f40 	call	1002a0f4 <__lshift>
1002787c:	1009883a 	mov	r4,r2
10027880:	900b883a 	mov	r5,r18
10027884:	d8800715 	stw	r2,28(sp)
10027888:	002990c0 	call	1002990c <__mcmp>
1002788c:	0081e00e 	bge	zero,r2,10028010 <_dtoa_r+0x157c>
10027890:	bdc00044 	addi	r23,r23,1
10027894:	00800e84 	movi	r2,58
10027898:	b881a226 	beq	r23,r2,10027f24 <_dtoa_r+0x1490>
1002789c:	b7000044 	addi	fp,r22,1
100278a0:	b5c00005 	stb	r23,0(r22)
100278a4:	003f7406 	br	10027678 <_dtoa_r+0xbe4>
100278a8:	00800e44 	movi	r2,57
100278ac:	b8819d26 	beq	r23,r2,10027f24 <_dtoa_r+0x1490>
100278b0:	053ffa0e 	bge	zero,r20,1002789c <_dtoa_r+0xe08>
100278b4:	8dc00c44 	addi	r23,r17,49
100278b8:	003ff806 	br	1002789c <_dtoa_r+0xe08>
100278bc:	d9001617 	ldw	r4,88(sp)
100278c0:	a80b883a 	mov	r5,r21
100278c4:	04000044 	movi	r16,1
100278c8:	00297b00 	call	100297b0 <_Bfree>
100278cc:	003edf06 	br	1002744c <_dtoa_r+0x9b8>
100278d0:	d9001617 	ldw	r4,88(sp)
100278d4:	980b883a 	mov	r5,r19
100278d8:	01800284 	movi	r6,10
100278dc:	000f883a 	mov	r7,zero
100278e0:	002a4640 	call	1002a464 <__multadd>
100278e4:	1027883a 	mov	r19,r2
100278e8:	d8800615 	stw	r2,24(sp)
100278ec:	003ebb06 	br	100273dc <_dtoa_r+0x948>
100278f0:	d9801117 	ldw	r6,68(sp)
100278f4:	d8800d17 	ldw	r2,52(sp)
100278f8:	d8000915 	stw	zero,36(sp)
100278fc:	308dc83a 	sub	r6,r6,r2
10027900:	0087c83a 	sub	r3,zero,r2
10027904:	d9801115 	stw	r6,68(sp)
10027908:	d8c01015 	stw	r3,64(sp)
1002790c:	003cfe06 	br	10026d08 <_dtoa_r+0x274>
10027910:	018dc83a 	sub	r6,zero,r6
10027914:	d9801115 	stw	r6,68(sp)
10027918:	d8000a15 	stw	zero,40(sp)
1002791c:	003cf306 	br	10026cec <_dtoa_r+0x258>
10027920:	d9000d17 	ldw	r4,52(sp)
10027924:	00307240 	call	10030724 <__floatsidf>
10027928:	880b883a 	mov	r5,r17
1002792c:	8009883a 	mov	r4,r16
10027930:	180f883a 	mov	r7,r3
10027934:	100d883a 	mov	r6,r2
10027938:	003047c0 	call	1003047c <__nedf2>
1002793c:	103ce126 	beq	r2,zero,10026cc4 <_dtoa_r+0x230>
10027940:	d9800d17 	ldw	r6,52(sp)
10027944:	31bfffc4 	addi	r6,r6,-1
10027948:	d9800d15 	stw	r6,52(sp)
1002794c:	003cdd06 	br	10026cc4 <_dtoa_r+0x230>
10027950:	d9000717 	ldw	r4,28(sp)
10027954:	900b883a 	mov	r5,r18
10027958:	002990c0 	call	1002990c <__mcmp>
1002795c:	103e8d0e 	bge	r2,zero,10027394 <_dtoa_r+0x900>
10027960:	d9400717 	ldw	r5,28(sp)
10027964:	d9001617 	ldw	r4,88(sp)
10027968:	01800284 	movi	r6,10
1002796c:	000f883a 	mov	r7,zero
10027970:	002a4640 	call	1002a464 <__multadd>
10027974:	d9800d17 	ldw	r6,52(sp)
10027978:	d8800715 	stw	r2,28(sp)
1002797c:	31bfffc4 	addi	r6,r6,-1
10027980:	d9800d15 	stw	r6,52(sp)
10027984:	b001a71e 	bne	r22,zero,10028024 <_dtoa_r+0x1590>
10027988:	d8800e17 	ldw	r2,56(sp)
1002798c:	d8800f15 	stw	r2,60(sp)
10027990:	003e8006 	br	10027394 <_dtoa_r+0x900>
10027994:	90800417 	ldw	r2,16(r18)
10027998:	1085883a 	add	r2,r2,r2
1002799c:	1085883a 	add	r2,r2,r2
100279a0:	1485883a 	add	r2,r2,r18
100279a4:	11000417 	ldw	r4,16(r2)
100279a8:	00297d80 	call	100297d8 <__hi0bits>
100279ac:	00c00804 	movi	r3,32
100279b0:	1887c83a 	sub	r3,r3,r2
100279b4:	003e5a06 	br	10027320 <_dtoa_r+0x88c>
100279b8:	d9400717 	ldw	r5,28(sp)
100279bc:	d9801017 	ldw	r6,64(sp)
100279c0:	d9001617 	ldw	r4,88(sp)
100279c4:	002a5640 	call	1002a564 <__pow5mult>
100279c8:	d8800715 	stw	r2,28(sp)
100279cc:	003e4306 	br	100272dc <_dtoa_r+0x848>
100279d0:	d9800f17 	ldw	r6,60(sp)
100279d4:	d8800d17 	ldw	r2,52(sp)
100279d8:	d9800315 	stw	r6,12(sp)
100279dc:	d8800415 	stw	r2,16(sp)
100279e0:	d8c00b17 	ldw	r3,44(sp)
100279e4:	1805003a 	cmpeq	r2,r3,zero
100279e8:	1000e21e 	bne	r2,zero,10027d74 <_dtoa_r+0x12e0>
100279ec:	d9000317 	ldw	r4,12(sp)
100279f0:	0005883a 	mov	r2,zero
100279f4:	00cff834 	movhi	r3,16352
100279f8:	200c90fa 	slli	r6,r4,3
100279fc:	01000034 	movhi	r4,0
10027a00:	21039804 	addi	r4,r4,3680
10027a04:	180b883a 	mov	r5,r3
10027a08:	310d883a 	add	r6,r6,r4
10027a0c:	327fff17 	ldw	r9,-4(r6)
10027a10:	323ffe17 	ldw	r8,-8(r6)
10027a14:	1009883a 	mov	r4,r2
10027a18:	480f883a 	mov	r7,r9
10027a1c:	400d883a 	mov	r6,r8
10027a20:	003019c0 	call	1003019c <__divdf3>
10027a24:	180b883a 	mov	r5,r3
10027a28:	b00d883a 	mov	r6,r22
10027a2c:	b80f883a 	mov	r7,r23
10027a30:	1009883a 	mov	r4,r2
10027a34:	002fce40 	call	1002fce4 <__subdf3>
10027a38:	a80b883a 	mov	r5,r21
10027a3c:	a009883a 	mov	r4,r20
10027a40:	d8c01915 	stw	r3,100(sp)
10027a44:	d8801815 	stw	r2,96(sp)
10027a48:	003081c0 	call	1003081c <__fixdfsi>
10027a4c:	1009883a 	mov	r4,r2
10027a50:	1027883a 	mov	r19,r2
10027a54:	00307240 	call	10030724 <__floatsidf>
10027a58:	a80b883a 	mov	r5,r21
10027a5c:	a009883a 	mov	r4,r20
10027a60:	180f883a 	mov	r7,r3
10027a64:	100d883a 	mov	r6,r2
10027a68:	002fce40 	call	1002fce4 <__subdf3>
10027a6c:	d9801817 	ldw	r6,96(sp)
10027a70:	1823883a 	mov	r17,r3
10027a74:	d8801415 	stw	r2,80(sp)
10027a78:	302d883a 	mov	r22,r6
10027a7c:	d9800517 	ldw	r6,20(sp)
10027a80:	9cc00c04 	addi	r19,r19,48
10027a84:	dc401515 	stw	r17,84(sp)
10027a88:	d8c01917 	ldw	r3,100(sp)
10027a8c:	34c00005 	stb	r19,0(r6)
10027a90:	d8800517 	ldw	r2,20(sp)
10027a94:	d9401917 	ldw	r5,100(sp)
10027a98:	d9801417 	ldw	r6,80(sp)
10027a9c:	b009883a 	mov	r4,r22
10027aa0:	880f883a 	mov	r7,r17
10027aa4:	182f883a 	mov	r23,r3
10027aa8:	17000044 	addi	fp,r2,1
10027aac:	00305040 	call	10030504 <__gtdf2>
10027ab0:	00804e16 	blt	zero,r2,10027bec <_dtoa_r+0x1158>
10027ab4:	d9801417 	ldw	r6,80(sp)
10027ab8:	0005883a 	mov	r2,zero
10027abc:	00cffc34 	movhi	r3,16368
10027ac0:	180b883a 	mov	r5,r3
10027ac4:	880f883a 	mov	r7,r17
10027ac8:	1009883a 	mov	r4,r2
10027acc:	002fce40 	call	1002fce4 <__subdf3>
10027ad0:	d9401917 	ldw	r5,100(sp)
10027ad4:	180f883a 	mov	r7,r3
10027ad8:	b009883a 	mov	r4,r22
10027adc:	100d883a 	mov	r6,r2
10027ae0:	00305040 	call	10030504 <__gtdf2>
10027ae4:	00bda216 	blt	zero,r2,10027170 <_dtoa_r+0x6dc>
10027ae8:	d8c00317 	ldw	r3,12(sp)
10027aec:	00800044 	movi	r2,1
10027af0:	10c01216 	blt	r2,r3,10027b3c <_dtoa_r+0x10a8>
10027af4:	003d4506 	br	1002700c <_dtoa_r+0x578>
10027af8:	d9801417 	ldw	r6,80(sp)
10027afc:	0005883a 	mov	r2,zero
10027b00:	00cffc34 	movhi	r3,16368
10027b04:	180b883a 	mov	r5,r3
10027b08:	880f883a 	mov	r7,r17
10027b0c:	1009883a 	mov	r4,r2
10027b10:	002fce40 	call	1002fce4 <__subdf3>
10027b14:	d9c01b17 	ldw	r7,108(sp)
10027b18:	180b883a 	mov	r5,r3
10027b1c:	1009883a 	mov	r4,r2
10027b20:	b00d883a 	mov	r6,r22
10027b24:	00306140 	call	10030614 <__ltdf2>
10027b28:	103d9116 	blt	r2,zero,10027170 <_dtoa_r+0x6dc>
10027b2c:	d9800517 	ldw	r6,20(sp)
10027b30:	d9000317 	ldw	r4,12(sp)
10027b34:	3105883a 	add	r2,r6,r4
10027b38:	e0bd3426 	beq	fp,r2,1002700c <_dtoa_r+0x578>
10027b3c:	04500934 	movhi	r17,16420
10027b40:	0021883a 	mov	r16,zero
10027b44:	b80b883a 	mov	r5,r23
10027b48:	b009883a 	mov	r4,r22
10027b4c:	800d883a 	mov	r6,r16
10027b50:	880f883a 	mov	r7,r17
10027b54:	002fdd80 	call	1002fdd8 <__muldf3>
10027b58:	d9401517 	ldw	r5,84(sp)
10027b5c:	d9001417 	ldw	r4,80(sp)
10027b60:	880f883a 	mov	r7,r17
10027b64:	000d883a 	mov	r6,zero
10027b68:	d8801a15 	stw	r2,104(sp)
10027b6c:	d8c01b15 	stw	r3,108(sp)
10027b70:	002fdd80 	call	1002fdd8 <__muldf3>
10027b74:	180b883a 	mov	r5,r3
10027b78:	1009883a 	mov	r4,r2
10027b7c:	1823883a 	mov	r17,r3
10027b80:	1021883a 	mov	r16,r2
10027b84:	003081c0 	call	1003081c <__fixdfsi>
10027b88:	1009883a 	mov	r4,r2
10027b8c:	102b883a 	mov	r21,r2
10027b90:	00307240 	call	10030724 <__floatsidf>
10027b94:	880b883a 	mov	r5,r17
10027b98:	8009883a 	mov	r4,r16
10027b9c:	180f883a 	mov	r7,r3
10027ba0:	100d883a 	mov	r6,r2
10027ba4:	002fce40 	call	1002fce4 <__subdf3>
10027ba8:	1021883a 	mov	r16,r2
10027bac:	d9001b17 	ldw	r4,108(sp)
10027bb0:	1823883a 	mov	r17,r3
10027bb4:	dc001415 	stw	r16,80(sp)
10027bb8:	ad400c04 	addi	r21,r21,48
10027bbc:	dc401515 	stw	r17,84(sp)
10027bc0:	d8801a17 	ldw	r2,104(sp)
10027bc4:	e5400005 	stb	r21,0(fp)
10027bc8:	202f883a 	mov	r23,r4
10027bcc:	d9c01b17 	ldw	r7,108(sp)
10027bd0:	d9001417 	ldw	r4,80(sp)
10027bd4:	880b883a 	mov	r5,r17
10027bd8:	100d883a 	mov	r6,r2
10027bdc:	102d883a 	mov	r22,r2
10027be0:	e7000044 	addi	fp,fp,1
10027be4:	00306140 	call	10030614 <__ltdf2>
10027be8:	103fc30e 	bge	r2,zero,10027af8 <_dtoa_r+0x1064>
10027bec:	d9000417 	ldw	r4,16(sp)
10027bf0:	d9000d15 	stw	r4,52(sp)
10027bf4:	003d7106 	br	100271bc <_dtoa_r+0x728>
10027bf8:	d9801717 	ldw	r6,92(sp)
10027bfc:	00800084 	movi	r2,2
10027c00:	11bde60e 	bge	r2,r6,1002739c <_dtoa_r+0x908>
10027c04:	203cfb1e 	bne	r4,zero,10026ff4 <_dtoa_r+0x560>
10027c08:	d9001617 	ldw	r4,88(sp)
10027c0c:	900b883a 	mov	r5,r18
10027c10:	01800144 	movi	r6,5
10027c14:	000f883a 	mov	r7,zero
10027c18:	002a4640 	call	1002a464 <__multadd>
10027c1c:	d9000717 	ldw	r4,28(sp)
10027c20:	100b883a 	mov	r5,r2
10027c24:	1025883a 	mov	r18,r2
10027c28:	002990c0 	call	1002990c <__mcmp>
10027c2c:	00bcf10e 	bge	zero,r2,10026ff4 <_dtoa_r+0x560>
10027c30:	d8c00d17 	ldw	r3,52(sp)
10027c34:	d9000517 	ldw	r4,20(sp)
10027c38:	d8000615 	stw	zero,24(sp)
10027c3c:	18c00044 	addi	r3,r3,1
10027c40:	d8c00d15 	stw	r3,52(sp)
10027c44:	00800c44 	movi	r2,49
10027c48:	27000044 	addi	fp,r4,1
10027c4c:	20800005 	stb	r2,0(r4)
10027c50:	003e8906 	br	10027678 <_dtoa_r+0xbe4>
10027c54:	d8c00517 	ldw	r3,20(sp)
10027c58:	003bc206 	br	10026b64 <_dtoa_r+0xd0>
10027c5c:	01800034 	movhi	r6,0
10027c60:	3183ca04 	addi	r6,r6,3880
10027c64:	30c00917 	ldw	r3,36(r6)
10027c68:	30800817 	ldw	r2,32(r6)
10027c6c:	d9001217 	ldw	r4,72(sp)
10027c70:	d9401317 	ldw	r5,76(sp)
10027c74:	180f883a 	mov	r7,r3
10027c78:	100d883a 	mov	r6,r2
10027c7c:	003019c0 	call	1003019c <__divdf3>
10027c80:	948003cc 	andi	r18,r18,15
10027c84:	058000c4 	movi	r22,3
10027c88:	1029883a 	mov	r20,r2
10027c8c:	182b883a 	mov	r21,r3
10027c90:	003c8906 	br	10026eb8 <_dtoa_r+0x424>
10027c94:	d9001017 	ldw	r4,64(sp)
10027c98:	d9800917 	ldw	r6,36(sp)
10027c9c:	0025883a 	mov	r18,zero
10027ca0:	1105c83a 	sub	r2,r2,r4
10027ca4:	2089883a 	add	r4,r4,r2
10027ca8:	308d883a 	add	r6,r6,r2
10027cac:	d9001015 	stw	r4,64(sp)
10027cb0:	d9800915 	stw	r6,36(sp)
10027cb4:	003e3206 	br	10027580 <_dtoa_r+0xaec>
10027cb8:	28800044 	addi	r2,r5,1
10027cbc:	27000044 	addi	fp,r4,1
10027cc0:	20800005 	stb	r2,0(r4)
10027cc4:	003e6c06 	br	10027678 <_dtoa_r+0xbe4>
10027cc8:	d8800f17 	ldw	r2,60(sp)
10027ccc:	00bce016 	blt	zero,r2,10027050 <_dtoa_r+0x5bc>
10027cd0:	d9800f17 	ldw	r6,60(sp)
10027cd4:	303cc51e 	bne	r6,zero,10026fec <_dtoa_r+0x558>
10027cd8:	0005883a 	mov	r2,zero
10027cdc:	00d00534 	movhi	r3,16404
10027ce0:	980b883a 	mov	r5,r19
10027ce4:	180f883a 	mov	r7,r3
10027ce8:	9009883a 	mov	r4,r18
10027cec:	100d883a 	mov	r6,r2
10027cf0:	002fdd80 	call	1002fdd8 <__muldf3>
10027cf4:	180b883a 	mov	r5,r3
10027cf8:	a80f883a 	mov	r7,r21
10027cfc:	1009883a 	mov	r4,r2
10027d00:	a00d883a 	mov	r6,r20
10027d04:	003058c0 	call	1003058c <__gedf2>
10027d08:	103cb80e 	bge	r2,zero,10026fec <_dtoa_r+0x558>
10027d0c:	0027883a 	mov	r19,zero
10027d10:	0025883a 	mov	r18,zero
10027d14:	003fc606 	br	10027c30 <_dtoa_r+0x119c>
10027d18:	99400117 	ldw	r5,4(r19)
10027d1c:	d9001617 	ldw	r4,88(sp)
10027d20:	0029d300 	call	10029d30 <_Balloc>
10027d24:	99800417 	ldw	r6,16(r19)
10027d28:	11000304 	addi	r4,r2,12
10027d2c:	99400304 	addi	r5,r19,12
10027d30:	318d883a 	add	r6,r6,r6
10027d34:	318d883a 	add	r6,r6,r6
10027d38:	31800204 	addi	r6,r6,8
10027d3c:	1023883a 	mov	r17,r2
10027d40:	0022c500 	call	10022c50 <memcpy>
10027d44:	d9001617 	ldw	r4,88(sp)
10027d48:	880b883a 	mov	r5,r17
10027d4c:	01800044 	movi	r6,1
10027d50:	002a0f40 	call	1002a0f4 <__lshift>
10027d54:	100b883a 	mov	r5,r2
10027d58:	003d9c06 	br	100273cc <_dtoa_r+0x938>
10027d5c:	00800e44 	movi	r2,57
10027d60:	b8807026 	beq	r23,r2,10027f24 <_dtoa_r+0x1490>
10027d64:	b8800044 	addi	r2,r23,1
10027d68:	b7000044 	addi	fp,r22,1
10027d6c:	b0800005 	stb	r2,0(r22)
10027d70:	003e4106 	br	10027678 <_dtoa_r+0xbe4>
10027d74:	d8800317 	ldw	r2,12(sp)
10027d78:	01800034 	movhi	r6,0
10027d7c:	31839804 	addi	r6,r6,3680
10027d80:	b009883a 	mov	r4,r22
10027d84:	100e90fa 	slli	r7,r2,3
10027d88:	b80b883a 	mov	r5,r23
10027d8c:	398f883a 	add	r7,r7,r6
10027d90:	38bffe17 	ldw	r2,-8(r7)
10027d94:	d9800517 	ldw	r6,20(sp)
10027d98:	38ffff17 	ldw	r3,-4(r7)
10027d9c:	37000044 	addi	fp,r6,1
10027da0:	180f883a 	mov	r7,r3
10027da4:	100d883a 	mov	r6,r2
10027da8:	002fdd80 	call	1002fdd8 <__muldf3>
10027dac:	a80b883a 	mov	r5,r21
10027db0:	a009883a 	mov	r4,r20
10027db4:	182f883a 	mov	r23,r3
10027db8:	102d883a 	mov	r22,r2
10027dbc:	003081c0 	call	1003081c <__fixdfsi>
10027dc0:	1009883a 	mov	r4,r2
10027dc4:	1027883a 	mov	r19,r2
10027dc8:	00307240 	call	10030724 <__floatsidf>
10027dcc:	a80b883a 	mov	r5,r21
10027dd0:	a009883a 	mov	r4,r20
10027dd4:	180f883a 	mov	r7,r3
10027dd8:	100d883a 	mov	r6,r2
10027ddc:	002fce40 	call	1002fce4 <__subdf3>
10027de0:	180b883a 	mov	r5,r3
10027de4:	d8c00517 	ldw	r3,20(sp)
10027de8:	9cc00c04 	addi	r19,r19,48
10027dec:	1009883a 	mov	r4,r2
10027df0:	1cc00005 	stb	r19,0(r3)
10027df4:	2021883a 	mov	r16,r4
10027df8:	d9000317 	ldw	r4,12(sp)
10027dfc:	00800044 	movi	r2,1
10027e00:	2823883a 	mov	r17,r5
10027e04:	20802226 	beq	r4,r2,10027e90 <_dtoa_r+0x13fc>
10027e08:	1029883a 	mov	r20,r2
10027e0c:	0005883a 	mov	r2,zero
10027e10:	00d00934 	movhi	r3,16420
10027e14:	180f883a 	mov	r7,r3
10027e18:	100d883a 	mov	r6,r2
10027e1c:	880b883a 	mov	r5,r17
10027e20:	8009883a 	mov	r4,r16
10027e24:	002fdd80 	call	1002fdd8 <__muldf3>
10027e28:	180b883a 	mov	r5,r3
10027e2c:	1009883a 	mov	r4,r2
10027e30:	1823883a 	mov	r17,r3
10027e34:	1021883a 	mov	r16,r2
10027e38:	003081c0 	call	1003081c <__fixdfsi>
10027e3c:	1009883a 	mov	r4,r2
10027e40:	102b883a 	mov	r21,r2
10027e44:	00307240 	call	10030724 <__floatsidf>
10027e48:	880b883a 	mov	r5,r17
10027e4c:	8009883a 	mov	r4,r16
10027e50:	180f883a 	mov	r7,r3
10027e54:	100d883a 	mov	r6,r2
10027e58:	002fce40 	call	1002fce4 <__subdf3>
10027e5c:	180b883a 	mov	r5,r3
10027e60:	d8c00517 	ldw	r3,20(sp)
10027e64:	1009883a 	mov	r4,r2
10027e68:	ad400c04 	addi	r21,r21,48
10027e6c:	1d05883a 	add	r2,r3,r20
10027e70:	15400005 	stb	r21,0(r2)
10027e74:	2021883a 	mov	r16,r4
10027e78:	d9000317 	ldw	r4,12(sp)
10027e7c:	a5000044 	addi	r20,r20,1
10027e80:	2823883a 	mov	r17,r5
10027e84:	a13fe11e 	bne	r20,r4,10027e0c <_dtoa_r+0x1378>
10027e88:	e505883a 	add	r2,fp,r20
10027e8c:	173fffc4 	addi	fp,r2,-1
10027e90:	0025883a 	mov	r18,zero
10027e94:	04cff834 	movhi	r19,16352
10027e98:	b009883a 	mov	r4,r22
10027e9c:	b80b883a 	mov	r5,r23
10027ea0:	900d883a 	mov	r6,r18
10027ea4:	980f883a 	mov	r7,r19
10027ea8:	002fd640 	call	1002fd64 <__adddf3>
10027eac:	180b883a 	mov	r5,r3
10027eb0:	1009883a 	mov	r4,r2
10027eb4:	800d883a 	mov	r6,r16
10027eb8:	880f883a 	mov	r7,r17
10027ebc:	00306140 	call	10030614 <__ltdf2>
10027ec0:	103cab16 	blt	r2,zero,10027170 <_dtoa_r+0x6dc>
10027ec4:	0009883a 	mov	r4,zero
10027ec8:	980b883a 	mov	r5,r19
10027ecc:	b80f883a 	mov	r7,r23
10027ed0:	b00d883a 	mov	r6,r22
10027ed4:	002fce40 	call	1002fce4 <__subdf3>
10027ed8:	180b883a 	mov	r5,r3
10027edc:	880f883a 	mov	r7,r17
10027ee0:	1009883a 	mov	r4,r2
10027ee4:	800d883a 	mov	r6,r16
10027ee8:	00305040 	call	10030504 <__gtdf2>
10027eec:	00bc470e 	bge	zero,r2,1002700c <_dtoa_r+0x578>
10027ef0:	00c00c04 	movi	r3,48
10027ef4:	e73fffc4 	addi	fp,fp,-1
10027ef8:	e0800007 	ldb	r2,0(fp)
10027efc:	10fffd26 	beq	r2,r3,10027ef4 <_dtoa_r+0x1460>
10027f00:	d9800417 	ldw	r6,16(sp)
10027f04:	e7000044 	addi	fp,fp,1
10027f08:	d9800d15 	stw	r6,52(sp)
10027f0c:	003cab06 	br	100271bc <_dtoa_r+0x728>
10027f10:	d8c00f17 	ldw	r3,60(sp)
10027f14:	d9001117 	ldw	r4,68(sp)
10027f18:	20e1c83a 	sub	r16,r4,r3
10027f1c:	0007883a 	mov	r3,zero
10027f20:	003d9b06 	br	10027590 <_dtoa_r+0xafc>
10027f24:	00800e44 	movi	r2,57
10027f28:	b0800005 	stb	r2,0(r22)
10027f2c:	b5800044 	addi	r22,r22,1
10027f30:	003dc106 	br	10027638 <_dtoa_r+0xba4>
10027f34:	05800084 	movi	r22,2
10027f38:	003bf706 	br	10026f18 <_dtoa_r+0x484>
10027f3c:	d9000f17 	ldw	r4,60(sp)
10027f40:	013c000e 	bge	zero,r4,10026f44 <_dtoa_r+0x4b0>
10027f44:	d9800e17 	ldw	r6,56(sp)
10027f48:	01bc300e 	bge	zero,r6,1002700c <_dtoa_r+0x578>
10027f4c:	0005883a 	mov	r2,zero
10027f50:	00d00934 	movhi	r3,16420
10027f54:	a80b883a 	mov	r5,r21
10027f58:	180f883a 	mov	r7,r3
10027f5c:	a009883a 	mov	r4,r20
10027f60:	100d883a 	mov	r6,r2
10027f64:	002fdd80 	call	1002fdd8 <__muldf3>
10027f68:	b1000044 	addi	r4,r22,1
10027f6c:	1021883a 	mov	r16,r2
10027f70:	1823883a 	mov	r17,r3
10027f74:	00307240 	call	10030724 <__floatsidf>
10027f78:	880b883a 	mov	r5,r17
10027f7c:	8009883a 	mov	r4,r16
10027f80:	180f883a 	mov	r7,r3
10027f84:	100d883a 	mov	r6,r2
10027f88:	002fdd80 	call	1002fdd8 <__muldf3>
10027f8c:	0011883a 	mov	r8,zero
10027f90:	02500734 	movhi	r9,16412
10027f94:	180b883a 	mov	r5,r3
10027f98:	480f883a 	mov	r7,r9
10027f9c:	1009883a 	mov	r4,r2
10027fa0:	400d883a 	mov	r6,r8
10027fa4:	002fd640 	call	1002fd64 <__adddf3>
10027fa8:	102d883a 	mov	r22,r2
10027fac:	00bf3034 	movhi	r2,64704
10027fb0:	10ef883a 	add	r23,r2,r3
10027fb4:	d8800d17 	ldw	r2,52(sp)
10027fb8:	d8c00e17 	ldw	r3,56(sp)
10027fbc:	8029883a 	mov	r20,r16
10027fc0:	10bfffc4 	addi	r2,r2,-1
10027fc4:	882b883a 	mov	r21,r17
10027fc8:	d8800415 	stw	r2,16(sp)
10027fcc:	d8c00315 	stw	r3,12(sp)
10027fd0:	003e8306 	br	100279e0 <_dtoa_r+0xf4c>
10027fd4:	d8800117 	ldw	r2,4(sp)
10027fd8:	dc001117 	ldw	r16,68(sp)
10027fdc:	dc801017 	ldw	r18,64(sp)
10027fe0:	00c00d84 	movi	r3,54
10027fe4:	1887c83a 	sub	r3,r3,r2
10027fe8:	003d6906 	br	10027590 <_dtoa_r+0xafc>
10027fec:	01800044 	movi	r6,1
10027ff0:	3021883a 	mov	r16,r6
10027ff4:	d9800f15 	stw	r6,60(sp)
10027ff8:	d9802615 	stw	r6,152(sp)
10027ffc:	d9800e15 	stw	r6,56(sp)
10028000:	003b9306 	br	10026e50 <_dtoa_r+0x3bc>
10028004:	b021883a 	mov	r16,r22
10028008:	dd800f15 	stw	r22,60(sp)
1002800c:	003b9006 	br	10026e50 <_dtoa_r+0x3bc>
10028010:	103e221e 	bne	r2,zero,1002789c <_dtoa_r+0xe08>
10028014:	b880004c 	andi	r2,r23,1
10028018:	1005003a 	cmpeq	r2,r2,zero
1002801c:	103e1f1e 	bne	r2,zero,1002789c <_dtoa_r+0xe08>
10028020:	003e1b06 	br	10027890 <_dtoa_r+0xdfc>
10028024:	d9001617 	ldw	r4,88(sp)
10028028:	980b883a 	mov	r5,r19
1002802c:	01800284 	movi	r6,10
10028030:	000f883a 	mov	r7,zero
10028034:	002a4640 	call	1002a464 <__multadd>
10028038:	d8c00e17 	ldw	r3,56(sp)
1002803c:	1027883a 	mov	r19,r2
10028040:	d8c00f15 	stw	r3,60(sp)
10028044:	003cd306 	br	10027394 <_dtoa_r+0x900>

10028048 <_fflush_r>:
10028048:	defffb04 	addi	sp,sp,-20
1002804c:	dcc00315 	stw	r19,12(sp)
10028050:	dc800215 	stw	r18,8(sp)
10028054:	dfc00415 	stw	ra,16(sp)
10028058:	dc400115 	stw	r17,4(sp)
1002805c:	dc000015 	stw	r16,0(sp)
10028060:	2027883a 	mov	r19,r4
10028064:	2825883a 	mov	r18,r5
10028068:	20000226 	beq	r4,zero,10028074 <_fflush_r+0x2c>
1002806c:	20800e17 	ldw	r2,56(r4)
10028070:	10005626 	beq	r2,zero,100281cc <_fflush_r+0x184>
10028074:	9100030b 	ldhu	r4,12(r18)
10028078:	20ffffcc 	andi	r3,r4,65535
1002807c:	18e0001c 	xori	r3,r3,32768
10028080:	18e00004 	addi	r3,r3,-32768
10028084:	1880020c 	andi	r2,r3,8
10028088:	1000261e 	bne	r2,zero,10028124 <_fflush_r+0xdc>
1002808c:	90c00117 	ldw	r3,4(r18)
10028090:	20820014 	ori	r2,r4,2048
10028094:	9080030d 	sth	r2,12(r18)
10028098:	1009883a 	mov	r4,r2
1002809c:	00c0400e 	bge	zero,r3,100281a0 <_fflush_r+0x158>
100280a0:	92000a17 	ldw	r8,40(r18)
100280a4:	40004026 	beq	r8,zero,100281a8 <_fflush_r+0x160>
100280a8:	2084000c 	andi	r2,r4,4096
100280ac:	10005326 	beq	r2,zero,100281fc <_fflush_r+0x1b4>
100280b0:	94001417 	ldw	r16,80(r18)
100280b4:	9080030b 	ldhu	r2,12(r18)
100280b8:	1080010c 	andi	r2,r2,4
100280bc:	1000481e 	bne	r2,zero,100281e0 <_fflush_r+0x198>
100280c0:	91400717 	ldw	r5,28(r18)
100280c4:	9809883a 	mov	r4,r19
100280c8:	800d883a 	mov	r6,r16
100280cc:	000f883a 	mov	r7,zero
100280d0:	403ee83a 	callr	r8
100280d4:	8080261e 	bne	r16,r2,10028170 <_fflush_r+0x128>
100280d8:	9080030b 	ldhu	r2,12(r18)
100280dc:	91000417 	ldw	r4,16(r18)
100280e0:	90000115 	stw	zero,4(r18)
100280e4:	10bdffcc 	andi	r2,r2,63487
100280e8:	10ffffcc 	andi	r3,r2,65535
100280ec:	18c4000c 	andi	r3,r3,4096
100280f0:	9080030d 	sth	r2,12(r18)
100280f4:	91000015 	stw	r4,0(r18)
100280f8:	18002b26 	beq	r3,zero,100281a8 <_fflush_r+0x160>
100280fc:	0007883a 	mov	r3,zero
10028100:	1805883a 	mov	r2,r3
10028104:	94001415 	stw	r16,80(r18)
10028108:	dfc00417 	ldw	ra,16(sp)
1002810c:	dcc00317 	ldw	r19,12(sp)
10028110:	dc800217 	ldw	r18,8(sp)
10028114:	dc400117 	ldw	r17,4(sp)
10028118:	dc000017 	ldw	r16,0(sp)
1002811c:	dec00504 	addi	sp,sp,20
10028120:	f800283a 	ret
10028124:	94400417 	ldw	r17,16(r18)
10028128:	88001f26 	beq	r17,zero,100281a8 <_fflush_r+0x160>
1002812c:	90800017 	ldw	r2,0(r18)
10028130:	18c000cc 	andi	r3,r3,3
10028134:	94400015 	stw	r17,0(r18)
10028138:	1461c83a 	sub	r16,r2,r17
1002813c:	18002526 	beq	r3,zero,100281d4 <_fflush_r+0x18c>
10028140:	0005883a 	mov	r2,zero
10028144:	90800215 	stw	r2,8(r18)
10028148:	0400170e 	bge	zero,r16,100281a8 <_fflush_r+0x160>
1002814c:	90c00917 	ldw	r3,36(r18)
10028150:	91400717 	ldw	r5,28(r18)
10028154:	880d883a 	mov	r6,r17
10028158:	800f883a 	mov	r7,r16
1002815c:	9809883a 	mov	r4,r19
10028160:	183ee83a 	callr	r3
10028164:	88a3883a 	add	r17,r17,r2
10028168:	80a1c83a 	sub	r16,r16,r2
1002816c:	00bff616 	blt	zero,r2,10028148 <_fflush_r+0x100>
10028170:	9080030b 	ldhu	r2,12(r18)
10028174:	00ffffc4 	movi	r3,-1
10028178:	10801014 	ori	r2,r2,64
1002817c:	9080030d 	sth	r2,12(r18)
10028180:	1805883a 	mov	r2,r3
10028184:	dfc00417 	ldw	ra,16(sp)
10028188:	dcc00317 	ldw	r19,12(sp)
1002818c:	dc800217 	ldw	r18,8(sp)
10028190:	dc400117 	ldw	r17,4(sp)
10028194:	dc000017 	ldw	r16,0(sp)
10028198:	dec00504 	addi	sp,sp,20
1002819c:	f800283a 	ret
100281a0:	90800f17 	ldw	r2,60(r18)
100281a4:	00bfbe16 	blt	zero,r2,100280a0 <_fflush_r+0x58>
100281a8:	0007883a 	mov	r3,zero
100281ac:	1805883a 	mov	r2,r3
100281b0:	dfc00417 	ldw	ra,16(sp)
100281b4:	dcc00317 	ldw	r19,12(sp)
100281b8:	dc800217 	ldw	r18,8(sp)
100281bc:	dc400117 	ldw	r17,4(sp)
100281c0:	dc000017 	ldw	r16,0(sp)
100281c4:	dec00504 	addi	sp,sp,20
100281c8:	f800283a 	ret
100281cc:	00282e00 	call	100282e0 <__sinit>
100281d0:	003fa806 	br	10028074 <_fflush_r+0x2c>
100281d4:	90800517 	ldw	r2,20(r18)
100281d8:	90800215 	stw	r2,8(r18)
100281dc:	003fda06 	br	10028148 <_fflush_r+0x100>
100281e0:	90800117 	ldw	r2,4(r18)
100281e4:	90c00c17 	ldw	r3,48(r18)
100281e8:	80a1c83a 	sub	r16,r16,r2
100281ec:	183fb426 	beq	r3,zero,100280c0 <_fflush_r+0x78>
100281f0:	90800f17 	ldw	r2,60(r18)
100281f4:	80a1c83a 	sub	r16,r16,r2
100281f8:	003fb106 	br	100280c0 <_fflush_r+0x78>
100281fc:	91400717 	ldw	r5,28(r18)
10028200:	9809883a 	mov	r4,r19
10028204:	000d883a 	mov	r6,zero
10028208:	01c00044 	movi	r7,1
1002820c:	403ee83a 	callr	r8
10028210:	1021883a 	mov	r16,r2
10028214:	00bfffc4 	movi	r2,-1
10028218:	80800226 	beq	r16,r2,10028224 <_fflush_r+0x1dc>
1002821c:	92000a17 	ldw	r8,40(r18)
10028220:	003fa406 	br	100280b4 <_fflush_r+0x6c>
10028224:	98c00017 	ldw	r3,0(r19)
10028228:	00800744 	movi	r2,29
1002822c:	18bfde26 	beq	r3,r2,100281a8 <_fflush_r+0x160>
10028230:	9080030b 	ldhu	r2,12(r18)
10028234:	8007883a 	mov	r3,r16
10028238:	10801014 	ori	r2,r2,64
1002823c:	9080030d 	sth	r2,12(r18)
10028240:	003fcf06 	br	10028180 <_fflush_r+0x138>

10028244 <fflush>:
10028244:	014400f4 	movhi	r5,4099
10028248:	29601204 	addi	r5,r5,-32696
1002824c:	2007883a 	mov	r3,r4
10028250:	20000526 	beq	r4,zero,10028268 <fflush+0x24>
10028254:	00800034 	movhi	r2,0
10028258:	108b0704 	addi	r2,r2,11292
1002825c:	11000017 	ldw	r4,0(r2)
10028260:	180b883a 	mov	r5,r3
10028264:	00280481 	jmpi	10028048 <_fflush_r>
10028268:	00800034 	movhi	r2,0
1002826c:	108b0804 	addi	r2,r2,11296
10028270:	11000017 	ldw	r4,0(r2)
10028274:	00290501 	jmpi	10029050 <_fwalk_reent>

10028278 <std>:
10028278:	008400f4 	movhi	r2,4099
1002827c:	10acdc04 	addi	r2,r2,-19600
10028280:	20800b15 	stw	r2,44(r4)
10028284:	008400f4 	movhi	r2,4099
10028288:	10ad1704 	addi	r2,r2,-19364
1002828c:	20800815 	stw	r2,32(r4)
10028290:	00c400f4 	movhi	r3,4099
10028294:	18ecf804 	addi	r3,r3,-19488
10028298:	008400f4 	movhi	r2,4099
1002829c:	10acde04 	addi	r2,r2,-19592
100282a0:	2140030d 	sth	r5,12(r4)
100282a4:	2180038d 	sth	r6,14(r4)
100282a8:	20c00915 	stw	r3,36(r4)
100282ac:	20800a15 	stw	r2,40(r4)
100282b0:	20000015 	stw	zero,0(r4)
100282b4:	20000115 	stw	zero,4(r4)
100282b8:	20000215 	stw	zero,8(r4)
100282bc:	20000415 	stw	zero,16(r4)
100282c0:	20000515 	stw	zero,20(r4)
100282c4:	20000615 	stw	zero,24(r4)
100282c8:	21000715 	stw	r4,28(r4)
100282cc:	f800283a 	ret

100282d0 <__sfp_lock_acquire>:
100282d0:	f800283a 	ret

100282d4 <__sfp_lock_release>:
100282d4:	f800283a 	ret

100282d8 <__sinit_lock_acquire>:
100282d8:	f800283a 	ret

100282dc <__sinit_lock_release>:
100282dc:	f800283a 	ret

100282e0 <__sinit>:
100282e0:	20800e17 	ldw	r2,56(r4)
100282e4:	defffd04 	addi	sp,sp,-12
100282e8:	dc400115 	stw	r17,4(sp)
100282ec:	dc000015 	stw	r16,0(sp)
100282f0:	dfc00215 	stw	ra,8(sp)
100282f4:	04400044 	movi	r17,1
100282f8:	01400104 	movi	r5,4
100282fc:	000d883a 	mov	r6,zero
10028300:	2021883a 	mov	r16,r4
10028304:	2200bb04 	addi	r8,r4,748
10028308:	200f883a 	mov	r7,r4
1002830c:	10000526 	beq	r2,zero,10028324 <__sinit+0x44>
10028310:	dfc00217 	ldw	ra,8(sp)
10028314:	dc400117 	ldw	r17,4(sp)
10028318:	dc000017 	ldw	r16,0(sp)
1002831c:	dec00304 	addi	sp,sp,12
10028320:	f800283a 	ret
10028324:	21000117 	ldw	r4,4(r4)
10028328:	008400f4 	movhi	r2,4099
1002832c:	10a0f104 	addi	r2,r2,-31804
10028330:	00c000c4 	movi	r3,3
10028334:	80800f15 	stw	r2,60(r16)
10028338:	80c0b915 	stw	r3,740(r16)
1002833c:	8200ba15 	stw	r8,744(r16)
10028340:	84400e15 	stw	r17,56(r16)
10028344:	8000b815 	stw	zero,736(r16)
10028348:	00282780 	call	10028278 <std>
1002834c:	81000217 	ldw	r4,8(r16)
10028350:	880d883a 	mov	r6,r17
10028354:	800f883a 	mov	r7,r16
10028358:	01400284 	movi	r5,10
1002835c:	00282780 	call	10028278 <std>
10028360:	81000317 	ldw	r4,12(r16)
10028364:	800f883a 	mov	r7,r16
10028368:	01400484 	movi	r5,18
1002836c:	01800084 	movi	r6,2
10028370:	dfc00217 	ldw	ra,8(sp)
10028374:	dc400117 	ldw	r17,4(sp)
10028378:	dc000017 	ldw	r16,0(sp)
1002837c:	dec00304 	addi	sp,sp,12
10028380:	00282781 	jmpi	10028278 <std>

10028384 <__fp_lock>:
10028384:	0005883a 	mov	r2,zero
10028388:	f800283a 	ret

1002838c <__fp_unlock>:
1002838c:	0005883a 	mov	r2,zero
10028390:	f800283a 	ret

10028394 <__fp_unlock_all>:
10028394:	00800034 	movhi	r2,0
10028398:	108b0704 	addi	r2,r2,11292
1002839c:	11000017 	ldw	r4,0(r2)
100283a0:	014400f4 	movhi	r5,4099
100283a4:	2960e304 	addi	r5,r5,-31860
100283a8:	00291181 	jmpi	10029118 <_fwalk>

100283ac <__fp_lock_all>:
100283ac:	00800034 	movhi	r2,0
100283b0:	108b0704 	addi	r2,r2,11292
100283b4:	11000017 	ldw	r4,0(r2)
100283b8:	014400f4 	movhi	r5,4099
100283bc:	2960e104 	addi	r5,r5,-31868
100283c0:	00291181 	jmpi	10029118 <_fwalk>

100283c4 <_cleanup_r>:
100283c4:	014400f4 	movhi	r5,4099
100283c8:	29774d04 	addi	r5,r5,-8908
100283cc:	00291181 	jmpi	10029118 <_fwalk>

100283d0 <_cleanup>:
100283d0:	00800034 	movhi	r2,0
100283d4:	108b0804 	addi	r2,r2,11296
100283d8:	11000017 	ldw	r4,0(r2)
100283dc:	00283c41 	jmpi	100283c4 <_cleanup_r>

100283e0 <__sfmoreglue>:
100283e0:	defffc04 	addi	sp,sp,-16
100283e4:	dc400115 	stw	r17,4(sp)
100283e8:	2c401724 	muli	r17,r5,92
100283ec:	dc800215 	stw	r18,8(sp)
100283f0:	2825883a 	mov	r18,r5
100283f4:	89400304 	addi	r5,r17,12
100283f8:	dc000015 	stw	r16,0(sp)
100283fc:	dfc00315 	stw	ra,12(sp)
10028400:	002249c0 	call	1002249c <_malloc_r>
10028404:	0021883a 	mov	r16,zero
10028408:	880d883a 	mov	r6,r17
1002840c:	000b883a 	mov	r5,zero
10028410:	10000626 	beq	r2,zero,1002842c <__sfmoreglue+0x4c>
10028414:	11000304 	addi	r4,r2,12
10028418:	14800115 	stw	r18,4(r2)
1002841c:	10000015 	stw	zero,0(r2)
10028420:	11000215 	stw	r4,8(r2)
10028424:	1021883a 	mov	r16,r2
10028428:	00297180 	call	10029718 <memset>
1002842c:	8005883a 	mov	r2,r16
10028430:	dfc00317 	ldw	ra,12(sp)
10028434:	dc800217 	ldw	r18,8(sp)
10028438:	dc400117 	ldw	r17,4(sp)
1002843c:	dc000017 	ldw	r16,0(sp)
10028440:	dec00404 	addi	sp,sp,16
10028444:	f800283a 	ret

10028448 <__sfp>:
10028448:	defffd04 	addi	sp,sp,-12
1002844c:	00800034 	movhi	r2,0
10028450:	108b0804 	addi	r2,r2,11296
10028454:	dc000015 	stw	r16,0(sp)
10028458:	14000017 	ldw	r16,0(r2)
1002845c:	dc400115 	stw	r17,4(sp)
10028460:	dfc00215 	stw	ra,8(sp)
10028464:	80800e17 	ldw	r2,56(r16)
10028468:	2023883a 	mov	r17,r4
1002846c:	10002626 	beq	r2,zero,10028508 <__sfp+0xc0>
10028470:	8400b804 	addi	r16,r16,736
10028474:	80800117 	ldw	r2,4(r16)
10028478:	81000217 	ldw	r4,8(r16)
1002847c:	10ffffc4 	addi	r3,r2,-1
10028480:	18000916 	blt	r3,zero,100284a8 <__sfp+0x60>
10028484:	2080030f 	ldh	r2,12(r4)
10028488:	10000b26 	beq	r2,zero,100284b8 <__sfp+0x70>
1002848c:	017fffc4 	movi	r5,-1
10028490:	00000206 	br	1002849c <__sfp+0x54>
10028494:	2080030f 	ldh	r2,12(r4)
10028498:	10000726 	beq	r2,zero,100284b8 <__sfp+0x70>
1002849c:	18ffffc4 	addi	r3,r3,-1
100284a0:	21001704 	addi	r4,r4,92
100284a4:	197ffb1e 	bne	r3,r5,10028494 <__sfp+0x4c>
100284a8:	80800017 	ldw	r2,0(r16)
100284ac:	10001926 	beq	r2,zero,10028514 <__sfp+0xcc>
100284b0:	1021883a 	mov	r16,r2
100284b4:	003fef06 	br	10028474 <__sfp+0x2c>
100284b8:	00bfffc4 	movi	r2,-1
100284bc:	00c00044 	movi	r3,1
100284c0:	2080038d 	sth	r2,14(r4)
100284c4:	20c0030d 	sth	r3,12(r4)
100284c8:	20000015 	stw	zero,0(r4)
100284cc:	20000215 	stw	zero,8(r4)
100284d0:	20000115 	stw	zero,4(r4)
100284d4:	20000415 	stw	zero,16(r4)
100284d8:	20000515 	stw	zero,20(r4)
100284dc:	20000615 	stw	zero,24(r4)
100284e0:	20000c15 	stw	zero,48(r4)
100284e4:	20000d15 	stw	zero,52(r4)
100284e8:	20001115 	stw	zero,68(r4)
100284ec:	20001215 	stw	zero,72(r4)
100284f0:	2005883a 	mov	r2,r4
100284f4:	dfc00217 	ldw	ra,8(sp)
100284f8:	dc400117 	ldw	r17,4(sp)
100284fc:	dc000017 	ldw	r16,0(sp)
10028500:	dec00304 	addi	sp,sp,12
10028504:	f800283a 	ret
10028508:	8009883a 	mov	r4,r16
1002850c:	00282e00 	call	100282e0 <__sinit>
10028510:	003fd706 	br	10028470 <__sfp+0x28>
10028514:	8809883a 	mov	r4,r17
10028518:	01400104 	movi	r5,4
1002851c:	00283e00 	call	100283e0 <__sfmoreglue>
10028520:	80800015 	stw	r2,0(r16)
10028524:	103fe21e 	bne	r2,zero,100284b0 <__sfp+0x68>
10028528:	00800304 	movi	r2,12
1002852c:	0009883a 	mov	r4,zero
10028530:	88800015 	stw	r2,0(r17)
10028534:	003fee06 	br	100284f0 <__sfp+0xa8>

10028538 <_fread_r>:
10028538:	defff504 	addi	sp,sp,-44
1002853c:	ddc00815 	stw	r23,32(sp)
10028540:	39af383a 	mul	r23,r7,r6
10028544:	df000915 	stw	fp,36(sp)
10028548:	dd800715 	stw	r22,28(sp)
1002854c:	dcc00415 	stw	r19,16(sp)
10028550:	dc000115 	stw	r16,4(sp)
10028554:	dfc00a15 	stw	ra,40(sp)
10028558:	dd400615 	stw	r21,24(sp)
1002855c:	dd000515 	stw	r20,20(sp)
10028560:	dc800315 	stw	r18,12(sp)
10028564:	dc400215 	stw	r17,8(sp)
10028568:	d9800015 	stw	r6,0(sp)
1002856c:	3839883a 	mov	fp,r7
10028570:	2821883a 	mov	r16,r5
10028574:	202d883a 	mov	r22,r4
10028578:	dcc00b17 	ldw	r19,44(sp)
1002857c:	b8005926 	beq	r23,zero,100286e4 <_fread_r+0x1ac>
10028580:	20000226 	beq	r4,zero,1002858c <_fread_r+0x54>
10028584:	20800e17 	ldw	r2,56(r4)
10028588:	10005826 	beq	r2,zero,100286ec <_fread_r+0x1b4>
1002858c:	9c400117 	ldw	r17,4(r19)
10028590:	88005916 	blt	r17,zero,100286f8 <_fread_r+0x1c0>
10028594:	9880030b 	ldhu	r2,12(r19)
10028598:	8029883a 	mov	r20,r16
1002859c:	1080008c 	andi	r2,r2,2
100285a0:	1000221e 	bne	r2,zero,1002862c <_fread_r+0xf4>
100285a4:	b825883a 	mov	r18,r23
100285a8:	00000106 	br	100285b0 <_fread_r+0x78>
100285ac:	9c400117 	ldw	r17,4(r19)
100285b0:	a009883a 	mov	r4,r20
100285b4:	880d883a 	mov	r6,r17
100285b8:	8c80542e 	bgeu	r17,r18,1002870c <_fread_r+0x1d4>
100285bc:	99400017 	ldw	r5,0(r19)
100285c0:	a469883a 	add	r20,r20,r17
100285c4:	9465c83a 	sub	r18,r18,r17
100285c8:	0022c500 	call	10022c50 <memcpy>
100285cc:	98800017 	ldw	r2,0(r19)
100285d0:	b009883a 	mov	r4,r22
100285d4:	980b883a 	mov	r5,r19
100285d8:	1461883a 	add	r16,r2,r17
100285dc:	9c000015 	stw	r16,0(r19)
100285e0:	002af840 	call	1002af84 <__srefill_r>
100285e4:	103ff126 	beq	r2,zero,100285ac <_fread_r+0x74>
100285e8:	d9400017 	ldw	r5,0(sp)
100285ec:	bc89c83a 	sub	r4,r23,r18
100285f0:	002233c0 	call	1002233c <__udivsi3>
100285f4:	1039883a 	mov	fp,r2
100285f8:	e005883a 	mov	r2,fp
100285fc:	dfc00a17 	ldw	ra,40(sp)
10028600:	df000917 	ldw	fp,36(sp)
10028604:	ddc00817 	ldw	r23,32(sp)
10028608:	dd800717 	ldw	r22,28(sp)
1002860c:	dd400617 	ldw	r21,24(sp)
10028610:	dd000517 	ldw	r20,20(sp)
10028614:	dcc00417 	ldw	r19,16(sp)
10028618:	dc800317 	ldw	r18,12(sp)
1002861c:	dc400217 	ldw	r17,8(sp)
10028620:	dc000117 	ldw	r16,4(sp)
10028624:	dec00b04 	addi	sp,sp,44
10028628:	f800283a 	ret
1002862c:	b825883a 	mov	r18,r23
10028630:	8dc03436 	bltu	r17,r23,10028704 <_fread_r+0x1cc>
10028634:	99400017 	ldw	r5,0(r19)
10028638:	a009883a 	mov	r4,r20
1002863c:	900d883a 	mov	r6,r18
10028640:	0022c500 	call	10022c50 <memcpy>
10028644:	9c000017 	ldw	r16,0(r19)
10028648:	98800117 	ldw	r2,4(r19)
1002864c:	99400c17 	ldw	r5,48(r19)
10028650:	84a1883a 	add	r16,r16,r18
10028654:	14a3c83a 	sub	r17,r2,r18
10028658:	a4ab883a 	add	r21,r20,r18
1002865c:	9c400115 	stw	r17,4(r19)
10028660:	9c000015 	stw	r16,0(r19)
10028664:	bca9c83a 	sub	r20,r23,r18
10028668:	28000826 	beq	r5,zero,1002868c <_fread_r+0x154>
1002866c:	a03fe226 	beq	r20,zero,100285f8 <_fread_r+0xc0>
10028670:	98801004 	addi	r2,r19,64
10028674:	28800326 	beq	r5,r2,10028684 <_fread_r+0x14c>
10028678:	b009883a 	mov	r4,r22
1002867c:	00288a00 	call	100288a0 <_free_r>
10028680:	9c000017 	ldw	r16,0(r19)
10028684:	98000c15 	stw	zero,48(r19)
10028688:	00000106 	br	10028690 <_fread_r+0x158>
1002868c:	a03fda26 	beq	r20,zero,100285f8 <_fread_r+0xc0>
10028690:	9c800417 	ldw	r18,16(r19)
10028694:	9c400517 	ldw	r17,20(r19)
10028698:	9d400015 	stw	r21,0(r19)
1002869c:	9d400415 	stw	r21,16(r19)
100286a0:	9d000515 	stw	r20,20(r19)
100286a4:	b009883a 	mov	r4,r22
100286a8:	980b883a 	mov	r5,r19
100286ac:	002af840 	call	1002af84 <__srefill_r>
100286b0:	98c00117 	ldw	r3,4(r19)
100286b4:	9c800415 	stw	r18,16(r19)
100286b8:	9c400515 	stw	r17,20(r19)
100286bc:	a8eb883a 	add	r21,r21,r3
100286c0:	9c000015 	stw	r16,0(r19)
100286c4:	a0e9c83a 	sub	r20,r20,r3
100286c8:	98000115 	stw	zero,4(r19)
100286cc:	103fef26 	beq	r2,zero,1002868c <_fread_r+0x154>
100286d0:	d9400017 	ldw	r5,0(sp)
100286d4:	bd09c83a 	sub	r4,r23,r20
100286d8:	002233c0 	call	1002233c <__udivsi3>
100286dc:	1039883a 	mov	fp,r2
100286e0:	003fc506 	br	100285f8 <_fread_r+0xc0>
100286e4:	0039883a 	mov	fp,zero
100286e8:	003fc306 	br	100285f8 <_fread_r+0xc0>
100286ec:	00282e00 	call	100282e0 <__sinit>
100286f0:	9c400117 	ldw	r17,4(r19)
100286f4:	883fa70e 	bge	r17,zero,10028594 <_fread_r+0x5c>
100286f8:	0023883a 	mov	r17,zero
100286fc:	98000115 	stw	zero,4(r19)
10028700:	003fa406 	br	10028594 <_fread_r+0x5c>
10028704:	8825883a 	mov	r18,r17
10028708:	003fca06 	br	10028634 <_fread_r+0xfc>
1002870c:	99400017 	ldw	r5,0(r19)
10028710:	900d883a 	mov	r6,r18
10028714:	0022c500 	call	10022c50 <memcpy>
10028718:	98c00117 	ldw	r3,4(r19)
1002871c:	98800017 	ldw	r2,0(r19)
10028720:	1c87c83a 	sub	r3,r3,r18
10028724:	1485883a 	add	r2,r2,r18
10028728:	98800015 	stw	r2,0(r19)
1002872c:	98c00115 	stw	r3,4(r19)
10028730:	003fb106 	br	100285f8 <_fread_r+0xc0>

10028734 <fread>:
10028734:	00800034 	movhi	r2,0
10028738:	108b0704 	addi	r2,r2,11292
1002873c:	2017883a 	mov	r11,r4
10028740:	11000017 	ldw	r4,0(r2)
10028744:	defffe04 	addi	sp,sp,-8
10028748:	3013883a 	mov	r9,r6
1002874c:	2805883a 	mov	r2,r5
10028750:	d9c00015 	stw	r7,0(sp)
10028754:	580b883a 	mov	r5,r11
10028758:	100d883a 	mov	r6,r2
1002875c:	480f883a 	mov	r7,r9
10028760:	dfc00115 	stw	ra,4(sp)
10028764:	00285380 	call	10028538 <_fread_r>
10028768:	dfc00117 	ldw	ra,4(sp)
1002876c:	dec00204 	addi	sp,sp,8
10028770:	f800283a 	ret

10028774 <_malloc_trim_r>:
10028774:	defffb04 	addi	sp,sp,-20
10028778:	dcc00315 	stw	r19,12(sp)
1002877c:	04c00034 	movhi	r19,0
10028780:	9cc54504 	addi	r19,r19,5396
10028784:	dc800215 	stw	r18,8(sp)
10028788:	dc400115 	stw	r17,4(sp)
1002878c:	dc000015 	stw	r16,0(sp)
10028790:	2823883a 	mov	r17,r5
10028794:	2025883a 	mov	r18,r4
10028798:	dfc00415 	stw	ra,16(sp)
1002879c:	00317d00 	call	100317d0 <__malloc_lock>
100287a0:	98800217 	ldw	r2,8(r19)
100287a4:	9009883a 	mov	r4,r18
100287a8:	000b883a 	mov	r5,zero
100287ac:	10c00117 	ldw	r3,4(r2)
100287b0:	00bfff04 	movi	r2,-4
100287b4:	18a0703a 	and	r16,r3,r2
100287b8:	8463c83a 	sub	r17,r16,r17
100287bc:	8c43fbc4 	addi	r17,r17,4079
100287c0:	8822d33a 	srli	r17,r17,12
100287c4:	0083ffc4 	movi	r2,4095
100287c8:	8c7fffc4 	addi	r17,r17,-1
100287cc:	8822933a 	slli	r17,r17,12
100287d0:	1440060e 	bge	r2,r17,100287ec <_malloc_trim_r+0x78>
100287d4:	0022ea00 	call	10022ea0 <_sbrk_r>
100287d8:	98c00217 	ldw	r3,8(r19)
100287dc:	9009883a 	mov	r4,r18
100287e0:	044bc83a 	sub	r5,zero,r17
100287e4:	80c7883a 	add	r3,r16,r3
100287e8:	10c00926 	beq	r2,r3,10028810 <_malloc_trim_r+0x9c>
100287ec:	00317d40 	call	100317d4 <__malloc_unlock>
100287f0:	0005883a 	mov	r2,zero
100287f4:	dfc00417 	ldw	ra,16(sp)
100287f8:	dcc00317 	ldw	r19,12(sp)
100287fc:	dc800217 	ldw	r18,8(sp)
10028800:	dc400117 	ldw	r17,4(sp)
10028804:	dc000017 	ldw	r16,0(sp)
10028808:	dec00504 	addi	sp,sp,20
1002880c:	f800283a 	ret
10028810:	9009883a 	mov	r4,r18
10028814:	0022ea00 	call	10022ea0 <_sbrk_r>
10028818:	844dc83a 	sub	r6,r16,r17
1002881c:	00ffffc4 	movi	r3,-1
10028820:	9009883a 	mov	r4,r18
10028824:	000b883a 	mov	r5,zero
10028828:	01c00034 	movhi	r7,0
1002882c:	39cb2904 	addi	r7,r7,11428
10028830:	31800054 	ori	r6,r6,1
10028834:	10c00926 	beq	r2,r3,1002885c <_malloc_trim_r+0xe8>
10028838:	38800017 	ldw	r2,0(r7)
1002883c:	98c00217 	ldw	r3,8(r19)
10028840:	9009883a 	mov	r4,r18
10028844:	1445c83a 	sub	r2,r2,r17
10028848:	38800015 	stw	r2,0(r7)
1002884c:	19800115 	stw	r6,4(r3)
10028850:	00317d40 	call	100317d4 <__malloc_unlock>
10028854:	00800044 	movi	r2,1
10028858:	003fe606 	br	100287f4 <_malloc_trim_r+0x80>
1002885c:	0022ea00 	call	10022ea0 <_sbrk_r>
10028860:	99800217 	ldw	r6,8(r19)
10028864:	100f883a 	mov	r7,r2
10028868:	9009883a 	mov	r4,r18
1002886c:	1187c83a 	sub	r3,r2,r6
10028870:	008003c4 	movi	r2,15
10028874:	19400054 	ori	r5,r3,1
10028878:	10ffdc0e 	bge	r2,r3,100287ec <_malloc_trim_r+0x78>
1002887c:	00800034 	movhi	r2,0
10028880:	108b0a04 	addi	r2,r2,11304
10028884:	10c00017 	ldw	r3,0(r2)
10028888:	00800034 	movhi	r2,0
1002888c:	108b2904 	addi	r2,r2,11428
10028890:	31400115 	stw	r5,4(r6)
10028894:	38c7c83a 	sub	r3,r7,r3
10028898:	10c00015 	stw	r3,0(r2)
1002889c:	003fd306 	br	100287ec <_malloc_trim_r+0x78>

100288a0 <_free_r>:
100288a0:	defffd04 	addi	sp,sp,-12
100288a4:	dc400115 	stw	r17,4(sp)
100288a8:	dc000015 	stw	r16,0(sp)
100288ac:	dfc00215 	stw	ra,8(sp)
100288b0:	2821883a 	mov	r16,r5
100288b4:	2023883a 	mov	r17,r4
100288b8:	28005a26 	beq	r5,zero,10028a24 <_free_r+0x184>
100288bc:	00317d00 	call	100317d0 <__malloc_lock>
100288c0:	823ffe04 	addi	r8,r16,-8
100288c4:	41400117 	ldw	r5,4(r8)
100288c8:	00bfff84 	movi	r2,-2
100288cc:	02800034 	movhi	r10,0
100288d0:	52854504 	addi	r10,r10,5396
100288d4:	288e703a 	and	r7,r5,r2
100288d8:	41cd883a 	add	r6,r8,r7
100288dc:	30c00117 	ldw	r3,4(r6)
100288e0:	51000217 	ldw	r4,8(r10)
100288e4:	00bfff04 	movi	r2,-4
100288e8:	1892703a 	and	r9,r3,r2
100288ec:	5017883a 	mov	r11,r10
100288f0:	31006726 	beq	r6,r4,10028a90 <_free_r+0x1f0>
100288f4:	2880004c 	andi	r2,r5,1
100288f8:	1005003a 	cmpeq	r2,r2,zero
100288fc:	32400115 	stw	r9,4(r6)
10028900:	10001a1e 	bne	r2,zero,1002896c <_free_r+0xcc>
10028904:	000b883a 	mov	r5,zero
10028908:	3247883a 	add	r3,r6,r9
1002890c:	18800117 	ldw	r2,4(r3)
10028910:	1080004c 	andi	r2,r2,1
10028914:	1000231e 	bne	r2,zero,100289a4 <_free_r+0x104>
10028918:	280ac03a 	cmpne	r5,r5,zero
1002891c:	3a4f883a 	add	r7,r7,r9
10028920:	2800451e 	bne	r5,zero,10028a38 <_free_r+0x198>
10028924:	31000217 	ldw	r4,8(r6)
10028928:	00800034 	movhi	r2,0
1002892c:	10854704 	addi	r2,r2,5404
10028930:	20807b26 	beq	r4,r2,10028b20 <_free_r+0x280>
10028934:	30800317 	ldw	r2,12(r6)
10028938:	3a07883a 	add	r3,r7,r8
1002893c:	19c00015 	stw	r7,0(r3)
10028940:	11000215 	stw	r4,8(r2)
10028944:	20800315 	stw	r2,12(r4)
10028948:	38800054 	ori	r2,r7,1
1002894c:	40800115 	stw	r2,4(r8)
10028950:	28001a26 	beq	r5,zero,100289bc <_free_r+0x11c>
10028954:	8809883a 	mov	r4,r17
10028958:	dfc00217 	ldw	ra,8(sp)
1002895c:	dc400117 	ldw	r17,4(sp)
10028960:	dc000017 	ldw	r16,0(sp)
10028964:	dec00304 	addi	sp,sp,12
10028968:	00317d41 	jmpi	100317d4 <__malloc_unlock>
1002896c:	80bffe17 	ldw	r2,-8(r16)
10028970:	50c00204 	addi	r3,r10,8
10028974:	4091c83a 	sub	r8,r8,r2
10028978:	41000217 	ldw	r4,8(r8)
1002897c:	388f883a 	add	r7,r7,r2
10028980:	20c06126 	beq	r4,r3,10028b08 <_free_r+0x268>
10028984:	40800317 	ldw	r2,12(r8)
10028988:	3247883a 	add	r3,r6,r9
1002898c:	000b883a 	mov	r5,zero
10028990:	11000215 	stw	r4,8(r2)
10028994:	20800315 	stw	r2,12(r4)
10028998:	18800117 	ldw	r2,4(r3)
1002899c:	1080004c 	andi	r2,r2,1
100289a0:	103fdd26 	beq	r2,zero,10028918 <_free_r+0x78>
100289a4:	38800054 	ori	r2,r7,1
100289a8:	3a07883a 	add	r3,r7,r8
100289ac:	280ac03a 	cmpne	r5,r5,zero
100289b0:	40800115 	stw	r2,4(r8)
100289b4:	19c00015 	stw	r7,0(r3)
100289b8:	283fe61e 	bne	r5,zero,10028954 <_free_r+0xb4>
100289bc:	00807fc4 	movi	r2,511
100289c0:	11c01f2e 	bgeu	r2,r7,10028a40 <_free_r+0x1a0>
100289c4:	3806d27a 	srli	r3,r7,9
100289c8:	1800481e 	bne	r3,zero,10028aec <_free_r+0x24c>
100289cc:	3804d0fa 	srli	r2,r7,3
100289d0:	100690fa 	slli	r3,r2,3
100289d4:	1acd883a 	add	r6,r3,r11
100289d8:	31400217 	ldw	r5,8(r6)
100289dc:	31405926 	beq	r6,r5,10028b44 <_free_r+0x2a4>
100289e0:	28800117 	ldw	r2,4(r5)
100289e4:	00ffff04 	movi	r3,-4
100289e8:	10c4703a 	and	r2,r2,r3
100289ec:	3880022e 	bgeu	r7,r2,100289f8 <_free_r+0x158>
100289f0:	29400217 	ldw	r5,8(r5)
100289f4:	317ffa1e 	bne	r6,r5,100289e0 <_free_r+0x140>
100289f8:	29800317 	ldw	r6,12(r5)
100289fc:	41800315 	stw	r6,12(r8)
10028a00:	41400215 	stw	r5,8(r8)
10028a04:	8809883a 	mov	r4,r17
10028a08:	2a000315 	stw	r8,12(r5)
10028a0c:	32000215 	stw	r8,8(r6)
10028a10:	dfc00217 	ldw	ra,8(sp)
10028a14:	dc400117 	ldw	r17,4(sp)
10028a18:	dc000017 	ldw	r16,0(sp)
10028a1c:	dec00304 	addi	sp,sp,12
10028a20:	00317d41 	jmpi	100317d4 <__malloc_unlock>
10028a24:	dfc00217 	ldw	ra,8(sp)
10028a28:	dc400117 	ldw	r17,4(sp)
10028a2c:	dc000017 	ldw	r16,0(sp)
10028a30:	dec00304 	addi	sp,sp,12
10028a34:	f800283a 	ret
10028a38:	31000217 	ldw	r4,8(r6)
10028a3c:	003fbd06 	br	10028934 <_free_r+0x94>
10028a40:	3806d0fa 	srli	r3,r7,3
10028a44:	00800044 	movi	r2,1
10028a48:	51400117 	ldw	r5,4(r10)
10028a4c:	180890fa 	slli	r4,r3,3
10028a50:	1807d0ba 	srai	r3,r3,2
10028a54:	22c9883a 	add	r4,r4,r11
10028a58:	21800217 	ldw	r6,8(r4)
10028a5c:	10c4983a 	sll	r2,r2,r3
10028a60:	41000315 	stw	r4,12(r8)
10028a64:	41800215 	stw	r6,8(r8)
10028a68:	288ab03a 	or	r5,r5,r2
10028a6c:	22000215 	stw	r8,8(r4)
10028a70:	8809883a 	mov	r4,r17
10028a74:	51400115 	stw	r5,4(r10)
10028a78:	32000315 	stw	r8,12(r6)
10028a7c:	dfc00217 	ldw	ra,8(sp)
10028a80:	dc400117 	ldw	r17,4(sp)
10028a84:	dc000017 	ldw	r16,0(sp)
10028a88:	dec00304 	addi	sp,sp,12
10028a8c:	00317d41 	jmpi	100317d4 <__malloc_unlock>
10028a90:	2880004c 	andi	r2,r5,1
10028a94:	3a4d883a 	add	r6,r7,r9
10028a98:	1000071e 	bne	r2,zero,10028ab8 <_free_r+0x218>
10028a9c:	80bffe17 	ldw	r2,-8(r16)
10028aa0:	4091c83a 	sub	r8,r8,r2
10028aa4:	41000317 	ldw	r4,12(r8)
10028aa8:	40c00217 	ldw	r3,8(r8)
10028aac:	308d883a 	add	r6,r6,r2
10028ab0:	20c00215 	stw	r3,8(r4)
10028ab4:	19000315 	stw	r4,12(r3)
10028ab8:	00800034 	movhi	r2,0
10028abc:	108b0904 	addi	r2,r2,11300
10028ac0:	11000017 	ldw	r4,0(r2)
10028ac4:	30c00054 	ori	r3,r6,1
10028ac8:	52000215 	stw	r8,8(r10)
10028acc:	40c00115 	stw	r3,4(r8)
10028ad0:	313fa036 	bltu	r6,r4,10028954 <_free_r+0xb4>
10028ad4:	00800034 	movhi	r2,0
10028ad8:	108b1c04 	addi	r2,r2,11376
10028adc:	11400017 	ldw	r5,0(r2)
10028ae0:	8809883a 	mov	r4,r17
10028ae4:	00287740 	call	10028774 <_malloc_trim_r>
10028ae8:	003f9a06 	br	10028954 <_free_r+0xb4>
10028aec:	00800104 	movi	r2,4
10028af0:	10c0072e 	bgeu	r2,r3,10028b10 <_free_r+0x270>
10028af4:	00800504 	movi	r2,20
10028af8:	10c01936 	bltu	r2,r3,10028b60 <_free_r+0x2c0>
10028afc:	188016c4 	addi	r2,r3,91
10028b00:	100690fa 	slli	r3,r2,3
10028b04:	003fb306 	br	100289d4 <_free_r+0x134>
10028b08:	01400044 	movi	r5,1
10028b0c:	003f7e06 	br	10028908 <_free_r+0x68>
10028b10:	3804d1ba 	srli	r2,r7,6
10028b14:	10800e04 	addi	r2,r2,56
10028b18:	100690fa 	slli	r3,r2,3
10028b1c:	003fad06 	br	100289d4 <_free_r+0x134>
10028b20:	22000315 	stw	r8,12(r4)
10028b24:	22000215 	stw	r8,8(r4)
10028b28:	3a05883a 	add	r2,r7,r8
10028b2c:	38c00054 	ori	r3,r7,1
10028b30:	11c00015 	stw	r7,0(r2)
10028b34:	41000215 	stw	r4,8(r8)
10028b38:	40c00115 	stw	r3,4(r8)
10028b3c:	41000315 	stw	r4,12(r8)
10028b40:	003f8406 	br	10028954 <_free_r+0xb4>
10028b44:	1005d0ba 	srai	r2,r2,2
10028b48:	00c00044 	movi	r3,1
10028b4c:	51000117 	ldw	r4,4(r10)
10028b50:	1886983a 	sll	r3,r3,r2
10028b54:	20c8b03a 	or	r4,r4,r3
10028b58:	51000115 	stw	r4,4(r10)
10028b5c:	003fa706 	br	100289fc <_free_r+0x15c>
10028b60:	00801504 	movi	r2,84
10028b64:	10c00436 	bltu	r2,r3,10028b78 <_free_r+0x2d8>
10028b68:	3804d33a 	srli	r2,r7,12
10028b6c:	10801b84 	addi	r2,r2,110
10028b70:	100690fa 	slli	r3,r2,3
10028b74:	003f9706 	br	100289d4 <_free_r+0x134>
10028b78:	00805504 	movi	r2,340
10028b7c:	10c00436 	bltu	r2,r3,10028b90 <_free_r+0x2f0>
10028b80:	3804d3fa 	srli	r2,r7,15
10028b84:	10801dc4 	addi	r2,r2,119
10028b88:	100690fa 	slli	r3,r2,3
10028b8c:	003f9106 	br	100289d4 <_free_r+0x134>
10028b90:	00815504 	movi	r2,1364
10028b94:	10c0032e 	bgeu	r2,r3,10028ba4 <_free_r+0x304>
10028b98:	00801f84 	movi	r2,126
10028b9c:	00c0fc04 	movi	r3,1008
10028ba0:	003f8c06 	br	100289d4 <_free_r+0x134>
10028ba4:	3804d4ba 	srli	r2,r7,18
10028ba8:	10801f04 	addi	r2,r2,124
10028bac:	100690fa 	slli	r3,r2,3
10028bb0:	003f8806 	br	100289d4 <_free_r+0x134>

10028bb4 <__sfvwrite_r>:
10028bb4:	30800217 	ldw	r2,8(r6)
10028bb8:	defff504 	addi	sp,sp,-44
10028bbc:	df000915 	stw	fp,36(sp)
10028bc0:	dd800715 	stw	r22,28(sp)
10028bc4:	dc800315 	stw	r18,12(sp)
10028bc8:	dfc00a15 	stw	ra,40(sp)
10028bcc:	ddc00815 	stw	r23,32(sp)
10028bd0:	dd400615 	stw	r21,24(sp)
10028bd4:	dd000515 	stw	r20,20(sp)
10028bd8:	dcc00415 	stw	r19,16(sp)
10028bdc:	dc400215 	stw	r17,8(sp)
10028be0:	dc000115 	stw	r16,4(sp)
10028be4:	302d883a 	mov	r22,r6
10028be8:	2039883a 	mov	fp,r4
10028bec:	2825883a 	mov	r18,r5
10028bf0:	10001c26 	beq	r2,zero,10028c64 <__sfvwrite_r+0xb0>
10028bf4:	29c0030b 	ldhu	r7,12(r5)
10028bf8:	3880020c 	andi	r2,r7,8
10028bfc:	10002726 	beq	r2,zero,10028c9c <__sfvwrite_r+0xe8>
10028c00:	28800417 	ldw	r2,16(r5)
10028c04:	10002526 	beq	r2,zero,10028c9c <__sfvwrite_r+0xe8>
10028c08:	3880008c 	andi	r2,r7,2
10028c0c:	b5400017 	ldw	r21,0(r22)
10028c10:	10002826 	beq	r2,zero,10028cb4 <__sfvwrite_r+0x100>
10028c14:	0021883a 	mov	r16,zero
10028c18:	0023883a 	mov	r17,zero
10028c1c:	880d883a 	mov	r6,r17
10028c20:	e009883a 	mov	r4,fp
10028c24:	00810004 	movi	r2,1024
10028c28:	80006e26 	beq	r16,zero,10028de4 <__sfvwrite_r+0x230>
10028c2c:	800f883a 	mov	r7,r16
10028c30:	91400717 	ldw	r5,28(r18)
10028c34:	1400012e 	bgeu	r2,r16,10028c3c <__sfvwrite_r+0x88>
10028c38:	100f883a 	mov	r7,r2
10028c3c:	90c00917 	ldw	r3,36(r18)
10028c40:	183ee83a 	callr	r3
10028c44:	1007883a 	mov	r3,r2
10028c48:	80a1c83a 	sub	r16,r16,r2
10028c4c:	88a3883a 	add	r17,r17,r2
10028c50:	00806d0e 	bge	zero,r2,10028e08 <__sfvwrite_r+0x254>
10028c54:	b0800217 	ldw	r2,8(r22)
10028c58:	10c5c83a 	sub	r2,r2,r3
10028c5c:	b0800215 	stw	r2,8(r22)
10028c60:	103fee1e 	bne	r2,zero,10028c1c <__sfvwrite_r+0x68>
10028c64:	0009883a 	mov	r4,zero
10028c68:	2005883a 	mov	r2,r4
10028c6c:	dfc00a17 	ldw	ra,40(sp)
10028c70:	df000917 	ldw	fp,36(sp)
10028c74:	ddc00817 	ldw	r23,32(sp)
10028c78:	dd800717 	ldw	r22,28(sp)
10028c7c:	dd400617 	ldw	r21,24(sp)
10028c80:	dd000517 	ldw	r20,20(sp)
10028c84:	dcc00417 	ldw	r19,16(sp)
10028c88:	dc800317 	ldw	r18,12(sp)
10028c8c:	dc400217 	ldw	r17,8(sp)
10028c90:	dc000117 	ldw	r16,4(sp)
10028c94:	dec00b04 	addi	sp,sp,44
10028c98:	f800283a 	ret
10028c9c:	00267400 	call	10026740 <__swsetup_r>
10028ca0:	1000e41e 	bne	r2,zero,10029034 <__sfvwrite_r+0x480>
10028ca4:	91c0030b 	ldhu	r7,12(r18)
10028ca8:	b5400017 	ldw	r21,0(r22)
10028cac:	3880008c 	andi	r2,r7,2
10028cb0:	103fd81e 	bne	r2,zero,10028c14 <__sfvwrite_r+0x60>
10028cb4:	3880004c 	andi	r2,r7,1
10028cb8:	1005003a 	cmpeq	r2,r2,zero
10028cbc:	10005726 	beq	r2,zero,10028e1c <__sfvwrite_r+0x268>
10028cc0:	0029883a 	mov	r20,zero
10028cc4:	002f883a 	mov	r23,zero
10028cc8:	a0004226 	beq	r20,zero,10028dd4 <__sfvwrite_r+0x220>
10028ccc:	3880800c 	andi	r2,r7,512
10028cd0:	94000217 	ldw	r16,8(r18)
10028cd4:	10008b26 	beq	r2,zero,10028f04 <__sfvwrite_r+0x350>
10028cd8:	800d883a 	mov	r6,r16
10028cdc:	a400a536 	bltu	r20,r16,10028f74 <__sfvwrite_r+0x3c0>
10028ce0:	3881200c 	andi	r2,r7,1152
10028ce4:	10002726 	beq	r2,zero,10028d84 <__sfvwrite_r+0x1d0>
10028ce8:	90800517 	ldw	r2,20(r18)
10028cec:	92000417 	ldw	r8,16(r18)
10028cf0:	91400017 	ldw	r5,0(r18)
10028cf4:	1087883a 	add	r3,r2,r2
10028cf8:	1887883a 	add	r3,r3,r2
10028cfc:	1808d7fa 	srli	r4,r3,31
10028d00:	2a21c83a 	sub	r16,r5,r8
10028d04:	80800044 	addi	r2,r16,1
10028d08:	20c9883a 	add	r4,r4,r3
10028d0c:	2027d07a 	srai	r19,r4,1
10028d10:	a085883a 	add	r2,r20,r2
10028d14:	980d883a 	mov	r6,r19
10028d18:	9880022e 	bgeu	r19,r2,10028d24 <__sfvwrite_r+0x170>
10028d1c:	1027883a 	mov	r19,r2
10028d20:	100d883a 	mov	r6,r2
10028d24:	3881000c 	andi	r2,r7,1024
10028d28:	1000b826 	beq	r2,zero,1002900c <__sfvwrite_r+0x458>
10028d2c:	300b883a 	mov	r5,r6
10028d30:	e009883a 	mov	r4,fp
10028d34:	002249c0 	call	1002249c <_malloc_r>
10028d38:	10003126 	beq	r2,zero,10028e00 <__sfvwrite_r+0x24c>
10028d3c:	91400417 	ldw	r5,16(r18)
10028d40:	1009883a 	mov	r4,r2
10028d44:	800d883a 	mov	r6,r16
10028d48:	1023883a 	mov	r17,r2
10028d4c:	0022c500 	call	10022c50 <memcpy>
10028d50:	90c0030b 	ldhu	r3,12(r18)
10028d54:	00beffc4 	movi	r2,-1025
10028d58:	1886703a 	and	r3,r3,r2
10028d5c:	18c02014 	ori	r3,r3,128
10028d60:	90c0030d 	sth	r3,12(r18)
10028d64:	9c07c83a 	sub	r3,r19,r16
10028d68:	8c05883a 	add	r2,r17,r16
10028d6c:	a00d883a 	mov	r6,r20
10028d70:	a021883a 	mov	r16,r20
10028d74:	90800015 	stw	r2,0(r18)
10028d78:	90c00215 	stw	r3,8(r18)
10028d7c:	94400415 	stw	r17,16(r18)
10028d80:	94c00515 	stw	r19,20(r18)
10028d84:	91000017 	ldw	r4,0(r18)
10028d88:	b80b883a 	mov	r5,r23
10028d8c:	a023883a 	mov	r17,r20
10028d90:	00296380 	call	10029638 <memmove>
10028d94:	90c00217 	ldw	r3,8(r18)
10028d98:	90800017 	ldw	r2,0(r18)
10028d9c:	a027883a 	mov	r19,r20
10028da0:	1c07c83a 	sub	r3,r3,r16
10028da4:	1405883a 	add	r2,r2,r16
10028da8:	90c00215 	stw	r3,8(r18)
10028dac:	a021883a 	mov	r16,r20
10028db0:	90800015 	stw	r2,0(r18)
10028db4:	b0800217 	ldw	r2,8(r22)
10028db8:	1405c83a 	sub	r2,r2,r16
10028dbc:	b0800215 	stw	r2,8(r22)
10028dc0:	103fa826 	beq	r2,zero,10028c64 <__sfvwrite_r+0xb0>
10028dc4:	a469c83a 	sub	r20,r20,r17
10028dc8:	91c0030b 	ldhu	r7,12(r18)
10028dcc:	bcef883a 	add	r23,r23,r19
10028dd0:	a03fbe1e 	bne	r20,zero,10028ccc <__sfvwrite_r+0x118>
10028dd4:	adc00017 	ldw	r23,0(r21)
10028dd8:	ad000117 	ldw	r20,4(r21)
10028ddc:	ad400204 	addi	r21,r21,8
10028de0:	003fb906 	br	10028cc8 <__sfvwrite_r+0x114>
10028de4:	ac400017 	ldw	r17,0(r21)
10028de8:	ac000117 	ldw	r16,4(r21)
10028dec:	ad400204 	addi	r21,r21,8
10028df0:	003f8a06 	br	10028c1c <__sfvwrite_r+0x68>
10028df4:	91400417 	ldw	r5,16(r18)
10028df8:	e009883a 	mov	r4,fp
10028dfc:	00288a00 	call	100288a0 <_free_r>
10028e00:	00800304 	movi	r2,12
10028e04:	e0800015 	stw	r2,0(fp)
10028e08:	9080030b 	ldhu	r2,12(r18)
10028e0c:	013fffc4 	movi	r4,-1
10028e10:	10801014 	ori	r2,r2,64
10028e14:	9080030d 	sth	r2,12(r18)
10028e18:	003f9306 	br	10028c68 <__sfvwrite_r+0xb4>
10028e1c:	0027883a 	mov	r19,zero
10028e20:	002f883a 	mov	r23,zero
10028e24:	d8000015 	stw	zero,0(sp)
10028e28:	0029883a 	mov	r20,zero
10028e2c:	98001e26 	beq	r19,zero,10028ea8 <__sfvwrite_r+0x2f4>
10028e30:	d8c00017 	ldw	r3,0(sp)
10028e34:	1804c03a 	cmpne	r2,r3,zero
10028e38:	10005e26 	beq	r2,zero,10028fb4 <__sfvwrite_r+0x400>
10028e3c:	9821883a 	mov	r16,r19
10028e40:	a4c0012e 	bgeu	r20,r19,10028e48 <__sfvwrite_r+0x294>
10028e44:	a021883a 	mov	r16,r20
10028e48:	91000017 	ldw	r4,0(r18)
10028e4c:	90800417 	ldw	r2,16(r18)
10028e50:	91800217 	ldw	r6,8(r18)
10028e54:	91c00517 	ldw	r7,20(r18)
10028e58:	1100022e 	bgeu	r2,r4,10028e64 <__sfvwrite_r+0x2b0>
10028e5c:	31e3883a 	add	r17,r6,r7
10028e60:	8c001616 	blt	r17,r16,10028ebc <__sfvwrite_r+0x308>
10028e64:	81c03816 	blt	r16,r7,10028f48 <__sfvwrite_r+0x394>
10028e68:	90c00917 	ldw	r3,36(r18)
10028e6c:	91400717 	ldw	r5,28(r18)
10028e70:	e009883a 	mov	r4,fp
10028e74:	b80d883a 	mov	r6,r23
10028e78:	183ee83a 	callr	r3
10028e7c:	1023883a 	mov	r17,r2
10028e80:	00bfe10e 	bge	zero,r2,10028e08 <__sfvwrite_r+0x254>
10028e84:	a469c83a 	sub	r20,r20,r17
10028e88:	a0001826 	beq	r20,zero,10028eec <__sfvwrite_r+0x338>
10028e8c:	b0800217 	ldw	r2,8(r22)
10028e90:	1445c83a 	sub	r2,r2,r17
10028e94:	b0800215 	stw	r2,8(r22)
10028e98:	103f7226 	beq	r2,zero,10028c64 <__sfvwrite_r+0xb0>
10028e9c:	9c67c83a 	sub	r19,r19,r17
10028ea0:	bc6f883a 	add	r23,r23,r17
10028ea4:	983fe21e 	bne	r19,zero,10028e30 <__sfvwrite_r+0x27c>
10028ea8:	adc00017 	ldw	r23,0(r21)
10028eac:	acc00117 	ldw	r19,4(r21)
10028eb0:	ad400204 	addi	r21,r21,8
10028eb4:	d8000015 	stw	zero,0(sp)
10028eb8:	003fdc06 	br	10028e2c <__sfvwrite_r+0x278>
10028ebc:	b80b883a 	mov	r5,r23
10028ec0:	880d883a 	mov	r6,r17
10028ec4:	00296380 	call	10029638 <memmove>
10028ec8:	90c00017 	ldw	r3,0(r18)
10028ecc:	e009883a 	mov	r4,fp
10028ed0:	900b883a 	mov	r5,r18
10028ed4:	1c47883a 	add	r3,r3,r17
10028ed8:	90c00015 	stw	r3,0(r18)
10028edc:	00280480 	call	10028048 <_fflush_r>
10028ee0:	103fc91e 	bne	r2,zero,10028e08 <__sfvwrite_r+0x254>
10028ee4:	a469c83a 	sub	r20,r20,r17
10028ee8:	a03fe81e 	bne	r20,zero,10028e8c <__sfvwrite_r+0x2d8>
10028eec:	e009883a 	mov	r4,fp
10028ef0:	900b883a 	mov	r5,r18
10028ef4:	00280480 	call	10028048 <_fflush_r>
10028ef8:	103fc31e 	bne	r2,zero,10028e08 <__sfvwrite_r+0x254>
10028efc:	d8000015 	stw	zero,0(sp)
10028f00:	003fe206 	br	10028e8c <__sfvwrite_r+0x2d8>
10028f04:	91000017 	ldw	r4,0(r18)
10028f08:	90800417 	ldw	r2,16(r18)
10028f0c:	1100022e 	bgeu	r2,r4,10028f18 <__sfvwrite_r+0x364>
10028f10:	8023883a 	mov	r17,r16
10028f14:	85003136 	bltu	r16,r20,10028fdc <__sfvwrite_r+0x428>
10028f18:	91c00517 	ldw	r7,20(r18)
10028f1c:	a1c01836 	bltu	r20,r7,10028f80 <__sfvwrite_r+0x3cc>
10028f20:	90c00917 	ldw	r3,36(r18)
10028f24:	91400717 	ldw	r5,28(r18)
10028f28:	e009883a 	mov	r4,fp
10028f2c:	b80d883a 	mov	r6,r23
10028f30:	183ee83a 	callr	r3
10028f34:	1021883a 	mov	r16,r2
10028f38:	00bfb30e 	bge	zero,r2,10028e08 <__sfvwrite_r+0x254>
10028f3c:	1023883a 	mov	r17,r2
10028f40:	1027883a 	mov	r19,r2
10028f44:	003f9b06 	br	10028db4 <__sfvwrite_r+0x200>
10028f48:	b80b883a 	mov	r5,r23
10028f4c:	800d883a 	mov	r6,r16
10028f50:	00296380 	call	10029638 <memmove>
10028f54:	90c00217 	ldw	r3,8(r18)
10028f58:	90800017 	ldw	r2,0(r18)
10028f5c:	8023883a 	mov	r17,r16
10028f60:	1c07c83a 	sub	r3,r3,r16
10028f64:	1405883a 	add	r2,r2,r16
10028f68:	90c00215 	stw	r3,8(r18)
10028f6c:	90800015 	stw	r2,0(r18)
10028f70:	003fc406 	br	10028e84 <__sfvwrite_r+0x2d0>
10028f74:	a00d883a 	mov	r6,r20
10028f78:	a021883a 	mov	r16,r20
10028f7c:	003f8106 	br	10028d84 <__sfvwrite_r+0x1d0>
10028f80:	b80b883a 	mov	r5,r23
10028f84:	a00d883a 	mov	r6,r20
10028f88:	00296380 	call	10029638 <memmove>
10028f8c:	90c00217 	ldw	r3,8(r18)
10028f90:	90800017 	ldw	r2,0(r18)
10028f94:	a021883a 	mov	r16,r20
10028f98:	1d07c83a 	sub	r3,r3,r20
10028f9c:	1505883a 	add	r2,r2,r20
10028fa0:	a023883a 	mov	r17,r20
10028fa4:	a027883a 	mov	r19,r20
10028fa8:	90c00215 	stw	r3,8(r18)
10028fac:	90800015 	stw	r2,0(r18)
10028fb0:	003f8006 	br	10028db4 <__sfvwrite_r+0x200>
10028fb4:	b809883a 	mov	r4,r23
10028fb8:	01400284 	movi	r5,10
10028fbc:	980d883a 	mov	r6,r19
10028fc0:	00295540 	call	10029554 <memchr>
10028fc4:	10001726 	beq	r2,zero,10029024 <__sfvwrite_r+0x470>
10028fc8:	15c5c83a 	sub	r2,r2,r23
10028fcc:	15000044 	addi	r20,r2,1
10028fd0:	00800044 	movi	r2,1
10028fd4:	d8800015 	stw	r2,0(sp)
10028fd8:	003f9806 	br	10028e3c <__sfvwrite_r+0x288>
10028fdc:	b80b883a 	mov	r5,r23
10028fe0:	800d883a 	mov	r6,r16
10028fe4:	00296380 	call	10029638 <memmove>
10028fe8:	90c00017 	ldw	r3,0(r18)
10028fec:	e009883a 	mov	r4,fp
10028ff0:	900b883a 	mov	r5,r18
10028ff4:	1c07883a 	add	r3,r3,r16
10028ff8:	90c00015 	stw	r3,0(r18)
10028ffc:	8027883a 	mov	r19,r16
10029000:	00280480 	call	10028048 <_fflush_r>
10029004:	103f6b26 	beq	r2,zero,10028db4 <__sfvwrite_r+0x200>
10029008:	003f7f06 	br	10028e08 <__sfvwrite_r+0x254>
1002900c:	400b883a 	mov	r5,r8
10029010:	e009883a 	mov	r4,fp
10029014:	002a9900 	call	1002a990 <_realloc_r>
10029018:	103f7626 	beq	r2,zero,10028df4 <__sfvwrite_r+0x240>
1002901c:	1023883a 	mov	r17,r2
10029020:	003f5006 	br	10028d64 <__sfvwrite_r+0x1b0>
10029024:	00c00044 	movi	r3,1
10029028:	9d000044 	addi	r20,r19,1
1002902c:	d8c00015 	stw	r3,0(sp)
10029030:	003f8206 	br	10028e3c <__sfvwrite_r+0x288>
10029034:	9080030b 	ldhu	r2,12(r18)
10029038:	00c00244 	movi	r3,9
1002903c:	013fffc4 	movi	r4,-1
10029040:	10801014 	ori	r2,r2,64
10029044:	9080030d 	sth	r2,12(r18)
10029048:	e0c00015 	stw	r3,0(fp)
1002904c:	003f0606 	br	10028c68 <__sfvwrite_r+0xb4>

10029050 <_fwalk_reent>:
10029050:	defff704 	addi	sp,sp,-36
10029054:	dcc00315 	stw	r19,12(sp)
10029058:	24c0b804 	addi	r19,r4,736
1002905c:	dd800615 	stw	r22,24(sp)
10029060:	dd400515 	stw	r21,20(sp)
10029064:	dfc00815 	stw	ra,32(sp)
10029068:	ddc00715 	stw	r23,28(sp)
1002906c:	dd000415 	stw	r20,16(sp)
10029070:	dc800215 	stw	r18,8(sp)
10029074:	dc400115 	stw	r17,4(sp)
10029078:	dc000015 	stw	r16,0(sp)
1002907c:	202b883a 	mov	r21,r4
10029080:	282d883a 	mov	r22,r5
10029084:	00282d00 	call	100282d0 <__sfp_lock_acquire>
10029088:	98002126 	beq	r19,zero,10029110 <_fwalk_reent+0xc0>
1002908c:	002f883a 	mov	r23,zero
10029090:	9c800117 	ldw	r18,4(r19)
10029094:	9c000217 	ldw	r16,8(r19)
10029098:	90bfffc4 	addi	r2,r18,-1
1002909c:	10000d16 	blt	r2,zero,100290d4 <_fwalk_reent+0x84>
100290a0:	0023883a 	mov	r17,zero
100290a4:	053fffc4 	movi	r20,-1
100290a8:	8080030f 	ldh	r2,12(r16)
100290ac:	8c400044 	addi	r17,r17,1
100290b0:	10000626 	beq	r2,zero,100290cc <_fwalk_reent+0x7c>
100290b4:	8080038f 	ldh	r2,14(r16)
100290b8:	800b883a 	mov	r5,r16
100290bc:	a809883a 	mov	r4,r21
100290c0:	15000226 	beq	r2,r20,100290cc <_fwalk_reent+0x7c>
100290c4:	b03ee83a 	callr	r22
100290c8:	b8aeb03a 	or	r23,r23,r2
100290cc:	84001704 	addi	r16,r16,92
100290d0:	947ff51e 	bne	r18,r17,100290a8 <_fwalk_reent+0x58>
100290d4:	9cc00017 	ldw	r19,0(r19)
100290d8:	983fed1e 	bne	r19,zero,10029090 <_fwalk_reent+0x40>
100290dc:	00282d40 	call	100282d4 <__sfp_lock_release>
100290e0:	b805883a 	mov	r2,r23
100290e4:	dfc00817 	ldw	ra,32(sp)
100290e8:	ddc00717 	ldw	r23,28(sp)
100290ec:	dd800617 	ldw	r22,24(sp)
100290f0:	dd400517 	ldw	r21,20(sp)
100290f4:	dd000417 	ldw	r20,16(sp)
100290f8:	dcc00317 	ldw	r19,12(sp)
100290fc:	dc800217 	ldw	r18,8(sp)
10029100:	dc400117 	ldw	r17,4(sp)
10029104:	dc000017 	ldw	r16,0(sp)
10029108:	dec00904 	addi	sp,sp,36
1002910c:	f800283a 	ret
10029110:	002f883a 	mov	r23,zero
10029114:	003ff106 	br	100290dc <_fwalk_reent+0x8c>

10029118 <_fwalk>:
10029118:	defff804 	addi	sp,sp,-32
1002911c:	dcc00315 	stw	r19,12(sp)
10029120:	24c0b804 	addi	r19,r4,736
10029124:	dd400515 	stw	r21,20(sp)
10029128:	dfc00715 	stw	ra,28(sp)
1002912c:	dd800615 	stw	r22,24(sp)
10029130:	dd000415 	stw	r20,16(sp)
10029134:	dc800215 	stw	r18,8(sp)
10029138:	dc400115 	stw	r17,4(sp)
1002913c:	dc000015 	stw	r16,0(sp)
10029140:	282b883a 	mov	r21,r5
10029144:	00282d00 	call	100282d0 <__sfp_lock_acquire>
10029148:	98001f26 	beq	r19,zero,100291c8 <_fwalk+0xb0>
1002914c:	002d883a 	mov	r22,zero
10029150:	9c800117 	ldw	r18,4(r19)
10029154:	9c000217 	ldw	r16,8(r19)
10029158:	90bfffc4 	addi	r2,r18,-1
1002915c:	10000c16 	blt	r2,zero,10029190 <_fwalk+0x78>
10029160:	0023883a 	mov	r17,zero
10029164:	053fffc4 	movi	r20,-1
10029168:	8080030f 	ldh	r2,12(r16)
1002916c:	8c400044 	addi	r17,r17,1
10029170:	10000526 	beq	r2,zero,10029188 <_fwalk+0x70>
10029174:	8080038f 	ldh	r2,14(r16)
10029178:	8009883a 	mov	r4,r16
1002917c:	15000226 	beq	r2,r20,10029188 <_fwalk+0x70>
10029180:	a83ee83a 	callr	r21
10029184:	b0acb03a 	or	r22,r22,r2
10029188:	84001704 	addi	r16,r16,92
1002918c:	947ff61e 	bne	r18,r17,10029168 <_fwalk+0x50>
10029190:	9cc00017 	ldw	r19,0(r19)
10029194:	983fee1e 	bne	r19,zero,10029150 <_fwalk+0x38>
10029198:	00282d40 	call	100282d4 <__sfp_lock_release>
1002919c:	b005883a 	mov	r2,r22
100291a0:	dfc00717 	ldw	ra,28(sp)
100291a4:	dd800617 	ldw	r22,24(sp)
100291a8:	dd400517 	ldw	r21,20(sp)
100291ac:	dd000417 	ldw	r20,16(sp)
100291b0:	dcc00317 	ldw	r19,12(sp)
100291b4:	dc800217 	ldw	r18,8(sp)
100291b8:	dc400117 	ldw	r17,4(sp)
100291bc:	dc000017 	ldw	r16,0(sp)
100291c0:	dec00804 	addi	sp,sp,32
100291c4:	f800283a 	ret
100291c8:	002d883a 	mov	r22,zero
100291cc:	003ff206 	br	10029198 <_fwalk+0x80>

100291d0 <iswspace>:
100291d0:	00803fc4 	movi	r2,255
100291d4:	0007883a 	mov	r3,zero
100291d8:	11000636 	bltu	r2,r4,100291f4 <iswspace+0x24>
100291dc:	00800034 	movhi	r2,0
100291e0:	108b0b04 	addi	r2,r2,11308
100291e4:	10c00017 	ldw	r3,0(r2)
100291e8:	1907883a 	add	r3,r3,r4
100291ec:	18800003 	ldbu	r2,0(r3)
100291f0:	10c0020c 	andi	r3,r2,8
100291f4:	1805883a 	mov	r2,r3
100291f8:	f800283a 	ret

100291fc <__locale_charset>:
100291fc:	d0a00617 	ldw	r2,-32744(gp)
10029200:	f800283a 	ret

10029204 <_localeconv_r>:
10029204:	00800034 	movhi	r2,0
10029208:	10838c04 	addi	r2,r2,3632
1002920c:	f800283a 	ret

10029210 <localeconv>:
10029210:	00800034 	movhi	r2,0
10029214:	108b0704 	addi	r2,r2,11292
10029218:	11000017 	ldw	r4,0(r2)
1002921c:	00292041 	jmpi	10029204 <_localeconv_r>

10029220 <_setlocale_r>:
10029220:	defffc04 	addi	sp,sp,-16
10029224:	00c00034 	movhi	r3,0
10029228:	18c2b704 	addi	r3,r3,2780
1002922c:	dc800215 	stw	r18,8(sp)
10029230:	dc400115 	stw	r17,4(sp)
10029234:	dc000015 	stw	r16,0(sp)
10029238:	2023883a 	mov	r17,r4
1002923c:	2825883a 	mov	r18,r5
10029240:	dfc00315 	stw	ra,12(sp)
10029244:	3021883a 	mov	r16,r6
10029248:	3009883a 	mov	r4,r6
1002924c:	180b883a 	mov	r5,r3
10029250:	30000926 	beq	r6,zero,10029278 <_setlocale_r+0x58>
10029254:	002b4bc0 	call	1002b4bc <strcmp>
10029258:	8009883a 	mov	r4,r16
1002925c:	01400034 	movhi	r5,0
10029260:	2942c804 	addi	r5,r5,2848
10029264:	10000b1e 	bne	r2,zero,10029294 <_setlocale_r+0x74>
10029268:	8c000d15 	stw	r16,52(r17)
1002926c:	8c800c15 	stw	r18,48(r17)
10029270:	00c00034 	movhi	r3,0
10029274:	18c2b704 	addi	r3,r3,2780
10029278:	1805883a 	mov	r2,r3
1002927c:	dfc00317 	ldw	ra,12(sp)
10029280:	dc800217 	ldw	r18,8(sp)
10029284:	dc400117 	ldw	r17,4(sp)
10029288:	dc000017 	ldw	r16,0(sp)
1002928c:	dec00404 	addi	sp,sp,16
10029290:	f800283a 	ret
10029294:	002b4bc0 	call	1002b4bc <strcmp>
10029298:	0007883a 	mov	r3,zero
1002929c:	103ff226 	beq	r2,zero,10029268 <_setlocale_r+0x48>
100292a0:	003ff506 	br	10029278 <_setlocale_r+0x58>

100292a4 <setlocale>:
100292a4:	01800034 	movhi	r6,0
100292a8:	318b0704 	addi	r6,r6,11292
100292ac:	2007883a 	mov	r3,r4
100292b0:	31000017 	ldw	r4,0(r6)
100292b4:	280d883a 	mov	r6,r5
100292b8:	180b883a 	mov	r5,r3
100292bc:	00292201 	jmpi	10029220 <_setlocale_r>

100292c0 <__smakebuf_r>:
100292c0:	2880030b 	ldhu	r2,12(r5)
100292c4:	deffed04 	addi	sp,sp,-76
100292c8:	dc401015 	stw	r17,64(sp)
100292cc:	1080008c 	andi	r2,r2,2
100292d0:	dc000f15 	stw	r16,60(sp)
100292d4:	dfc01215 	stw	ra,72(sp)
100292d8:	dc801115 	stw	r18,68(sp)
100292dc:	2821883a 	mov	r16,r5
100292e0:	2023883a 	mov	r17,r4
100292e4:	10000b26 	beq	r2,zero,10029314 <__smakebuf_r+0x54>
100292e8:	28c010c4 	addi	r3,r5,67
100292ec:	00800044 	movi	r2,1
100292f0:	28800515 	stw	r2,20(r5)
100292f4:	28c00415 	stw	r3,16(r5)
100292f8:	28c00015 	stw	r3,0(r5)
100292fc:	dfc01217 	ldw	ra,72(sp)
10029300:	dc801117 	ldw	r18,68(sp)
10029304:	dc401017 	ldw	r17,64(sp)
10029308:	dc000f17 	ldw	r16,60(sp)
1002930c:	dec01304 	addi	sp,sp,76
10029310:	f800283a 	ret
10029314:	2940038f 	ldh	r5,14(r5)
10029318:	28002116 	blt	r5,zero,100293a0 <__smakebuf_r+0xe0>
1002931c:	d80d883a 	mov	r6,sp
10029320:	002dd480 	call	1002dd48 <_fstat_r>
10029324:	10001e16 	blt	r2,zero,100293a0 <__smakebuf_r+0xe0>
10029328:	d8800117 	ldw	r2,4(sp)
1002932c:	00e00014 	movui	r3,32768
10029330:	113c000c 	andi	r4,r2,61440
10029334:	20c03126 	beq	r4,r3,100293fc <__smakebuf_r+0x13c>
10029338:	8080030b 	ldhu	r2,12(r16)
1002933c:	00c80004 	movi	r3,8192
10029340:	10820014 	ori	r2,r2,2048
10029344:	8080030d 	sth	r2,12(r16)
10029348:	20c01e26 	beq	r4,r3,100293c4 <__smakebuf_r+0x104>
1002934c:	04810004 	movi	r18,1024
10029350:	8809883a 	mov	r4,r17
10029354:	900b883a 	mov	r5,r18
10029358:	002249c0 	call	1002249c <_malloc_r>
1002935c:	1009883a 	mov	r4,r2
10029360:	10003126 	beq	r2,zero,10029428 <__smakebuf_r+0x168>
10029364:	80c0030b 	ldhu	r3,12(r16)
10029368:	008400f4 	movhi	r2,4099
1002936c:	10a0f104 	addi	r2,r2,-31804
10029370:	88800f15 	stw	r2,60(r17)
10029374:	18c02014 	ori	r3,r3,128
10029378:	84800515 	stw	r18,20(r16)
1002937c:	80c0030d 	sth	r3,12(r16)
10029380:	81000415 	stw	r4,16(r16)
10029384:	81000015 	stw	r4,0(r16)
10029388:	dfc01217 	ldw	ra,72(sp)
1002938c:	dc801117 	ldw	r18,68(sp)
10029390:	dc401017 	ldw	r17,64(sp)
10029394:	dc000f17 	ldw	r16,60(sp)
10029398:	dec01304 	addi	sp,sp,76
1002939c:	f800283a 	ret
100293a0:	80c0030b 	ldhu	r3,12(r16)
100293a4:	1880200c 	andi	r2,r3,128
100293a8:	10000426 	beq	r2,zero,100293bc <__smakebuf_r+0xfc>
100293ac:	04801004 	movi	r18,64
100293b0:	18820014 	ori	r2,r3,2048
100293b4:	8080030d 	sth	r2,12(r16)
100293b8:	003fe506 	br	10029350 <__smakebuf_r+0x90>
100293bc:	04810004 	movi	r18,1024
100293c0:	003ffb06 	br	100293b0 <__smakebuf_r+0xf0>
100293c4:	8140038f 	ldh	r5,14(r16)
100293c8:	8809883a 	mov	r4,r17
100293cc:	002e9440 	call	1002e944 <_isatty_r>
100293d0:	103fde26 	beq	r2,zero,1002934c <__smakebuf_r+0x8c>
100293d4:	8080030b 	ldhu	r2,12(r16)
100293d8:	80c010c4 	addi	r3,r16,67
100293dc:	04810004 	movi	r18,1024
100293e0:	10800054 	ori	r2,r2,1
100293e4:	8080030d 	sth	r2,12(r16)
100293e8:	00800044 	movi	r2,1
100293ec:	80c00415 	stw	r3,16(r16)
100293f0:	80800515 	stw	r2,20(r16)
100293f4:	80c00015 	stw	r3,0(r16)
100293f8:	003fd506 	br	10029350 <__smakebuf_r+0x90>
100293fc:	80c00a17 	ldw	r3,40(r16)
10029400:	008400f4 	movhi	r2,4099
10029404:	10acde04 	addi	r2,r2,-19592
10029408:	18bfcb1e 	bne	r3,r2,10029338 <__smakebuf_r+0x78>
1002940c:	8080030b 	ldhu	r2,12(r16)
10029410:	00c10004 	movi	r3,1024
10029414:	1825883a 	mov	r18,r3
10029418:	10c4b03a 	or	r2,r2,r3
1002941c:	8080030d 	sth	r2,12(r16)
10029420:	80c01315 	stw	r3,76(r16)
10029424:	003fca06 	br	10029350 <__smakebuf_r+0x90>
10029428:	8100030b 	ldhu	r4,12(r16)
1002942c:	2080800c 	andi	r2,r4,512
10029430:	103fb21e 	bne	r2,zero,100292fc <__smakebuf_r+0x3c>
10029434:	80c010c4 	addi	r3,r16,67
10029438:	21000094 	ori	r4,r4,2
1002943c:	00800044 	movi	r2,1
10029440:	80800515 	stw	r2,20(r16)
10029444:	8100030d 	sth	r4,12(r16)
10029448:	80c00415 	stw	r3,16(r16)
1002944c:	80c00015 	stw	r3,0(r16)
10029450:	003faa06 	br	100292fc <__smakebuf_r+0x3c>

10029454 <_mbrtowc_r>:
10029454:	defffc04 	addi	sp,sp,-16
10029458:	dc400215 	stw	r17,8(sp)
1002945c:	dc000115 	stw	r16,4(sp)
10029460:	dfc00315 	stw	ra,12(sp)
10029464:	dc000417 	ldw	r16,16(sp)
10029468:	2023883a 	mov	r17,r4
1002946c:	30000f26 	beq	r6,zero,100294ac <_mbrtowc_r+0x58>
10029470:	dc000015 	stw	r16,0(sp)
10029474:	00295140 	call	10029514 <_mbtowc_r>
10029478:	1007883a 	mov	r3,r2
1002947c:	00bfffc4 	movi	r2,-1
10029480:	1809883a 	mov	r4,r3
10029484:	1880111e 	bne	r3,r2,100294cc <_mbrtowc_r+0x78>
10029488:	80000015 	stw	zero,0(r16)
1002948c:	00802284 	movi	r2,138
10029490:	88800015 	stw	r2,0(r17)
10029494:	2005883a 	mov	r2,r4
10029498:	dfc00317 	ldw	ra,12(sp)
1002949c:	dc400217 	ldw	r17,8(sp)
100294a0:	dc000117 	ldw	r16,4(sp)
100294a4:	dec00404 	addi	sp,sp,16
100294a8:	f800283a 	ret
100294ac:	000b883a 	mov	r5,zero
100294b0:	01800034 	movhi	r6,0
100294b4:	3182c804 	addi	r6,r6,2848
100294b8:	01c00044 	movi	r7,1
100294bc:	dc000015 	stw	r16,0(sp)
100294c0:	00295140 	call	10029514 <_mbtowc_r>
100294c4:	1007883a 	mov	r3,r2
100294c8:	003fec06 	br	1002947c <_mbrtowc_r+0x28>
100294cc:	1809883a 	mov	r4,r3
100294d0:	003ff006 	br	10029494 <_mbrtowc_r+0x40>

100294d4 <mbrtowc>:
100294d4:	00800034 	movhi	r2,0
100294d8:	108b0704 	addi	r2,r2,11292
100294dc:	2017883a 	mov	r11,r4
100294e0:	11000017 	ldw	r4,0(r2)
100294e4:	defffe04 	addi	sp,sp,-8
100294e8:	3013883a 	mov	r9,r6
100294ec:	2805883a 	mov	r2,r5
100294f0:	d9c00015 	stw	r7,0(sp)
100294f4:	580b883a 	mov	r5,r11
100294f8:	100d883a 	mov	r6,r2
100294fc:	480f883a 	mov	r7,r9
10029500:	dfc00115 	stw	ra,4(sp)
10029504:	00294540 	call	10029454 <_mbrtowc_r>
10029508:	dfc00117 	ldw	ra,4(sp)
1002950c:	dec00204 	addi	sp,sp,8
10029510:	f800283a 	ret

10029514 <_mbtowc_r>:
10029514:	deffff04 	addi	sp,sp,-4
10029518:	0005883a 	mov	r2,zero
1002951c:	28000326 	beq	r5,zero,1002952c <_mbtowc_r+0x18>
10029520:	3000041e 	bne	r6,zero,10029534 <_mbtowc_r+0x20>
10029524:	dec00104 	addi	sp,sp,4
10029528:	f800283a 	ret
1002952c:	d80b883a 	mov	r5,sp
10029530:	303ffc26 	beq	r6,zero,10029524 <_mbtowc_r+0x10>
10029534:	00bfff84 	movi	r2,-2
10029538:	383ffa26 	beq	r7,zero,10029524 <_mbtowc_r+0x10>
1002953c:	30800003 	ldbu	r2,0(r6)
10029540:	28800015 	stw	r2,0(r5)
10029544:	30c00003 	ldbu	r3,0(r6)
10029548:	1804c03a 	cmpne	r2,r3,zero
1002954c:	dec00104 	addi	sp,sp,4
10029550:	f800283a 	ret

10029554 <memchr>:
10029554:	008000c4 	movi	r2,3
10029558:	29403fcc 	andi	r5,r5,255
1002955c:	2007883a 	mov	r3,r4
10029560:	1180022e 	bgeu	r2,r6,1002956c <memchr+0x18>
10029564:	2084703a 	and	r2,r4,r2
10029568:	10000b26 	beq	r2,zero,10029598 <memchr+0x44>
1002956c:	313fffc4 	addi	r4,r6,-1
10029570:	3000051e 	bne	r6,zero,10029588 <memchr+0x34>
10029574:	00002c06 	br	10029628 <memchr+0xd4>
10029578:	213fffc4 	addi	r4,r4,-1
1002957c:	00bfffc4 	movi	r2,-1
10029580:	18c00044 	addi	r3,r3,1
10029584:	20802826 	beq	r4,r2,10029628 <memchr+0xd4>
10029588:	18800003 	ldbu	r2,0(r3)
1002958c:	28bffa1e 	bne	r5,r2,10029578 <memchr+0x24>
10029590:	1805883a 	mov	r2,r3
10029594:	f800283a 	ret
10029598:	0011883a 	mov	r8,zero
1002959c:	0007883a 	mov	r3,zero
100295a0:	01c00104 	movi	r7,4
100295a4:	4004923a 	slli	r2,r8,8
100295a8:	18c00044 	addi	r3,r3,1
100295ac:	1151883a 	add	r8,r2,r5
100295b0:	19fffc1e 	bne	r3,r7,100295a4 <memchr+0x50>
100295b4:	02bfbff4 	movhi	r10,65279
100295b8:	52bfbfc4 	addi	r10,r10,-257
100295bc:	02602074 	movhi	r9,32897
100295c0:	4a602004 	addi	r9,r9,-32640
100295c4:	02c000c4 	movi	r11,3
100295c8:	20800017 	ldw	r2,0(r4)
100295cc:	31bfff04 	addi	r6,r6,-4
100295d0:	200f883a 	mov	r7,r4
100295d4:	1204f03a 	xor	r2,r2,r8
100295d8:	1287883a 	add	r3,r2,r10
100295dc:	1a46703a 	and	r3,r3,r9
100295e0:	0084303a 	nor	r2,zero,r2
100295e4:	10c4703a 	and	r2,r2,r3
100295e8:	10000b26 	beq	r2,zero,10029618 <memchr+0xc4>
100295ec:	20800003 	ldbu	r2,0(r4)
100295f0:	28800f26 	beq	r5,r2,10029630 <memchr+0xdc>
100295f4:	20800043 	ldbu	r2,1(r4)
100295f8:	21c00044 	addi	r7,r4,1
100295fc:	28800c26 	beq	r5,r2,10029630 <memchr+0xdc>
10029600:	20800083 	ldbu	r2,2(r4)
10029604:	21c00084 	addi	r7,r4,2
10029608:	28800926 	beq	r5,r2,10029630 <memchr+0xdc>
1002960c:	208000c3 	ldbu	r2,3(r4)
10029610:	21c000c4 	addi	r7,r4,3
10029614:	28800626 	beq	r5,r2,10029630 <memchr+0xdc>
10029618:	21000104 	addi	r4,r4,4
1002961c:	59bfea36 	bltu	r11,r6,100295c8 <memchr+0x74>
10029620:	2007883a 	mov	r3,r4
10029624:	003fd106 	br	1002956c <memchr+0x18>
10029628:	0005883a 	mov	r2,zero
1002962c:	f800283a 	ret
10029630:	3805883a 	mov	r2,r7
10029634:	f800283a 	ret

10029638 <memmove>:
10029638:	2807883a 	mov	r3,r5
1002963c:	2011883a 	mov	r8,r4
10029640:	29000c2e 	bgeu	r5,r4,10029674 <memmove+0x3c>
10029644:	298f883a 	add	r7,r5,r6
10029648:	21c00a2e 	bgeu	r4,r7,10029674 <memmove+0x3c>
1002964c:	30000726 	beq	r6,zero,1002966c <memmove+0x34>
10029650:	2187883a 	add	r3,r4,r6
10029654:	198dc83a 	sub	r6,r3,r6
10029658:	39ffffc4 	addi	r7,r7,-1
1002965c:	38800003 	ldbu	r2,0(r7)
10029660:	18ffffc4 	addi	r3,r3,-1
10029664:	18800005 	stb	r2,0(r3)
10029668:	19bffb1e 	bne	r3,r6,10029658 <memmove+0x20>
1002966c:	2005883a 	mov	r2,r4
10029670:	f800283a 	ret
10029674:	01c003c4 	movi	r7,15
10029678:	39800a36 	bltu	r7,r6,100296a4 <memmove+0x6c>
1002967c:	303ffb26 	beq	r6,zero,1002966c <memmove+0x34>
10029680:	400f883a 	mov	r7,r8
10029684:	320d883a 	add	r6,r6,r8
10029688:	28800003 	ldbu	r2,0(r5)
1002968c:	29400044 	addi	r5,r5,1
10029690:	38800005 	stb	r2,0(r7)
10029694:	39c00044 	addi	r7,r7,1
10029698:	39bffb1e 	bne	r7,r6,10029688 <memmove+0x50>
1002969c:	2005883a 	mov	r2,r4
100296a0:	f800283a 	ret
100296a4:	1904b03a 	or	r2,r3,r4
100296a8:	108000cc 	andi	r2,r2,3
100296ac:	103ff31e 	bne	r2,zero,1002967c <memmove+0x44>
100296b0:	3811883a 	mov	r8,r7
100296b4:	180b883a 	mov	r5,r3
100296b8:	200f883a 	mov	r7,r4
100296bc:	28c00017 	ldw	r3,0(r5)
100296c0:	31bffc04 	addi	r6,r6,-16
100296c4:	38c00015 	stw	r3,0(r7)
100296c8:	28800117 	ldw	r2,4(r5)
100296cc:	38800115 	stw	r2,4(r7)
100296d0:	28c00217 	ldw	r3,8(r5)
100296d4:	38c00215 	stw	r3,8(r7)
100296d8:	28800317 	ldw	r2,12(r5)
100296dc:	29400404 	addi	r5,r5,16
100296e0:	38800315 	stw	r2,12(r7)
100296e4:	39c00404 	addi	r7,r7,16
100296e8:	41bff436 	bltu	r8,r6,100296bc <memmove+0x84>
100296ec:	008000c4 	movi	r2,3
100296f0:	1180072e 	bgeu	r2,r6,10029710 <memmove+0xd8>
100296f4:	1007883a 	mov	r3,r2
100296f8:	28800017 	ldw	r2,0(r5)
100296fc:	31bfff04 	addi	r6,r6,-4
10029700:	29400104 	addi	r5,r5,4
10029704:	38800015 	stw	r2,0(r7)
10029708:	39c00104 	addi	r7,r7,4
1002970c:	19bffa36 	bltu	r3,r6,100296f8 <memmove+0xc0>
10029710:	3811883a 	mov	r8,r7
10029714:	003fd906 	br	1002967c <memmove+0x44>

10029718 <memset>:
10029718:	008000c4 	movi	r2,3
1002971c:	29403fcc 	andi	r5,r5,255
10029720:	2007883a 	mov	r3,r4
10029724:	1180022e 	bgeu	r2,r6,10029730 <memset+0x18>
10029728:	2084703a 	and	r2,r4,r2
1002972c:	10000826 	beq	r2,zero,10029750 <memset+0x38>
10029730:	30000526 	beq	r6,zero,10029748 <memset+0x30>
10029734:	2805883a 	mov	r2,r5
10029738:	30cd883a 	add	r6,r6,r3
1002973c:	18800005 	stb	r2,0(r3)
10029740:	18c00044 	addi	r3,r3,1
10029744:	19bffd1e 	bne	r3,r6,1002973c <memset+0x24>
10029748:	2005883a 	mov	r2,r4
1002974c:	f800283a 	ret
10029750:	2804923a 	slli	r2,r5,8
10029754:	020003c4 	movi	r8,15
10029758:	200f883a 	mov	r7,r4
1002975c:	2884b03a 	or	r2,r5,r2
10029760:	1006943a 	slli	r3,r2,16
10029764:	10c6b03a 	or	r3,r2,r3
10029768:	41800a2e 	bgeu	r8,r6,10029794 <memset+0x7c>
1002976c:	4005883a 	mov	r2,r8
10029770:	31bffc04 	addi	r6,r6,-16
10029774:	38c00015 	stw	r3,0(r7)
10029778:	38c00115 	stw	r3,4(r7)
1002977c:	38c00215 	stw	r3,8(r7)
10029780:	38c00315 	stw	r3,12(r7)
10029784:	39c00404 	addi	r7,r7,16
10029788:	11bff936 	bltu	r2,r6,10029770 <memset+0x58>
1002978c:	008000c4 	movi	r2,3
10029790:	1180052e 	bgeu	r2,r6,100297a8 <memset+0x90>
10029794:	31bfff04 	addi	r6,r6,-4
10029798:	008000c4 	movi	r2,3
1002979c:	38c00015 	stw	r3,0(r7)
100297a0:	39c00104 	addi	r7,r7,4
100297a4:	11bffb36 	bltu	r2,r6,10029794 <memset+0x7c>
100297a8:	3807883a 	mov	r3,r7
100297ac:	003fe006 	br	10029730 <memset+0x18>

100297b0 <_Bfree>:
100297b0:	28000826 	beq	r5,zero,100297d4 <_Bfree+0x24>
100297b4:	28800117 	ldw	r2,4(r5)
100297b8:	21001317 	ldw	r4,76(r4)
100297bc:	1085883a 	add	r2,r2,r2
100297c0:	1085883a 	add	r2,r2,r2
100297c4:	1105883a 	add	r2,r2,r4
100297c8:	10c00017 	ldw	r3,0(r2)
100297cc:	28c00015 	stw	r3,0(r5)
100297d0:	11400015 	stw	r5,0(r2)
100297d4:	f800283a 	ret

100297d8 <__hi0bits>:
100297d8:	20bfffec 	andhi	r2,r4,65535
100297dc:	10001426 	beq	r2,zero,10029830 <__hi0bits+0x58>
100297e0:	0007883a 	mov	r3,zero
100297e4:	20bfc02c 	andhi	r2,r4,65280
100297e8:	1000021e 	bne	r2,zero,100297f4 <__hi0bits+0x1c>
100297ec:	2008923a 	slli	r4,r4,8
100297f0:	18c00204 	addi	r3,r3,8
100297f4:	20bc002c 	andhi	r2,r4,61440
100297f8:	1000021e 	bne	r2,zero,10029804 <__hi0bits+0x2c>
100297fc:	2008913a 	slli	r4,r4,4
10029800:	18c00104 	addi	r3,r3,4
10029804:	20b0002c 	andhi	r2,r4,49152
10029808:	1000031e 	bne	r2,zero,10029818 <__hi0bits+0x40>
1002980c:	2105883a 	add	r2,r4,r4
10029810:	18c00084 	addi	r3,r3,2
10029814:	1089883a 	add	r4,r2,r2
10029818:	20000316 	blt	r4,zero,10029828 <__hi0bits+0x50>
1002981c:	2090002c 	andhi	r2,r4,16384
10029820:	10000626 	beq	r2,zero,1002983c <__hi0bits+0x64>
10029824:	18c00044 	addi	r3,r3,1
10029828:	1805883a 	mov	r2,r3
1002982c:	f800283a 	ret
10029830:	2008943a 	slli	r4,r4,16
10029834:	00c00404 	movi	r3,16
10029838:	003fea06 	br	100297e4 <__hi0bits+0xc>
1002983c:	00c00804 	movi	r3,32
10029840:	1805883a 	mov	r2,r3
10029844:	f800283a 	ret

10029848 <__lo0bits>:
10029848:	20c00017 	ldw	r3,0(r4)
1002984c:	188001cc 	andi	r2,r3,7
10029850:	10000a26 	beq	r2,zero,1002987c <__lo0bits+0x34>
10029854:	1880004c 	andi	r2,r3,1
10029858:	1005003a 	cmpeq	r2,r2,zero
1002985c:	10002126 	beq	r2,zero,100298e4 <__lo0bits+0x9c>
10029860:	1880008c 	andi	r2,r3,2
10029864:	1000251e 	bne	r2,zero,100298fc <__lo0bits+0xb4>
10029868:	1804d0ba 	srli	r2,r3,2
1002986c:	01400084 	movi	r5,2
10029870:	20800015 	stw	r2,0(r4)
10029874:	2805883a 	mov	r2,r5
10029878:	f800283a 	ret
1002987c:	18bfffcc 	andi	r2,r3,65535
10029880:	10001526 	beq	r2,zero,100298d8 <__lo0bits+0x90>
10029884:	000b883a 	mov	r5,zero
10029888:	18803fcc 	andi	r2,r3,255
1002988c:	1000021e 	bne	r2,zero,10029898 <__lo0bits+0x50>
10029890:	1806d23a 	srli	r3,r3,8
10029894:	29400204 	addi	r5,r5,8
10029898:	188003cc 	andi	r2,r3,15
1002989c:	1000021e 	bne	r2,zero,100298a8 <__lo0bits+0x60>
100298a0:	1806d13a 	srli	r3,r3,4
100298a4:	29400104 	addi	r5,r5,4
100298a8:	188000cc 	andi	r2,r3,3
100298ac:	1000021e 	bne	r2,zero,100298b8 <__lo0bits+0x70>
100298b0:	1806d0ba 	srli	r3,r3,2
100298b4:	29400084 	addi	r5,r5,2
100298b8:	1880004c 	andi	r2,r3,1
100298bc:	1000031e 	bne	r2,zero,100298cc <__lo0bits+0x84>
100298c0:	1806d07a 	srli	r3,r3,1
100298c4:	18000a26 	beq	r3,zero,100298f0 <__lo0bits+0xa8>
100298c8:	29400044 	addi	r5,r5,1
100298cc:	2805883a 	mov	r2,r5
100298d0:	20c00015 	stw	r3,0(r4)
100298d4:	f800283a 	ret
100298d8:	1806d43a 	srli	r3,r3,16
100298dc:	01400404 	movi	r5,16
100298e0:	003fe906 	br	10029888 <__lo0bits+0x40>
100298e4:	000b883a 	mov	r5,zero
100298e8:	2805883a 	mov	r2,r5
100298ec:	f800283a 	ret
100298f0:	01400804 	movi	r5,32
100298f4:	2805883a 	mov	r2,r5
100298f8:	f800283a 	ret
100298fc:	1804d07a 	srli	r2,r3,1
10029900:	01400044 	movi	r5,1
10029904:	20800015 	stw	r2,0(r4)
10029908:	003fda06 	br	10029874 <__lo0bits+0x2c>

1002990c <__mcmp>:
1002990c:	20800417 	ldw	r2,16(r4)
10029910:	28c00417 	ldw	r3,16(r5)
10029914:	10cfc83a 	sub	r7,r2,r3
10029918:	38000c1e 	bne	r7,zero,1002994c <__mcmp+0x40>
1002991c:	18c5883a 	add	r2,r3,r3
10029920:	1085883a 	add	r2,r2,r2
10029924:	10c00504 	addi	r3,r2,20
10029928:	21000504 	addi	r4,r4,20
1002992c:	28cb883a 	add	r5,r5,r3
10029930:	2085883a 	add	r2,r4,r2
10029934:	10bfff04 	addi	r2,r2,-4
10029938:	297fff04 	addi	r5,r5,-4
1002993c:	11800017 	ldw	r6,0(r2)
10029940:	28c00017 	ldw	r3,0(r5)
10029944:	30c0031e 	bne	r6,r3,10029954 <__mcmp+0x48>
10029948:	20bffa36 	bltu	r4,r2,10029934 <__mcmp+0x28>
1002994c:	3805883a 	mov	r2,r7
10029950:	f800283a 	ret
10029954:	30c00336 	bltu	r6,r3,10029964 <__mcmp+0x58>
10029958:	01c00044 	movi	r7,1
1002995c:	3805883a 	mov	r2,r7
10029960:	f800283a 	ret
10029964:	01ffffc4 	movi	r7,-1
10029968:	003ff806 	br	1002994c <__mcmp+0x40>

1002996c <__ulp>:
1002996c:	295ffc2c 	andhi	r5,r5,32752
10029970:	013f3034 	movhi	r4,64704
10029974:	290b883a 	add	r5,r5,r4
10029978:	0145c83a 	sub	r2,zero,r5
1002997c:	1007d53a 	srai	r3,r2,20
10029980:	000d883a 	mov	r6,zero
10029984:	0140040e 	bge	zero,r5,10029998 <__ulp+0x2c>
10029988:	280f883a 	mov	r7,r5
1002998c:	3807883a 	mov	r3,r7
10029990:	3005883a 	mov	r2,r6
10029994:	f800283a 	ret
10029998:	008004c4 	movi	r2,19
1002999c:	193ffb04 	addi	r4,r3,-20
100299a0:	10c00c0e 	bge	r2,r3,100299d4 <__ulp+0x68>
100299a4:	008007c4 	movi	r2,31
100299a8:	1107c83a 	sub	r3,r2,r4
100299ac:	00800784 	movi	r2,30
100299b0:	01400044 	movi	r5,1
100299b4:	11000216 	blt	r2,r4,100299c0 <__ulp+0x54>
100299b8:	00800044 	movi	r2,1
100299bc:	10ca983a 	sll	r5,r2,r3
100299c0:	000f883a 	mov	r7,zero
100299c4:	280d883a 	mov	r6,r5
100299c8:	3807883a 	mov	r3,r7
100299cc:	3005883a 	mov	r2,r6
100299d0:	f800283a 	ret
100299d4:	00800234 	movhi	r2,8
100299d8:	10cfd83a 	sra	r7,r2,r3
100299dc:	000d883a 	mov	r6,zero
100299e0:	3005883a 	mov	r2,r6
100299e4:	3807883a 	mov	r3,r7
100299e8:	f800283a 	ret

100299ec <__b2d>:
100299ec:	20800417 	ldw	r2,16(r4)
100299f0:	defff904 	addi	sp,sp,-28
100299f4:	dd000415 	stw	r20,16(sp)
100299f8:	1085883a 	add	r2,r2,r2
100299fc:	25000504 	addi	r20,r4,20
10029a00:	1085883a 	add	r2,r2,r2
10029a04:	dc000015 	stw	r16,0(sp)
10029a08:	a0a1883a 	add	r16,r20,r2
10029a0c:	dd400515 	stw	r21,20(sp)
10029a10:	857fff17 	ldw	r21,-4(r16)
10029a14:	dc400115 	stw	r17,4(sp)
10029a18:	dfc00615 	stw	ra,24(sp)
10029a1c:	a809883a 	mov	r4,r21
10029a20:	2823883a 	mov	r17,r5
10029a24:	dcc00315 	stw	r19,12(sp)
10029a28:	dc800215 	stw	r18,8(sp)
10029a2c:	00297d80 	call	100297d8 <__hi0bits>
10029a30:	100b883a 	mov	r5,r2
10029a34:	00800804 	movi	r2,32
10029a38:	1145c83a 	sub	r2,r2,r5
10029a3c:	88800015 	stw	r2,0(r17)
10029a40:	00800284 	movi	r2,10
10029a44:	80ffff04 	addi	r3,r16,-4
10029a48:	11401416 	blt	r2,r5,10029a9c <__b2d+0xb0>
10029a4c:	008002c4 	movi	r2,11
10029a50:	1149c83a 	sub	r4,r2,r5
10029a54:	a0c02736 	bltu	r20,r3,10029af4 <__b2d+0x108>
10029a58:	000d883a 	mov	r6,zero
10029a5c:	28800544 	addi	r2,r5,21
10029a60:	a906d83a 	srl	r3,r21,r4
10029a64:	a884983a 	sll	r2,r21,r2
10029a68:	1ccffc34 	orhi	r19,r3,16368
10029a6c:	11a4b03a 	or	r18,r2,r6
10029a70:	9005883a 	mov	r2,r18
10029a74:	9807883a 	mov	r3,r19
10029a78:	dfc00617 	ldw	ra,24(sp)
10029a7c:	dd400517 	ldw	r21,20(sp)
10029a80:	dd000417 	ldw	r20,16(sp)
10029a84:	dcc00317 	ldw	r19,12(sp)
10029a88:	dc800217 	ldw	r18,8(sp)
10029a8c:	dc400117 	ldw	r17,4(sp)
10029a90:	dc000017 	ldw	r16,0(sp)
10029a94:	dec00704 	addi	sp,sp,28
10029a98:	f800283a 	ret
10029a9c:	a0c00e36 	bltu	r20,r3,10029ad8 <__b2d+0xec>
10029aa0:	293ffd44 	addi	r4,r5,-11
10029aa4:	000d883a 	mov	r6,zero
10029aa8:	20000f26 	beq	r4,zero,10029ae8 <__b2d+0xfc>
10029aac:	00800804 	movi	r2,32
10029ab0:	110bc83a 	sub	r5,r2,r4
10029ab4:	a0c01236 	bltu	r20,r3,10029b00 <__b2d+0x114>
10029ab8:	000f883a 	mov	r7,zero
10029abc:	a904983a 	sll	r2,r21,r4
10029ac0:	3146d83a 	srl	r3,r6,r5
10029ac4:	3108983a 	sll	r4,r6,r4
10029ac8:	108ffc34 	orhi	r2,r2,16368
10029acc:	18a6b03a 	or	r19,r3,r2
10029ad0:	3924b03a 	or	r18,r7,r4
10029ad4:	003fe606 	br	10029a70 <__b2d+0x84>
10029ad8:	293ffd44 	addi	r4,r5,-11
10029adc:	81bffe17 	ldw	r6,-8(r16)
10029ae0:	80fffe04 	addi	r3,r16,-8
10029ae4:	203ff11e 	bne	r4,zero,10029aac <__b2d+0xc0>
10029ae8:	accffc34 	orhi	r19,r21,16368
10029aec:	3025883a 	mov	r18,r6
10029af0:	003fdf06 	br	10029a70 <__b2d+0x84>
10029af4:	18bfff17 	ldw	r2,-4(r3)
10029af8:	110cd83a 	srl	r6,r2,r4
10029afc:	003fd706 	br	10029a5c <__b2d+0x70>
10029b00:	18bfff17 	ldw	r2,-4(r3)
10029b04:	114ed83a 	srl	r7,r2,r5
10029b08:	003fec06 	br	10029abc <__b2d+0xd0>

10029b0c <__ratio>:
10029b0c:	defff904 	addi	sp,sp,-28
10029b10:	dc400215 	stw	r17,8(sp)
10029b14:	2823883a 	mov	r17,r5
10029b18:	d80b883a 	mov	r5,sp
10029b1c:	dfc00615 	stw	ra,24(sp)
10029b20:	dd000515 	stw	r20,20(sp)
10029b24:	dcc00415 	stw	r19,16(sp)
10029b28:	dc800315 	stw	r18,12(sp)
10029b2c:	2025883a 	mov	r18,r4
10029b30:	00299ec0 	call	100299ec <__b2d>
10029b34:	8809883a 	mov	r4,r17
10029b38:	d9400104 	addi	r5,sp,4
10029b3c:	1027883a 	mov	r19,r2
10029b40:	1829883a 	mov	r20,r3
10029b44:	00299ec0 	call	100299ec <__b2d>
10029b48:	89000417 	ldw	r4,16(r17)
10029b4c:	91c00417 	ldw	r7,16(r18)
10029b50:	d9800117 	ldw	r6,4(sp)
10029b54:	180b883a 	mov	r5,r3
10029b58:	390fc83a 	sub	r7,r7,r4
10029b5c:	1009883a 	mov	r4,r2
10029b60:	d8800017 	ldw	r2,0(sp)
10029b64:	380e917a 	slli	r7,r7,5
10029b68:	2011883a 	mov	r8,r4
10029b6c:	1185c83a 	sub	r2,r2,r6
10029b70:	11c5883a 	add	r2,r2,r7
10029b74:	1006953a 	slli	r3,r2,20
10029b78:	2813883a 	mov	r9,r5
10029b7c:	00800d0e 	bge	zero,r2,10029bb4 <__ratio+0xa8>
10029b80:	1d29883a 	add	r20,r3,r20
10029b84:	a00b883a 	mov	r5,r20
10029b88:	480f883a 	mov	r7,r9
10029b8c:	9809883a 	mov	r4,r19
10029b90:	400d883a 	mov	r6,r8
10029b94:	003019c0 	call	1003019c <__divdf3>
10029b98:	dfc00617 	ldw	ra,24(sp)
10029b9c:	dd000517 	ldw	r20,20(sp)
10029ba0:	dcc00417 	ldw	r19,16(sp)
10029ba4:	dc800317 	ldw	r18,12(sp)
10029ba8:	dc400217 	ldw	r17,8(sp)
10029bac:	dec00704 	addi	sp,sp,28
10029bb0:	f800283a 	ret
10029bb4:	28d3c83a 	sub	r9,r5,r3
10029bb8:	003ff206 	br	10029b84 <__ratio+0x78>

10029bbc <_mprec_log10>:
10029bbc:	defffe04 	addi	sp,sp,-8
10029bc0:	008005c4 	movi	r2,23
10029bc4:	dc000015 	stw	r16,0(sp)
10029bc8:	dfc00115 	stw	ra,4(sp)
10029bcc:	2021883a 	mov	r16,r4
10029bd0:	11000c16 	blt	r2,r4,10029c04 <_mprec_log10+0x48>
10029bd4:	200490fa 	slli	r2,r4,3
10029bd8:	00c00034 	movhi	r3,0
10029bdc:	18c39804 	addi	r3,r3,3680
10029be0:	10c5883a 	add	r2,r2,r3
10029be4:	12400117 	ldw	r9,4(r2)
10029be8:	12000017 	ldw	r8,0(r2)
10029bec:	4807883a 	mov	r3,r9
10029bf0:	4005883a 	mov	r2,r8
10029bf4:	dfc00117 	ldw	ra,4(sp)
10029bf8:	dc000017 	ldw	r16,0(sp)
10029bfc:	dec00204 	addi	sp,sp,8
10029c00:	f800283a 	ret
10029c04:	0011883a 	mov	r8,zero
10029c08:	024ffc34 	movhi	r9,16368
10029c0c:	0005883a 	mov	r2,zero
10029c10:	00d00934 	movhi	r3,16420
10029c14:	480b883a 	mov	r5,r9
10029c18:	4009883a 	mov	r4,r8
10029c1c:	180f883a 	mov	r7,r3
10029c20:	100d883a 	mov	r6,r2
10029c24:	002fdd80 	call	1002fdd8 <__muldf3>
10029c28:	843fffc4 	addi	r16,r16,-1
10029c2c:	1011883a 	mov	r8,r2
10029c30:	1813883a 	mov	r9,r3
10029c34:	803ff51e 	bne	r16,zero,10029c0c <_mprec_log10+0x50>
10029c38:	4005883a 	mov	r2,r8
10029c3c:	4807883a 	mov	r3,r9
10029c40:	dfc00117 	ldw	ra,4(sp)
10029c44:	dc000017 	ldw	r16,0(sp)
10029c48:	dec00204 	addi	sp,sp,8
10029c4c:	f800283a 	ret

10029c50 <__copybits>:
10029c50:	297fffc4 	addi	r5,r5,-1
10029c54:	30800417 	ldw	r2,16(r6)
10029c58:	280bd17a 	srai	r5,r5,5
10029c5c:	31800504 	addi	r6,r6,20
10029c60:	1085883a 	add	r2,r2,r2
10029c64:	294b883a 	add	r5,r5,r5
10029c68:	294b883a 	add	r5,r5,r5
10029c6c:	1085883a 	add	r2,r2,r2
10029c70:	290b883a 	add	r5,r5,r4
10029c74:	3087883a 	add	r3,r6,r2
10029c78:	29400104 	addi	r5,r5,4
10029c7c:	30c0052e 	bgeu	r6,r3,10029c94 <__copybits+0x44>
10029c80:	30800017 	ldw	r2,0(r6)
10029c84:	31800104 	addi	r6,r6,4
10029c88:	20800015 	stw	r2,0(r4)
10029c8c:	21000104 	addi	r4,r4,4
10029c90:	30fffb36 	bltu	r6,r3,10029c80 <__copybits+0x30>
10029c94:	2140032e 	bgeu	r4,r5,10029ca4 <__copybits+0x54>
10029c98:	20000015 	stw	zero,0(r4)
10029c9c:	21000104 	addi	r4,r4,4
10029ca0:	217ffd36 	bltu	r4,r5,10029c98 <__copybits+0x48>
10029ca4:	f800283a 	ret

10029ca8 <__any_on>:
10029ca8:	20800417 	ldw	r2,16(r4)
10029cac:	2807d17a 	srai	r3,r5,5
10029cb0:	21000504 	addi	r4,r4,20
10029cb4:	10c00d0e 	bge	r2,r3,10029cec <__any_on+0x44>
10029cb8:	1085883a 	add	r2,r2,r2
10029cbc:	1085883a 	add	r2,r2,r2
10029cc0:	208d883a 	add	r6,r4,r2
10029cc4:	2180182e 	bgeu	r4,r6,10029d28 <__any_on+0x80>
10029cc8:	30bfff17 	ldw	r2,-4(r6)
10029ccc:	30ffff04 	addi	r3,r6,-4
10029cd0:	1000041e 	bne	r2,zero,10029ce4 <__any_on+0x3c>
10029cd4:	20c0142e 	bgeu	r4,r3,10029d28 <__any_on+0x80>
10029cd8:	18ffff04 	addi	r3,r3,-4
10029cdc:	18800017 	ldw	r2,0(r3)
10029ce0:	103ffc26 	beq	r2,zero,10029cd4 <__any_on+0x2c>
10029ce4:	00800044 	movi	r2,1
10029ce8:	f800283a 	ret
10029cec:	18800a0e 	bge	r3,r2,10029d18 <__any_on+0x70>
10029cf0:	294007cc 	andi	r5,r5,31
10029cf4:	28000826 	beq	r5,zero,10029d18 <__any_on+0x70>
10029cf8:	18c5883a 	add	r2,r3,r3
10029cfc:	1085883a 	add	r2,r2,r2
10029d00:	208d883a 	add	r6,r4,r2
10029d04:	30c00017 	ldw	r3,0(r6)
10029d08:	1944d83a 	srl	r2,r3,r5
10029d0c:	1144983a 	sll	r2,r2,r5
10029d10:	18bff41e 	bne	r3,r2,10029ce4 <__any_on+0x3c>
10029d14:	003feb06 	br	10029cc4 <__any_on+0x1c>
10029d18:	18c5883a 	add	r2,r3,r3
10029d1c:	1085883a 	add	r2,r2,r2
10029d20:	208d883a 	add	r6,r4,r2
10029d24:	003fe706 	br	10029cc4 <__any_on+0x1c>
10029d28:	0005883a 	mov	r2,zero
10029d2c:	f800283a 	ret

10029d30 <_Balloc>:
10029d30:	20c01317 	ldw	r3,76(r4)
10029d34:	defffb04 	addi	sp,sp,-20
10029d38:	dcc00315 	stw	r19,12(sp)
10029d3c:	dc800215 	stw	r18,8(sp)
10029d40:	dfc00415 	stw	ra,16(sp)
10029d44:	2825883a 	mov	r18,r5
10029d48:	dc400115 	stw	r17,4(sp)
10029d4c:	dc000015 	stw	r16,0(sp)
10029d50:	2027883a 	mov	r19,r4
10029d54:	01800404 	movi	r6,16
10029d58:	01400104 	movi	r5,4
10029d5c:	18001726 	beq	r3,zero,10029dbc <_Balloc+0x8c>
10029d60:	01400044 	movi	r5,1
10029d64:	9485883a 	add	r2,r18,r18
10029d68:	2ca2983a 	sll	r17,r5,r18
10029d6c:	1085883a 	add	r2,r2,r2
10029d70:	10c7883a 	add	r3,r2,r3
10029d74:	1c000017 	ldw	r16,0(r3)
10029d78:	8c4d883a 	add	r6,r17,r17
10029d7c:	318d883a 	add	r6,r6,r6
10029d80:	9809883a 	mov	r4,r19
10029d84:	31800504 	addi	r6,r6,20
10029d88:	80001226 	beq	r16,zero,10029dd4 <_Balloc+0xa4>
10029d8c:	80800017 	ldw	r2,0(r16)
10029d90:	18800015 	stw	r2,0(r3)
10029d94:	80000415 	stw	zero,16(r16)
10029d98:	80000315 	stw	zero,12(r16)
10029d9c:	8005883a 	mov	r2,r16
10029da0:	dfc00417 	ldw	ra,16(sp)
10029da4:	dcc00317 	ldw	r19,12(sp)
10029da8:	dc800217 	ldw	r18,8(sp)
10029dac:	dc400117 	ldw	r17,4(sp)
10029db0:	dc000017 	ldw	r16,0(sp)
10029db4:	dec00504 	addi	sp,sp,20
10029db8:	f800283a 	ret
10029dbc:	002db000 	call	1002db00 <_calloc_r>
10029dc0:	1007883a 	mov	r3,r2
10029dc4:	0021883a 	mov	r16,zero
10029dc8:	98801315 	stw	r2,76(r19)
10029dcc:	103fe41e 	bne	r2,zero,10029d60 <_Balloc+0x30>
10029dd0:	003ff206 	br	10029d9c <_Balloc+0x6c>
10029dd4:	002db000 	call	1002db00 <_calloc_r>
10029dd8:	103ff026 	beq	r2,zero,10029d9c <_Balloc+0x6c>
10029ddc:	1021883a 	mov	r16,r2
10029de0:	14800115 	stw	r18,4(r2)
10029de4:	14400215 	stw	r17,8(r2)
10029de8:	003fea06 	br	10029d94 <_Balloc+0x64>

10029dec <__d2b>:
10029dec:	defff504 	addi	sp,sp,-44
10029df0:	dcc00515 	stw	r19,20(sp)
10029df4:	04c00044 	movi	r19,1
10029df8:	dc000215 	stw	r16,8(sp)
10029dfc:	2821883a 	mov	r16,r5
10029e00:	980b883a 	mov	r5,r19
10029e04:	ddc00915 	stw	r23,36(sp)
10029e08:	dd800815 	stw	r22,32(sp)
10029e0c:	dd400715 	stw	r21,28(sp)
10029e10:	dd000615 	stw	r20,24(sp)
10029e14:	dc800415 	stw	r18,16(sp)
10029e18:	dc400315 	stw	r17,12(sp)
10029e1c:	dfc00a15 	stw	ra,40(sp)
10029e20:	3023883a 	mov	r17,r6
10029e24:	382d883a 	mov	r22,r7
10029e28:	ddc00b17 	ldw	r23,44(sp)
10029e2c:	0029d300 	call	10029d30 <_Balloc>
10029e30:	1025883a 	mov	r18,r2
10029e34:	00a00034 	movhi	r2,32768
10029e38:	10bfffc4 	addi	r2,r2,-1
10029e3c:	8888703a 	and	r4,r17,r2
10029e40:	202ad53a 	srli	r21,r4,20
10029e44:	00800434 	movhi	r2,16
10029e48:	10bfffc4 	addi	r2,r2,-1
10029e4c:	8886703a 	and	r3,r17,r2
10029e50:	a829003a 	cmpeq	r20,r21,zero
10029e54:	800b883a 	mov	r5,r16
10029e58:	d8c00115 	stw	r3,4(sp)
10029e5c:	94000504 	addi	r16,r18,20
10029e60:	a000021e 	bne	r20,zero,10029e6c <__d2b+0x80>
10029e64:	18c00434 	orhi	r3,r3,16
10029e68:	d8c00115 	stw	r3,4(sp)
10029e6c:	28002726 	beq	r5,zero,10029f0c <__d2b+0x120>
10029e70:	d809883a 	mov	r4,sp
10029e74:	d9400015 	stw	r5,0(sp)
10029e78:	00298480 	call	10029848 <__lo0bits>
10029e7c:	100d883a 	mov	r6,r2
10029e80:	10003526 	beq	r2,zero,10029f58 <__d2b+0x16c>
10029e84:	d8c00117 	ldw	r3,4(sp)
10029e88:	00800804 	movi	r2,32
10029e8c:	1185c83a 	sub	r2,r2,r6
10029e90:	d9000017 	ldw	r4,0(sp)
10029e94:	1886983a 	sll	r3,r3,r2
10029e98:	1906b03a 	or	r3,r3,r4
10029e9c:	90c00515 	stw	r3,20(r18)
10029ea0:	d8c00117 	ldw	r3,4(sp)
10029ea4:	1986d83a 	srl	r3,r3,r6
10029ea8:	d8c00115 	stw	r3,4(sp)
10029eac:	180b003a 	cmpeq	r5,r3,zero
10029eb0:	00800084 	movi	r2,2
10029eb4:	114bc83a 	sub	r5,r2,r5
10029eb8:	80c00115 	stw	r3,4(r16)
10029ebc:	91400415 	stw	r5,16(r18)
10029ec0:	a0001a1e 	bne	r20,zero,10029f2c <__d2b+0x140>
10029ec4:	3545883a 	add	r2,r6,r21
10029ec8:	10bef344 	addi	r2,r2,-1075
10029ecc:	00c00d44 	movi	r3,53
10029ed0:	b0800015 	stw	r2,0(r22)
10029ed4:	1987c83a 	sub	r3,r3,r6
10029ed8:	b8c00015 	stw	r3,0(r23)
10029edc:	9005883a 	mov	r2,r18
10029ee0:	dfc00a17 	ldw	ra,40(sp)
10029ee4:	ddc00917 	ldw	r23,36(sp)
10029ee8:	dd800817 	ldw	r22,32(sp)
10029eec:	dd400717 	ldw	r21,28(sp)
10029ef0:	dd000617 	ldw	r20,24(sp)
10029ef4:	dcc00517 	ldw	r19,20(sp)
10029ef8:	dc800417 	ldw	r18,16(sp)
10029efc:	dc400317 	ldw	r17,12(sp)
10029f00:	dc000217 	ldw	r16,8(sp)
10029f04:	dec00b04 	addi	sp,sp,44
10029f08:	f800283a 	ret
10029f0c:	d9000104 	addi	r4,sp,4
10029f10:	00298480 	call	10029848 <__lo0bits>
10029f14:	11800804 	addi	r6,r2,32
10029f18:	d8800117 	ldw	r2,4(sp)
10029f1c:	94c00415 	stw	r19,16(r18)
10029f20:	980b883a 	mov	r5,r19
10029f24:	90800515 	stw	r2,20(r18)
10029f28:	a03fe626 	beq	r20,zero,10029ec4 <__d2b+0xd8>
10029f2c:	2945883a 	add	r2,r5,r5
10029f30:	1085883a 	add	r2,r2,r2
10029f34:	1405883a 	add	r2,r2,r16
10029f38:	113fff17 	ldw	r4,-4(r2)
10029f3c:	30fef384 	addi	r3,r6,-1074
10029f40:	2820917a 	slli	r16,r5,5
10029f44:	b0c00015 	stw	r3,0(r22)
10029f48:	00297d80 	call	100297d8 <__hi0bits>
10029f4c:	80a1c83a 	sub	r16,r16,r2
10029f50:	bc000015 	stw	r16,0(r23)
10029f54:	003fe106 	br	10029edc <__d2b+0xf0>
10029f58:	d8800017 	ldw	r2,0(sp)
10029f5c:	90800515 	stw	r2,20(r18)
10029f60:	d8c00117 	ldw	r3,4(sp)
10029f64:	003fd106 	br	10029eac <__d2b+0xc0>

10029f68 <__mdiff>:
10029f68:	defffb04 	addi	sp,sp,-20
10029f6c:	dc000015 	stw	r16,0(sp)
10029f70:	2821883a 	mov	r16,r5
10029f74:	dc800215 	stw	r18,8(sp)
10029f78:	300b883a 	mov	r5,r6
10029f7c:	2025883a 	mov	r18,r4
10029f80:	8009883a 	mov	r4,r16
10029f84:	dc400115 	stw	r17,4(sp)
10029f88:	dfc00415 	stw	ra,16(sp)
10029f8c:	dcc00315 	stw	r19,12(sp)
10029f90:	3023883a 	mov	r17,r6
10029f94:	002990c0 	call	1002990c <__mcmp>
10029f98:	10004226 	beq	r2,zero,1002a0a4 <__mdiff+0x13c>
10029f9c:	10005016 	blt	r2,zero,1002a0e0 <__mdiff+0x178>
10029fa0:	0027883a 	mov	r19,zero
10029fa4:	81400117 	ldw	r5,4(r16)
10029fa8:	9009883a 	mov	r4,r18
10029fac:	0029d300 	call	10029d30 <_Balloc>
10029fb0:	1019883a 	mov	r12,r2
10029fb4:	82800417 	ldw	r10,16(r16)
10029fb8:	88800417 	ldw	r2,16(r17)
10029fbc:	81800504 	addi	r6,r16,20
10029fc0:	5287883a 	add	r3,r10,r10
10029fc4:	1085883a 	add	r2,r2,r2
10029fc8:	18c7883a 	add	r3,r3,r3
10029fcc:	1085883a 	add	r2,r2,r2
10029fd0:	8a000504 	addi	r8,r17,20
10029fd4:	64c00315 	stw	r19,12(r12)
10029fd8:	30db883a 	add	r13,r6,r3
10029fdc:	4097883a 	add	r11,r8,r2
10029fe0:	61c00504 	addi	r7,r12,20
10029fe4:	0013883a 	mov	r9,zero
10029fe8:	31000017 	ldw	r4,0(r6)
10029fec:	41400017 	ldw	r5,0(r8)
10029ff0:	42000104 	addi	r8,r8,4
10029ff4:	20bfffcc 	andi	r2,r4,65535
10029ff8:	28ffffcc 	andi	r3,r5,65535
10029ffc:	10c5c83a 	sub	r2,r2,r3
1002a000:	1245883a 	add	r2,r2,r9
1002a004:	2008d43a 	srli	r4,r4,16
1002a008:	280ad43a 	srli	r5,r5,16
1002a00c:	1007d43a 	srai	r3,r2,16
1002a010:	3880000d 	sth	r2,0(r7)
1002a014:	2149c83a 	sub	r4,r4,r5
1002a018:	20c9883a 	add	r4,r4,r3
1002a01c:	3900008d 	sth	r4,2(r7)
1002a020:	31800104 	addi	r6,r6,4
1002a024:	39c00104 	addi	r7,r7,4
1002a028:	2013d43a 	srai	r9,r4,16
1002a02c:	42ffee36 	bltu	r8,r11,10029fe8 <__mdiff+0x80>
1002a030:	33400c2e 	bgeu	r6,r13,1002a064 <__mdiff+0xfc>
1002a034:	30800017 	ldw	r2,0(r6)
1002a038:	31800104 	addi	r6,r6,4
1002a03c:	10ffffcc 	andi	r3,r2,65535
1002a040:	1a47883a 	add	r3,r3,r9
1002a044:	1004d43a 	srli	r2,r2,16
1002a048:	1809d43a 	srai	r4,r3,16
1002a04c:	38c0000d 	sth	r3,0(r7)
1002a050:	1105883a 	add	r2,r2,r4
1002a054:	3880008d 	sth	r2,2(r7)
1002a058:	1013d43a 	srai	r9,r2,16
1002a05c:	39c00104 	addi	r7,r7,4
1002a060:	337ff436 	bltu	r6,r13,1002a034 <__mdiff+0xcc>
1002a064:	38bfff17 	ldw	r2,-4(r7)
1002a068:	38ffff04 	addi	r3,r7,-4
1002a06c:	1000041e 	bne	r2,zero,1002a080 <__mdiff+0x118>
1002a070:	18ffff04 	addi	r3,r3,-4
1002a074:	18800017 	ldw	r2,0(r3)
1002a078:	52bfffc4 	addi	r10,r10,-1
1002a07c:	103ffc26 	beq	r2,zero,1002a070 <__mdiff+0x108>
1002a080:	6005883a 	mov	r2,r12
1002a084:	62800415 	stw	r10,16(r12)
1002a088:	dfc00417 	ldw	ra,16(sp)
1002a08c:	dcc00317 	ldw	r19,12(sp)
1002a090:	dc800217 	ldw	r18,8(sp)
1002a094:	dc400117 	ldw	r17,4(sp)
1002a098:	dc000017 	ldw	r16,0(sp)
1002a09c:	dec00504 	addi	sp,sp,20
1002a0a0:	f800283a 	ret
1002a0a4:	9009883a 	mov	r4,r18
1002a0a8:	000b883a 	mov	r5,zero
1002a0ac:	0029d300 	call	10029d30 <_Balloc>
1002a0b0:	1019883a 	mov	r12,r2
1002a0b4:	00800044 	movi	r2,1
1002a0b8:	60800415 	stw	r2,16(r12)
1002a0bc:	6005883a 	mov	r2,r12
1002a0c0:	60000515 	stw	zero,20(r12)
1002a0c4:	dfc00417 	ldw	ra,16(sp)
1002a0c8:	dcc00317 	ldw	r19,12(sp)
1002a0cc:	dc800217 	ldw	r18,8(sp)
1002a0d0:	dc400117 	ldw	r17,4(sp)
1002a0d4:	dc000017 	ldw	r16,0(sp)
1002a0d8:	dec00504 	addi	sp,sp,20
1002a0dc:	f800283a 	ret
1002a0e0:	880d883a 	mov	r6,r17
1002a0e4:	04c00044 	movi	r19,1
1002a0e8:	8023883a 	mov	r17,r16
1002a0ec:	3021883a 	mov	r16,r6
1002a0f0:	003fac06 	br	10029fa4 <__mdiff+0x3c>

1002a0f4 <__lshift>:
1002a0f4:	defff904 	addi	sp,sp,-28
1002a0f8:	28800417 	ldw	r2,16(r5)
1002a0fc:	dc000015 	stw	r16,0(sp)
1002a100:	3021d17a 	srai	r16,r6,5
1002a104:	28c00217 	ldw	r3,8(r5)
1002a108:	10800044 	addi	r2,r2,1
1002a10c:	dc400115 	stw	r17,4(sp)
1002a110:	80a3883a 	add	r17,r16,r2
1002a114:	dd400515 	stw	r21,20(sp)
1002a118:	dd000415 	stw	r20,16(sp)
1002a11c:	dc800215 	stw	r18,8(sp)
1002a120:	dfc00615 	stw	ra,24(sp)
1002a124:	2825883a 	mov	r18,r5
1002a128:	dcc00315 	stw	r19,12(sp)
1002a12c:	3029883a 	mov	r20,r6
1002a130:	202b883a 	mov	r21,r4
1002a134:	29400117 	ldw	r5,4(r5)
1002a138:	1c40030e 	bge	r3,r17,1002a148 <__lshift+0x54>
1002a13c:	18c7883a 	add	r3,r3,r3
1002a140:	29400044 	addi	r5,r5,1
1002a144:	1c7ffd16 	blt	r3,r17,1002a13c <__lshift+0x48>
1002a148:	a809883a 	mov	r4,r21
1002a14c:	0029d300 	call	10029d30 <_Balloc>
1002a150:	1027883a 	mov	r19,r2
1002a154:	11400504 	addi	r5,r2,20
1002a158:	0400090e 	bge	zero,r16,1002a180 <__lshift+0x8c>
1002a15c:	2805883a 	mov	r2,r5
1002a160:	0007883a 	mov	r3,zero
1002a164:	18c00044 	addi	r3,r3,1
1002a168:	10000015 	stw	zero,0(r2)
1002a16c:	10800104 	addi	r2,r2,4
1002a170:	80fffc1e 	bne	r16,r3,1002a164 <__lshift+0x70>
1002a174:	8405883a 	add	r2,r16,r16
1002a178:	1085883a 	add	r2,r2,r2
1002a17c:	288b883a 	add	r5,r5,r2
1002a180:	90800417 	ldw	r2,16(r18)
1002a184:	91000504 	addi	r4,r18,20
1002a188:	a18007cc 	andi	r6,r20,31
1002a18c:	1085883a 	add	r2,r2,r2
1002a190:	1085883a 	add	r2,r2,r2
1002a194:	208f883a 	add	r7,r4,r2
1002a198:	30001e26 	beq	r6,zero,1002a214 <__lshift+0x120>
1002a19c:	00800804 	movi	r2,32
1002a1a0:	1191c83a 	sub	r8,r2,r6
1002a1a4:	0007883a 	mov	r3,zero
1002a1a8:	20800017 	ldw	r2,0(r4)
1002a1ac:	1184983a 	sll	r2,r2,r6
1002a1b0:	1884b03a 	or	r2,r3,r2
1002a1b4:	28800015 	stw	r2,0(r5)
1002a1b8:	20c00017 	ldw	r3,0(r4)
1002a1bc:	21000104 	addi	r4,r4,4
1002a1c0:	29400104 	addi	r5,r5,4
1002a1c4:	1a06d83a 	srl	r3,r3,r8
1002a1c8:	21fff736 	bltu	r4,r7,1002a1a8 <__lshift+0xb4>
1002a1cc:	28c00015 	stw	r3,0(r5)
1002a1d0:	18000126 	beq	r3,zero,1002a1d8 <__lshift+0xe4>
1002a1d4:	8c400044 	addi	r17,r17,1
1002a1d8:	88bfffc4 	addi	r2,r17,-1
1002a1dc:	98800415 	stw	r2,16(r19)
1002a1e0:	a809883a 	mov	r4,r21
1002a1e4:	900b883a 	mov	r5,r18
1002a1e8:	00297b00 	call	100297b0 <_Bfree>
1002a1ec:	9805883a 	mov	r2,r19
1002a1f0:	dfc00617 	ldw	ra,24(sp)
1002a1f4:	dd400517 	ldw	r21,20(sp)
1002a1f8:	dd000417 	ldw	r20,16(sp)
1002a1fc:	dcc00317 	ldw	r19,12(sp)
1002a200:	dc800217 	ldw	r18,8(sp)
1002a204:	dc400117 	ldw	r17,4(sp)
1002a208:	dc000017 	ldw	r16,0(sp)
1002a20c:	dec00704 	addi	sp,sp,28
1002a210:	f800283a 	ret
1002a214:	20800017 	ldw	r2,0(r4)
1002a218:	21000104 	addi	r4,r4,4
1002a21c:	28800015 	stw	r2,0(r5)
1002a220:	29400104 	addi	r5,r5,4
1002a224:	21ffec2e 	bgeu	r4,r7,1002a1d8 <__lshift+0xe4>
1002a228:	20800017 	ldw	r2,0(r4)
1002a22c:	21000104 	addi	r4,r4,4
1002a230:	28800015 	stw	r2,0(r5)
1002a234:	29400104 	addi	r5,r5,4
1002a238:	21fff636 	bltu	r4,r7,1002a214 <__lshift+0x120>
1002a23c:	003fe606 	br	1002a1d8 <__lshift+0xe4>

1002a240 <__multiply>:
1002a240:	defff904 	addi	sp,sp,-28
1002a244:	dcc00315 	stw	r19,12(sp)
1002a248:	dc800215 	stw	r18,8(sp)
1002a24c:	2cc00417 	ldw	r19,16(r5)
1002a250:	34800417 	ldw	r18,16(r6)
1002a254:	dd000415 	stw	r20,16(sp)
1002a258:	dc400115 	stw	r17,4(sp)
1002a25c:	dfc00615 	stw	ra,24(sp)
1002a260:	dd400515 	stw	r21,20(sp)
1002a264:	dc000015 	stw	r16,0(sp)
1002a268:	2823883a 	mov	r17,r5
1002a26c:	3029883a 	mov	r20,r6
1002a270:	9c80040e 	bge	r19,r18,1002a284 <__multiply+0x44>
1002a274:	9027883a 	mov	r19,r18
1002a278:	2c800417 	ldw	r18,16(r5)
1002a27c:	2829883a 	mov	r20,r5
1002a280:	3023883a 	mov	r17,r6
1002a284:	88800217 	ldw	r2,8(r17)
1002a288:	9ca1883a 	add	r16,r19,r18
1002a28c:	89400117 	ldw	r5,4(r17)
1002a290:	1400010e 	bge	r2,r16,1002a298 <__multiply+0x58>
1002a294:	29400044 	addi	r5,r5,1
1002a298:	0029d300 	call	10029d30 <_Balloc>
1002a29c:	102b883a 	mov	r21,r2
1002a2a0:	8405883a 	add	r2,r16,r16
1002a2a4:	1085883a 	add	r2,r2,r2
1002a2a8:	a9000504 	addi	r4,r21,20
1002a2ac:	209d883a 	add	r14,r4,r2
1002a2b0:	2380042e 	bgeu	r4,r14,1002a2c4 <__multiply+0x84>
1002a2b4:	2005883a 	mov	r2,r4
1002a2b8:	10000015 	stw	zero,0(r2)
1002a2bc:	10800104 	addi	r2,r2,4
1002a2c0:	13bffd36 	bltu	r2,r14,1002a2b8 <__multiply+0x78>
1002a2c4:	9485883a 	add	r2,r18,r18
1002a2c8:	9cc7883a 	add	r3,r19,r19
1002a2cc:	a1800504 	addi	r6,r20,20
1002a2d0:	1085883a 	add	r2,r2,r2
1002a2d4:	8b400504 	addi	r13,r17,20
1002a2d8:	18c7883a 	add	r3,r3,r3
1002a2dc:	309f883a 	add	r15,r6,r2
1002a2e0:	68d7883a 	add	r11,r13,r3
1002a2e4:	33c03b2e 	bgeu	r6,r15,1002a3d4 <__multiply+0x194>
1002a2e8:	2019883a 	mov	r12,r4
1002a2ec:	30800017 	ldw	r2,0(r6)
1002a2f0:	127fffcc 	andi	r9,r2,65535
1002a2f4:	48001826 	beq	r9,zero,1002a358 <__multiply+0x118>
1002a2f8:	6811883a 	mov	r8,r13
1002a2fc:	600f883a 	mov	r7,r12
1002a300:	0015883a 	mov	r10,zero
1002a304:	40c00017 	ldw	r3,0(r8)
1002a308:	39400017 	ldw	r5,0(r7)
1002a30c:	42000104 	addi	r8,r8,4
1002a310:	193fffcc 	andi	r4,r3,65535
1002a314:	4909383a 	mul	r4,r9,r4
1002a318:	1806d43a 	srli	r3,r3,16
1002a31c:	28bfffcc 	andi	r2,r5,65535
1002a320:	5085883a 	add	r2,r10,r2
1002a324:	2089883a 	add	r4,r4,r2
1002a328:	48c7383a 	mul	r3,r9,r3
1002a32c:	280ad43a 	srli	r5,r5,16
1002a330:	2004d43a 	srli	r2,r4,16
1002a334:	3900000d 	sth	r4,0(r7)
1002a338:	1947883a 	add	r3,r3,r5
1002a33c:	10c5883a 	add	r2,r2,r3
1002a340:	3880008d 	sth	r2,2(r7)
1002a344:	1014d43a 	srli	r10,r2,16
1002a348:	39c00104 	addi	r7,r7,4
1002a34c:	42ffed36 	bltu	r8,r11,1002a304 <__multiply+0xc4>
1002a350:	3a800015 	stw	r10,0(r7)
1002a354:	30800017 	ldw	r2,0(r6)
1002a358:	1012d43a 	srli	r9,r2,16
1002a35c:	48001926 	beq	r9,zero,1002a3c4 <__multiply+0x184>
1002a360:	60800017 	ldw	r2,0(r12)
1002a364:	6811883a 	mov	r8,r13
1002a368:	600f883a 	mov	r7,r12
1002a36c:	0015883a 	mov	r10,zero
1002a370:	100b883a 	mov	r5,r2
1002a374:	41000017 	ldw	r4,0(r8)
1002a378:	2806d43a 	srli	r3,r5,16
1002a37c:	3880000d 	sth	r2,0(r7)
1002a380:	20bfffcc 	andi	r2,r4,65535
1002a384:	4885383a 	mul	r2,r9,r2
1002a388:	50c7883a 	add	r3,r10,r3
1002a38c:	2008d43a 	srli	r4,r4,16
1002a390:	10c5883a 	add	r2,r2,r3
1002a394:	3880008d 	sth	r2,2(r7)
1002a398:	39c00104 	addi	r7,r7,4
1002a39c:	39400017 	ldw	r5,0(r7)
1002a3a0:	4909383a 	mul	r4,r9,r4
1002a3a4:	1004d43a 	srli	r2,r2,16
1002a3a8:	28ffffcc 	andi	r3,r5,65535
1002a3ac:	20c9883a 	add	r4,r4,r3
1002a3b0:	1105883a 	add	r2,r2,r4
1002a3b4:	42000104 	addi	r8,r8,4
1002a3b8:	1014d43a 	srli	r10,r2,16
1002a3bc:	42ffed36 	bltu	r8,r11,1002a374 <__multiply+0x134>
1002a3c0:	38800015 	stw	r2,0(r7)
1002a3c4:	31800104 	addi	r6,r6,4
1002a3c8:	33c0022e 	bgeu	r6,r15,1002a3d4 <__multiply+0x194>
1002a3cc:	63000104 	addi	r12,r12,4
1002a3d0:	003fc606 	br	1002a2ec <__multiply+0xac>
1002a3d4:	0400090e 	bge	zero,r16,1002a3fc <__multiply+0x1bc>
1002a3d8:	70bfff17 	ldw	r2,-4(r14)
1002a3dc:	70ffff04 	addi	r3,r14,-4
1002a3e0:	10000326 	beq	r2,zero,1002a3f0 <__multiply+0x1b0>
1002a3e4:	00000506 	br	1002a3fc <__multiply+0x1bc>
1002a3e8:	18800017 	ldw	r2,0(r3)
1002a3ec:	1000031e 	bne	r2,zero,1002a3fc <__multiply+0x1bc>
1002a3f0:	843fffc4 	addi	r16,r16,-1
1002a3f4:	18ffff04 	addi	r3,r3,-4
1002a3f8:	803ffb1e 	bne	r16,zero,1002a3e8 <__multiply+0x1a8>
1002a3fc:	a805883a 	mov	r2,r21
1002a400:	ac000415 	stw	r16,16(r21)
1002a404:	dfc00617 	ldw	ra,24(sp)
1002a408:	dd400517 	ldw	r21,20(sp)
1002a40c:	dd000417 	ldw	r20,16(sp)
1002a410:	dcc00317 	ldw	r19,12(sp)
1002a414:	dc800217 	ldw	r18,8(sp)
1002a418:	dc400117 	ldw	r17,4(sp)
1002a41c:	dc000017 	ldw	r16,0(sp)
1002a420:	dec00704 	addi	sp,sp,28
1002a424:	f800283a 	ret

1002a428 <__i2b>:
1002a428:	defffd04 	addi	sp,sp,-12
1002a42c:	dc000015 	stw	r16,0(sp)
1002a430:	04000044 	movi	r16,1
1002a434:	dc800115 	stw	r18,4(sp)
1002a438:	2825883a 	mov	r18,r5
1002a43c:	800b883a 	mov	r5,r16
1002a440:	dfc00215 	stw	ra,8(sp)
1002a444:	0029d300 	call	10029d30 <_Balloc>
1002a448:	14000415 	stw	r16,16(r2)
1002a44c:	14800515 	stw	r18,20(r2)
1002a450:	dfc00217 	ldw	ra,8(sp)
1002a454:	dc800117 	ldw	r18,4(sp)
1002a458:	dc000017 	ldw	r16,0(sp)
1002a45c:	dec00304 	addi	sp,sp,12
1002a460:	f800283a 	ret

1002a464 <__multadd>:
1002a464:	defffa04 	addi	sp,sp,-24
1002a468:	dc800215 	stw	r18,8(sp)
1002a46c:	2c800417 	ldw	r18,16(r5)
1002a470:	dd000415 	stw	r20,16(sp)
1002a474:	dcc00315 	stw	r19,12(sp)
1002a478:	dc000015 	stw	r16,0(sp)
1002a47c:	dfc00515 	stw	ra,20(sp)
1002a480:	3821883a 	mov	r16,r7
1002a484:	dc400115 	stw	r17,4(sp)
1002a488:	2827883a 	mov	r19,r5
1002a48c:	2029883a 	mov	r20,r4
1002a490:	2a000504 	addi	r8,r5,20
1002a494:	000f883a 	mov	r7,zero
1002a498:	40800017 	ldw	r2,0(r8)
1002a49c:	39c00044 	addi	r7,r7,1
1002a4a0:	10ffffcc 	andi	r3,r2,65535
1002a4a4:	1987383a 	mul	r3,r3,r6
1002a4a8:	1004d43a 	srli	r2,r2,16
1002a4ac:	1c07883a 	add	r3,r3,r16
1002a4b0:	180ad43a 	srli	r5,r3,16
1002a4b4:	1185383a 	mul	r2,r2,r6
1002a4b8:	18ffffcc 	andi	r3,r3,65535
1002a4bc:	1145883a 	add	r2,r2,r5
1002a4c0:	1008943a 	slli	r4,r2,16
1002a4c4:	1020d43a 	srli	r16,r2,16
1002a4c8:	20c9883a 	add	r4,r4,r3
1002a4cc:	41000015 	stw	r4,0(r8)
1002a4d0:	42000104 	addi	r8,r8,4
1002a4d4:	3cbff016 	blt	r7,r18,1002a498 <__multadd+0x34>
1002a4d8:	80000826 	beq	r16,zero,1002a4fc <__multadd+0x98>
1002a4dc:	98800217 	ldw	r2,8(r19)
1002a4e0:	90800f0e 	bge	r18,r2,1002a520 <__multadd+0xbc>
1002a4e4:	9485883a 	add	r2,r18,r18
1002a4e8:	1085883a 	add	r2,r2,r2
1002a4ec:	14c5883a 	add	r2,r2,r19
1002a4f0:	90c00044 	addi	r3,r18,1
1002a4f4:	14000515 	stw	r16,20(r2)
1002a4f8:	98c00415 	stw	r3,16(r19)
1002a4fc:	9805883a 	mov	r2,r19
1002a500:	dfc00517 	ldw	ra,20(sp)
1002a504:	dd000417 	ldw	r20,16(sp)
1002a508:	dcc00317 	ldw	r19,12(sp)
1002a50c:	dc800217 	ldw	r18,8(sp)
1002a510:	dc400117 	ldw	r17,4(sp)
1002a514:	dc000017 	ldw	r16,0(sp)
1002a518:	dec00604 	addi	sp,sp,24
1002a51c:	f800283a 	ret
1002a520:	99400117 	ldw	r5,4(r19)
1002a524:	a009883a 	mov	r4,r20
1002a528:	29400044 	addi	r5,r5,1
1002a52c:	0029d300 	call	10029d30 <_Balloc>
1002a530:	99800417 	ldw	r6,16(r19)
1002a534:	99400304 	addi	r5,r19,12
1002a538:	11000304 	addi	r4,r2,12
1002a53c:	318d883a 	add	r6,r6,r6
1002a540:	318d883a 	add	r6,r6,r6
1002a544:	31800204 	addi	r6,r6,8
1002a548:	1023883a 	mov	r17,r2
1002a54c:	0022c500 	call	10022c50 <memcpy>
1002a550:	980b883a 	mov	r5,r19
1002a554:	a009883a 	mov	r4,r20
1002a558:	00297b00 	call	100297b0 <_Bfree>
1002a55c:	8827883a 	mov	r19,r17
1002a560:	003fe006 	br	1002a4e4 <__multadd+0x80>

1002a564 <__pow5mult>:
1002a564:	defffa04 	addi	sp,sp,-24
1002a568:	308000cc 	andi	r2,r6,3
1002a56c:	dd000415 	stw	r20,16(sp)
1002a570:	dcc00315 	stw	r19,12(sp)
1002a574:	dc000015 	stw	r16,0(sp)
1002a578:	dfc00515 	stw	ra,20(sp)
1002a57c:	dc800215 	stw	r18,8(sp)
1002a580:	dc400115 	stw	r17,4(sp)
1002a584:	3021883a 	mov	r16,r6
1002a588:	2027883a 	mov	r19,r4
1002a58c:	2829883a 	mov	r20,r5
1002a590:	10002b1e 	bne	r2,zero,1002a640 <__pow5mult+0xdc>
1002a594:	8025d0ba 	srai	r18,r16,2
1002a598:	90001b26 	beq	r18,zero,1002a608 <__pow5mult+0xa4>
1002a59c:	9c001217 	ldw	r16,72(r19)
1002a5a0:	8000081e 	bne	r16,zero,1002a5c4 <__pow5mult+0x60>
1002a5a4:	00003006 	br	1002a668 <__pow5mult+0x104>
1002a5a8:	800b883a 	mov	r5,r16
1002a5ac:	800d883a 	mov	r6,r16
1002a5b0:	9809883a 	mov	r4,r19
1002a5b4:	90001426 	beq	r18,zero,1002a608 <__pow5mult+0xa4>
1002a5b8:	80800017 	ldw	r2,0(r16)
1002a5bc:	10001b26 	beq	r2,zero,1002a62c <__pow5mult+0xc8>
1002a5c0:	1021883a 	mov	r16,r2
1002a5c4:	9080004c 	andi	r2,r18,1
1002a5c8:	1005003a 	cmpeq	r2,r2,zero
1002a5cc:	9025d07a 	srai	r18,r18,1
1002a5d0:	800d883a 	mov	r6,r16
1002a5d4:	9809883a 	mov	r4,r19
1002a5d8:	a00b883a 	mov	r5,r20
1002a5dc:	103ff21e 	bne	r2,zero,1002a5a8 <__pow5mult+0x44>
1002a5e0:	002a2400 	call	1002a240 <__multiply>
1002a5e4:	a00b883a 	mov	r5,r20
1002a5e8:	9809883a 	mov	r4,r19
1002a5ec:	1023883a 	mov	r17,r2
1002a5f0:	00297b00 	call	100297b0 <_Bfree>
1002a5f4:	8829883a 	mov	r20,r17
1002a5f8:	800b883a 	mov	r5,r16
1002a5fc:	800d883a 	mov	r6,r16
1002a600:	9809883a 	mov	r4,r19
1002a604:	903fec1e 	bne	r18,zero,1002a5b8 <__pow5mult+0x54>
1002a608:	a005883a 	mov	r2,r20
1002a60c:	dfc00517 	ldw	ra,20(sp)
1002a610:	dd000417 	ldw	r20,16(sp)
1002a614:	dcc00317 	ldw	r19,12(sp)
1002a618:	dc800217 	ldw	r18,8(sp)
1002a61c:	dc400117 	ldw	r17,4(sp)
1002a620:	dc000017 	ldw	r16,0(sp)
1002a624:	dec00604 	addi	sp,sp,24
1002a628:	f800283a 	ret
1002a62c:	002a2400 	call	1002a240 <__multiply>
1002a630:	80800015 	stw	r2,0(r16)
1002a634:	1021883a 	mov	r16,r2
1002a638:	10000015 	stw	zero,0(r2)
1002a63c:	003fe106 	br	1002a5c4 <__pow5mult+0x60>
1002a640:	1085883a 	add	r2,r2,r2
1002a644:	00c00034 	movhi	r3,0
1002a648:	18c3de04 	addi	r3,r3,3960
1002a64c:	1085883a 	add	r2,r2,r2
1002a650:	10c5883a 	add	r2,r2,r3
1002a654:	11bfff17 	ldw	r6,-4(r2)
1002a658:	000f883a 	mov	r7,zero
1002a65c:	002a4640 	call	1002a464 <__multadd>
1002a660:	1029883a 	mov	r20,r2
1002a664:	003fcb06 	br	1002a594 <__pow5mult+0x30>
1002a668:	9809883a 	mov	r4,r19
1002a66c:	01409c44 	movi	r5,625
1002a670:	002a4280 	call	1002a428 <__i2b>
1002a674:	98801215 	stw	r2,72(r19)
1002a678:	1021883a 	mov	r16,r2
1002a67c:	10000015 	stw	zero,0(r2)
1002a680:	003fd006 	br	1002a5c4 <__pow5mult+0x60>

1002a684 <__s2b>:
1002a684:	defff904 	addi	sp,sp,-28
1002a688:	dcc00315 	stw	r19,12(sp)
1002a68c:	dc800215 	stw	r18,8(sp)
1002a690:	2827883a 	mov	r19,r5
1002a694:	2025883a 	mov	r18,r4
1002a698:	01400244 	movi	r5,9
1002a69c:	39000204 	addi	r4,r7,8
1002a6a0:	dd000415 	stw	r20,16(sp)
1002a6a4:	dc400115 	stw	r17,4(sp)
1002a6a8:	dfc00615 	stw	ra,24(sp)
1002a6ac:	dd400515 	stw	r21,20(sp)
1002a6b0:	dc000015 	stw	r16,0(sp)
1002a6b4:	3829883a 	mov	r20,r7
1002a6b8:	3023883a 	mov	r17,r6
1002a6bc:	002227c0 	call	1002227c <__divsi3>
1002a6c0:	00c00044 	movi	r3,1
1002a6c4:	1880350e 	bge	r3,r2,1002a79c <__s2b+0x118>
1002a6c8:	000b883a 	mov	r5,zero
1002a6cc:	18c7883a 	add	r3,r3,r3
1002a6d0:	29400044 	addi	r5,r5,1
1002a6d4:	18bffd16 	blt	r3,r2,1002a6cc <__s2b+0x48>
1002a6d8:	9009883a 	mov	r4,r18
1002a6dc:	0029d300 	call	10029d30 <_Balloc>
1002a6e0:	1011883a 	mov	r8,r2
1002a6e4:	d8800717 	ldw	r2,28(sp)
1002a6e8:	00c00044 	movi	r3,1
1002a6ec:	01800244 	movi	r6,9
1002a6f0:	40800515 	stw	r2,20(r8)
1002a6f4:	40c00415 	stw	r3,16(r8)
1002a6f8:	3440260e 	bge	r6,r17,1002a794 <__s2b+0x110>
1002a6fc:	3021883a 	mov	r16,r6
1002a700:	99ab883a 	add	r21,r19,r6
1002a704:	9c05883a 	add	r2,r19,r16
1002a708:	11c00007 	ldb	r7,0(r2)
1002a70c:	400b883a 	mov	r5,r8
1002a710:	9009883a 	mov	r4,r18
1002a714:	39fff404 	addi	r7,r7,-48
1002a718:	01800284 	movi	r6,10
1002a71c:	002a4640 	call	1002a464 <__multadd>
1002a720:	84000044 	addi	r16,r16,1
1002a724:	1011883a 	mov	r8,r2
1002a728:	8c3ff61e 	bne	r17,r16,1002a704 <__s2b+0x80>
1002a72c:	ac45883a 	add	r2,r21,r17
1002a730:	117ffe04 	addi	r5,r2,-8
1002a734:	880d883a 	mov	r6,r17
1002a738:	35000c0e 	bge	r6,r20,1002a76c <__s2b+0xe8>
1002a73c:	a185c83a 	sub	r2,r20,r6
1002a740:	2821883a 	mov	r16,r5
1002a744:	28a3883a 	add	r17,r5,r2
1002a748:	81c00007 	ldb	r7,0(r16)
1002a74c:	400b883a 	mov	r5,r8
1002a750:	9009883a 	mov	r4,r18
1002a754:	39fff404 	addi	r7,r7,-48
1002a758:	01800284 	movi	r6,10
1002a75c:	002a4640 	call	1002a464 <__multadd>
1002a760:	84000044 	addi	r16,r16,1
1002a764:	1011883a 	mov	r8,r2
1002a768:	847ff71e 	bne	r16,r17,1002a748 <__s2b+0xc4>
1002a76c:	4005883a 	mov	r2,r8
1002a770:	dfc00617 	ldw	ra,24(sp)
1002a774:	dd400517 	ldw	r21,20(sp)
1002a778:	dd000417 	ldw	r20,16(sp)
1002a77c:	dcc00317 	ldw	r19,12(sp)
1002a780:	dc800217 	ldw	r18,8(sp)
1002a784:	dc400117 	ldw	r17,4(sp)
1002a788:	dc000017 	ldw	r16,0(sp)
1002a78c:	dec00704 	addi	sp,sp,28
1002a790:	f800283a 	ret
1002a794:	99400284 	addi	r5,r19,10
1002a798:	003fe706 	br	1002a738 <__s2b+0xb4>
1002a79c:	000b883a 	mov	r5,zero
1002a7a0:	003fcd06 	br	1002a6d8 <__s2b+0x54>

1002a7a4 <putc>:
1002a7a4:	defffc04 	addi	sp,sp,-16
1002a7a8:	dc800215 	stw	r18,8(sp)
1002a7ac:	04800034 	movhi	r18,0
1002a7b0:	948b0704 	addi	r18,r18,11292
1002a7b4:	90c00017 	ldw	r3,0(r18)
1002a7b8:	dc400115 	stw	r17,4(sp)
1002a7bc:	dc000015 	stw	r16,0(sp)
1002a7c0:	dfc00315 	stw	ra,12(sp)
1002a7c4:	2023883a 	mov	r17,r4
1002a7c8:	2821883a 	mov	r16,r5
1002a7cc:	18000226 	beq	r3,zero,1002a7d8 <putc+0x34>
1002a7d0:	18800e17 	ldw	r2,56(r3)
1002a7d4:	10001126 	beq	r2,zero,1002a81c <putc+0x78>
1002a7d8:	80800217 	ldw	r2,8(r16)
1002a7dc:	10ffffc4 	addi	r3,r2,-1
1002a7e0:	80c00215 	stw	r3,8(r16)
1002a7e4:	18001316 	blt	r3,zero,1002a834 <putc+0x90>
1002a7e8:	80800017 	ldw	r2,0(r16)
1002a7ec:	14400005 	stb	r17,0(r2)
1002a7f0:	80c00017 	ldw	r3,0(r16)
1002a7f4:	18800044 	addi	r2,r3,1
1002a7f8:	18c00003 	ldbu	r3,0(r3)
1002a7fc:	80800015 	stw	r2,0(r16)
1002a800:	1805883a 	mov	r2,r3
1002a804:	dfc00317 	ldw	ra,12(sp)
1002a808:	dc800217 	ldw	r18,8(sp)
1002a80c:	dc400117 	ldw	r17,4(sp)
1002a810:	dc000017 	ldw	r16,0(sp)
1002a814:	dec00404 	addi	sp,sp,16
1002a818:	f800283a 	ret
1002a81c:	1809883a 	mov	r4,r3
1002a820:	00282e00 	call	100282e0 <__sinit>
1002a824:	80800217 	ldw	r2,8(r16)
1002a828:	10ffffc4 	addi	r3,r2,-1
1002a82c:	80c00215 	stw	r3,8(r16)
1002a830:	183fed0e 	bge	r3,zero,1002a7e8 <putc+0x44>
1002a834:	80800617 	ldw	r2,24(r16)
1002a838:	18800f16 	blt	r3,r2,1002a878 <putc+0xd4>
1002a83c:	80800017 	ldw	r2,0(r16)
1002a840:	14400005 	stb	r17,0(r2)
1002a844:	81000017 	ldw	r4,0(r16)
1002a848:	00800284 	movi	r2,10
1002a84c:	20c00003 	ldbu	r3,0(r4)
1002a850:	18801226 	beq	r3,r2,1002a89c <putc+0xf8>
1002a854:	20800044 	addi	r2,r4,1
1002a858:	80800015 	stw	r2,0(r16)
1002a85c:	1805883a 	mov	r2,r3
1002a860:	dfc00317 	ldw	ra,12(sp)
1002a864:	dc800217 	ldw	r18,8(sp)
1002a868:	dc400117 	ldw	r17,4(sp)
1002a86c:	dc000017 	ldw	r16,0(sp)
1002a870:	dec00404 	addi	sp,sp,16
1002a874:	f800283a 	ret
1002a878:	91000017 	ldw	r4,0(r18)
1002a87c:	880b883a 	mov	r5,r17
1002a880:	800d883a 	mov	r6,r16
1002a884:	dfc00317 	ldw	ra,12(sp)
1002a888:	dc800217 	ldw	r18,8(sp)
1002a88c:	dc400117 	ldw	r17,4(sp)
1002a890:	dc000017 	ldw	r16,0(sp)
1002a894:	dec00404 	addi	sp,sp,16
1002a898:	002d93c1 	jmpi	1002d93c <__swbuf_r>
1002a89c:	91000017 	ldw	r4,0(r18)
1002a8a0:	180b883a 	mov	r5,r3
1002a8a4:	003ff606 	br	1002a880 <putc+0xdc>

1002a8a8 <_putc_r>:
1002a8a8:	defffc04 	addi	sp,sp,-16
1002a8ac:	dc400215 	stw	r17,8(sp)
1002a8b0:	dc000115 	stw	r16,4(sp)
1002a8b4:	dfc00315 	stw	ra,12(sp)
1002a8b8:	2021883a 	mov	r16,r4
1002a8bc:	2823883a 	mov	r17,r5
1002a8c0:	20000226 	beq	r4,zero,1002a8cc <_putc_r+0x24>
1002a8c4:	20800e17 	ldw	r2,56(r4)
1002a8c8:	10001026 	beq	r2,zero,1002a90c <_putc_r+0x64>
1002a8cc:	30800217 	ldw	r2,8(r6)
1002a8d0:	10ffffc4 	addi	r3,r2,-1
1002a8d4:	30c00215 	stw	r3,8(r6)
1002a8d8:	18001316 	blt	r3,zero,1002a928 <_putc_r+0x80>
1002a8dc:	30800017 	ldw	r2,0(r6)
1002a8e0:	14400005 	stb	r17,0(r2)
1002a8e4:	30c00017 	ldw	r3,0(r6)
1002a8e8:	18800044 	addi	r2,r3,1
1002a8ec:	18c00003 	ldbu	r3,0(r3)
1002a8f0:	30800015 	stw	r2,0(r6)
1002a8f4:	1805883a 	mov	r2,r3
1002a8f8:	dfc00317 	ldw	ra,12(sp)
1002a8fc:	dc400217 	ldw	r17,8(sp)
1002a900:	dc000117 	ldw	r16,4(sp)
1002a904:	dec00404 	addi	sp,sp,16
1002a908:	f800283a 	ret
1002a90c:	d9800015 	stw	r6,0(sp)
1002a910:	00282e00 	call	100282e0 <__sinit>
1002a914:	d9800017 	ldw	r6,0(sp)
1002a918:	30800217 	ldw	r2,8(r6)
1002a91c:	10ffffc4 	addi	r3,r2,-1
1002a920:	30c00215 	stw	r3,8(r6)
1002a924:	183fed0e 	bge	r3,zero,1002a8dc <_putc_r+0x34>
1002a928:	30800617 	ldw	r2,24(r6)
1002a92c:	18800e16 	blt	r3,r2,1002a968 <_putc_r+0xc0>
1002a930:	30800017 	ldw	r2,0(r6)
1002a934:	14400005 	stb	r17,0(r2)
1002a938:	31000017 	ldw	r4,0(r6)
1002a93c:	00800284 	movi	r2,10
1002a940:	20c00003 	ldbu	r3,0(r4)
1002a944:	18800f26 	beq	r3,r2,1002a984 <_putc_r+0xdc>
1002a948:	20800044 	addi	r2,r4,1
1002a94c:	30800015 	stw	r2,0(r6)
1002a950:	1805883a 	mov	r2,r3
1002a954:	dfc00317 	ldw	ra,12(sp)
1002a958:	dc400217 	ldw	r17,8(sp)
1002a95c:	dc000117 	ldw	r16,4(sp)
1002a960:	dec00404 	addi	sp,sp,16
1002a964:	f800283a 	ret
1002a968:	8009883a 	mov	r4,r16
1002a96c:	880b883a 	mov	r5,r17
1002a970:	dfc00317 	ldw	ra,12(sp)
1002a974:	dc400217 	ldw	r17,8(sp)
1002a978:	dc000117 	ldw	r16,4(sp)
1002a97c:	dec00404 	addi	sp,sp,16
1002a980:	002d93c1 	jmpi	1002d93c <__swbuf_r>
1002a984:	8009883a 	mov	r4,r16
1002a988:	180b883a 	mov	r5,r3
1002a98c:	003ff806 	br	1002a970 <_putc_r+0xc8>

1002a990 <_realloc_r>:
1002a990:	defff404 	addi	sp,sp,-48
1002a994:	dd800815 	stw	r22,32(sp)
1002a998:	dc800415 	stw	r18,16(sp)
1002a99c:	dc400315 	stw	r17,12(sp)
1002a9a0:	dfc00b15 	stw	ra,44(sp)
1002a9a4:	df000a15 	stw	fp,40(sp)
1002a9a8:	ddc00915 	stw	r23,36(sp)
1002a9ac:	dd400715 	stw	r21,28(sp)
1002a9b0:	dd000615 	stw	r20,24(sp)
1002a9b4:	dcc00515 	stw	r19,20(sp)
1002a9b8:	dc000215 	stw	r16,8(sp)
1002a9bc:	2825883a 	mov	r18,r5
1002a9c0:	3023883a 	mov	r17,r6
1002a9c4:	202d883a 	mov	r22,r4
1002a9c8:	2800c926 	beq	r5,zero,1002acf0 <_realloc_r+0x360>
1002a9cc:	00317d00 	call	100317d0 <__malloc_lock>
1002a9d0:	943ffe04 	addi	r16,r18,-8
1002a9d4:	88c002c4 	addi	r3,r17,11
1002a9d8:	00800584 	movi	r2,22
1002a9dc:	82000117 	ldw	r8,4(r16)
1002a9e0:	10c01b2e 	bgeu	r2,r3,1002aa50 <_realloc_r+0xc0>
1002a9e4:	00bffe04 	movi	r2,-8
1002a9e8:	188e703a 	and	r7,r3,r2
1002a9ec:	3839883a 	mov	fp,r7
1002a9f0:	38001a16 	blt	r7,zero,1002aa5c <_realloc_r+0xcc>
1002a9f4:	e4401936 	bltu	fp,r17,1002aa5c <_realloc_r+0xcc>
1002a9f8:	013fff04 	movi	r4,-4
1002a9fc:	4126703a 	and	r19,r8,r4
1002aa00:	99c02616 	blt	r19,r7,1002aa9c <_realloc_r+0x10c>
1002aa04:	802b883a 	mov	r21,r16
1002aa08:	9829883a 	mov	r20,r19
1002aa0c:	84000204 	addi	r16,r16,8
1002aa10:	a80f883a 	mov	r7,r21
1002aa14:	a70dc83a 	sub	r6,r20,fp
1002aa18:	008003c4 	movi	r2,15
1002aa1c:	1180c136 	bltu	r2,r6,1002ad24 <_realloc_r+0x394>
1002aa20:	38800117 	ldw	r2,4(r7)
1002aa24:	a549883a 	add	r4,r20,r21
1002aa28:	1080004c 	andi	r2,r2,1
1002aa2c:	a084b03a 	or	r2,r20,r2
1002aa30:	38800115 	stw	r2,4(r7)
1002aa34:	20c00117 	ldw	r3,4(r4)
1002aa38:	18c00054 	ori	r3,r3,1
1002aa3c:	20c00115 	stw	r3,4(r4)
1002aa40:	b009883a 	mov	r4,r22
1002aa44:	00317d40 	call	100317d4 <__malloc_unlock>
1002aa48:	8023883a 	mov	r17,r16
1002aa4c:	00000606 	br	1002aa68 <_realloc_r+0xd8>
1002aa50:	01c00404 	movi	r7,16
1002aa54:	3839883a 	mov	fp,r7
1002aa58:	e47fe72e 	bgeu	fp,r17,1002a9f8 <_realloc_r+0x68>
1002aa5c:	00800304 	movi	r2,12
1002aa60:	0023883a 	mov	r17,zero
1002aa64:	b0800015 	stw	r2,0(r22)
1002aa68:	8805883a 	mov	r2,r17
1002aa6c:	dfc00b17 	ldw	ra,44(sp)
1002aa70:	df000a17 	ldw	fp,40(sp)
1002aa74:	ddc00917 	ldw	r23,36(sp)
1002aa78:	dd800817 	ldw	r22,32(sp)
1002aa7c:	dd400717 	ldw	r21,28(sp)
1002aa80:	dd000617 	ldw	r20,24(sp)
1002aa84:	dcc00517 	ldw	r19,20(sp)
1002aa88:	dc800417 	ldw	r18,16(sp)
1002aa8c:	dc400317 	ldw	r17,12(sp)
1002aa90:	dc000217 	ldw	r16,8(sp)
1002aa94:	dec00c04 	addi	sp,sp,48
1002aa98:	f800283a 	ret
1002aa9c:	00800034 	movhi	r2,0
1002aaa0:	10854504 	addi	r2,r2,5396
1002aaa4:	12400217 	ldw	r9,8(r2)
1002aaa8:	84cd883a 	add	r6,r16,r19
1002aaac:	802b883a 	mov	r21,r16
1002aab0:	3240b926 	beq	r6,r9,1002ad98 <_realloc_r+0x408>
1002aab4:	31400117 	ldw	r5,4(r6)
1002aab8:	00bfff84 	movi	r2,-2
1002aabc:	2884703a 	and	r2,r5,r2
1002aac0:	1185883a 	add	r2,r2,r6
1002aac4:	10c00117 	ldw	r3,4(r2)
1002aac8:	18c0004c 	andi	r3,r3,1
1002aacc:	1807003a 	cmpeq	r3,r3,zero
1002aad0:	1800a326 	beq	r3,zero,1002ad60 <_realloc_r+0x3d0>
1002aad4:	2908703a 	and	r4,r5,r4
1002aad8:	9929883a 	add	r20,r19,r4
1002aadc:	a1c0a30e 	bge	r20,r7,1002ad6c <_realloc_r+0x3dc>
1002aae0:	4080004c 	andi	r2,r8,1
1002aae4:	1000551e 	bne	r2,zero,1002ac3c <_realloc_r+0x2ac>
1002aae8:	80800017 	ldw	r2,0(r16)
1002aaec:	80afc83a 	sub	r23,r16,r2
1002aaf0:	b8c00117 	ldw	r3,4(r23)
1002aaf4:	00bfff04 	movi	r2,-4
1002aaf8:	1884703a 	and	r2,r3,r2
1002aafc:	30002e26 	beq	r6,zero,1002abb8 <_realloc_r+0x228>
1002ab00:	3240b926 	beq	r6,r9,1002ade8 <_realloc_r+0x458>
1002ab04:	98a9883a 	add	r20,r19,r2
1002ab08:	2509883a 	add	r4,r4,r20
1002ab0c:	d9000015 	stw	r4,0(sp)
1002ab10:	21c02a16 	blt	r4,r7,1002abbc <_realloc_r+0x22c>
1002ab14:	30800317 	ldw	r2,12(r6)
1002ab18:	30c00217 	ldw	r3,8(r6)
1002ab1c:	01400904 	movi	r5,36
1002ab20:	99bfff04 	addi	r6,r19,-4
1002ab24:	18800315 	stw	r2,12(r3)
1002ab28:	10c00215 	stw	r3,8(r2)
1002ab2c:	b9000317 	ldw	r4,12(r23)
1002ab30:	b8800217 	ldw	r2,8(r23)
1002ab34:	b82b883a 	mov	r21,r23
1002ab38:	bc000204 	addi	r16,r23,8
1002ab3c:	20800215 	stw	r2,8(r4)
1002ab40:	11000315 	stw	r4,12(r2)
1002ab44:	2980e436 	bltu	r5,r6,1002aed8 <_realloc_r+0x548>
1002ab48:	008004c4 	movi	r2,19
1002ab4c:	9009883a 	mov	r4,r18
1002ab50:	8011883a 	mov	r8,r16
1002ab54:	11800f2e 	bgeu	r2,r6,1002ab94 <_realloc_r+0x204>
1002ab58:	90800017 	ldw	r2,0(r18)
1002ab5c:	ba000404 	addi	r8,r23,16
1002ab60:	91000204 	addi	r4,r18,8
1002ab64:	b8800215 	stw	r2,8(r23)
1002ab68:	90c00117 	ldw	r3,4(r18)
1002ab6c:	008006c4 	movi	r2,27
1002ab70:	b8c00315 	stw	r3,12(r23)
1002ab74:	1180072e 	bgeu	r2,r6,1002ab94 <_realloc_r+0x204>
1002ab78:	90c00217 	ldw	r3,8(r18)
1002ab7c:	ba000604 	addi	r8,r23,24
1002ab80:	91000404 	addi	r4,r18,16
1002ab84:	b8c00415 	stw	r3,16(r23)
1002ab88:	90800317 	ldw	r2,12(r18)
1002ab8c:	b8800515 	stw	r2,20(r23)
1002ab90:	3140e726 	beq	r6,r5,1002af30 <_realloc_r+0x5a0>
1002ab94:	20800017 	ldw	r2,0(r4)
1002ab98:	dd000017 	ldw	r20,0(sp)
1002ab9c:	b80f883a 	mov	r7,r23
1002aba0:	40800015 	stw	r2,0(r8)
1002aba4:	20c00117 	ldw	r3,4(r4)
1002aba8:	40c00115 	stw	r3,4(r8)
1002abac:	20800217 	ldw	r2,8(r4)
1002abb0:	40800215 	stw	r2,8(r8)
1002abb4:	003f9706 	br	1002aa14 <_realloc_r+0x84>
1002abb8:	98a9883a 	add	r20,r19,r2
1002abbc:	a1c01f16 	blt	r20,r7,1002ac3c <_realloc_r+0x2ac>
1002abc0:	b8c00317 	ldw	r3,12(r23)
1002abc4:	b8800217 	ldw	r2,8(r23)
1002abc8:	99bfff04 	addi	r6,r19,-4
1002abcc:	01400904 	movi	r5,36
1002abd0:	b82b883a 	mov	r21,r23
1002abd4:	18800215 	stw	r2,8(r3)
1002abd8:	10c00315 	stw	r3,12(r2)
1002abdc:	bc000204 	addi	r16,r23,8
1002abe0:	2980c336 	bltu	r5,r6,1002aef0 <_realloc_r+0x560>
1002abe4:	008004c4 	movi	r2,19
1002abe8:	9009883a 	mov	r4,r18
1002abec:	8011883a 	mov	r8,r16
1002abf0:	11800f2e 	bgeu	r2,r6,1002ac30 <_realloc_r+0x2a0>
1002abf4:	90800017 	ldw	r2,0(r18)
1002abf8:	ba000404 	addi	r8,r23,16
1002abfc:	91000204 	addi	r4,r18,8
1002ac00:	b8800215 	stw	r2,8(r23)
1002ac04:	90c00117 	ldw	r3,4(r18)
1002ac08:	008006c4 	movi	r2,27
1002ac0c:	b8c00315 	stw	r3,12(r23)
1002ac10:	1180072e 	bgeu	r2,r6,1002ac30 <_realloc_r+0x2a0>
1002ac14:	90c00217 	ldw	r3,8(r18)
1002ac18:	ba000604 	addi	r8,r23,24
1002ac1c:	91000404 	addi	r4,r18,16
1002ac20:	b8c00415 	stw	r3,16(r23)
1002ac24:	90800317 	ldw	r2,12(r18)
1002ac28:	b8800515 	stw	r2,20(r23)
1002ac2c:	3140c726 	beq	r6,r5,1002af4c <_realloc_r+0x5bc>
1002ac30:	20800017 	ldw	r2,0(r4)
1002ac34:	b80f883a 	mov	r7,r23
1002ac38:	003fd906 	br	1002aba0 <_realloc_r+0x210>
1002ac3c:	880b883a 	mov	r5,r17
1002ac40:	b009883a 	mov	r4,r22
1002ac44:	002249c0 	call	1002249c <_malloc_r>
1002ac48:	1023883a 	mov	r17,r2
1002ac4c:	10002526 	beq	r2,zero,1002ace4 <_realloc_r+0x354>
1002ac50:	80800117 	ldw	r2,4(r16)
1002ac54:	00ffff84 	movi	r3,-2
1002ac58:	893ffe04 	addi	r4,r17,-8
1002ac5c:	10c4703a 	and	r2,r2,r3
1002ac60:	8085883a 	add	r2,r16,r2
1002ac64:	20809526 	beq	r4,r2,1002aebc <_realloc_r+0x52c>
1002ac68:	99bfff04 	addi	r6,r19,-4
1002ac6c:	01c00904 	movi	r7,36
1002ac70:	39804536 	bltu	r7,r6,1002ad88 <_realloc_r+0x3f8>
1002ac74:	008004c4 	movi	r2,19
1002ac78:	9009883a 	mov	r4,r18
1002ac7c:	880b883a 	mov	r5,r17
1002ac80:	11800f2e 	bgeu	r2,r6,1002acc0 <_realloc_r+0x330>
1002ac84:	90800017 	ldw	r2,0(r18)
1002ac88:	89400204 	addi	r5,r17,8
1002ac8c:	91000204 	addi	r4,r18,8
1002ac90:	88800015 	stw	r2,0(r17)
1002ac94:	90c00117 	ldw	r3,4(r18)
1002ac98:	008006c4 	movi	r2,27
1002ac9c:	88c00115 	stw	r3,4(r17)
1002aca0:	1180072e 	bgeu	r2,r6,1002acc0 <_realloc_r+0x330>
1002aca4:	90c00217 	ldw	r3,8(r18)
1002aca8:	89400404 	addi	r5,r17,16
1002acac:	91000404 	addi	r4,r18,16
1002acb0:	88c00215 	stw	r3,8(r17)
1002acb4:	90800317 	ldw	r2,12(r18)
1002acb8:	88800315 	stw	r2,12(r17)
1002acbc:	31c09126 	beq	r6,r7,1002af04 <_realloc_r+0x574>
1002acc0:	20800017 	ldw	r2,0(r4)
1002acc4:	28800015 	stw	r2,0(r5)
1002acc8:	20c00117 	ldw	r3,4(r4)
1002accc:	28c00115 	stw	r3,4(r5)
1002acd0:	20800217 	ldw	r2,8(r4)
1002acd4:	28800215 	stw	r2,8(r5)
1002acd8:	900b883a 	mov	r5,r18
1002acdc:	b009883a 	mov	r4,r22
1002ace0:	00288a00 	call	100288a0 <_free_r>
1002ace4:	b009883a 	mov	r4,r22
1002ace8:	00317d40 	call	100317d4 <__malloc_unlock>
1002acec:	003f5e06 	br	1002aa68 <_realloc_r+0xd8>
1002acf0:	300b883a 	mov	r5,r6
1002acf4:	dfc00b17 	ldw	ra,44(sp)
1002acf8:	df000a17 	ldw	fp,40(sp)
1002acfc:	ddc00917 	ldw	r23,36(sp)
1002ad00:	dd800817 	ldw	r22,32(sp)
1002ad04:	dd400717 	ldw	r21,28(sp)
1002ad08:	dd000617 	ldw	r20,24(sp)
1002ad0c:	dcc00517 	ldw	r19,20(sp)
1002ad10:	dc800417 	ldw	r18,16(sp)
1002ad14:	dc400317 	ldw	r17,12(sp)
1002ad18:	dc000217 	ldw	r16,8(sp)
1002ad1c:	dec00c04 	addi	sp,sp,48
1002ad20:	002249c1 	jmpi	1002249c <_malloc_r>
1002ad24:	38800117 	ldw	r2,4(r7)
1002ad28:	e54b883a 	add	r5,fp,r21
1002ad2c:	31000054 	ori	r4,r6,1
1002ad30:	1080004c 	andi	r2,r2,1
1002ad34:	1704b03a 	or	r2,r2,fp
1002ad38:	38800115 	stw	r2,4(r7)
1002ad3c:	29000115 	stw	r4,4(r5)
1002ad40:	2987883a 	add	r3,r5,r6
1002ad44:	18800117 	ldw	r2,4(r3)
1002ad48:	29400204 	addi	r5,r5,8
1002ad4c:	b009883a 	mov	r4,r22
1002ad50:	10800054 	ori	r2,r2,1
1002ad54:	18800115 	stw	r2,4(r3)
1002ad58:	00288a00 	call	100288a0 <_free_r>
1002ad5c:	003f3806 	br	1002aa40 <_realloc_r+0xb0>
1002ad60:	000d883a 	mov	r6,zero
1002ad64:	0009883a 	mov	r4,zero
1002ad68:	003f5d06 	br	1002aae0 <_realloc_r+0x150>
1002ad6c:	30c00217 	ldw	r3,8(r6)
1002ad70:	30800317 	ldw	r2,12(r6)
1002ad74:	800f883a 	mov	r7,r16
1002ad78:	84000204 	addi	r16,r16,8
1002ad7c:	10c00215 	stw	r3,8(r2)
1002ad80:	18800315 	stw	r2,12(r3)
1002ad84:	003f2306 	br	1002aa14 <_realloc_r+0x84>
1002ad88:	8809883a 	mov	r4,r17
1002ad8c:	900b883a 	mov	r5,r18
1002ad90:	00296380 	call	10029638 <memmove>
1002ad94:	003fd006 	br	1002acd8 <_realloc_r+0x348>
1002ad98:	30800117 	ldw	r2,4(r6)
1002ad9c:	e0c00404 	addi	r3,fp,16
1002ada0:	1108703a 	and	r4,r2,r4
1002ada4:	9905883a 	add	r2,r19,r4
1002ada8:	10ff4d16 	blt	r2,r3,1002aae0 <_realloc_r+0x150>
1002adac:	1705c83a 	sub	r2,r2,fp
1002adb0:	870b883a 	add	r5,r16,fp
1002adb4:	10800054 	ori	r2,r2,1
1002adb8:	28800115 	stw	r2,4(r5)
1002adbc:	80c00117 	ldw	r3,4(r16)
1002adc0:	00800034 	movhi	r2,0
1002adc4:	10854504 	addi	r2,r2,5396
1002adc8:	b009883a 	mov	r4,r22
1002adcc:	18c0004c 	andi	r3,r3,1
1002add0:	e0c6b03a 	or	r3,fp,r3
1002add4:	11400215 	stw	r5,8(r2)
1002add8:	80c00115 	stw	r3,4(r16)
1002addc:	00317d40 	call	100317d4 <__malloc_unlock>
1002ade0:	84400204 	addi	r17,r16,8
1002ade4:	003f2006 	br	1002aa68 <_realloc_r+0xd8>
1002ade8:	98a9883a 	add	r20,r19,r2
1002adec:	2509883a 	add	r4,r4,r20
1002adf0:	e0800404 	addi	r2,fp,16
1002adf4:	d9000115 	stw	r4,4(sp)
1002adf8:	20bf7016 	blt	r4,r2,1002abbc <_realloc_r+0x22c>
1002adfc:	b8c00317 	ldw	r3,12(r23)
1002ae00:	b8800217 	ldw	r2,8(r23)
1002ae04:	99bfff04 	addi	r6,r19,-4
1002ae08:	01400904 	movi	r5,36
1002ae0c:	18800215 	stw	r2,8(r3)
1002ae10:	10c00315 	stw	r3,12(r2)
1002ae14:	bc400204 	addi	r17,r23,8
1002ae18:	29804136 	bltu	r5,r6,1002af20 <_realloc_r+0x590>
1002ae1c:	008004c4 	movi	r2,19
1002ae20:	9009883a 	mov	r4,r18
1002ae24:	880f883a 	mov	r7,r17
1002ae28:	11800f2e 	bgeu	r2,r6,1002ae68 <_realloc_r+0x4d8>
1002ae2c:	90800017 	ldw	r2,0(r18)
1002ae30:	b9c00404 	addi	r7,r23,16
1002ae34:	91000204 	addi	r4,r18,8
1002ae38:	b8800215 	stw	r2,8(r23)
1002ae3c:	90c00117 	ldw	r3,4(r18)
1002ae40:	008006c4 	movi	r2,27
1002ae44:	b8c00315 	stw	r3,12(r23)
1002ae48:	1180072e 	bgeu	r2,r6,1002ae68 <_realloc_r+0x4d8>
1002ae4c:	90c00217 	ldw	r3,8(r18)
1002ae50:	b9c00604 	addi	r7,r23,24
1002ae54:	91000404 	addi	r4,r18,16
1002ae58:	b8c00415 	stw	r3,16(r23)
1002ae5c:	90800317 	ldw	r2,12(r18)
1002ae60:	b8800515 	stw	r2,20(r23)
1002ae64:	31404026 	beq	r6,r5,1002af68 <_realloc_r+0x5d8>
1002ae68:	20800017 	ldw	r2,0(r4)
1002ae6c:	38800015 	stw	r2,0(r7)
1002ae70:	20c00117 	ldw	r3,4(r4)
1002ae74:	38c00115 	stw	r3,4(r7)
1002ae78:	20800217 	ldw	r2,8(r4)
1002ae7c:	38800215 	stw	r2,8(r7)
1002ae80:	d8c00117 	ldw	r3,4(sp)
1002ae84:	bf0b883a 	add	r5,r23,fp
1002ae88:	b009883a 	mov	r4,r22
1002ae8c:	1f05c83a 	sub	r2,r3,fp
1002ae90:	10800054 	ori	r2,r2,1
1002ae94:	28800115 	stw	r2,4(r5)
1002ae98:	b8c00117 	ldw	r3,4(r23)
1002ae9c:	00800034 	movhi	r2,0
1002aea0:	10854504 	addi	r2,r2,5396
1002aea4:	11400215 	stw	r5,8(r2)
1002aea8:	18c0004c 	andi	r3,r3,1
1002aeac:	e0c6b03a 	or	r3,fp,r3
1002aeb0:	b8c00115 	stw	r3,4(r23)
1002aeb4:	00317d40 	call	100317d4 <__malloc_unlock>
1002aeb8:	003eeb06 	br	1002aa68 <_realloc_r+0xd8>
1002aebc:	20800117 	ldw	r2,4(r4)
1002aec0:	00ffff04 	movi	r3,-4
1002aec4:	800f883a 	mov	r7,r16
1002aec8:	10c4703a 	and	r2,r2,r3
1002aecc:	98a9883a 	add	r20,r19,r2
1002aed0:	84000204 	addi	r16,r16,8
1002aed4:	003ecf06 	br	1002aa14 <_realloc_r+0x84>
1002aed8:	900b883a 	mov	r5,r18
1002aedc:	8009883a 	mov	r4,r16
1002aee0:	00296380 	call	10029638 <memmove>
1002aee4:	dd000017 	ldw	r20,0(sp)
1002aee8:	b80f883a 	mov	r7,r23
1002aeec:	003ec906 	br	1002aa14 <_realloc_r+0x84>
1002aef0:	900b883a 	mov	r5,r18
1002aef4:	8009883a 	mov	r4,r16
1002aef8:	00296380 	call	10029638 <memmove>
1002aefc:	b80f883a 	mov	r7,r23
1002af00:	003ec406 	br	1002aa14 <_realloc_r+0x84>
1002af04:	90c00417 	ldw	r3,16(r18)
1002af08:	89400604 	addi	r5,r17,24
1002af0c:	91000604 	addi	r4,r18,24
1002af10:	88c00415 	stw	r3,16(r17)
1002af14:	90800517 	ldw	r2,20(r18)
1002af18:	88800515 	stw	r2,20(r17)
1002af1c:	003f6806 	br	1002acc0 <_realloc_r+0x330>
1002af20:	900b883a 	mov	r5,r18
1002af24:	8809883a 	mov	r4,r17
1002af28:	00296380 	call	10029638 <memmove>
1002af2c:	003fd406 	br	1002ae80 <_realloc_r+0x4f0>
1002af30:	90c00417 	ldw	r3,16(r18)
1002af34:	91000604 	addi	r4,r18,24
1002af38:	ba000804 	addi	r8,r23,32
1002af3c:	b8c00615 	stw	r3,24(r23)
1002af40:	90800517 	ldw	r2,20(r18)
1002af44:	b8800715 	stw	r2,28(r23)
1002af48:	003f1206 	br	1002ab94 <_realloc_r+0x204>
1002af4c:	90c00417 	ldw	r3,16(r18)
1002af50:	91000604 	addi	r4,r18,24
1002af54:	ba000804 	addi	r8,r23,32
1002af58:	b8c00615 	stw	r3,24(r23)
1002af5c:	90800517 	ldw	r2,20(r18)
1002af60:	b8800715 	stw	r2,28(r23)
1002af64:	003f3206 	br	1002ac30 <_realloc_r+0x2a0>
1002af68:	90c00417 	ldw	r3,16(r18)
1002af6c:	91000604 	addi	r4,r18,24
1002af70:	b9c00804 	addi	r7,r23,32
1002af74:	b8c00615 	stw	r3,24(r23)
1002af78:	90800517 	ldw	r2,20(r18)
1002af7c:	b8800715 	stw	r2,28(r23)
1002af80:	003fb906 	br	1002ae68 <_realloc_r+0x4d8>

1002af84 <__srefill_r>:
1002af84:	defffd04 	addi	sp,sp,-12
1002af88:	dc400115 	stw	r17,4(sp)
1002af8c:	dc000015 	stw	r16,0(sp)
1002af90:	dfc00215 	stw	ra,8(sp)
1002af94:	2023883a 	mov	r17,r4
1002af98:	2821883a 	mov	r16,r5
1002af9c:	20000226 	beq	r4,zero,1002afa8 <__srefill_r+0x24>
1002afa0:	20800e17 	ldw	r2,56(r4)
1002afa4:	10004126 	beq	r2,zero,1002b0ac <__srefill_r+0x128>
1002afa8:	80c0030b 	ldhu	r3,12(r16)
1002afac:	80000115 	stw	zero,4(r16)
1002afb0:	1880080c 	andi	r2,r3,32
1002afb4:	1000361e 	bne	r2,zero,1002b090 <__srefill_r+0x10c>
1002afb8:	1880010c 	andi	r2,r3,4
1002afbc:	1000211e 	bne	r2,zero,1002b044 <__srefill_r+0xc0>
1002afc0:	1880040c 	andi	r2,r3,16
1002afc4:	10005026 	beq	r2,zero,1002b108 <__srefill_r+0x184>
1002afc8:	1880020c 	andi	r2,r3,8
1002afcc:	1000541e 	bne	r2,zero,1002b120 <__srefill_r+0x19c>
1002afd0:	8080030b 	ldhu	r2,12(r16)
1002afd4:	10800114 	ori	r2,r2,4
1002afd8:	8080030d 	sth	r2,12(r16)
1002afdc:	80800417 	ldw	r2,16(r16)
1002afe0:	10004526 	beq	r2,zero,1002b0f8 <__srefill_r+0x174>
1002afe4:	8080030b 	ldhu	r2,12(r16)
1002afe8:	108000cc 	andi	r2,r2,3
1002afec:	1000361e 	bne	r2,zero,1002b0c8 <__srefill_r+0x144>
1002aff0:	81800417 	ldw	r6,16(r16)
1002aff4:	80c00817 	ldw	r3,32(r16)
1002aff8:	81400717 	ldw	r5,28(r16)
1002affc:	81c00517 	ldw	r7,20(r16)
1002b000:	8809883a 	mov	r4,r17
1002b004:	81800015 	stw	r6,0(r16)
1002b008:	183ee83a 	callr	r3
1002b00c:	80c0030b 	ldhu	r3,12(r16)
1002b010:	1009883a 	mov	r4,r2
1002b014:	80800115 	stw	r2,4(r16)
1002b018:	00b7ffc4 	movi	r2,-8193
1002b01c:	1884703a 	and	r2,r3,r2
1002b020:	8080030d 	sth	r2,12(r16)
1002b024:	0100230e 	bge	zero,r4,1002b0b4 <__srefill_r+0x130>
1002b028:	0009883a 	mov	r4,zero
1002b02c:	2005883a 	mov	r2,r4
1002b030:	dfc00217 	ldw	ra,8(sp)
1002b034:	dc400117 	ldw	r17,4(sp)
1002b038:	dc000017 	ldw	r16,0(sp)
1002b03c:	dec00304 	addi	sp,sp,12
1002b040:	f800283a 	ret
1002b044:	81400c17 	ldw	r5,48(r16)
1002b048:	283fe426 	beq	r5,zero,1002afdc <__srefill_r+0x58>
1002b04c:	80801004 	addi	r2,r16,64
1002b050:	28800226 	beq	r5,r2,1002b05c <__srefill_r+0xd8>
1002b054:	8809883a 	mov	r4,r17
1002b058:	00288a00 	call	100288a0 <_free_r>
1002b05c:	80800f17 	ldw	r2,60(r16)
1002b060:	80000c15 	stw	zero,48(r16)
1002b064:	80800115 	stw	r2,4(r16)
1002b068:	103fdc26 	beq	r2,zero,1002afdc <__srefill_r+0x58>
1002b06c:	80800e17 	ldw	r2,56(r16)
1002b070:	0009883a 	mov	r4,zero
1002b074:	80800015 	stw	r2,0(r16)
1002b078:	2005883a 	mov	r2,r4
1002b07c:	dfc00217 	ldw	ra,8(sp)
1002b080:	dc400117 	ldw	r17,4(sp)
1002b084:	dc000017 	ldw	r16,0(sp)
1002b088:	dec00304 	addi	sp,sp,12
1002b08c:	f800283a 	ret
1002b090:	013fffc4 	movi	r4,-1
1002b094:	2005883a 	mov	r2,r4
1002b098:	dfc00217 	ldw	ra,8(sp)
1002b09c:	dc400117 	ldw	r17,4(sp)
1002b0a0:	dc000017 	ldw	r16,0(sp)
1002b0a4:	dec00304 	addi	sp,sp,12
1002b0a8:	f800283a 	ret
1002b0ac:	00282e00 	call	100282e0 <__sinit>
1002b0b0:	003fbd06 	br	1002afa8 <__srefill_r+0x24>
1002b0b4:	20000b1e 	bne	r4,zero,1002b0e4 <__srefill_r+0x160>
1002b0b8:	10800814 	ori	r2,r2,32
1002b0bc:	013fffc4 	movi	r4,-1
1002b0c0:	8080030d 	sth	r2,12(r16)
1002b0c4:	003fd906 	br	1002b02c <__srefill_r+0xa8>
1002b0c8:	00800034 	movhi	r2,0
1002b0cc:	108b0804 	addi	r2,r2,11296
1002b0d0:	11000017 	ldw	r4,0(r2)
1002b0d4:	014400f4 	movhi	r5,4099
1002b0d8:	296c5204 	addi	r5,r5,-20152
1002b0dc:	00291180 	call	10029118 <_fwalk>
1002b0e0:	003fc306 	br	1002aff0 <__srefill_r+0x6c>
1002b0e4:	10801014 	ori	r2,r2,64
1002b0e8:	013fffc4 	movi	r4,-1
1002b0ec:	8080030d 	sth	r2,12(r16)
1002b0f0:	80000115 	stw	zero,4(r16)
1002b0f4:	003fcd06 	br	1002b02c <__srefill_r+0xa8>
1002b0f8:	8809883a 	mov	r4,r17
1002b0fc:	800b883a 	mov	r5,r16
1002b100:	00292c00 	call	100292c0 <__smakebuf_r>
1002b104:	003fb706 	br	1002afe4 <__srefill_r+0x60>
1002b108:	18c01014 	ori	r3,r3,64
1002b10c:	00800244 	movi	r2,9
1002b110:	013fffc4 	movi	r4,-1
1002b114:	88800015 	stw	r2,0(r17)
1002b118:	80c0030d 	sth	r3,12(r16)
1002b11c:	003fc306 	br	1002b02c <__srefill_r+0xa8>
1002b120:	8809883a 	mov	r4,r17
1002b124:	800b883a 	mov	r5,r16
1002b128:	00280480 	call	10028048 <_fflush_r>
1002b12c:	103fd81e 	bne	r2,zero,1002b090 <__srefill_r+0x10c>
1002b130:	8080030b 	ldhu	r2,12(r16)
1002b134:	80000215 	stw	zero,8(r16)
1002b138:	80000615 	stw	zero,24(r16)
1002b13c:	10bffdcc 	andi	r2,r2,65527
1002b140:	8080030d 	sth	r2,12(r16)
1002b144:	003fa206 	br	1002afd0 <__srefill_r+0x4c>

1002b148 <lflush>:
1002b148:	20c0030b 	ldhu	r3,12(r4)
1002b14c:	01400244 	movi	r5,9
1002b150:	0005883a 	mov	r2,zero
1002b154:	18c0024c 	andi	r3,r3,9
1002b158:	19400126 	beq	r3,r5,1002b160 <lflush+0x18>
1002b15c:	f800283a 	ret
1002b160:	00282441 	jmpi	10028244 <fflush>

1002b164 <__isinfd>:
1002b164:	200d883a 	mov	r6,r4
1002b168:	0109c83a 	sub	r4,zero,r4
1002b16c:	2188b03a 	or	r4,r4,r6
1002b170:	2008d7fa 	srli	r4,r4,31
1002b174:	00a00034 	movhi	r2,32768
1002b178:	10bfffc4 	addi	r2,r2,-1
1002b17c:	1144703a 	and	r2,r2,r5
1002b180:	2088b03a 	or	r4,r4,r2
1002b184:	009ffc34 	movhi	r2,32752
1002b188:	1105c83a 	sub	r2,r2,r4
1002b18c:	0087c83a 	sub	r3,zero,r2
1002b190:	10c4b03a 	or	r2,r2,r3
1002b194:	1004d7fa 	srli	r2,r2,31
1002b198:	00c00044 	movi	r3,1
1002b19c:	1885c83a 	sub	r2,r3,r2
1002b1a0:	f800283a 	ret

1002b1a4 <__isnand>:
1002b1a4:	200d883a 	mov	r6,r4
1002b1a8:	0109c83a 	sub	r4,zero,r4
1002b1ac:	2188b03a 	or	r4,r4,r6
1002b1b0:	2008d7fa 	srli	r4,r4,31
1002b1b4:	00a00034 	movhi	r2,32768
1002b1b8:	10bfffc4 	addi	r2,r2,-1
1002b1bc:	1144703a 	and	r2,r2,r5
1002b1c0:	2088b03a 	or	r4,r4,r2
1002b1c4:	009ffc34 	movhi	r2,32752
1002b1c8:	1105c83a 	sub	r2,r2,r4
1002b1cc:	1004d7fa 	srli	r2,r2,31
1002b1d0:	f800283a 	ret

1002b1d4 <__sccl>:
1002b1d4:	28c00003 	ldbu	r3,0(r5)
1002b1d8:	00801784 	movi	r2,94
1002b1dc:	2a000044 	addi	r8,r5,1
1002b1e0:	18802526 	beq	r3,r2,1002b278 <__sccl+0xa4>
1002b1e4:	180f883a 	mov	r7,r3
1002b1e8:	0013883a 	mov	r9,zero
1002b1ec:	000d883a 	mov	r6,zero
1002b1f0:	0007883a 	mov	r3,zero
1002b1f4:	01404004 	movi	r5,256
1002b1f8:	1905883a 	add	r2,r3,r4
1002b1fc:	18c00044 	addi	r3,r3,1
1002b200:	11800005 	stb	r6,0(r2)
1002b204:	197ffc1e 	bne	r3,r5,1002b1f8 <__sccl+0x24>
1002b208:	38000c26 	beq	r7,zero,1002b23c <__sccl+0x68>
1002b20c:	00800044 	movi	r2,1
1002b210:	124dc83a 	sub	r6,r2,r9
1002b214:	3905883a 	add	r2,r7,r4
1002b218:	11800005 	stb	r6,0(r2)
1002b21c:	41400044 	addi	r5,r8,1
1002b220:	02400b44 	movi	r9,45
1002b224:	02801744 	movi	r10,93
1002b228:	28bfffc3 	ldbu	r2,-1(r5)
1002b22c:	2811883a 	mov	r8,r5
1002b230:	12400726 	beq	r2,r9,1002b250 <__sccl+0x7c>
1002b234:	12800226 	beq	r2,r10,1002b240 <__sccl+0x6c>
1002b238:	1000031e 	bne	r2,zero,1002b248 <__sccl+0x74>
1002b23c:	423fffc4 	addi	r8,r8,-1
1002b240:	4005883a 	mov	r2,r8
1002b244:	f800283a 	ret
1002b248:	100f883a 	mov	r7,r2
1002b24c:	003ff106 	br	1002b214 <__sccl+0x40>
1002b250:	28c00003 	ldbu	r3,0(r5)
1002b254:	1a800d26 	beq	r3,r10,1002b28c <__sccl+0xb8>
1002b258:	19c00c16 	blt	r3,r7,1002b28c <__sccl+0xb8>
1002b25c:	21c5883a 	add	r2,r4,r7
1002b260:	39c00044 	addi	r7,r7,1
1002b264:	11800045 	stb	r6,1(r2)
1002b268:	10800044 	addi	r2,r2,1
1002b26c:	38fffc16 	blt	r7,r3,1002b260 <__sccl+0x8c>
1002b270:	29400084 	addi	r5,r5,2
1002b274:	003fec06 	br	1002b228 <__sccl+0x54>
1002b278:	29c00043 	ldbu	r7,1(r5)
1002b27c:	02400044 	movi	r9,1
1002b280:	2a000084 	addi	r8,r5,2
1002b284:	480d883a 	mov	r6,r9
1002b288:	003fd906 	br	1002b1f0 <__sccl+0x1c>
1002b28c:	01c00b44 	movi	r7,45
1002b290:	003fe006 	br	1002b214 <__sccl+0x40>

1002b294 <nanf>:
1002b294:	009ff034 	movhi	r2,32704
1002b298:	f800283a 	ret

1002b29c <sprintf>:
1002b29c:	deffe504 	addi	sp,sp,-108
1002b2a0:	2013883a 	mov	r9,r4
1002b2a4:	dfc01815 	stw	ra,96(sp)
1002b2a8:	d9801915 	stw	r6,100(sp)
1002b2ac:	d9c01a15 	stw	r7,104(sp)
1002b2b0:	d8801904 	addi	r2,sp,100
1002b2b4:	d8800015 	stw	r2,0(sp)
1002b2b8:	00800034 	movhi	r2,0
1002b2bc:	108b0704 	addi	r2,r2,11292
1002b2c0:	11000017 	ldw	r4,0(r2)
1002b2c4:	d9c00017 	ldw	r7,0(sp)
1002b2c8:	00808204 	movi	r2,520
1002b2cc:	00e00034 	movhi	r3,32768
1002b2d0:	18ffffc4 	addi	r3,r3,-1
1002b2d4:	280d883a 	mov	r6,r5
1002b2d8:	d880040d 	sth	r2,16(sp)
1002b2dc:	d9400104 	addi	r5,sp,4
1002b2e0:	00bfffc4 	movi	r2,-1
1002b2e4:	d8c00615 	stw	r3,24(sp)
1002b2e8:	d8c00315 	stw	r3,12(sp)
1002b2ec:	da400515 	stw	r9,20(sp)
1002b2f0:	d880048d 	sth	r2,18(sp)
1002b2f4:	da400115 	stw	r9,4(sp)
1002b2f8:	00230f00 	call	100230f0 <___vfprintf_internal_r>
1002b2fc:	d8c00117 	ldw	r3,4(sp)
1002b300:	18000005 	stb	zero,0(r3)
1002b304:	dfc01817 	ldw	ra,96(sp)
1002b308:	dec01b04 	addi	sp,sp,108
1002b30c:	f800283a 	ret

1002b310 <_sprintf_r>:
1002b310:	deffe604 	addi	sp,sp,-104
1002b314:	2813883a 	mov	r9,r5
1002b318:	dfc01815 	stw	ra,96(sp)
1002b31c:	d9c01915 	stw	r7,100(sp)
1002b320:	d8801904 	addi	r2,sp,100
1002b324:	d8800015 	stw	r2,0(sp)
1002b328:	100f883a 	mov	r7,r2
1002b32c:	00808204 	movi	r2,520
1002b330:	00e00034 	movhi	r3,32768
1002b334:	18ffffc4 	addi	r3,r3,-1
1002b338:	d880040d 	sth	r2,16(sp)
1002b33c:	d9400104 	addi	r5,sp,4
1002b340:	00bfffc4 	movi	r2,-1
1002b344:	d8c00615 	stw	r3,24(sp)
1002b348:	d8c00315 	stw	r3,12(sp)
1002b34c:	da400515 	stw	r9,20(sp)
1002b350:	d880048d 	sth	r2,18(sp)
1002b354:	da400115 	stw	r9,4(sp)
1002b358:	00230f00 	call	100230f0 <___vfprintf_internal_r>
1002b35c:	d8c00117 	ldw	r3,4(sp)
1002b360:	18000005 	stb	zero,0(r3)
1002b364:	dfc01817 	ldw	ra,96(sp)
1002b368:	dec01a04 	addi	sp,sp,104
1002b36c:	f800283a 	ret

1002b370 <__sclose>:
1002b370:	2940038f 	ldh	r5,14(r5)
1002b374:	002dbb41 	jmpi	1002dbb4 <_close_r>

1002b378 <__sseek>:
1002b378:	defffe04 	addi	sp,sp,-8
1002b37c:	dc000015 	stw	r16,0(sp)
1002b380:	2821883a 	mov	r16,r5
1002b384:	2940038f 	ldh	r5,14(r5)
1002b388:	dfc00115 	stw	ra,4(sp)
1002b38c:	002e9b40 	call	1002e9b4 <_lseek_r>
1002b390:	1007883a 	mov	r3,r2
1002b394:	00bfffc4 	movi	r2,-1
1002b398:	18800926 	beq	r3,r2,1002b3c0 <__sseek+0x48>
1002b39c:	8080030b 	ldhu	r2,12(r16)
1002b3a0:	80c01415 	stw	r3,80(r16)
1002b3a4:	10840014 	ori	r2,r2,4096
1002b3a8:	8080030d 	sth	r2,12(r16)
1002b3ac:	1805883a 	mov	r2,r3
1002b3b0:	dfc00117 	ldw	ra,4(sp)
1002b3b4:	dc000017 	ldw	r16,0(sp)
1002b3b8:	dec00204 	addi	sp,sp,8
1002b3bc:	f800283a 	ret
1002b3c0:	8080030b 	ldhu	r2,12(r16)
1002b3c4:	10bbffcc 	andi	r2,r2,61439
1002b3c8:	8080030d 	sth	r2,12(r16)
1002b3cc:	1805883a 	mov	r2,r3
1002b3d0:	dfc00117 	ldw	ra,4(sp)
1002b3d4:	dc000017 	ldw	r16,0(sp)
1002b3d8:	dec00204 	addi	sp,sp,8
1002b3dc:	f800283a 	ret

1002b3e0 <__swrite>:
1002b3e0:	2880030b 	ldhu	r2,12(r5)
1002b3e4:	defffb04 	addi	sp,sp,-20
1002b3e8:	dcc00315 	stw	r19,12(sp)
1002b3ec:	1080400c 	andi	r2,r2,256
1002b3f0:	dc800215 	stw	r18,8(sp)
1002b3f4:	dc400115 	stw	r17,4(sp)
1002b3f8:	dc000015 	stw	r16,0(sp)
1002b3fc:	3027883a 	mov	r19,r6
1002b400:	3825883a 	mov	r18,r7
1002b404:	dfc00415 	stw	ra,16(sp)
1002b408:	2821883a 	mov	r16,r5
1002b40c:	000d883a 	mov	r6,zero
1002b410:	01c00084 	movi	r7,2
1002b414:	2023883a 	mov	r17,r4
1002b418:	10000226 	beq	r2,zero,1002b424 <__swrite+0x44>
1002b41c:	2940038f 	ldh	r5,14(r5)
1002b420:	002e9b40 	call	1002e9b4 <_lseek_r>
1002b424:	8080030b 	ldhu	r2,12(r16)
1002b428:	8140038f 	ldh	r5,14(r16)
1002b42c:	8809883a 	mov	r4,r17
1002b430:	10bbffcc 	andi	r2,r2,61439
1002b434:	980d883a 	mov	r6,r19
1002b438:	900f883a 	mov	r7,r18
1002b43c:	8080030d 	sth	r2,12(r16)
1002b440:	dfc00417 	ldw	ra,16(sp)
1002b444:	dcc00317 	ldw	r19,12(sp)
1002b448:	dc800217 	ldw	r18,8(sp)
1002b44c:	dc400117 	ldw	r17,4(sp)
1002b450:	dc000017 	ldw	r16,0(sp)
1002b454:	dec00504 	addi	sp,sp,20
1002b458:	002da881 	jmpi	1002da88 <_write_r>

1002b45c <__sread>:
1002b45c:	defffe04 	addi	sp,sp,-8
1002b460:	dc000015 	stw	r16,0(sp)
1002b464:	2821883a 	mov	r16,r5
1002b468:	2940038f 	ldh	r5,14(r5)
1002b46c:	dfc00115 	stw	ra,4(sp)
1002b470:	002ea2c0 	call	1002ea2c <_read_r>
1002b474:	1007883a 	mov	r3,r2
1002b478:	10000816 	blt	r2,zero,1002b49c <__sread+0x40>
1002b47c:	80801417 	ldw	r2,80(r16)
1002b480:	10c5883a 	add	r2,r2,r3
1002b484:	80801415 	stw	r2,80(r16)
1002b488:	1805883a 	mov	r2,r3
1002b48c:	dfc00117 	ldw	ra,4(sp)
1002b490:	dc000017 	ldw	r16,0(sp)
1002b494:	dec00204 	addi	sp,sp,8
1002b498:	f800283a 	ret
1002b49c:	8080030b 	ldhu	r2,12(r16)
1002b4a0:	10bbffcc 	andi	r2,r2,61439
1002b4a4:	8080030d 	sth	r2,12(r16)
1002b4a8:	1805883a 	mov	r2,r3
1002b4ac:	dfc00117 	ldw	ra,4(sp)
1002b4b0:	dc000017 	ldw	r16,0(sp)
1002b4b4:	dec00204 	addi	sp,sp,8
1002b4b8:	f800283a 	ret

1002b4bc <strcmp>:
1002b4bc:	2144b03a 	or	r2,r4,r5
1002b4c0:	108000cc 	andi	r2,r2,3
1002b4c4:	10001d1e 	bne	r2,zero,1002b53c <strcmp+0x80>
1002b4c8:	200f883a 	mov	r7,r4
1002b4cc:	28800017 	ldw	r2,0(r5)
1002b4d0:	21000017 	ldw	r4,0(r4)
1002b4d4:	280d883a 	mov	r6,r5
1002b4d8:	2080161e 	bne	r4,r2,1002b534 <strcmp+0x78>
1002b4dc:	023fbff4 	movhi	r8,65279
1002b4e0:	423fbfc4 	addi	r8,r8,-257
1002b4e4:	2207883a 	add	r3,r4,r8
1002b4e8:	01602074 	movhi	r5,32897
1002b4ec:	29602004 	addi	r5,r5,-32640
1002b4f0:	1946703a 	and	r3,r3,r5
1002b4f4:	0104303a 	nor	r2,zero,r4
1002b4f8:	10c4703a 	and	r2,r2,r3
1002b4fc:	10001c1e 	bne	r2,zero,1002b570 <strcmp+0xb4>
1002b500:	4013883a 	mov	r9,r8
1002b504:	2811883a 	mov	r8,r5
1002b508:	00000106 	br	1002b510 <strcmp+0x54>
1002b50c:	1800181e 	bne	r3,zero,1002b570 <strcmp+0xb4>
1002b510:	39c00104 	addi	r7,r7,4
1002b514:	39000017 	ldw	r4,0(r7)
1002b518:	31800104 	addi	r6,r6,4
1002b51c:	31400017 	ldw	r5,0(r6)
1002b520:	2245883a 	add	r2,r4,r9
1002b524:	1204703a 	and	r2,r2,r8
1002b528:	0106303a 	nor	r3,zero,r4
1002b52c:	1886703a 	and	r3,r3,r2
1002b530:	217ff626 	beq	r4,r5,1002b50c <strcmp+0x50>
1002b534:	3809883a 	mov	r4,r7
1002b538:	300b883a 	mov	r5,r6
1002b53c:	20c00007 	ldb	r3,0(r4)
1002b540:	1800051e 	bne	r3,zero,1002b558 <strcmp+0x9c>
1002b544:	00000606 	br	1002b560 <strcmp+0xa4>
1002b548:	21000044 	addi	r4,r4,1
1002b54c:	20c00007 	ldb	r3,0(r4)
1002b550:	29400044 	addi	r5,r5,1
1002b554:	18000226 	beq	r3,zero,1002b560 <strcmp+0xa4>
1002b558:	28800007 	ldb	r2,0(r5)
1002b55c:	18bffa26 	beq	r3,r2,1002b548 <strcmp+0x8c>
1002b560:	20c00003 	ldbu	r3,0(r4)
1002b564:	28800003 	ldbu	r2,0(r5)
1002b568:	1885c83a 	sub	r2,r3,r2
1002b56c:	f800283a 	ret
1002b570:	0005883a 	mov	r2,zero
1002b574:	f800283a 	ret

1002b578 <match>:
1002b578:	21800017 	ldw	r6,0(r4)
1002b57c:	01c01004 	movi	r7,64
1002b580:	02001684 	movi	r8,90
1002b584:	28800007 	ldb	r2,0(r5)
1002b588:	29400044 	addi	r5,r5,1
1002b58c:	10000826 	beq	r2,zero,1002b5b0 <match+0x38>
1002b590:	31800044 	addi	r6,r6,1
1002b594:	30c00007 	ldb	r3,0(r6)
1002b598:	38c0020e 	bge	r7,r3,1002b5a4 <match+0x2c>
1002b59c:	40c00116 	blt	r8,r3,1002b5a4 <match+0x2c>
1002b5a0:	18c00804 	addi	r3,r3,32
1002b5a4:	18bff726 	beq	r3,r2,1002b584 <match+0xc>
1002b5a8:	0005883a 	mov	r2,zero
1002b5ac:	f800283a 	ret
1002b5b0:	30800044 	addi	r2,r6,1
1002b5b4:	20800015 	stw	r2,0(r4)
1002b5b8:	00800044 	movi	r2,1
1002b5bc:	f800283a 	ret

1002b5c0 <_strtod_r>:
1002b5c0:	deffde04 	addi	sp,sp,-136
1002b5c4:	df002015 	stw	fp,128(sp)
1002b5c8:	dd401d15 	stw	r21,116(sp)
1002b5cc:	dc401915 	stw	r17,100(sp)
1002b5d0:	dfc02115 	stw	ra,132(sp)
1002b5d4:	ddc01f15 	stw	r23,124(sp)
1002b5d8:	dd801e15 	stw	r22,120(sp)
1002b5dc:	dd001c15 	stw	r20,112(sp)
1002b5e0:	dcc01b15 	stw	r19,108(sp)
1002b5e4:	dc801a15 	stw	r18,104(sp)
1002b5e8:	dc001815 	stw	r16,96(sp)
1002b5ec:	2823883a 	mov	r17,r5
1002b5f0:	202b883a 	mov	r21,r4
1002b5f4:	d9801515 	stw	r6,84(sp)
1002b5f8:	d8000915 	stw	zero,36(sp)
1002b5fc:	d8000a15 	stw	zero,40(sp)
1002b600:	d9400415 	stw	r5,16(sp)
1002b604:	df000904 	addi	fp,sp,36
1002b608:	da000417 	ldw	r8,16(sp)
1002b60c:	00800b44 	movi	r2,45
1002b610:	40c00003 	ldbu	r3,0(r8)
1002b614:	10c03536 	bltu	r2,r3,1002b6ec <_strtod_r+0x12c>
1002b618:	18c5883a 	add	r2,r3,r3
1002b61c:	1085883a 	add	r2,r2,r2
1002b620:	00c400f4 	movhi	r3,4099
1002b624:	18ed8d04 	addi	r3,r3,-18892
1002b628:	10c5883a 	add	r2,r2,r3
1002b62c:	11000017 	ldw	r4,0(r2)
1002b630:	2000683a 	jmp	r4
1002b634:	1002b828 	cmpgeui	zero,r2,2784
1002b638:	1002b6ec 	andhi	zero,r2,2779
1002b63c:	1002b6ec 	andhi	zero,r2,2779
1002b640:	1002b6ec 	andhi	zero,r2,2779
1002b644:	1002b6ec 	andhi	zero,r2,2779
1002b648:	1002b6ec 	andhi	zero,r2,2779
1002b64c:	1002b6ec 	andhi	zero,r2,2779
1002b650:	1002b6ec 	andhi	zero,r2,2779
1002b654:	1002b6ec 	andhi	zero,r2,2779
1002b658:	1002bb40 	call	11002bb4 <__flash_rwdata_start+0xfce998>
1002b65c:	1002bb40 	call	11002bb4 <__flash_rwdata_start+0xfce998>
1002b660:	1002bb40 	call	11002bb4 <__flash_rwdata_start+0xfce998>
1002b664:	1002bb40 	call	11002bb4 <__flash_rwdata_start+0xfce998>
1002b668:	1002bb40 	call	11002bb4 <__flash_rwdata_start+0xfce998>
1002b66c:	1002b6ec 	andhi	zero,r2,2779
1002b670:	1002b6ec 	andhi	zero,r2,2779
1002b674:	1002b6ec 	andhi	zero,r2,2779
1002b678:	1002b6ec 	andhi	zero,r2,2779
1002b67c:	1002b6ec 	andhi	zero,r2,2779
1002b680:	1002b6ec 	andhi	zero,r2,2779
1002b684:	1002b6ec 	andhi	zero,r2,2779
1002b688:	1002b6ec 	andhi	zero,r2,2779
1002b68c:	1002b6ec 	andhi	zero,r2,2779
1002b690:	1002b6ec 	andhi	zero,r2,2779
1002b694:	1002b6ec 	andhi	zero,r2,2779
1002b698:	1002b6ec 	andhi	zero,r2,2779
1002b69c:	1002b6ec 	andhi	zero,r2,2779
1002b6a0:	1002b6ec 	andhi	zero,r2,2779
1002b6a4:	1002b6ec 	andhi	zero,r2,2779
1002b6a8:	1002b6ec 	andhi	zero,r2,2779
1002b6ac:	1002b6ec 	andhi	zero,r2,2779
1002b6b0:	1002b6ec 	andhi	zero,r2,2779
1002b6b4:	1002bb40 	call	11002bb4 <__flash_rwdata_start+0xfce998>
1002b6b8:	1002b6ec 	andhi	zero,r2,2779
1002b6bc:	1002b6ec 	andhi	zero,r2,2779
1002b6c0:	1002b6ec 	andhi	zero,r2,2779
1002b6c4:	1002b6ec 	andhi	zero,r2,2779
1002b6c8:	1002b6ec 	andhi	zero,r2,2779
1002b6cc:	1002b6ec 	andhi	zero,r2,2779
1002b6d0:	1002b6ec 	andhi	zero,r2,2779
1002b6d4:	1002b6ec 	andhi	zero,r2,2779
1002b6d8:	1002b6ec 	andhi	zero,r2,2779
1002b6dc:	1002b6ec 	andhi	zero,r2,2779
1002b6e0:	1002bb20 	cmpeqi	zero,r2,2796
1002b6e4:	1002b6ec 	andhi	zero,r2,2779
1002b6e8:	1002bb4c 	andi	zero,r2,2797
1002b6ec:	d8001115 	stw	zero,68(sp)
1002b6f0:	40c00007 	ldb	r3,0(r8)
1002b6f4:	00800c04 	movi	r2,48
1002b6f8:	1880d026 	beq	r3,r2,1002ba3c <_strtod_r+0x47c>
1002b6fc:	001f883a 	mov	r15,zero
1002b700:	41000007 	ldb	r4,0(r8)
1002b704:	00c00bc4 	movi	r3,47
1002b708:	402d883a 	mov	r22,r8
1002b70c:	1903470e 	bge	r3,r4,1002c42c <_strtod_r+0xe6c>
1002b710:	00800e44 	movi	r2,57
1002b714:	11034516 	blt	r2,r4,1002c42c <_strtod_r+0xe6c>
1002b718:	180f883a 	mov	r7,r3
1002b71c:	1013883a 	mov	r9,r2
1002b720:	4007883a 	mov	r3,r8
1002b724:	000d883a 	mov	r6,zero
1002b728:	0029883a 	mov	r20,zero
1002b72c:	0021883a 	mov	r16,zero
1002b730:	01400204 	movi	r5,8
1002b734:	028003c4 	movi	r10,15
1002b738:	29803116 	blt	r5,r6,1002b800 <_strtod_r+0x240>
1002b73c:	a08002a4 	muli	r2,r20,10
1002b740:	1105883a 	add	r2,r2,r4
1002b744:	153ff404 	addi	r20,r2,-48
1002b748:	1a000044 	addi	r8,r3,1
1002b74c:	da000415 	stw	r8,16(sp)
1002b750:	41000007 	ldb	r4,0(r8)
1002b754:	31800044 	addi	r6,r6,1
1002b758:	4007883a 	mov	r3,r8
1002b75c:	3900010e 	bge	r7,r4,1002b764 <_strtod_r+0x1a4>
1002b760:	493ff50e 	bge	r9,r4,1002b738 <_strtod_r+0x178>
1002b764:	00800b84 	movi	r2,46
1002b768:	2080c126 	beq	r4,r2,1002ba70 <_strtod_r+0x4b0>
1002b76c:	3027883a 	mov	r19,r6
1002b770:	0025883a 	mov	r18,zero
1002b774:	0015883a 	mov	r10,zero
1002b778:	000f883a 	mov	r7,zero
1002b77c:	00801944 	movi	r2,101
1002b780:	20802426 	beq	r4,r2,1002b814 <_strtod_r+0x254>
1002b784:	00801144 	movi	r2,69
1002b788:	20802226 	beq	r4,r2,1002b814 <_strtod_r+0x254>
1002b78c:	9816c03a 	cmpne	r11,r19,zero
1002b790:	000b883a 	mov	r5,zero
1002b794:	5800631e 	bne	r11,zero,1002b924 <_strtod_r+0x364>
1002b798:	3800c126 	beq	r7,zero,1002baa0 <_strtod_r+0x4e0>
1002b79c:	d8c01517 	ldw	r3,84(sp)
1002b7a0:	18000226 	beq	r3,zero,1002b7ac <_strtod_r+0x1ec>
1002b7a4:	d8800417 	ldw	r2,16(sp)
1002b7a8:	18800015 	stw	r2,0(r3)
1002b7ac:	d9001117 	ldw	r4,68(sp)
1002b7b0:	2005003a 	cmpeq	r2,r4,zero
1002b7b4:	10001f1e 	bne	r2,zero,1002b834 <_strtod_r+0x274>
1002b7b8:	e0800017 	ldw	r2,0(fp)
1002b7bc:	e0c00117 	ldw	r3,4(fp)
1002b7c0:	1009883a 	mov	r4,r2
1002b7c4:	1960003c 	xorhi	r5,r3,32768
1002b7c8:	2005883a 	mov	r2,r4
1002b7cc:	2807883a 	mov	r3,r5
1002b7d0:	dfc02117 	ldw	ra,132(sp)
1002b7d4:	df002017 	ldw	fp,128(sp)
1002b7d8:	ddc01f17 	ldw	r23,124(sp)
1002b7dc:	dd801e17 	ldw	r22,120(sp)
1002b7e0:	dd401d17 	ldw	r21,116(sp)
1002b7e4:	dd001c17 	ldw	r20,112(sp)
1002b7e8:	dcc01b17 	ldw	r19,108(sp)
1002b7ec:	dc801a17 	ldw	r18,104(sp)
1002b7f0:	dc401917 	ldw	r17,100(sp)
1002b7f4:	dc001817 	ldw	r16,96(sp)
1002b7f8:	dec02204 	addi	sp,sp,136
1002b7fc:	f800283a 	ret
1002b800:	51bfd116 	blt	r10,r6,1002b748 <_strtod_r+0x188>
1002b804:	808002a4 	muli	r2,r16,10
1002b808:	1105883a 	add	r2,r2,r4
1002b80c:	143ff404 	addi	r16,r2,-48
1002b810:	003fcd06 	br	1002b748 <_strtod_r+0x188>
1002b814:	9816c03a 	cmpne	r11,r19,zero
1002b818:	5800091e 	bne	r11,zero,1002b840 <_strtod_r+0x280>
1002b81c:	3800081e 	bne	r7,zero,1002b840 <_strtod_r+0x280>
1002b820:	7805003a 	cmpeq	r2,r15,zero
1002b824:	10000626 	beq	r2,zero,1002b840 <_strtod_r+0x280>
1002b828:	d8001115 	stw	zero,68(sp)
1002b82c:	dc400415 	stw	r17,16(sp)
1002b830:	003fda06 	br	1002b79c <_strtod_r+0x1dc>
1002b834:	e1000017 	ldw	r4,0(fp)
1002b838:	e1400117 	ldw	r5,4(fp)
1002b83c:	003fe206 	br	1002b7c8 <_strtod_r+0x208>
1002b840:	dc400417 	ldw	r17,16(sp)
1002b844:	00800ac4 	movi	r2,43
1002b848:	8a000044 	addi	r8,r17,1
1002b84c:	da000415 	stw	r8,16(sp)
1002b850:	88c00047 	ldb	r3,1(r17)
1002b854:	4009883a 	mov	r4,r8
1002b858:	1880bf26 	beq	r3,r2,1002bb58 <_strtod_r+0x598>
1002b85c:	00800b44 	movi	r2,45
1002b860:	18834526 	beq	r3,r2,1002c578 <_strtod_r+0xfb8>
1002b864:	1809883a 	mov	r4,r3
1002b868:	20fff404 	addi	r3,r4,-48
1002b86c:	00800244 	movi	r2,9
1002b870:	001d883a 	mov	r14,zero
1002b874:	10c0bf36 	bltu	r2,r3,1002bb74 <_strtod_r+0x5b4>
1002b878:	00800c04 	movi	r2,48
1002b87c:	2080061e 	bne	r4,r2,1002b898 <_strtod_r+0x2d8>
1002b880:	da000417 	ldw	r8,16(sp)
1002b884:	2005883a 	mov	r2,r4
1002b888:	42000044 	addi	r8,r8,1
1002b88c:	da000415 	stw	r8,16(sp)
1002b890:	41000007 	ldb	r4,0(r8)
1002b894:	20bffc26 	beq	r4,r2,1002b888 <_strtod_r+0x2c8>
1002b898:	20fff3c4 	addi	r3,r4,-49
1002b89c:	00800204 	movi	r2,8
1002b8a0:	10ffbb36 	bltu	r2,r3,1002b790 <_strtod_r+0x1d0>
1002b8a4:	da000417 	ldw	r8,16(sp)
1002b8a8:	227ff404 	addi	r9,r4,-48
1002b8ac:	03000bc4 	movi	r12,47
1002b8b0:	4007883a 	mov	r3,r8
1002b8b4:	42000044 	addi	r8,r8,1
1002b8b8:	da000415 	stw	r8,16(sp)
1002b8bc:	41000007 	ldb	r4,0(r8)
1002b8c0:	61000d0e 	bge	r12,r4,1002b8f8 <_strtod_r+0x338>
1002b8c4:	00800e44 	movi	r2,57
1002b8c8:	11000b16 	blt	r2,r4,1002b8f8 <_strtod_r+0x338>
1002b8cc:	601b883a 	mov	r13,r12
1002b8d0:	1019883a 	mov	r12,r2
1002b8d4:	00000106 	br	1002b8dc <_strtod_r+0x31c>
1002b8d8:	61000716 	blt	r12,r4,1002b8f8 <_strtod_r+0x338>
1002b8dc:	488002a4 	muli	r2,r9,10
1002b8e0:	42000044 	addi	r8,r8,1
1002b8e4:	da000415 	stw	r8,16(sp)
1002b8e8:	2085883a 	add	r2,r4,r2
1002b8ec:	41000007 	ldb	r4,0(r8)
1002b8f0:	127ff404 	addi	r9,r2,-48
1002b8f4:	693ff816 	blt	r13,r4,1002b8d8 <_strtod_r+0x318>
1002b8f8:	40c7c83a 	sub	r3,r8,r3
1002b8fc:	00800204 	movi	r2,8
1002b900:	10c2e416 	blt	r2,r3,1002c494 <_strtod_r+0xed4>
1002b904:	009387c4 	movi	r2,19999
1002b908:	480b883a 	mov	r5,r9
1002b90c:	1240010e 	bge	r2,r9,1002b914 <_strtod_r+0x354>
1002b910:	100b883a 	mov	r5,r2
1002b914:	7005003a 	cmpeq	r2,r14,zero
1002b918:	103f9e1e 	bne	r2,zero,1002b794 <_strtod_r+0x1d4>
1002b91c:	014bc83a 	sub	r5,zero,r5
1002b920:	583f9d26 	beq	r11,zero,1002b798 <_strtod_r+0x1d8>
1002b924:	2a8bc83a 	sub	r5,r5,r10
1002b928:	d9400f15 	stw	r5,60(sp)
1002b92c:	30007a1e 	bne	r6,zero,1002bb18 <_strtod_r+0x558>
1002b930:	dcc01215 	stw	r19,72(sp)
1002b934:	00800404 	movi	r2,16
1002b938:	9825883a 	mov	r18,r19
1002b93c:	14c0010e 	bge	r2,r19,1002b944 <_strtod_r+0x384>
1002b940:	1025883a 	mov	r18,r2
1002b944:	a009883a 	mov	r4,r20
1002b948:	00309680 	call	10030968 <__floatunsidf>
1002b94c:	100f883a 	mov	r7,r2
1002b950:	e0800015 	stw	r2,0(fp)
1002b954:	00800244 	movi	r2,9
1002b958:	e0c00115 	stw	r3,4(fp)
1002b95c:	1480160e 	bge	r2,r18,1002b9b8 <_strtod_r+0x3f8>
1002b960:	900c90fa 	slli	r6,r18,3
1002b964:	01000034 	movhi	r4,0
1002b968:	21039804 	addi	r4,r4,3680
1002b96c:	180b883a 	mov	r5,r3
1002b970:	310d883a 	add	r6,r6,r4
1002b974:	30ffef17 	ldw	r3,-68(r6)
1002b978:	30bfee17 	ldw	r2,-72(r6)
1002b97c:	3809883a 	mov	r4,r7
1002b980:	180f883a 	mov	r7,r3
1002b984:	100d883a 	mov	r6,r2
1002b988:	002fdd80 	call	1002fdd8 <__muldf3>
1002b98c:	8009883a 	mov	r4,r16
1002b990:	1823883a 	mov	r17,r3
1002b994:	1021883a 	mov	r16,r2
1002b998:	00309680 	call	10030968 <__floatunsidf>
1002b99c:	880b883a 	mov	r5,r17
1002b9a0:	180f883a 	mov	r7,r3
1002b9a4:	8009883a 	mov	r4,r16
1002b9a8:	100d883a 	mov	r6,r2
1002b9ac:	002fd640 	call	1002fd64 <__adddf3>
1002b9b0:	e0c00115 	stw	r3,4(fp)
1002b9b4:	e0800015 	stw	r2,0(fp)
1002b9b8:	010003c4 	movi	r4,15
1002b9bc:	24c09816 	blt	r4,r19,1002bc20 <_strtod_r+0x660>
1002b9c0:	d9800f17 	ldw	r6,60(sp)
1002b9c4:	303f7526 	beq	r6,zero,1002b79c <_strtod_r+0x1dc>
1002b9c8:	0183be0e 	bge	zero,r6,1002c8c4 <_strtod_r+0x1304>
1002b9cc:	00800584 	movi	r2,22
1002b9d0:	1182b20e 	bge	r2,r6,1002c49c <_strtod_r+0xedc>
1002b9d4:	d8c00f17 	ldw	r3,60(sp)
1002b9d8:	24e3c83a 	sub	r17,r4,r19
1002b9dc:	88800584 	addi	r2,r17,22
1002b9e0:	10c08f16 	blt	r2,r3,1002bc20 <_strtod_r+0x660>
1002b9e4:	880890fa 	slli	r4,r17,3
1002b9e8:	04000034 	movhi	r16,0
1002b9ec:	84039804 	addi	r16,r16,3680
1002b9f0:	e0800017 	ldw	r2,0(fp)
1002b9f4:	2409883a 	add	r4,r4,r16
1002b9f8:	22000017 	ldw	r8,0(r4)
1002b9fc:	22400117 	ldw	r9,4(r4)
1002ba00:	e0c00117 	ldw	r3,4(fp)
1002ba04:	1009883a 	mov	r4,r2
1002ba08:	480f883a 	mov	r7,r9
1002ba0c:	180b883a 	mov	r5,r3
1002ba10:	400d883a 	mov	r6,r8
1002ba14:	002fdd80 	call	1002fdd8 <__muldf3>
1002ba18:	d9000f17 	ldw	r4,60(sp)
1002ba1c:	180b883a 	mov	r5,r3
1002ba20:	2455c83a 	sub	r10,r4,r17
1002ba24:	501490fa 	slli	r10,r10,3
1002ba28:	1009883a 	mov	r4,r2
1002ba2c:	5415883a 	add	r10,r10,r16
1002ba30:	52000017 	ldw	r8,0(r10)
1002ba34:	52400117 	ldw	r9,4(r10)
1002ba38:	0002a206 	br	1002c4c4 <_strtod_r+0xf04>
1002ba3c:	40c00047 	ldb	r3,1(r8)
1002ba40:	00801604 	movi	r2,88
1002ba44:	18804e26 	beq	r3,r2,1002bb80 <_strtod_r+0x5c0>
1002ba48:	00801e04 	movi	r2,120
1002ba4c:	18804c26 	beq	r3,r2,1002bb80 <_strtod_r+0x5c0>
1002ba50:	42000044 	addi	r8,r8,1
1002ba54:	da000415 	stw	r8,16(sp)
1002ba58:	40c00007 	ldb	r3,0(r8)
1002ba5c:	00800c04 	movi	r2,48
1002ba60:	18bffb26 	beq	r3,r2,1002ba50 <_strtod_r+0x490>
1002ba64:	183f4d26 	beq	r3,zero,1002b79c <_strtod_r+0x1dc>
1002ba68:	03c00044 	movi	r15,1
1002ba6c:	003f2406 	br	1002b700 <_strtod_r+0x140>
1002ba70:	42000044 	addi	r8,r8,1
1002ba74:	da000415 	stw	r8,16(sp)
1002ba78:	19000047 	ldb	r4,1(r3)
1002ba7c:	3000b726 	beq	r6,zero,1002bd5c <_strtod_r+0x79c>
1002ba80:	3027883a 	mov	r19,r6
1002ba84:	0015883a 	mov	r10,zero
1002ba88:	000f883a 	mov	r7,zero
1002ba8c:	227ff404 	addi	r9,r4,-48
1002ba90:	00800244 	movi	r2,9
1002ba94:	1242592e 	bgeu	r2,r9,1002c3fc <_strtod_r+0xe3c>
1002ba98:	04800044 	movi	r18,1
1002ba9c:	003f3706 	br	1002b77c <_strtod_r+0x1bc>
1002baa0:	7804c03a 	cmpne	r2,r15,zero
1002baa4:	103f3d1e 	bne	r2,zero,1002b79c <_strtod_r+0x1dc>
1002baa8:	9004c03a 	cmpne	r2,r18,zero
1002baac:	103f5e1e 	bne	r2,zero,1002b828 <_strtod_r+0x268>
1002bab0:	00801384 	movi	r2,78
1002bab4:	2083a226 	beq	r4,r2,1002c940 <_strtod_r+0x1380>
1002bab8:	11039d16 	blt	r2,r4,1002c930 <_strtod_r+0x1370>
1002babc:	00801244 	movi	r2,73
1002bac0:	20bf591e 	bne	r4,r2,1002b828 <_strtod_r+0x268>
1002bac4:	dc000404 	addi	r16,sp,16
1002bac8:	8009883a 	mov	r4,r16
1002bacc:	01400034 	movhi	r5,0
1002bad0:	2943e104 	addi	r5,r5,3972
1002bad4:	002b5780 	call	1002b578 <match>
1002bad8:	103f5326 	beq	r2,zero,1002b828 <_strtod_r+0x268>
1002badc:	d8800417 	ldw	r2,16(sp)
1002bae0:	8009883a 	mov	r4,r16
1002bae4:	01400034 	movhi	r5,0
1002bae8:	2943e204 	addi	r5,r5,3976
1002baec:	123fffc4 	addi	r8,r2,-1
1002baf0:	da000415 	stw	r8,16(sp)
1002baf4:	002b5780 	call	1002b578 <match>
1002baf8:	1000031e 	bne	r2,zero,1002bb08 <_strtod_r+0x548>
1002bafc:	d8800417 	ldw	r2,16(sp)
1002bb00:	12000044 	addi	r8,r2,1
1002bb04:	da000415 	stw	r8,16(sp)
1002bb08:	019ffc34 	movhi	r6,32752
1002bb0c:	e1800115 	stw	r6,4(fp)
1002bb10:	e0000015 	stw	zero,0(fp)
1002bb14:	003f2106 	br	1002b79c <_strtod_r+0x1dc>
1002bb18:	d9801215 	stw	r6,72(sp)
1002bb1c:	003f8506 	br	1002b934 <_strtod_r+0x374>
1002bb20:	d8001115 	stw	zero,68(sp)
1002bb24:	42000044 	addi	r8,r8,1
1002bb28:	da000415 	stw	r8,16(sp)
1002bb2c:	40800007 	ldb	r2,0(r8)
1002bb30:	103eef1e 	bne	r2,zero,1002b6f0 <_strtod_r+0x130>
1002bb34:	d8001115 	stw	zero,68(sp)
1002bb38:	dc400415 	stw	r17,16(sp)
1002bb3c:	003f1706 	br	1002b79c <_strtod_r+0x1dc>
1002bb40:	42000044 	addi	r8,r8,1
1002bb44:	da000415 	stw	r8,16(sp)
1002bb48:	003eaf06 	br	1002b608 <_strtod_r+0x48>
1002bb4c:	00800044 	movi	r2,1
1002bb50:	d8801115 	stw	r2,68(sp)
1002bb54:	003ff306 	br	1002bb24 <_strtod_r+0x564>
1002bb58:	001d883a 	mov	r14,zero
1002bb5c:	42000044 	addi	r8,r8,1
1002bb60:	da000415 	stw	r8,16(sp)
1002bb64:	21000047 	ldb	r4,1(r4)
1002bb68:	00800244 	movi	r2,9
1002bb6c:	20fff404 	addi	r3,r4,-48
1002bb70:	10ff412e 	bgeu	r2,r3,1002b878 <_strtod_r+0x2b8>
1002bb74:	000b883a 	mov	r5,zero
1002bb78:	dc400415 	stw	r17,16(sp)
1002bb7c:	003f0506 	br	1002b794 <_strtod_r+0x1d4>
1002bb80:	d8c01117 	ldw	r3,68(sp)
1002bb84:	04800034 	movhi	r18,0
1002bb88:	94864f04 	addi	r18,r18,6460
1002bb8c:	d8800504 	addi	r2,sp,20
1002bb90:	a809883a 	mov	r4,r21
1002bb94:	d9400404 	addi	r5,sp,16
1002bb98:	900d883a 	mov	r6,r18
1002bb9c:	d9c00604 	addi	r7,sp,24
1002bba0:	d8800015 	stw	r2,0(sp)
1002bba4:	d8c00115 	stw	r3,4(sp)
1002bba8:	002def80 	call	1002def8 <__gethex>
1002bbac:	140001cc 	andi	r16,r2,7
1002bbb0:	1027883a 	mov	r19,r2
1002bbb4:	803ef926 	beq	r16,zero,1002b79c <_strtod_r+0x1dc>
1002bbb8:	05000184 	movi	r20,6
1002bbbc:	853f1a26 	beq	r16,r20,1002b828 <_strtod_r+0x268>
1002bbc0:	d9800517 	ldw	r6,20(sp)
1002bbc4:	30000626 	beq	r6,zero,1002bbe0 <_strtod_r+0x620>
1002bbc8:	91400017 	ldw	r5,0(r18)
1002bbcc:	d9000d04 	addi	r4,sp,52
1002bbd0:	0029c500 	call	10029c50 <__copybits>
1002bbd4:	d9400517 	ldw	r5,20(sp)
1002bbd8:	a809883a 	mov	r4,r21
1002bbdc:	00297b00 	call	100297b0 <_Bfree>
1002bbe0:	d9400617 	ldw	r5,24(sp)
1002bbe4:	a4024136 	bltu	r20,r16,1002c4ec <_strtod_r+0xf2c>
1002bbe8:	8405883a 	add	r2,r16,r16
1002bbec:	1085883a 	add	r2,r2,r2
1002bbf0:	00c400f4 	movhi	r3,4099
1002bbf4:	18ef0104 	addi	r3,r3,-17404
1002bbf8:	10c5883a 	add	r2,r2,r3
1002bbfc:	11000017 	ldw	r4,0(r2)
1002bc00:	2000683a 	jmp	r4
1002bc04:	1002c52c 	andhi	zero,r2,2836
1002bc08:	1002c538 	rdprs	zero,r2,2836
1002bc0c:	1002c4dc 	xori	zero,r2,2835
1002bc10:	1002c504 	addi	zero,r2,2836
1002bc14:	1002c514 	ori	zero,r2,2836
1002bc18:	1002c538 	rdprs	zero,r2,2836
1002bc1c:	1002c52c 	andhi	zero,r2,2836
1002bc20:	d8c00f17 	ldw	r3,60(sp)
1002bc24:	9c85c83a 	sub	r2,r19,r18
1002bc28:	18a1883a 	add	r16,r3,r2
1002bc2c:	0402d00e 	bge	zero,r16,1002c770 <_strtod_r+0x11b0>
1002bc30:	814003cc 	andi	r5,r16,15
1002bc34:	28000f26 	beq	r5,zero,1002bc74 <_strtod_r+0x6b4>
1002bc38:	280a90fa 	slli	r5,r5,3
1002bc3c:	01000034 	movhi	r4,0
1002bc40:	21039804 	addi	r4,r4,3680
1002bc44:	e0800017 	ldw	r2,0(fp)
1002bc48:	290b883a 	add	r5,r5,r4
1002bc4c:	2a000017 	ldw	r8,0(r5)
1002bc50:	e0c00117 	ldw	r3,4(fp)
1002bc54:	2a400117 	ldw	r9,4(r5)
1002bc58:	1009883a 	mov	r4,r2
1002bc5c:	180b883a 	mov	r5,r3
1002bc60:	480f883a 	mov	r7,r9
1002bc64:	400d883a 	mov	r6,r8
1002bc68:	002fdd80 	call	1002fdd8 <__muldf3>
1002bc6c:	e0c00115 	stw	r3,4(fp)
1002bc70:	e0800015 	stw	r2,0(fp)
1002bc74:	00bffc04 	movi	r2,-16
1002bc78:	808c703a 	and	r6,r16,r2
1002bc7c:	30005b26 	beq	r6,zero,1002bdec <_strtod_r+0x82c>
1002bc80:	00804d04 	movi	r2,308
1002bc84:	1181fd16 	blt	r2,r6,1002c47c <_strtod_r+0xebc>
1002bc88:	3021d13a 	srai	r16,r6,4
1002bc8c:	00800044 	movi	r2,1
1002bc90:	1403610e 	bge	r2,r16,1002ca18 <_strtod_r+0x1458>
1002bc94:	102f883a 	mov	r23,r2
1002bc98:	0025883a 	mov	r18,zero
1002bc9c:	04400034 	movhi	r17,0
1002bca0:	8c43ca04 	addi	r17,r17,3880
1002bca4:	8080004c 	andi	r2,r16,1
1002bca8:	1005003a 	cmpeq	r2,r2,zero
1002bcac:	1000091e 	bne	r2,zero,1002bcd4 <_strtod_r+0x714>
1002bcb0:	e0800017 	ldw	r2,0(fp)
1002bcb4:	e0c00117 	ldw	r3,4(fp)
1002bcb8:	89800017 	ldw	r6,0(r17)
1002bcbc:	89c00117 	ldw	r7,4(r17)
1002bcc0:	180b883a 	mov	r5,r3
1002bcc4:	1009883a 	mov	r4,r2
1002bcc8:	002fdd80 	call	1002fdd8 <__muldf3>
1002bccc:	e0c00115 	stw	r3,4(fp)
1002bcd0:	e0800015 	stw	r2,0(fp)
1002bcd4:	8021d07a 	srai	r16,r16,1
1002bcd8:	94800044 	addi	r18,r18,1
1002bcdc:	8c400204 	addi	r17,r17,8
1002bce0:	bc3ff016 	blt	r23,r16,1002bca4 <_strtod_r+0x6e4>
1002bce4:	900e90fa 	slli	r7,r18,3
1002bce8:	01800034 	movhi	r6,0
1002bcec:	3183ca04 	addi	r6,r6,3880
1002bcf0:	e2000117 	ldw	r8,4(fp)
1002bcf4:	398f883a 	add	r7,r7,r6
1002bcf8:	38800017 	ldw	r2,0(r7)
1002bcfc:	38c00117 	ldw	r3,4(r7)
1002bd00:	e1000017 	ldw	r4,0(fp)
1002bd04:	01bf2c34 	movhi	r6,64688
1002bd08:	418d883a 	add	r6,r8,r6
1002bd0c:	300b883a 	mov	r5,r6
1002bd10:	180f883a 	mov	r7,r3
1002bd14:	100d883a 	mov	r6,r2
1002bd18:	002fdd80 	call	1002fdd8 <__muldf3>
1002bd1c:	1009883a 	mov	r4,r2
1002bd20:	180b883a 	mov	r5,r3
1002bd24:	199ffc2c 	andhi	r6,r3,32752
1002bd28:	009f2834 	movhi	r2,31904
1002bd2c:	e1000015 	stw	r4,0(fp)
1002bd30:	e1400115 	stw	r5,4(fp)
1002bd34:	1181d136 	bltu	r2,r6,1002c47c <_strtod_r+0xebc>
1002bd38:	009f2434 	movhi	r2,31888
1002bd3c:	1183202e 	bgeu	r2,r6,1002c9c0 <_strtod_r+0x1400>
1002bd40:	d8001415 	stw	zero,80(sp)
1002bd44:	019ffc34 	movhi	r6,32752
1002bd48:	31bfffc4 	addi	r6,r6,-1
1002bd4c:	01ffffc4 	movi	r7,-1
1002bd50:	e1800115 	stw	r6,4(fp)
1002bd54:	e1c00015 	stw	r7,0(fp)
1002bd58:	00002506 	br	1002bdf0 <_strtod_r+0x830>
1002bd5c:	00800c04 	movi	r2,48
1002bd60:	2083151e 	bne	r4,r2,1002c9b8 <_strtod_r+0x13f8>
1002bd64:	2005883a 	mov	r2,r4
1002bd68:	000f883a 	mov	r7,zero
1002bd6c:	42000044 	addi	r8,r8,1
1002bd70:	da000415 	stw	r8,16(sp)
1002bd74:	41000007 	ldb	r4,0(r8)
1002bd78:	39c00044 	addi	r7,r7,1
1002bd7c:	20bffb26 	beq	r4,r2,1002bd6c <_strtod_r+0x7ac>
1002bd80:	20fff3c4 	addi	r3,r4,-49
1002bd84:	00800204 	movi	r2,8
1002bd88:	10c1b836 	bltu	r2,r3,1002c46c <_strtod_r+0xeac>
1002bd8c:	dd800417 	ldw	r22,16(sp)
1002bd90:	3815883a 	mov	r10,r7
1002bd94:	227ff404 	addi	r9,r4,-48
1002bd98:	b011883a 	mov	r8,r22
1002bd9c:	0027883a 	mov	r19,zero
1002bda0:	01c00044 	movi	r7,1
1002bda4:	4801fe26 	beq	r9,zero,1002c5a0 <_strtod_r+0xfe0>
1002bda8:	00800044 	movi	r2,1
1002bdac:	51d5883a 	add	r10,r10,r7
1002bdb0:	11c31f0e 	bge	r2,r7,1002ca30 <_strtod_r+0x1470>
1002bdb4:	1009883a 	mov	r4,r2
1002bdb8:	9807883a 	mov	r3,r19
1002bdbc:	02c00204 	movi	r11,8
1002bdc0:	03000404 	movi	r12,16
1002bdc4:	00000306 	br	1002bdd4 <_strtod_r+0x814>
1002bdc8:	a50002a4 	muli	r20,r20,10
1002bdcc:	21000044 	addi	r4,r4,1
1002bdd0:	21c1eb26 	beq	r4,r7,1002c580 <_strtod_r+0xfc0>
1002bdd4:	18c00044 	addi	r3,r3,1
1002bdd8:	18bfffc4 	addi	r2,r3,-1
1002bddc:	58bffa0e 	bge	r11,r2,1002bdc8 <_strtod_r+0x808>
1002bde0:	60fffa16 	blt	r12,r3,1002bdcc <_strtod_r+0x80c>
1002bde4:	840002a4 	muli	r16,r16,10
1002bde8:	003ff806 	br	1002bdcc <_strtod_r+0x80c>
1002bdec:	d8001415 	stw	zero,80(sp)
1002bdf0:	d9801217 	ldw	r6,72(sp)
1002bdf4:	a809883a 	mov	r4,r21
1002bdf8:	b00b883a 	mov	r5,r22
1002bdfc:	980f883a 	mov	r7,r19
1002be00:	dd000015 	stw	r20,0(sp)
1002be04:	002a6840 	call	1002a684 <__s2b>
1002be08:	d9800f17 	ldw	r6,60(sp)
1002be0c:	11000304 	addi	r4,r2,12
1002be10:	d8801015 	stw	r2,64(sp)
1002be14:	300c803a 	cmplt	r6,r6,zero
1002be18:	d9001715 	stw	r4,92(sp)
1002be1c:	d9801615 	stw	r6,88(sp)
1002be20:	d8801017 	ldw	r2,64(sp)
1002be24:	a809883a 	mov	r4,r21
1002be28:	11400117 	ldw	r5,4(r2)
1002be2c:	0029d300 	call	10029d30 <_Balloc>
1002be30:	d8c01017 	ldw	r3,64(sp)
1002be34:	d9401717 	ldw	r5,92(sp)
1002be38:	11000304 	addi	r4,r2,12
1002be3c:	19800417 	ldw	r6,16(r3)
1002be40:	102f883a 	mov	r23,r2
1002be44:	318d883a 	add	r6,r6,r6
1002be48:	318d883a 	add	r6,r6,r6
1002be4c:	31800204 	addi	r6,r6,8
1002be50:	0022c500 	call	10022c50 <memcpy>
1002be54:	e2000017 	ldw	r8,0(fp)
1002be58:	e2400117 	ldw	r9,4(fp)
1002be5c:	d9800304 	addi	r6,sp,12
1002be60:	400b883a 	mov	r5,r8
1002be64:	a809883a 	mov	r4,r21
1002be68:	d9c00204 	addi	r7,sp,8
1002be6c:	d9800015 	stw	r6,0(sp)
1002be70:	480d883a 	mov	r6,r9
1002be74:	0029dec0 	call	10029dec <__d2b>
1002be78:	a809883a 	mov	r4,r21
1002be7c:	01400044 	movi	r5,1
1002be80:	d8800515 	stw	r2,20(sp)
1002be84:	002a4280 	call	1002a428 <__i2b>
1002be88:	102d883a 	mov	r22,r2
1002be8c:	d8801617 	ldw	r2,88(sp)
1002be90:	1001051e 	bne	r2,zero,1002c2a8 <_strtod_r+0xce8>
1002be94:	dd000f17 	ldw	r20,60(sp)
1002be98:	000f883a 	mov	r7,zero
1002be9c:	0013883a 	mov	r9,zero
1002bea0:	a011883a 	mov	r8,r20
1002bea4:	d8800217 	ldw	r2,8(sp)
1002bea8:	1000fd16 	blt	r2,zero,1002c2a0 <_strtod_r+0xce0>
1002beac:	388f883a 	add	r7,r7,r2
1002beb0:	d9801417 	ldw	r6,80(sp)
1002beb4:	d9400317 	ldw	r5,12(sp)
1002beb8:	00ff0084 	movi	r3,-1022
1002bebc:	1189c83a 	sub	r4,r2,r6
1002bec0:	2145883a 	add	r2,r4,r5
1002bec4:	10bfffc4 	addi	r2,r2,-1
1002bec8:	10c09f0e 	bge	r2,r3,1002c148 <_strtod_r+0xb88>
1002becc:	21810cc4 	addi	r6,r4,1075
1002bed0:	d8c01417 	ldw	r3,80(sp)
1002bed4:	4185883a 	add	r2,r8,r6
1002bed8:	39a1883a 	add	r16,r7,r6
1002bedc:	18a5883a 	add	r18,r3,r2
1002bee0:	3807883a 	mov	r3,r7
1002bee4:	81c0010e 	bge	r16,r7,1002beec <_strtod_r+0x92c>
1002bee8:	8007883a 	mov	r3,r16
1002beec:	9005883a 	mov	r2,r18
1002bef0:	1c80010e 	bge	r3,r18,1002bef8 <_strtod_r+0x938>
1002bef4:	1805883a 	mov	r2,r3
1002bef8:	0080e70e 	bge	zero,r2,1002c298 <_strtod_r+0xcd8>
1002befc:	38a7c83a 	sub	r19,r7,r2
1002bf00:	80a1c83a 	sub	r16,r16,r2
1002bf04:	90a5c83a 	sub	r18,r18,r2
1002bf08:	02400e0e 	bge	zero,r9,1002bf44 <_strtod_r+0x984>
1002bf0c:	480d883a 	mov	r6,r9
1002bf10:	b00b883a 	mov	r5,r22
1002bf14:	a809883a 	mov	r4,r21
1002bf18:	002a5640 	call	1002a564 <__pow5mult>
1002bf1c:	d9800517 	ldw	r6,20(sp)
1002bf20:	a809883a 	mov	r4,r21
1002bf24:	100b883a 	mov	r5,r2
1002bf28:	102d883a 	mov	r22,r2
1002bf2c:	002a2400 	call	1002a240 <__multiply>
1002bf30:	d9400517 	ldw	r5,20(sp)
1002bf34:	1023883a 	mov	r17,r2
1002bf38:	a809883a 	mov	r4,r21
1002bf3c:	00297b00 	call	100297b0 <_Bfree>
1002bf40:	dc400515 	stw	r17,20(sp)
1002bf44:	0400050e 	bge	zero,r16,1002bf5c <_strtod_r+0x99c>
1002bf48:	d9400517 	ldw	r5,20(sp)
1002bf4c:	800d883a 	mov	r6,r16
1002bf50:	a809883a 	mov	r4,r21
1002bf54:	002a0f40 	call	1002a0f4 <__lshift>
1002bf58:	d8800515 	stw	r2,20(sp)
1002bf5c:	a000741e 	bne	r20,zero,1002c130 <_strtod_r+0xb70>
1002bf60:	0480050e 	bge	zero,r18,1002bf78 <_strtod_r+0x9b8>
1002bf64:	b80b883a 	mov	r5,r23
1002bf68:	900d883a 	mov	r6,r18
1002bf6c:	a809883a 	mov	r4,r21
1002bf70:	002a0f40 	call	1002a0f4 <__lshift>
1002bf74:	102f883a 	mov	r23,r2
1002bf78:	04c0050e 	bge	zero,r19,1002bf90 <_strtod_r+0x9d0>
1002bf7c:	b00b883a 	mov	r5,r22
1002bf80:	980d883a 	mov	r6,r19
1002bf84:	a809883a 	mov	r4,r21
1002bf88:	002a0f40 	call	1002a0f4 <__lshift>
1002bf8c:	102d883a 	mov	r22,r2
1002bf90:	d9400517 	ldw	r5,20(sp)
1002bf94:	a809883a 	mov	r4,r21
1002bf98:	b80d883a 	mov	r6,r23
1002bf9c:	0029f680 	call	10029f68 <__mdiff>
1002bfa0:	11000317 	ldw	r4,12(r2)
1002bfa4:	b00b883a 	mov	r5,r22
1002bfa8:	10000315 	stw	zero,12(r2)
1002bfac:	d9001315 	stw	r4,76(sp)
1002bfb0:	1009883a 	mov	r4,r2
1002bfb4:	1029883a 	mov	r20,r2
1002bfb8:	002990c0 	call	1002990c <__mcmp>
1002bfbc:	10017c16 	blt	r2,zero,1002c5b0 <_strtod_r+0xff0>
1002bfc0:	1001af26 	beq	r2,zero,1002c680 <_strtod_r+0x10c0>
1002bfc4:	a009883a 	mov	r4,r20
1002bfc8:	b00b883a 	mov	r5,r22
1002bfcc:	0029b0c0 	call	10029b0c <__ratio>
1002bfd0:	0011883a 	mov	r8,zero
1002bfd4:	02500034 	movhi	r9,16384
1002bfd8:	480f883a 	mov	r7,r9
1002bfdc:	1009883a 	mov	r4,r2
1002bfe0:	180b883a 	mov	r5,r3
1002bfe4:	400d883a 	mov	r6,r8
1002bfe8:	1021883a 	mov	r16,r2
1002bfec:	1823883a 	mov	r17,r3
1002bff0:	003069c0 	call	1003069c <__ledf2>
1002bff4:	00805716 	blt	zero,r2,1002c154 <_strtod_r+0xb94>
1002bff8:	d9801317 	ldw	r6,76(sp)
1002bffc:	3025003a 	cmpeq	r18,r6,zero
1002c000:	90008b1e 	bne	r18,zero,1002c230 <_strtod_r+0xc70>
1002c004:	008ffc34 	movhi	r2,16368
1002c008:	0021883a 	mov	r16,zero
1002c00c:	1023883a 	mov	r17,r2
1002c010:	d8000715 	stw	zero,28(sp)
1002c014:	d8800815 	stw	r2,32(sp)
1002c018:	e1c00117 	ldw	r7,4(fp)
1002c01c:	009ff834 	movhi	r2,32736
1002c020:	3cdffc2c 	andhi	r19,r7,32752
1002c024:	98805e26 	beq	r19,r2,1002c1a0 <_strtod_r+0xbe0>
1002c028:	d8801417 	ldw	r2,80(sp)
1002c02c:	10001b26 	beq	r2,zero,1002c09c <_strtod_r+0xadc>
1002c030:	0081a834 	movhi	r2,1696
1002c034:	14c01936 	bltu	r2,r19,1002c09c <_strtod_r+0xadc>
1002c038:	00bff034 	movhi	r2,65472
1002c03c:	00d07834 	movhi	r3,16864
1002c040:	18ffffc4 	addi	r3,r3,-1
1002c044:	180f883a 	mov	r7,r3
1002c048:	8009883a 	mov	r4,r16
1002c04c:	880b883a 	mov	r5,r17
1002c050:	100d883a 	mov	r6,r2
1002c054:	003069c0 	call	1003069c <__ledf2>
1002c058:	00800b16 	blt	zero,r2,1002c088 <_strtod_r+0xac8>
1002c05c:	880b883a 	mov	r5,r17
1002c060:	8009883a 	mov	r4,r16
1002c064:	002eb3c0 	call	1002eb3c <__fixunsdfsi>
1002c068:	1000df1e 	bne	r2,zero,1002c3e8 <_strtod_r+0xe28>
1002c06c:	0021883a 	mov	r16,zero
1002c070:	044ffc34 	movhi	r17,16368
1002c074:	9000d91e 	bne	r18,zero,1002c3dc <_strtod_r+0xe1c>
1002c078:	8005883a 	mov	r2,r16
1002c07c:	8807883a 	mov	r3,r17
1002c080:	d8c00815 	stw	r3,32(sp)
1002c084:	d8800715 	stw	r2,28(sp)
1002c088:	d8800817 	ldw	r2,32(sp)
1002c08c:	00c1ac34 	movhi	r3,1712
1002c090:	14c5c83a 	sub	r2,r2,r19
1002c094:	10c5883a 	add	r2,r2,r3
1002c098:	d8800815 	stw	r2,32(sp)
1002c09c:	e0800017 	ldw	r2,0(fp)
1002c0a0:	e0c00117 	ldw	r3,4(fp)
1002c0a4:	1009883a 	mov	r4,r2
1002c0a8:	180b883a 	mov	r5,r3
1002c0ac:	002996c0 	call	1002996c <__ulp>
1002c0b0:	d9800717 	ldw	r6,28(sp)
1002c0b4:	d9c00817 	ldw	r7,32(sp)
1002c0b8:	180b883a 	mov	r5,r3
1002c0bc:	1009883a 	mov	r4,r2
1002c0c0:	002fdd80 	call	1002fdd8 <__muldf3>
1002c0c4:	e2000017 	ldw	r8,0(fp)
1002c0c8:	e2400117 	ldw	r9,4(fp)
1002c0cc:	180b883a 	mov	r5,r3
1002c0d0:	1009883a 	mov	r4,r2
1002c0d4:	480f883a 	mov	r7,r9
1002c0d8:	400d883a 	mov	r6,r8
1002c0dc:	002fd640 	call	1002fd64 <__adddf3>
1002c0e0:	e0c00115 	stw	r3,4(fp)
1002c0e4:	e0800015 	stw	r2,0(fp)
1002c0e8:	d8c01417 	ldw	r3,80(sp)
1002c0ec:	e4800117 	ldw	r18,4(fp)
1002c0f0:	1800021e 	bne	r3,zero,1002c0fc <_strtod_r+0xb3c>
1002c0f4:	909ffc2c 	andhi	r2,r18,32752
1002c0f8:	98807b26 	beq	r19,r2,1002c2e8 <_strtod_r+0xd28>
1002c0fc:	d9400517 	ldw	r5,20(sp)
1002c100:	a809883a 	mov	r4,r21
1002c104:	00297b00 	call	100297b0 <_Bfree>
1002c108:	a809883a 	mov	r4,r21
1002c10c:	b80b883a 	mov	r5,r23
1002c110:	00297b00 	call	100297b0 <_Bfree>
1002c114:	a809883a 	mov	r4,r21
1002c118:	b00b883a 	mov	r5,r22
1002c11c:	00297b00 	call	100297b0 <_Bfree>
1002c120:	a809883a 	mov	r4,r21
1002c124:	a00b883a 	mov	r5,r20
1002c128:	00297b00 	call	100297b0 <_Bfree>
1002c12c:	003f3c06 	br	1002be20 <_strtod_r+0x860>
1002c130:	b80b883a 	mov	r5,r23
1002c134:	a00d883a 	mov	r6,r20
1002c138:	a809883a 	mov	r4,r21
1002c13c:	002a5640 	call	1002a564 <__pow5mult>
1002c140:	102f883a 	mov	r23,r2
1002c144:	003f8606 	br	1002bf60 <_strtod_r+0x9a0>
1002c148:	00800d84 	movi	r2,54
1002c14c:	114dc83a 	sub	r6,r2,r5
1002c150:	003f5f06 	br	1002bed0 <_strtod_r+0x910>
1002c154:	0005883a 	mov	r2,zero
1002c158:	00cff834 	movhi	r3,16352
1002c15c:	880b883a 	mov	r5,r17
1002c160:	8009883a 	mov	r4,r16
1002c164:	100d883a 	mov	r6,r2
1002c168:	180f883a 	mov	r7,r3
1002c16c:	002fdd80 	call	1002fdd8 <__muldf3>
1002c170:	d9801317 	ldw	r6,76(sp)
1002c174:	1021883a 	mov	r16,r2
1002c178:	1823883a 	mov	r17,r3
1002c17c:	3025003a 	cmpeq	r18,r6,zero
1002c180:	90000126 	beq	r18,zero,1002c188 <_strtod_r+0xbc8>
1002c184:	18e0003c 	xorhi	r3,r3,32768
1002c188:	d8800715 	stw	r2,28(sp)
1002c18c:	d8c00815 	stw	r3,32(sp)
1002c190:	e1c00117 	ldw	r7,4(fp)
1002c194:	009ff834 	movhi	r2,32736
1002c198:	3cdffc2c 	andhi	r19,r7,32752
1002c19c:	98bfa21e 	bne	r19,r2,1002c028 <_strtod_r+0xa68>
1002c1a0:	e1000017 	ldw	r4,0(fp)
1002c1a4:	01bf2c34 	movhi	r6,64688
1002c1a8:	398d883a 	add	r6,r7,r6
1002c1ac:	d9000b15 	stw	r4,44(sp)
1002c1b0:	d9c00c15 	stw	r7,48(sp)
1002c1b4:	300b883a 	mov	r5,r6
1002c1b8:	e1800115 	stw	r6,4(fp)
1002c1bc:	002996c0 	call	1002996c <__ulp>
1002c1c0:	d9800717 	ldw	r6,28(sp)
1002c1c4:	d9c00817 	ldw	r7,32(sp)
1002c1c8:	180b883a 	mov	r5,r3
1002c1cc:	1009883a 	mov	r4,r2
1002c1d0:	002fdd80 	call	1002fdd8 <__muldf3>
1002c1d4:	e2000017 	ldw	r8,0(fp)
1002c1d8:	e2400117 	ldw	r9,4(fp)
1002c1dc:	180b883a 	mov	r5,r3
1002c1e0:	1009883a 	mov	r4,r2
1002c1e4:	480f883a 	mov	r7,r9
1002c1e8:	400d883a 	mov	r6,r8
1002c1ec:	002fd640 	call	1002fd64 <__adddf3>
1002c1f0:	1009883a 	mov	r4,r2
1002c1f4:	180b883a 	mov	r5,r3
1002c1f8:	009f2834 	movhi	r2,31904
1002c1fc:	10bfffc4 	addi	r2,r2,-1
1002c200:	18dffc2c 	andhi	r3,r3,32752
1002c204:	e1000015 	stw	r4,0(fp)
1002c208:	e1400115 	stw	r5,4(fp)
1002c20c:	10c06f2e 	bgeu	r2,r3,1002c3cc <_strtod_r+0xe0c>
1002c210:	d8800c17 	ldw	r2,48(sp)
1002c214:	011ffc34 	movhi	r4,32752
1002c218:	213fffc4 	addi	r4,r4,-1
1002c21c:	11007a26 	beq	r2,r4,1002c408 <_strtod_r+0xe48>
1002c220:	01ffffc4 	movi	r7,-1
1002c224:	e1000115 	stw	r4,4(fp)
1002c228:	e1c00015 	stw	r7,0(fp)
1002c22c:	003fb306 	br	1002c0fc <_strtod_r+0xb3c>
1002c230:	e0c00017 	ldw	r3,0(fp)
1002c234:	1800221e 	bne	r3,zero,1002c2c0 <_strtod_r+0xd00>
1002c238:	e0800117 	ldw	r2,4(fp)
1002c23c:	00c00434 	movhi	r3,16
1002c240:	18ffffc4 	addi	r3,r3,-1
1002c244:	10c4703a 	and	r2,r2,r3
1002c248:	1000211e 	bne	r2,zero,1002c2d0 <_strtod_r+0xd10>
1002c24c:	0005883a 	mov	r2,zero
1002c250:	00cffc34 	movhi	r3,16368
1002c254:	180f883a 	mov	r7,r3
1002c258:	8009883a 	mov	r4,r16
1002c25c:	880b883a 	mov	r5,r17
1002c260:	100d883a 	mov	r6,r2
1002c264:	00306140 	call	10030614 <__ltdf2>
1002c268:	10013c16 	blt	r2,zero,1002c75c <_strtod_r+0x119c>
1002c26c:	0005883a 	mov	r2,zero
1002c270:	00cff834 	movhi	r3,16352
1002c274:	880b883a 	mov	r5,r17
1002c278:	8009883a 	mov	r4,r16
1002c27c:	180f883a 	mov	r7,r3
1002c280:	100d883a 	mov	r6,r2
1002c284:	002fdd80 	call	1002fdd8 <__muldf3>
1002c288:	1823883a 	mov	r17,r3
1002c28c:	1021883a 	mov	r16,r2
1002c290:	18e0003c 	xorhi	r3,r3,32768
1002c294:	003fbc06 	br	1002c188 <_strtod_r+0xbc8>
1002c298:	3827883a 	mov	r19,r7
1002c29c:	003f1a06 	br	1002bf08 <_strtod_r+0x948>
1002c2a0:	4091c83a 	sub	r8,r8,r2
1002c2a4:	003f0206 	br	1002beb0 <_strtod_r+0x8f0>
1002c2a8:	d8c00f17 	ldw	r3,60(sp)
1002c2ac:	0011883a 	mov	r8,zero
1002c2b0:	0029883a 	mov	r20,zero
1002c2b4:	00d3c83a 	sub	r9,zero,r3
1002c2b8:	480f883a 	mov	r7,r9
1002c2bc:	003ef906 	br	1002bea4 <_strtod_r+0x8e4>
1002c2c0:	00800044 	movi	r2,1
1002c2c4:	1880021e 	bne	r3,r2,1002c2d0 <_strtod_r+0xd10>
1002c2c8:	e0800117 	ldw	r2,4(fp)
1002c2cc:	1000a526 	beq	r2,zero,1002c564 <_strtod_r+0xfa4>
1002c2d0:	00affc34 	movhi	r2,49136
1002c2d4:	0021883a 	mov	r16,zero
1002c2d8:	044ffc34 	movhi	r17,16368
1002c2dc:	d8800815 	stw	r2,32(sp)
1002c2e0:	d8000715 	stw	zero,28(sp)
1002c2e4:	003f4c06 	br	1002c018 <_strtod_r+0xa58>
1002c2e8:	880b883a 	mov	r5,r17
1002c2ec:	8009883a 	mov	r4,r16
1002c2f0:	003081c0 	call	1003081c <__fixdfsi>
1002c2f4:	1009883a 	mov	r4,r2
1002c2f8:	00307240 	call	10030724 <__floatsidf>
1002c2fc:	880b883a 	mov	r5,r17
1002c300:	8009883a 	mov	r4,r16
1002c304:	100d883a 	mov	r6,r2
1002c308:	180f883a 	mov	r7,r3
1002c30c:	002fce40 	call	1002fce4 <__subdf3>
1002c310:	d9001317 	ldw	r4,76(sp)
1002c314:	100b883a 	mov	r5,r2
1002c318:	180d883a 	mov	r6,r3
1002c31c:	1021883a 	mov	r16,r2
1002c320:	1823883a 	mov	r17,r3
1002c324:	2000061e 	bne	r4,zero,1002c340 <_strtod_r+0xd80>
1002c328:	e0800017 	ldw	r2,0(fp)
1002c32c:	1000041e 	bne	r2,zero,1002c340 <_strtod_r+0xd80>
1002c330:	00c00434 	movhi	r3,16
1002c334:	18ffffc4 	addi	r3,r3,-1
1002c338:	90c4703a 	and	r2,r18,r3
1002c33c:	10004026 	beq	r2,zero,1002c440 <_strtod_r+0xe80>
1002c340:	00a52834 	movhi	r2,38048
1002c344:	108d6544 	addi	r2,r2,13717
1002c348:	00cff834 	movhi	r3,16352
1002c34c:	18ffffc4 	addi	r3,r3,-1
1002c350:	180f883a 	mov	r7,r3
1002c354:	8009883a 	mov	r4,r16
1002c358:	880b883a 	mov	r5,r17
1002c35c:	100d883a 	mov	r6,r2
1002c360:	00306140 	call	10030614 <__ltdf2>
1002c364:	10000916 	blt	r2,zero,1002c38c <_strtod_r+0xdcc>
1002c368:	008d6c34 	movhi	r2,13744
1002c36c:	10b94d44 	addi	r2,r2,-6859
1002c370:	00cff834 	movhi	r3,16352
1002c374:	880b883a 	mov	r5,r17
1002c378:	180f883a 	mov	r7,r3
1002c37c:	8009883a 	mov	r4,r16
1002c380:	100d883a 	mov	r6,r2
1002c384:	00305040 	call	10030504 <__gtdf2>
1002c388:	00bf5c0e 	bge	zero,r2,1002c0fc <_strtod_r+0xb3c>
1002c38c:	d9400517 	ldw	r5,20(sp)
1002c390:	a809883a 	mov	r4,r21
1002c394:	00297b00 	call	100297b0 <_Bfree>
1002c398:	a809883a 	mov	r4,r21
1002c39c:	b80b883a 	mov	r5,r23
1002c3a0:	00297b00 	call	100297b0 <_Bfree>
1002c3a4:	a809883a 	mov	r4,r21
1002c3a8:	b00b883a 	mov	r5,r22
1002c3ac:	00297b00 	call	100297b0 <_Bfree>
1002c3b0:	d9401017 	ldw	r5,64(sp)
1002c3b4:	a809883a 	mov	r4,r21
1002c3b8:	00297b00 	call	100297b0 <_Bfree>
1002c3bc:	a809883a 	mov	r4,r21
1002c3c0:	a00b883a 	mov	r5,r20
1002c3c4:	00297b00 	call	100297b0 <_Bfree>
1002c3c8:	003cf406 	br	1002b79c <_strtod_r+0x1dc>
1002c3cc:	0080d434 	movhi	r2,848
1002c3d0:	288d883a 	add	r6,r5,r2
1002c3d4:	e1800115 	stw	r6,4(fp)
1002c3d8:	003f4306 	br	1002c0e8 <_strtod_r+0xb28>
1002c3dc:	8005883a 	mov	r2,r16
1002c3e0:	88e0003c 	xorhi	r3,r17,32768
1002c3e4:	003f2606 	br	1002c080 <_strtod_r+0xac0>
1002c3e8:	1009883a 	mov	r4,r2
1002c3ec:	00309680 	call	10030968 <__floatunsidf>
1002c3f0:	1021883a 	mov	r16,r2
1002c3f4:	1823883a 	mov	r17,r3
1002c3f8:	003f1e06 	br	1002c074 <_strtod_r+0xab4>
1002c3fc:	da000417 	ldw	r8,16(sp)
1002c400:	39c00044 	addi	r7,r7,1
1002c404:	003e6706 	br	1002bda4 <_strtod_r+0x7e4>
1002c408:	d8c00b17 	ldw	r3,44(sp)
1002c40c:	00bfffc4 	movi	r2,-1
1002c410:	18bf831e 	bne	r3,r2,1002c220 <_strtod_r+0xc60>
1002c414:	00c00884 	movi	r3,34
1002c418:	a8c00015 	stw	r3,0(r21)
1002c41c:	009ffc34 	movhi	r2,32752
1002c420:	e0800115 	stw	r2,4(fp)
1002c424:	e0000015 	stw	zero,0(fp)
1002c428:	003fd806 	br	1002c38c <_strtod_r+0xdcc>
1002c42c:	4007883a 	mov	r3,r8
1002c430:	000d883a 	mov	r6,zero
1002c434:	0029883a 	mov	r20,zero
1002c438:	0021883a 	mov	r16,zero
1002c43c:	003cc906 	br	1002b764 <_strtod_r+0x1a4>
1002c440:	00a52834 	movhi	r2,38048
1002c444:	108d6544 	addi	r2,r2,13717
1002c448:	00cff434 	movhi	r3,16336
1002c44c:	18ffffc4 	addi	r3,r3,-1
1002c450:	2809883a 	mov	r4,r5
1002c454:	180f883a 	mov	r7,r3
1002c458:	300b883a 	mov	r5,r6
1002c45c:	100d883a 	mov	r6,r2
1002c460:	00306140 	call	10030614 <__ltdf2>
1002c464:	103f250e 	bge	r2,zero,1002c0fc <_strtod_r+0xb3c>
1002c468:	003fc806 	br	1002c38c <_strtod_r+0xdcc>
1002c46c:	0027883a 	mov	r19,zero
1002c470:	04800044 	movi	r18,1
1002c474:	0015883a 	mov	r10,zero
1002c478:	003cc006 	br	1002b77c <_strtod_r+0x1bc>
1002c47c:	00800884 	movi	r2,34
1002c480:	a8800015 	stw	r2,0(r21)
1002c484:	019ffc34 	movhi	r6,32752
1002c488:	e1800115 	stw	r6,4(fp)
1002c48c:	e0000015 	stw	zero,0(fp)
1002c490:	003cc206 	br	1002b79c <_strtod_r+0x1dc>
1002c494:	015387c4 	movi	r5,19999
1002c498:	003d1e06 	br	1002b914 <_strtod_r+0x354>
1002c49c:	300a90fa 	slli	r5,r6,3
1002c4a0:	e0800017 	ldw	r2,0(fp)
1002c4a4:	e0c00117 	ldw	r3,4(fp)
1002c4a8:	01000034 	movhi	r4,0
1002c4ac:	21039804 	addi	r4,r4,3680
1002c4b0:	290b883a 	add	r5,r5,r4
1002c4b4:	2a000017 	ldw	r8,0(r5)
1002c4b8:	2a400117 	ldw	r9,4(r5)
1002c4bc:	1009883a 	mov	r4,r2
1002c4c0:	180b883a 	mov	r5,r3
1002c4c4:	480f883a 	mov	r7,r9
1002c4c8:	400d883a 	mov	r6,r8
1002c4cc:	002fdd80 	call	1002fdd8 <__muldf3>
1002c4d0:	e0c00115 	stw	r3,4(fp)
1002c4d4:	e0800015 	stw	r2,0(fp)
1002c4d8:	003cb006 	br	1002b79c <_strtod_r+0x1dc>
1002c4dc:	d8800d17 	ldw	r2,52(sp)
1002c4e0:	e0800015 	stw	r2,0(fp)
1002c4e4:	d8c00e17 	ldw	r3,56(sp)
1002c4e8:	e0c00115 	stw	r3,4(fp)
1002c4ec:	9880020c 	andi	r2,r19,8
1002c4f0:	103caa26 	beq	r2,zero,1002b79c <_strtod_r+0x1dc>
1002c4f4:	e0800117 	ldw	r2,4(fp)
1002c4f8:	10a00034 	orhi	r2,r2,32768
1002c4fc:	e0800115 	stw	r2,4(fp)
1002c500:	003ca606 	br	1002b79c <_strtod_r+0x1dc>
1002c504:	009ffc34 	movhi	r2,32752
1002c508:	e0800115 	stw	r2,4(fp)
1002c50c:	e0000015 	stw	zero,0(fp)
1002c510:	003ff606 	br	1002c4ec <_strtod_r+0xf2c>
1002c514:	00a00034 	movhi	r2,32768
1002c518:	10bfffc4 	addi	r2,r2,-1
1002c51c:	00ffffc4 	movi	r3,-1
1002c520:	e0800115 	stw	r2,4(fp)
1002c524:	e0c00015 	stw	r3,0(fp)
1002c528:	003ff006 	br	1002c4ec <_strtod_r+0xf2c>
1002c52c:	e0000115 	stw	zero,4(fp)
1002c530:	e0000015 	stw	zero,0(fp)
1002c534:	003fed06 	br	1002c4ec <_strtod_r+0xf2c>
1002c538:	d8800e17 	ldw	r2,56(sp)
1002c53c:	29010cc4 	addi	r4,r5,1075
1002c540:	00fffc34 	movhi	r3,65520
1002c544:	18ffffc4 	addi	r3,r3,-1
1002c548:	2008953a 	slli	r4,r4,20
1002c54c:	10c4703a 	and	r2,r2,r3
1002c550:	d8c00d17 	ldw	r3,52(sp)
1002c554:	1104b03a 	or	r2,r2,r4
1002c558:	e0800115 	stw	r2,4(fp)
1002c55c:	e0c00015 	stw	r3,0(fp)
1002c560:	003fe206 	br	1002c4ec <_strtod_r+0xf2c>
1002c564:	00800884 	movi	r2,34
1002c568:	a8800015 	stw	r2,0(r21)
1002c56c:	e0000015 	stw	zero,0(fp)
1002c570:	e0000115 	stw	zero,4(fp)
1002c574:	003f8506 	br	1002c38c <_strtod_r+0xdcc>
1002c578:	03800044 	movi	r14,1
1002c57c:	003d7706 	br	1002bb5c <_strtod_r+0x59c>
1002c580:	99c5883a 	add	r2,r19,r7
1002c584:	11ffffc4 	addi	r7,r2,-1
1002c588:	00800204 	movi	r2,8
1002c58c:	3cc00044 	addi	r19,r7,1
1002c590:	11c0df16 	blt	r2,r7,1002c910 <_strtod_r+0x1350>
1002c594:	a08002a4 	muli	r2,r20,10
1002c598:	000f883a 	mov	r7,zero
1002c59c:	1269883a 	add	r20,r2,r9
1002c5a0:	42000044 	addi	r8,r8,1
1002c5a4:	da000415 	stw	r8,16(sp)
1002c5a8:	41000007 	ldb	r4,0(r8)
1002c5ac:	003d3706 	br	1002ba8c <_strtod_r+0x4cc>
1002c5b0:	d9801317 	ldw	r6,76(sp)
1002c5b4:	3000511e 	bne	r6,zero,1002c6fc <_strtod_r+0x113c>
1002c5b8:	e0800017 	ldw	r2,0(fp)
1002c5bc:	1000d81e 	bne	r2,zero,1002c920 <_strtod_r+0x1360>
1002c5c0:	e0c00117 	ldw	r3,4(fp)
1002c5c4:	01000434 	movhi	r4,16
1002c5c8:	213fffc4 	addi	r4,r4,-1
1002c5cc:	1904703a 	and	r2,r3,r4
1002c5d0:	1000b01e 	bne	r2,zero,1002c894 <_strtod_r+0x12d4>
1002c5d4:	18dffc2c 	andhi	r3,r3,32752
1002c5d8:	0081ac34 	movhi	r2,1712
1002c5dc:	10c1102e 	bgeu	r2,r3,1002ca20 <_strtod_r+0x1460>
1002c5e0:	a0800517 	ldw	r2,20(r20)
1002c5e4:	1000031e 	bne	r2,zero,1002c5f4 <_strtod_r+0x1034>
1002c5e8:	a0c00417 	ldw	r3,16(r20)
1002c5ec:	00800044 	movi	r2,1
1002c5f0:	10c0420e 	bge	r2,r3,1002c6fc <_strtod_r+0x113c>
1002c5f4:	a00b883a 	mov	r5,r20
1002c5f8:	a809883a 	mov	r4,r21
1002c5fc:	01800044 	movi	r6,1
1002c600:	002a0f40 	call	1002a0f4 <__lshift>
1002c604:	1009883a 	mov	r4,r2
1002c608:	b00b883a 	mov	r5,r22
1002c60c:	1029883a 	mov	r20,r2
1002c610:	002990c0 	call	1002990c <__mcmp>
1002c614:	0080c20e 	bge	zero,r2,1002c920 <_strtod_r+0x1360>
1002c618:	e1800117 	ldw	r6,4(fp)
1002c61c:	d9001417 	ldw	r4,80(sp)
1002c620:	2013003a 	cmpeq	r9,r4,zero
1002c624:	4800ef1e 	bne	r9,zero,1002c9e4 <_strtod_r+0x1424>
1002c628:	30dffc2c 	andhi	r3,r6,32752
1002c62c:	0081ac34 	movhi	r2,1712
1002c630:	10c0ec36 	bltu	r2,r3,1002c9e4 <_strtod_r+0x1424>
1002c634:	0080dc34 	movhi	r2,880
1002c638:	10ffca2e 	bgeu	r2,r3,1002c564 <_strtod_r+0xfa4>
1002c63c:	e0800017 	ldw	r2,0(fp)
1002c640:	e0c00117 	ldw	r3,4(fp)
1002c644:	020e5434 	movhi	r8,14672
1002c648:	000d883a 	mov	r6,zero
1002c64c:	400f883a 	mov	r7,r8
1002c650:	180b883a 	mov	r5,r3
1002c654:	1009883a 	mov	r4,r2
1002c658:	da000c15 	stw	r8,48(sp)
1002c65c:	d8000b15 	stw	zero,44(sp)
1002c660:	002fdd80 	call	1002fdd8 <__muldf3>
1002c664:	e0800015 	stw	r2,0(fp)
1002c668:	e0c00115 	stw	r3,4(fp)
1002c66c:	183f471e 	bne	r3,zero,1002c38c <_strtod_r+0xdcc>
1002c670:	103f461e 	bne	r2,zero,1002c38c <_strtod_r+0xdcc>
1002c674:	00800884 	movi	r2,34
1002c678:	a8800015 	stw	r2,0(r21)
1002c67c:	003f4306 	br	1002c38c <_strtod_r+0xdcc>
1002c680:	d8801317 	ldw	r2,76(sp)
1002c684:	1025003a 	cmpeq	r18,r2,zero
1002c688:	9000861e 	bne	r18,zero,1002c8a4 <_strtod_r+0x12e4>
1002c68c:	e1400117 	ldw	r5,4(fp)
1002c690:	00c00434 	movhi	r3,16
1002c694:	18ffffc4 	addi	r3,r3,-1
1002c698:	28c4703a 	and	r2,r5,r3
1002c69c:	10c01b26 	beq	r2,r3,1002c70c <_strtod_r+0x114c>
1002c6a0:	e1c00017 	ldw	r7,0(fp)
1002c6a4:	3880004c 	andi	r2,r7,1
1002c6a8:	1005003a 	cmpeq	r2,r2,zero
1002c6ac:	1000791e 	bne	r2,zero,1002c894 <_strtod_r+0x12d4>
1002c6b0:	9000b126 	beq	r18,zero,1002c978 <_strtod_r+0x13b8>
1002c6b4:	e4400117 	ldw	r17,4(fp)
1002c6b8:	3809883a 	mov	r4,r7
1002c6bc:	3821883a 	mov	r16,r7
1002c6c0:	880b883a 	mov	r5,r17
1002c6c4:	002996c0 	call	1002996c <__ulp>
1002c6c8:	180f883a 	mov	r7,r3
1002c6cc:	880b883a 	mov	r5,r17
1002c6d0:	8009883a 	mov	r4,r16
1002c6d4:	100d883a 	mov	r6,r2
1002c6d8:	002fce40 	call	1002fce4 <__subdf3>
1002c6dc:	1009883a 	mov	r4,r2
1002c6e0:	000d883a 	mov	r6,zero
1002c6e4:	000f883a 	mov	r7,zero
1002c6e8:	180b883a 	mov	r5,r3
1002c6ec:	e0800015 	stw	r2,0(fp)
1002c6f0:	e0c00115 	stw	r3,4(fp)
1002c6f4:	003047c0 	call	1003047c <__nedf2>
1002c6f8:	103f9a26 	beq	r2,zero,1002c564 <_strtod_r+0xfa4>
1002c6fc:	d9001417 	ldw	r4,80(sp)
1002c700:	2013003a 	cmpeq	r9,r4,zero
1002c704:	483f211e 	bne	r9,zero,1002c38c <_strtod_r+0xdcc>
1002c708:	003fcc06 	br	1002c63c <_strtod_r+0x107c>
1002c70c:	d9001417 	ldw	r4,80(sp)
1002c710:	e1c00017 	ldw	r7,0(fp)
1002c714:	2013003a 	cmpeq	r9,r4,zero
1002c718:	4800bd1e 	bne	r9,zero,1002ca10 <_strtod_r+0x1450>
1002c71c:	28dffc2c 	andhi	r3,r5,32752
1002c720:	0081a834 	movhi	r2,1696
1002c724:	10c0ba36 	bltu	r2,r3,1002ca10 <_strtod_r+0x1450>
1002c728:	1804d53a 	srli	r2,r3,20
1002c72c:	00c01ac4 	movi	r3,107
1002c730:	013fffc4 	movi	r4,-1
1002c734:	1887c83a 	sub	r3,r3,r2
1002c738:	20c4983a 	sll	r2,r4,r3
1002c73c:	11ffd91e 	bne	r2,r7,1002c6a4 <_strtod_r+0x10e4>
1002c740:	28dffc2c 	andhi	r3,r5,32752
1002c744:	00800434 	movhi	r2,16
1002c748:	188d883a 	add	r6,r3,r2
1002c74c:	e1800115 	stw	r6,4(fp)
1002c750:	e0000015 	stw	zero,0(fp)
1002c754:	483f0d1e 	bne	r9,zero,1002c38c <_strtod_r+0xdcc>
1002c758:	003fb806 	br	1002c63c <_strtod_r+0x107c>
1002c75c:	0021883a 	mov	r16,zero
1002c760:	0005883a 	mov	r2,zero
1002c764:	044ff834 	movhi	r17,16352
1002c768:	00eff834 	movhi	r3,49120
1002c76c:	003e8606 	br	1002c188 <_strtod_r+0xbc8>
1002c770:	803d9e26 	beq	r16,zero,1002bdec <_strtod_r+0x82c>
1002c774:	0421c83a 	sub	r16,zero,r16
1002c778:	814003cc 	andi	r5,r16,15
1002c77c:	28000f26 	beq	r5,zero,1002c7bc <_strtod_r+0x11fc>
1002c780:	280a90fa 	slli	r5,r5,3
1002c784:	01000034 	movhi	r4,0
1002c788:	21039804 	addi	r4,r4,3680
1002c78c:	e0800017 	ldw	r2,0(fp)
1002c790:	290b883a 	add	r5,r5,r4
1002c794:	2a000017 	ldw	r8,0(r5)
1002c798:	e0c00117 	ldw	r3,4(fp)
1002c79c:	2a400117 	ldw	r9,4(r5)
1002c7a0:	1009883a 	mov	r4,r2
1002c7a4:	180b883a 	mov	r5,r3
1002c7a8:	480f883a 	mov	r7,r9
1002c7ac:	400d883a 	mov	r6,r8
1002c7b0:	003019c0 	call	1003019c <__divdf3>
1002c7b4:	e0c00115 	stw	r3,4(fp)
1002c7b8:	e0800015 	stw	r2,0(fp)
1002c7bc:	8021d13a 	srai	r16,r16,4
1002c7c0:	803d8a26 	beq	r16,zero,1002bdec <_strtod_r+0x82c>
1002c7c4:	008007c4 	movi	r2,31
1002c7c8:	14002d16 	blt	r2,r16,1002c880 <_strtod_r+0x12c0>
1002c7cc:	8080040c 	andi	r2,r16,16
1002c7d0:	10009926 	beq	r2,zero,1002ca38 <_strtod_r+0x1478>
1002c7d4:	00801a84 	movi	r2,106
1002c7d8:	d8801415 	stw	r2,80(sp)
1002c7dc:	0400110e 	bge	zero,r16,1002c824 <_strtod_r+0x1264>
1002c7e0:	04400034 	movhi	r17,0
1002c7e4:	8c43e504 	addi	r17,r17,3988
1002c7e8:	8080004c 	andi	r2,r16,1
1002c7ec:	1005003a 	cmpeq	r2,r2,zero
1002c7f0:	1000091e 	bne	r2,zero,1002c818 <_strtod_r+0x1258>
1002c7f4:	e0800017 	ldw	r2,0(fp)
1002c7f8:	e0c00117 	ldw	r3,4(fp)
1002c7fc:	89800017 	ldw	r6,0(r17)
1002c800:	89c00117 	ldw	r7,4(r17)
1002c804:	180b883a 	mov	r5,r3
1002c808:	1009883a 	mov	r4,r2
1002c80c:	002fdd80 	call	1002fdd8 <__muldf3>
1002c810:	e0c00115 	stw	r3,4(fp)
1002c814:	e0800015 	stw	r2,0(fp)
1002c818:	8021d07a 	srai	r16,r16,1
1002c81c:	8c400204 	addi	r17,r17,8
1002c820:	043ff116 	blt	zero,r16,1002c7e8 <_strtod_r+0x1228>
1002c824:	d8c01417 	ldw	r3,80(sp)
1002c828:	18000d26 	beq	r3,zero,1002c860 <_strtod_r+0x12a0>
1002c82c:	e1000117 	ldw	r4,4(fp)
1002c830:	00c01ac4 	movi	r3,107
1002c834:	209ffc2c 	andhi	r2,r4,32752
1002c838:	1004d53a 	srli	r2,r2,20
1002c83c:	1887c83a 	sub	r3,r3,r2
1002c840:	00c0070e 	bge	zero,r3,1002c860 <_strtod_r+0x12a0>
1002c844:	008007c4 	movi	r2,31
1002c848:	10c0900e 	bge	r2,r3,1002ca8c <_strtod_r+0x14cc>
1002c84c:	00800d04 	movi	r2,52
1002c850:	e0000015 	stw	zero,0(fp)
1002c854:	10c0870e 	bge	r2,r3,1002ca74 <_strtod_r+0x14b4>
1002c858:	0180dc34 	movhi	r6,880
1002c85c:	e1800115 	stw	r6,4(fp)
1002c860:	e0800017 	ldw	r2,0(fp)
1002c864:	e0c00117 	ldw	r3,4(fp)
1002c868:	000d883a 	mov	r6,zero
1002c86c:	000f883a 	mov	r7,zero
1002c870:	180b883a 	mov	r5,r3
1002c874:	1009883a 	mov	r4,r2
1002c878:	003047c0 	call	1003047c <__nedf2>
1002c87c:	103d5c1e 	bne	r2,zero,1002bdf0 <_strtod_r+0x830>
1002c880:	00800884 	movi	r2,34
1002c884:	a8800015 	stw	r2,0(r21)
1002c888:	e0000015 	stw	zero,0(fp)
1002c88c:	e0000115 	stw	zero,4(fp)
1002c890:	003bc206 	br	1002b79c <_strtod_r+0x1dc>
1002c894:	d8801417 	ldw	r2,80(sp)
1002c898:	1013003a 	cmpeq	r9,r2,zero
1002c89c:	483ebb1e 	bne	r9,zero,1002c38c <_strtod_r+0xdcc>
1002c8a0:	003f6606 	br	1002c63c <_strtod_r+0x107c>
1002c8a4:	e1800117 	ldw	r6,4(fp)
1002c8a8:	00c00434 	movhi	r3,16
1002c8ac:	18ffffc4 	addi	r3,r3,-1
1002c8b0:	30c4703a 	and	r2,r6,r3
1002c8b4:	103f7a1e 	bne	r2,zero,1002c6a0 <_strtod_r+0x10e0>
1002c8b8:	e1c00017 	ldw	r7,0(fp)
1002c8bc:	383f791e 	bne	r7,zero,1002c6a4 <_strtod_r+0x10e4>
1002c8c0:	003f5606 	br	1002c61c <_strtod_r+0x105c>
1002c8c4:	d9800f17 	ldw	r6,60(sp)
1002c8c8:	00bffa84 	movi	r2,-22
1002c8cc:	30bcd416 	blt	r6,r2,1002bc20 <_strtod_r+0x660>
1002c8d0:	317ffe24 	muli	r5,r6,-8
1002c8d4:	01000034 	movhi	r4,0
1002c8d8:	21039804 	addi	r4,r4,3680
1002c8dc:	e0800017 	ldw	r2,0(fp)
1002c8e0:	290b883a 	add	r5,r5,r4
1002c8e4:	2a000017 	ldw	r8,0(r5)
1002c8e8:	e0c00117 	ldw	r3,4(fp)
1002c8ec:	2a400117 	ldw	r9,4(r5)
1002c8f0:	1009883a 	mov	r4,r2
1002c8f4:	180b883a 	mov	r5,r3
1002c8f8:	480f883a 	mov	r7,r9
1002c8fc:	400d883a 	mov	r6,r8
1002c900:	003019c0 	call	1003019c <__divdf3>
1002c904:	e0c00115 	stw	r3,4(fp)
1002c908:	e0800015 	stw	r2,0(fp)
1002c90c:	003ba306 	br	1002b79c <_strtod_r+0x1dc>
1002c910:	00800404 	movi	r2,16
1002c914:	14c02f0e 	bge	r2,r19,1002c9d4 <_strtod_r+0x1414>
1002c918:	000f883a 	mov	r7,zero
1002c91c:	003f2006 	br	1002c5a0 <_strtod_r+0xfe0>
1002c920:	d9801417 	ldw	r6,80(sp)
1002c924:	3013003a 	cmpeq	r9,r6,zero
1002c928:	483e981e 	bne	r9,zero,1002c38c <_strtod_r+0xdcc>
1002c92c:	003f4306 	br	1002c63c <_strtod_r+0x107c>
1002c930:	00801a44 	movi	r2,105
1002c934:	20bc6326 	beq	r4,r2,1002bac4 <_strtod_r+0x504>
1002c938:	00801b84 	movi	r2,110
1002c93c:	20bbba1e 	bne	r4,r2,1002b828 <_strtod_r+0x268>
1002c940:	dc000404 	addi	r16,sp,16
1002c944:	8009883a 	mov	r4,r16
1002c948:	01400034 	movhi	r5,0
1002c94c:	2943e404 	addi	r5,r5,3984
1002c950:	002b5780 	call	1002b578 <match>
1002c954:	103bb426 	beq	r2,zero,1002b828 <_strtod_r+0x268>
1002c958:	d8800417 	ldw	r2,16(sp)
1002c95c:	00c00a04 	movi	r3,40
1002c960:	11000007 	ldb	r4,0(r2)
1002c964:	20c03626 	beq	r4,r3,1002ca40 <_strtod_r+0x1480>
1002c968:	01bffe34 	movhi	r6,65528
1002c96c:	e1800115 	stw	r6,4(fp)
1002c970:	e0000015 	stw	zero,0(fp)
1002c974:	003b8906 	br	1002b79c <_strtod_r+0x1dc>
1002c978:	e4400117 	ldw	r17,4(fp)
1002c97c:	3809883a 	mov	r4,r7
1002c980:	3821883a 	mov	r16,r7
1002c984:	880b883a 	mov	r5,r17
1002c988:	002996c0 	call	1002996c <__ulp>
1002c98c:	100d883a 	mov	r6,r2
1002c990:	880b883a 	mov	r5,r17
1002c994:	180f883a 	mov	r7,r3
1002c998:	8009883a 	mov	r4,r16
1002c99c:	002fd640 	call	1002fd64 <__adddf3>
1002c9a0:	d9801417 	ldw	r6,80(sp)
1002c9a4:	e0c00115 	stw	r3,4(fp)
1002c9a8:	e0800015 	stw	r2,0(fp)
1002c9ac:	3013003a 	cmpeq	r9,r6,zero
1002c9b0:	483e761e 	bne	r9,zero,1002c38c <_strtod_r+0xdcc>
1002c9b4:	003f2106 	br	1002c63c <_strtod_r+0x107c>
1002c9b8:	000f883a 	mov	r7,zero
1002c9bc:	003cf006 	br	1002bd80 <_strtod_r+0x7c0>
1002c9c0:	0080d434 	movhi	r2,848
1002c9c4:	188d883a 	add	r6,r3,r2
1002c9c8:	d8001415 	stw	zero,80(sp)
1002c9cc:	e1800115 	stw	r6,4(fp)
1002c9d0:	003d0706 	br	1002bdf0 <_strtod_r+0x830>
1002c9d4:	808002a4 	muli	r2,r16,10
1002c9d8:	000f883a 	mov	r7,zero
1002c9dc:	1261883a 	add	r16,r2,r9
1002c9e0:	003eef06 	br	1002c5a0 <_strtod_r+0xfe0>
1002c9e4:	309ffc2c 	andhi	r2,r6,32752
1002c9e8:	00fffc34 	movhi	r3,65520
1002c9ec:	10c5883a 	add	r2,r2,r3
1002c9f0:	00c00434 	movhi	r3,16
1002c9f4:	18ffffc4 	addi	r3,r3,-1
1002c9f8:	10ccb03a 	or	r6,r2,r3
1002c9fc:	01ffffc4 	movi	r7,-1
1002ca00:	e1800115 	stw	r6,4(fp)
1002ca04:	e1c00015 	stw	r7,0(fp)
1002ca08:	483e601e 	bne	r9,zero,1002c38c <_strtod_r+0xdcc>
1002ca0c:	003f0b06 	br	1002c63c <_strtod_r+0x107c>
1002ca10:	00bfffc4 	movi	r2,-1
1002ca14:	003f4906 	br	1002c73c <_strtod_r+0x117c>
1002ca18:	0025883a 	mov	r18,zero
1002ca1c:	003cb106 	br	1002bce4 <_strtod_r+0x724>
1002ca20:	d8c01417 	ldw	r3,80(sp)
1002ca24:	1813003a 	cmpeq	r9,r3,zero
1002ca28:	483e581e 	bne	r9,zero,1002c38c <_strtod_r+0xdcc>
1002ca2c:	003f0306 	br	1002c63c <_strtod_r+0x107c>
1002ca30:	980f883a 	mov	r7,r19
1002ca34:	003ed406 	br	1002c588 <_strtod_r+0xfc8>
1002ca38:	d8001415 	stw	zero,80(sp)
1002ca3c:	003f6706 	br	1002c7dc <_strtod_r+0x121c>
1002ca40:	8009883a 	mov	r4,r16
1002ca44:	01400034 	movhi	r5,0
1002ca48:	29464a04 	addi	r5,r5,6440
1002ca4c:	d9800d04 	addi	r6,sp,52
1002ca50:	002e6fc0 	call	1002e6fc <__hexnan>
1002ca54:	00c00144 	movi	r3,5
1002ca58:	10ffc31e 	bne	r2,r3,1002c968 <_strtod_r+0x13a8>
1002ca5c:	d8800e17 	ldw	r2,56(sp)
1002ca60:	d9c00d17 	ldw	r7,52(sp)
1002ca64:	119ffc34 	orhi	r6,r2,32752
1002ca68:	e1800115 	stw	r6,4(fp)
1002ca6c:	e1c00015 	stw	r7,0(fp)
1002ca70:	003b4a06 	br	1002b79c <_strtod_r+0x1dc>
1002ca74:	18fff804 	addi	r3,r3,-32
1002ca78:	00bfffc4 	movi	r2,-1
1002ca7c:	10c4983a 	sll	r2,r2,r3
1002ca80:	208c703a 	and	r6,r4,r2
1002ca84:	e1800115 	stw	r6,4(fp)
1002ca88:	003f7506 	br	1002c860 <_strtod_r+0x12a0>
1002ca8c:	00bfffc4 	movi	r2,-1
1002ca90:	10c4983a 	sll	r2,r2,r3
1002ca94:	e0c00017 	ldw	r3,0(fp)
1002ca98:	188e703a 	and	r7,r3,r2
1002ca9c:	e1c00015 	stw	r7,0(fp)
1002caa0:	003f6f06 	br	1002c860 <_strtod_r+0x12a0>

1002caa4 <strtof>:
1002caa4:	defffa04 	addi	sp,sp,-24
1002caa8:	dd000415 	stw	r20,16(sp)
1002caac:	05000034 	movhi	r20,0
1002cab0:	a50b0704 	addi	r20,r20,11292
1002cab4:	2007883a 	mov	r3,r4
1002cab8:	a1000017 	ldw	r4,0(r20)
1002cabc:	280d883a 	mov	r6,r5
1002cac0:	180b883a 	mov	r5,r3
1002cac4:	dfc00515 	stw	ra,20(sp)
1002cac8:	dcc00315 	stw	r19,12(sp)
1002cacc:	dc800215 	stw	r18,8(sp)
1002cad0:	dc400115 	stw	r17,4(sp)
1002cad4:	dc000015 	stw	r16,0(sp)
1002cad8:	002b5c00 	call	1002b5c0 <_strtod_r>
1002cadc:	180b883a 	mov	r5,r3
1002cae0:	1009883a 	mov	r4,r2
1002cae4:	1823883a 	mov	r17,r3
1002cae8:	1021883a 	mov	r16,r2
1002caec:	00308f40 	call	100308f4 <__truncdfsf2>
1002caf0:	1009883a 	mov	r4,r2
1002caf4:	000b883a 	mov	r5,zero
1002caf8:	1025883a 	mov	r18,r2
1002cafc:	1027883a 	mov	r19,r2
1002cb00:	002f76c0 	call	1002f76c <__nesf2>
1002cb04:	000d883a 	mov	r6,zero
1002cb08:	000f883a 	mov	r7,zero
1002cb0c:	8009883a 	mov	r4,r16
1002cb10:	880b883a 	mov	r5,r17
1002cb14:	10000e1e 	bne	r2,zero,1002cb50 <strtof+0xac>
1002cb18:	003047c0 	call	1003047c <__nedf2>
1002cb1c:	10000c26 	beq	r2,zero,1002cb50 <strtof+0xac>
1002cb20:	a0c00017 	ldw	r3,0(r20)
1002cb24:	00800884 	movi	r2,34
1002cb28:	18800015 	stw	r2,0(r3)
1002cb2c:	9805883a 	mov	r2,r19
1002cb30:	dfc00517 	ldw	ra,20(sp)
1002cb34:	dd000417 	ldw	r20,16(sp)
1002cb38:	dcc00317 	ldw	r19,12(sp)
1002cb3c:	dc800217 	ldw	r18,8(sp)
1002cb40:	dc400117 	ldw	r17,4(sp)
1002cb44:	dc000017 	ldw	r16,0(sp)
1002cb48:	dec00604 	addi	sp,sp,24
1002cb4c:	f800283a 	ret
1002cb50:	9009883a 	mov	r4,r18
1002cb54:	015fe034 	movhi	r5,32640
1002cb58:	297fffc4 	addi	r5,r5,-1
1002cb5c:	002f7e40 	call	1002f7e4 <__gtsf2>
1002cb60:	00ffffc4 	movi	r3,-1
1002cb64:	011ffc34 	movhi	r4,32752
1002cb68:	213fffc4 	addi	r4,r4,-1
1002cb6c:	200f883a 	mov	r7,r4
1002cb70:	180d883a 	mov	r6,r3
1002cb74:	8009883a 	mov	r4,r16
1002cb78:	880b883a 	mov	r5,r17
1002cb7c:	00800f16 	blt	zero,r2,1002cbbc <strtof+0x118>
1002cb80:	9009883a 	mov	r4,r18
1002cb84:	017fe034 	movhi	r5,65408
1002cb88:	297fffc4 	addi	r5,r5,-1
1002cb8c:	002f85c0 	call	1002f85c <__ltsf2>
1002cb90:	023fffc4 	movi	r8,-1
1002cb94:	027ffc34 	movhi	r9,65520
1002cb98:	4a7fffc4 	addi	r9,r9,-1
1002cb9c:	880b883a 	mov	r5,r17
1002cba0:	480f883a 	mov	r7,r9
1002cba4:	8009883a 	mov	r4,r16
1002cba8:	400d883a 	mov	r6,r8
1002cbac:	103fdf0e 	bge	r2,zero,1002cb2c <strtof+0x88>
1002cbb0:	00306140 	call	10030614 <__ltdf2>
1002cbb4:	103fda0e 	bge	r2,zero,1002cb20 <strtof+0x7c>
1002cbb8:	003fdc06 	br	1002cb2c <strtof+0x88>
1002cbbc:	00305040 	call	10030504 <__gtdf2>
1002cbc0:	00bfd70e 	bge	zero,r2,1002cb20 <strtof+0x7c>
1002cbc4:	003fee06 	br	1002cb80 <strtof+0xdc>

1002cbc8 <strtod>:
1002cbc8:	01800034 	movhi	r6,0
1002cbcc:	318b0704 	addi	r6,r6,11292
1002cbd0:	2007883a 	mov	r3,r4
1002cbd4:	31000017 	ldw	r4,0(r6)
1002cbd8:	280d883a 	mov	r6,r5
1002cbdc:	180b883a 	mov	r5,r3
1002cbe0:	002b5c01 	jmpi	1002b5c0 <_strtod_r>

1002cbe4 <_strtol_r>:
1002cbe4:	defff304 	addi	sp,sp,-52
1002cbe8:	00800034 	movhi	r2,0
1002cbec:	108b0b04 	addi	r2,r2,11308
1002cbf0:	dcc00615 	stw	r19,24(sp)
1002cbf4:	14c00017 	ldw	r19,0(r2)
1002cbf8:	ddc00a15 	stw	r23,40(sp)
1002cbfc:	dc000315 	stw	r16,12(sp)
1002cc00:	dfc00c15 	stw	ra,48(sp)
1002cc04:	df000b15 	stw	fp,44(sp)
1002cc08:	dd800915 	stw	r22,36(sp)
1002cc0c:	dd400815 	stw	r21,32(sp)
1002cc10:	dd000715 	stw	r20,28(sp)
1002cc14:	dc800515 	stw	r18,20(sp)
1002cc18:	dc400415 	stw	r17,16(sp)
1002cc1c:	282f883a 	mov	r23,r5
1002cc20:	d9000015 	stw	r4,0(sp)
1002cc24:	d9800115 	stw	r6,4(sp)
1002cc28:	2821883a 	mov	r16,r5
1002cc2c:	84400007 	ldb	r17,0(r16)
1002cc30:	84000044 	addi	r16,r16,1
1002cc34:	9c47883a 	add	r3,r19,r17
1002cc38:	18800003 	ldbu	r2,0(r3)
1002cc3c:	1080020c 	andi	r2,r2,8
1002cc40:	103ffa1e 	bne	r2,zero,1002cc2c <_strtol_r+0x48>
1002cc44:	00800b44 	movi	r2,45
1002cc48:	88805c26 	beq	r17,r2,1002cdbc <_strtol_r+0x1d8>
1002cc4c:	00800ac4 	movi	r2,43
1002cc50:	88805726 	beq	r17,r2,1002cdb0 <_strtol_r+0x1cc>
1002cc54:	0039883a 	mov	fp,zero
1002cc58:	3807003a 	cmpeq	r3,r7,zero
1002cc5c:	1800431e 	bne	r3,zero,1002cd6c <_strtol_r+0x188>
1002cc60:	00800404 	movi	r2,16
1002cc64:	38804126 	beq	r7,r2,1002cd6c <_strtol_r+0x188>
1002cc68:	3829883a 	mov	r20,r7
1002cc6c:	e02cc03a 	cmpne	r22,fp,zero
1002cc70:	b0004b1e 	bne	r22,zero,1002cda0 <_strtol_r+0x1bc>
1002cc74:	04a00034 	movhi	r18,32768
1002cc78:	94bfffc4 	addi	r18,r18,-1
1002cc7c:	9009883a 	mov	r4,r18
1002cc80:	a00b883a 	mov	r5,r20
1002cc84:	d9c00215 	stw	r7,8(sp)
1002cc88:	00223440 	call	10022344 <__umodsi3>
1002cc8c:	9009883a 	mov	r4,r18
1002cc90:	a00b883a 	mov	r5,r20
1002cc94:	102b883a 	mov	r21,r2
1002cc98:	002233c0 	call	1002233c <__udivsi3>
1002cc9c:	1011883a 	mov	r8,r2
1002cca0:	9c45883a 	add	r2,r19,r17
1002cca4:	11000003 	ldbu	r4,0(r2)
1002cca8:	000b883a 	mov	r5,zero
1002ccac:	000d883a 	mov	r6,zero
1002ccb0:	20c0010c 	andi	r3,r4,4
1002ccb4:	d9c00217 	ldw	r7,8(sp)
1002ccb8:	18000e26 	beq	r3,zero,1002ccf4 <_strtol_r+0x110>
1002ccbc:	88fff404 	addi	r3,r17,-48
1002ccc0:	19c0140e 	bge	r3,r7,1002cd14 <_strtol_r+0x130>
1002ccc4:	30003116 	blt	r6,zero,1002cd8c <_strtol_r+0x1a8>
1002ccc8:	41403036 	bltu	r8,r5,1002cd8c <_strtol_r+0x1a8>
1002cccc:	2a002e26 	beq	r5,r8,1002cd88 <_strtol_r+0x1a4>
1002ccd0:	2d05383a 	mul	r2,r5,r20
1002ccd4:	01800044 	movi	r6,1
1002ccd8:	10cb883a 	add	r5,r2,r3
1002ccdc:	84400007 	ldb	r17,0(r16)
1002cce0:	84000044 	addi	r16,r16,1
1002cce4:	9c45883a 	add	r2,r19,r17
1002cce8:	11000003 	ldbu	r4,0(r2)
1002ccec:	20c0010c 	andi	r3,r4,4
1002ccf0:	183ff21e 	bne	r3,zero,1002ccbc <_strtol_r+0xd8>
1002ccf4:	208000cc 	andi	r2,r4,3
1002ccf8:	10000626 	beq	r2,zero,1002cd14 <_strtol_r+0x130>
1002ccfc:	2080004c 	andi	r2,r4,1
1002cd00:	1005003a 	cmpeq	r2,r2,zero
1002cd04:	1000231e 	bne	r2,zero,1002cd94 <_strtol_r+0x1b0>
1002cd08:	00800dc4 	movi	r2,55
1002cd0c:	8887c83a 	sub	r3,r17,r2
1002cd10:	19ffec16 	blt	r3,r7,1002ccc4 <_strtol_r+0xe0>
1002cd14:	30002d16 	blt	r6,zero,1002cdcc <_strtol_r+0x1e8>
1002cd18:	b000231e 	bne	r22,zero,1002cda8 <_strtol_r+0x1c4>
1002cd1c:	2807883a 	mov	r3,r5
1002cd20:	d8800117 	ldw	r2,4(sp)
1002cd24:	10000426 	beq	r2,zero,1002cd38 <_strtol_r+0x154>
1002cd28:	30000126 	beq	r6,zero,1002cd30 <_strtol_r+0x14c>
1002cd2c:	85ffffc4 	addi	r23,r16,-1
1002cd30:	d9000117 	ldw	r4,4(sp)
1002cd34:	25c00015 	stw	r23,0(r4)
1002cd38:	1805883a 	mov	r2,r3
1002cd3c:	dfc00c17 	ldw	ra,48(sp)
1002cd40:	df000b17 	ldw	fp,44(sp)
1002cd44:	ddc00a17 	ldw	r23,40(sp)
1002cd48:	dd800917 	ldw	r22,36(sp)
1002cd4c:	dd400817 	ldw	r21,32(sp)
1002cd50:	dd000717 	ldw	r20,28(sp)
1002cd54:	dcc00617 	ldw	r19,24(sp)
1002cd58:	dc800517 	ldw	r18,20(sp)
1002cd5c:	dc400417 	ldw	r17,16(sp)
1002cd60:	dc000317 	ldw	r16,12(sp)
1002cd64:	dec00d04 	addi	sp,sp,52
1002cd68:	f800283a 	ret
1002cd6c:	00800c04 	movi	r2,48
1002cd70:	88801d26 	beq	r17,r2,1002cde8 <_strtol_r+0x204>
1002cd74:	183fbc26 	beq	r3,zero,1002cc68 <_strtol_r+0x84>
1002cd78:	00800c04 	movi	r2,48
1002cd7c:	88802726 	beq	r17,r2,1002ce1c <_strtol_r+0x238>
1002cd80:	01c00284 	movi	r7,10
1002cd84:	003fb806 	br	1002cc68 <_strtol_r+0x84>
1002cd88:	a8ffd10e 	bge	r21,r3,1002ccd0 <_strtol_r+0xec>
1002cd8c:	01bfffc4 	movi	r6,-1
1002cd90:	003fd206 	br	1002ccdc <_strtol_r+0xf8>
1002cd94:	008015c4 	movi	r2,87
1002cd98:	8887c83a 	sub	r3,r17,r2
1002cd9c:	003fdc06 	br	1002cd10 <_strtol_r+0x12c>
1002cda0:	04a00034 	movhi	r18,32768
1002cda4:	003fb506 	br	1002cc7c <_strtol_r+0x98>
1002cda8:	0147c83a 	sub	r3,zero,r5
1002cdac:	003fdc06 	br	1002cd20 <_strtol_r+0x13c>
1002cdb0:	84400007 	ldb	r17,0(r16)
1002cdb4:	84000044 	addi	r16,r16,1
1002cdb8:	003fa606 	br	1002cc54 <_strtol_r+0x70>
1002cdbc:	84400007 	ldb	r17,0(r16)
1002cdc0:	07000044 	movi	fp,1
1002cdc4:	84000044 	addi	r16,r16,1
1002cdc8:	003fa306 	br	1002cc58 <_strtol_r+0x74>
1002cdcc:	e005003a 	cmpeq	r2,fp,zero
1002cdd0:	10000f1e 	bne	r2,zero,1002ce10 <_strtol_r+0x22c>
1002cdd4:	00e00034 	movhi	r3,32768
1002cdd8:	d9000017 	ldw	r4,0(sp)
1002cddc:	00800884 	movi	r2,34
1002cde0:	20800015 	stw	r2,0(r4)
1002cde4:	003fce06 	br	1002cd20 <_strtol_r+0x13c>
1002cde8:	81000007 	ldb	r4,0(r16)
1002cdec:	00801e04 	movi	r2,120
1002cdf0:	20800226 	beq	r4,r2,1002cdfc <_strtol_r+0x218>
1002cdf4:	00801604 	movi	r2,88
1002cdf8:	20bfde1e 	bne	r4,r2,1002cd74 <_strtol_r+0x190>
1002cdfc:	84400047 	ldb	r17,1(r16)
1002ce00:	01c00404 	movi	r7,16
1002ce04:	84000084 	addi	r16,r16,2
1002ce08:	3829883a 	mov	r20,r7
1002ce0c:	003f9706 	br	1002cc6c <_strtol_r+0x88>
1002ce10:	00e00034 	movhi	r3,32768
1002ce14:	18ffffc4 	addi	r3,r3,-1
1002ce18:	003fef06 	br	1002cdd8 <_strtol_r+0x1f4>
1002ce1c:	01c00204 	movi	r7,8
1002ce20:	3829883a 	mov	r20,r7
1002ce24:	003f9106 	br	1002cc6c <_strtol_r+0x88>

1002ce28 <strtol>:
1002ce28:	00800034 	movhi	r2,0
1002ce2c:	108b0704 	addi	r2,r2,11292
1002ce30:	2013883a 	mov	r9,r4
1002ce34:	11000017 	ldw	r4,0(r2)
1002ce38:	2805883a 	mov	r2,r5
1002ce3c:	300f883a 	mov	r7,r6
1002ce40:	480b883a 	mov	r5,r9
1002ce44:	100d883a 	mov	r6,r2
1002ce48:	002cbe41 	jmpi	1002cbe4 <_strtol_r>

1002ce4c <_strtoll_r>:
1002ce4c:	defff004 	addi	sp,sp,-64
1002ce50:	00800034 	movhi	r2,0
1002ce54:	108b0b04 	addi	r2,r2,11308
1002ce58:	df000e15 	stw	fp,56(sp)
1002ce5c:	17000017 	ldw	fp,0(r2)
1002ce60:	ddc00d15 	stw	r23,52(sp)
1002ce64:	dd000a15 	stw	r20,40(sp)
1002ce68:	dfc00f15 	stw	ra,60(sp)
1002ce6c:	dd800c15 	stw	r22,48(sp)
1002ce70:	dd400b15 	stw	r21,44(sp)
1002ce74:	dcc00915 	stw	r19,36(sp)
1002ce78:	dc800815 	stw	r18,32(sp)
1002ce7c:	dc400715 	stw	r17,28(sp)
1002ce80:	dc000615 	stw	r16,24(sp)
1002ce84:	d9400315 	stw	r5,12(sp)
1002ce88:	d9000215 	stw	r4,8(sp)
1002ce8c:	d9800415 	stw	r6,16(sp)
1002ce90:	382f883a 	mov	r23,r7
1002ce94:	2829883a 	mov	r20,r5
1002ce98:	a4c00007 	ldb	r19,0(r20)
1002ce9c:	a5000044 	addi	r20,r20,1
1002cea0:	e4c7883a 	add	r3,fp,r19
1002cea4:	18800003 	ldbu	r2,0(r3)
1002cea8:	1080020c 	andi	r2,r2,8
1002ceac:	103ffa1e 	bne	r2,zero,1002ce98 <_strtoll_r+0x4c>
1002ceb0:	00800b44 	movi	r2,45
1002ceb4:	98808826 	beq	r19,r2,1002d0d8 <_strtoll_r+0x28c>
1002ceb8:	00800ac4 	movi	r2,43
1002cebc:	98808326 	beq	r19,r2,1002d0cc <_strtoll_r+0x280>
1002cec0:	d8000115 	stw	zero,4(sp)
1002cec4:	b807003a 	cmpeq	r3,r23,zero
1002cec8:	18005f1e 	bne	r3,zero,1002d048 <_strtoll_r+0x1fc>
1002cecc:	00800404 	movi	r2,16
1002ced0:	b8805d26 	beq	r23,r2,1002d048 <_strtoll_r+0x1fc>
1002ced4:	b82dd7fa 	srai	r22,r23,31
1002ced8:	b82b883a 	mov	r21,r23
1002cedc:	d8c00117 	ldw	r3,4(sp)
1002cee0:	1806c03a 	cmpne	r3,r3,zero
1002cee4:	d8c00515 	stw	r3,20(sp)
1002cee8:	1800631e 	bne	r3,zero,1002d078 <_strtoll_r+0x22c>
1002ceec:	043fffc4 	movi	r16,-1
1002cef0:	04600034 	movhi	r17,32768
1002cef4:	8c7fffc4 	addi	r17,r17,-1
1002cef8:	880b883a 	mov	r5,r17
1002cefc:	8009883a 	mov	r4,r16
1002cf00:	a80d883a 	mov	r6,r21
1002cf04:	b00f883a 	mov	r7,r22
1002cf08:	002f1bc0 	call	1002f1bc <__umoddi3>
1002cf0c:	880b883a 	mov	r5,r17
1002cf10:	8009883a 	mov	r4,r16
1002cf14:	b00f883a 	mov	r7,r22
1002cf18:	a80d883a 	mov	r6,r21
1002cf1c:	d8800015 	stw	r2,0(sp)
1002cf20:	002ebe00 	call	1002ebe0 <__udivdi3>
1002cf24:	1023883a 	mov	r17,r2
1002cf28:	e4c5883a 	add	r2,fp,r19
1002cf2c:	11000003 	ldbu	r4,0(r2)
1002cf30:	1825883a 	mov	r18,r3
1002cf34:	0015883a 	mov	r10,zero
1002cf38:	20c0010c 	andi	r3,r4,4
1002cf3c:	0017883a 	mov	r11,zero
1002cf40:	000f883a 	mov	r7,zero
1002cf44:	18001a26 	beq	r3,zero,1002cfb0 <_strtoll_r+0x164>
1002cf48:	9c3ff404 	addi	r16,r19,-48
1002cf4c:	85c0200e 	bge	r16,r23,1002cfd0 <_strtoll_r+0x184>
1002cf50:	38003b16 	blt	r7,zero,1002d040 <_strtoll_r+0x1f4>
1002cf54:	92c03a36 	bltu	r18,r11,1002d040 <_strtoll_r+0x1f4>
1002cf58:	5c803826 	beq	r11,r18,1002d03c <_strtoll_r+0x1f0>
1002cf5c:	54404c26 	beq	r10,r17,1002d090 <_strtoll_r+0x244>
1002cf60:	580b883a 	mov	r5,r11
1002cf64:	5009883a 	mov	r4,r10
1002cf68:	a80d883a 	mov	r6,r21
1002cf6c:	b00f883a 	mov	r7,r22
1002cf70:	002eaa40 	call	1002eaa4 <__muldi3>
1002cf74:	8013d7fa 	srai	r9,r16,31
1002cf78:	100d883a 	mov	r6,r2
1002cf7c:	1405883a 	add	r2,r2,r16
1002cf80:	118d803a 	cmpltu	r6,r2,r6
1002cf84:	1a47883a 	add	r3,r3,r9
1002cf88:	30cd883a 	add	r6,r6,r3
1002cf8c:	1015883a 	mov	r10,r2
1002cf90:	3017883a 	mov	r11,r6
1002cf94:	01c00044 	movi	r7,1
1002cf98:	a4c00007 	ldb	r19,0(r20)
1002cf9c:	a5000044 	addi	r20,r20,1
1002cfa0:	e4c5883a 	add	r2,fp,r19
1002cfa4:	11000003 	ldbu	r4,0(r2)
1002cfa8:	20c0010c 	andi	r3,r4,4
1002cfac:	183fe61e 	bne	r3,zero,1002cf48 <_strtoll_r+0xfc>
1002cfb0:	208000cc 	andi	r2,r4,3
1002cfb4:	10000626 	beq	r2,zero,1002cfd0 <_strtoll_r+0x184>
1002cfb8:	2080004c 	andi	r2,r4,1
1002cfbc:	1005003a 	cmpeq	r2,r2,zero
1002cfc0:	1000301e 	bne	r2,zero,1002d084 <_strtoll_r+0x238>
1002cfc4:	02000dc4 	movi	r8,55
1002cfc8:	9a21c83a 	sub	r16,r19,r8
1002cfcc:	85ffe016 	blt	r16,r23,1002cf50 <_strtoll_r+0x104>
1002cfd0:	38004616 	blt	r7,zero,1002d0ec <_strtoll_r+0x2a0>
1002cfd4:	d8800517 	ldw	r2,20(sp)
1002cfd8:	1000341e 	bne	r2,zero,1002d0ac <_strtoll_r+0x260>
1002cfdc:	500b883a 	mov	r5,r10
1002cfe0:	580d883a 	mov	r6,r11
1002cfe4:	d8c00417 	ldw	r3,16(sp)
1002cfe8:	18000626 	beq	r3,zero,1002d004 <_strtoll_r+0x1b8>
1002cfec:	38000226 	beq	r7,zero,1002cff8 <_strtoll_r+0x1ac>
1002cff0:	a53fffc4 	addi	r20,r20,-1
1002cff4:	dd000315 	stw	r20,12(sp)
1002cff8:	d8c00317 	ldw	r3,12(sp)
1002cffc:	d8800417 	ldw	r2,16(sp)
1002d000:	10c00015 	stw	r3,0(r2)
1002d004:	2805883a 	mov	r2,r5
1002d008:	3007883a 	mov	r3,r6
1002d00c:	dfc00f17 	ldw	ra,60(sp)
1002d010:	df000e17 	ldw	fp,56(sp)
1002d014:	ddc00d17 	ldw	r23,52(sp)
1002d018:	dd800c17 	ldw	r22,48(sp)
1002d01c:	dd400b17 	ldw	r21,44(sp)
1002d020:	dd000a17 	ldw	r20,40(sp)
1002d024:	dcc00917 	ldw	r19,36(sp)
1002d028:	dc800817 	ldw	r18,32(sp)
1002d02c:	dc400717 	ldw	r17,28(sp)
1002d030:	dc000617 	ldw	r16,24(sp)
1002d034:	dec01004 	addi	sp,sp,64
1002d038:	f800283a 	ret
1002d03c:	8abfc72e 	bgeu	r17,r10,1002cf5c <_strtoll_r+0x110>
1002d040:	01ffffc4 	movi	r7,-1
1002d044:	003fd406 	br	1002cf98 <_strtoll_r+0x14c>
1002d048:	00800c04 	movi	r2,48
1002d04c:	98803226 	beq	r19,r2,1002d118 <_strtoll_r+0x2cc>
1002d050:	183fa026 	beq	r3,zero,1002ced4 <_strtoll_r+0x88>
1002d054:	00800c04 	movi	r2,48
1002d058:	98803e26 	beq	r19,r2,1002d154 <_strtoll_r+0x308>
1002d05c:	d8c00117 	ldw	r3,4(sp)
1002d060:	05c00284 	movi	r23,10
1002d064:	b82b883a 	mov	r21,r23
1002d068:	1806c03a 	cmpne	r3,r3,zero
1002d06c:	002d883a 	mov	r22,zero
1002d070:	d8c00515 	stw	r3,20(sp)
1002d074:	183f9d26 	beq	r3,zero,1002ceec <_strtoll_r+0xa0>
1002d078:	0021883a 	mov	r16,zero
1002d07c:	04600034 	movhi	r17,32768
1002d080:	003f9d06 	br	1002cef8 <_strtoll_r+0xac>
1002d084:	020015c4 	movi	r8,87
1002d088:	9a21c83a 	sub	r16,r19,r8
1002d08c:	003fcf06 	br	1002cfcc <_strtoll_r+0x180>
1002d090:	5cbfb31e 	bne	r11,r18,1002cf60 <_strtoll_r+0x114>
1002d094:	d8800017 	ldw	r2,0(sp)
1002d098:	143fb10e 	bge	r2,r16,1002cf60 <_strtoll_r+0x114>
1002d09c:	8815883a 	mov	r10,r17
1002d0a0:	9017883a 	mov	r11,r18
1002d0a4:	01ffffc4 	movi	r7,-1
1002d0a8:	003fbb06 	br	1002cf98 <_strtoll_r+0x14c>
1002d0ac:	0009883a 	mov	r4,zero
1002d0b0:	2285c83a 	sub	r2,r4,r10
1002d0b4:	2089803a 	cmpltu	r4,r4,r2
1002d0b8:	02c7c83a 	sub	r3,zero,r11
1002d0bc:	1909c83a 	sub	r4,r3,r4
1002d0c0:	100b883a 	mov	r5,r2
1002d0c4:	200d883a 	mov	r6,r4
1002d0c8:	003fc606 	br	1002cfe4 <_strtoll_r+0x198>
1002d0cc:	a4c00007 	ldb	r19,0(r20)
1002d0d0:	a5000044 	addi	r20,r20,1
1002d0d4:	003f7a06 	br	1002cec0 <_strtoll_r+0x74>
1002d0d8:	a4c00007 	ldb	r19,0(r20)
1002d0dc:	00800044 	movi	r2,1
1002d0e0:	a5000044 	addi	r20,r20,1
1002d0e4:	d8800115 	stw	r2,4(sp)
1002d0e8:	003f7606 	br	1002cec4 <_strtoll_r+0x78>
1002d0ec:	d8c00117 	ldw	r3,4(sp)
1002d0f0:	1805003a 	cmpeq	r2,r3,zero
1002d0f4:	1000131e 	bne	r2,zero,1002d144 <_strtoll_r+0x2f8>
1002d0f8:	0005883a 	mov	r2,zero
1002d0fc:	00e00034 	movhi	r3,32768
1002d100:	100b883a 	mov	r5,r2
1002d104:	180d883a 	mov	r6,r3
1002d108:	d8c00217 	ldw	r3,8(sp)
1002d10c:	00800884 	movi	r2,34
1002d110:	18800015 	stw	r2,0(r3)
1002d114:	003fb306 	br	1002cfe4 <_strtoll_r+0x198>
1002d118:	a1000007 	ldb	r4,0(r20)
1002d11c:	00801e04 	movi	r2,120
1002d120:	20800226 	beq	r4,r2,1002d12c <_strtoll_r+0x2e0>
1002d124:	00801604 	movi	r2,88
1002d128:	20bfc91e 	bne	r4,r2,1002d050 <_strtoll_r+0x204>
1002d12c:	a4c00047 	ldb	r19,1(r20)
1002d130:	05c00404 	movi	r23,16
1002d134:	b82b883a 	mov	r21,r23
1002d138:	a5000084 	addi	r20,r20,2
1002d13c:	002d883a 	mov	r22,zero
1002d140:	003f6606 	br	1002cedc <_strtoll_r+0x90>
1002d144:	017fffc4 	movi	r5,-1
1002d148:	01a00034 	movhi	r6,32768
1002d14c:	31bfffc4 	addi	r6,r6,-1
1002d150:	003fed06 	br	1002d108 <_strtoll_r+0x2bc>
1002d154:	05c00204 	movi	r23,8
1002d158:	b82b883a 	mov	r21,r23
1002d15c:	002d883a 	mov	r22,zero
1002d160:	003f5e06 	br	1002cedc <_strtoll_r+0x90>

1002d164 <_strtoul_r>:
1002d164:	defff604 	addi	sp,sp,-40
1002d168:	00800034 	movhi	r2,0
1002d16c:	108b0b04 	addi	r2,r2,11308
1002d170:	dd000415 	stw	r20,16(sp)
1002d174:	15000017 	ldw	r20,0(r2)
1002d178:	ddc00715 	stw	r23,28(sp)
1002d17c:	dd800615 	stw	r22,24(sp)
1002d180:	dd400515 	stw	r21,20(sp)
1002d184:	dc800215 	stw	r18,8(sp)
1002d188:	dc000015 	stw	r16,0(sp)
1002d18c:	dfc00915 	stw	ra,36(sp)
1002d190:	df000815 	stw	fp,32(sp)
1002d194:	dcc00315 	stw	r19,12(sp)
1002d198:	dc400115 	stw	r17,4(sp)
1002d19c:	282b883a 	mov	r21,r5
1002d1a0:	202f883a 	mov	r23,r4
1002d1a4:	302d883a 	mov	r22,r6
1002d1a8:	3825883a 	mov	r18,r7
1002d1ac:	2821883a 	mov	r16,r5
1002d1b0:	84400007 	ldb	r17,0(r16)
1002d1b4:	84000044 	addi	r16,r16,1
1002d1b8:	a447883a 	add	r3,r20,r17
1002d1bc:	18800003 	ldbu	r2,0(r3)
1002d1c0:	1080020c 	andi	r2,r2,8
1002d1c4:	103ffa1e 	bne	r2,zero,1002d1b0 <_strtoul_r+0x4c>
1002d1c8:	00800b44 	movi	r2,45
1002d1cc:	88805626 	beq	r17,r2,1002d328 <_strtoul_r+0x1c4>
1002d1d0:	00800ac4 	movi	r2,43
1002d1d4:	88805126 	beq	r17,r2,1002d31c <_strtoul_r+0x1b8>
1002d1d8:	0039883a 	mov	fp,zero
1002d1dc:	9007003a 	cmpeq	r3,r18,zero
1002d1e0:	18003b1e 	bne	r3,zero,1002d2d0 <_strtoul_r+0x16c>
1002d1e4:	00800404 	movi	r2,16
1002d1e8:	90803926 	beq	r18,r2,1002d2d0 <_strtoul_r+0x16c>
1002d1ec:	013fffc4 	movi	r4,-1
1002d1f0:	900b883a 	mov	r5,r18
1002d1f4:	002233c0 	call	1002233c <__udivsi3>
1002d1f8:	013fffc4 	movi	r4,-1
1002d1fc:	900b883a 	mov	r5,r18
1002d200:	1027883a 	mov	r19,r2
1002d204:	00223440 	call	10022344 <__umodsi3>
1002d208:	1011883a 	mov	r8,r2
1002d20c:	900f883a 	mov	r7,r18
1002d210:	a445883a 	add	r2,r20,r17
1002d214:	11000003 	ldbu	r4,0(r2)
1002d218:	000b883a 	mov	r5,zero
1002d21c:	000d883a 	mov	r6,zero
1002d220:	20c0010c 	andi	r3,r4,4
1002d224:	18000e26 	beq	r3,zero,1002d260 <_strtoul_r+0xfc>
1002d228:	88fff404 	addi	r3,r17,-48
1002d22c:	1c80140e 	bge	r3,r18,1002d280 <_strtoul_r+0x11c>
1002d230:	30003316 	blt	r6,zero,1002d300 <_strtoul_r+0x19c>
1002d234:	99403236 	bltu	r19,r5,1002d300 <_strtoul_r+0x19c>
1002d238:	2cc03026 	beq	r5,r19,1002d2fc <_strtoul_r+0x198>
1002d23c:	29c5383a 	mul	r2,r5,r7
1002d240:	01800044 	movi	r6,1
1002d244:	10cb883a 	add	r5,r2,r3
1002d248:	84400007 	ldb	r17,0(r16)
1002d24c:	84000044 	addi	r16,r16,1
1002d250:	a445883a 	add	r2,r20,r17
1002d254:	11000003 	ldbu	r4,0(r2)
1002d258:	20c0010c 	andi	r3,r4,4
1002d25c:	183ff21e 	bne	r3,zero,1002d228 <_strtoul_r+0xc4>
1002d260:	208000cc 	andi	r2,r4,3
1002d264:	10000626 	beq	r2,zero,1002d280 <_strtoul_r+0x11c>
1002d268:	2080004c 	andi	r2,r4,1
1002d26c:	1005003a 	cmpeq	r2,r2,zero
1002d270:	1000251e 	bne	r2,zero,1002d308 <_strtoul_r+0x1a4>
1002d274:	00800dc4 	movi	r2,55
1002d278:	8887c83a 	sub	r3,r17,r2
1002d27c:	1cbfec16 	blt	r3,r18,1002d230 <_strtoul_r+0xcc>
1002d280:	3000400e 	bge	r6,zero,1002d384 <_strtoul_r+0x220>
1002d284:	00800884 	movi	r2,34
1002d288:	017fffc4 	movi	r5,-1
1002d28c:	b8800015 	stw	r2,0(r23)
1002d290:	b0000226 	beq	r22,zero,1002d29c <_strtoul_r+0x138>
1002d294:	30001f1e 	bne	r6,zero,1002d314 <_strtoul_r+0x1b0>
1002d298:	b5400015 	stw	r21,0(r22)
1002d29c:	2805883a 	mov	r2,r5
1002d2a0:	dfc00917 	ldw	ra,36(sp)
1002d2a4:	df000817 	ldw	fp,32(sp)
1002d2a8:	ddc00717 	ldw	r23,28(sp)
1002d2ac:	dd800617 	ldw	r22,24(sp)
1002d2b0:	dd400517 	ldw	r21,20(sp)
1002d2b4:	dd000417 	ldw	r20,16(sp)
1002d2b8:	dcc00317 	ldw	r19,12(sp)
1002d2bc:	dc800217 	ldw	r18,8(sp)
1002d2c0:	dc400117 	ldw	r17,4(sp)
1002d2c4:	dc000017 	ldw	r16,0(sp)
1002d2c8:	dec00a04 	addi	sp,sp,40
1002d2cc:	f800283a 	ret
1002d2d0:	00800c04 	movi	r2,48
1002d2d4:	88801826 	beq	r17,r2,1002d338 <_strtoul_r+0x1d4>
1002d2d8:	183fc426 	beq	r3,zero,1002d1ec <_strtoul_r+0x88>
1002d2dc:	00800c04 	movi	r2,48
1002d2e0:	88802226 	beq	r17,r2,1002d36c <_strtoul_r+0x208>
1002d2e4:	04800284 	movi	r18,10
1002d2e8:	900f883a 	mov	r7,r18
1002d2ec:	04c666b4 	movhi	r19,6554
1002d2f0:	9ce66644 	addi	r19,r19,-26215
1002d2f4:	02000144 	movi	r8,5
1002d2f8:	003fc506 	br	1002d210 <_strtoul_r+0xac>
1002d2fc:	40ffcf0e 	bge	r8,r3,1002d23c <_strtoul_r+0xd8>
1002d300:	01bfffc4 	movi	r6,-1
1002d304:	003fd006 	br	1002d248 <_strtoul_r+0xe4>
1002d308:	008015c4 	movi	r2,87
1002d30c:	8887c83a 	sub	r3,r17,r2
1002d310:	003fda06 	br	1002d27c <_strtoul_r+0x118>
1002d314:	857fffc4 	addi	r21,r16,-1
1002d318:	003fdf06 	br	1002d298 <_strtoul_r+0x134>
1002d31c:	84400007 	ldb	r17,0(r16)
1002d320:	84000044 	addi	r16,r16,1
1002d324:	003fac06 	br	1002d1d8 <_strtoul_r+0x74>
1002d328:	84400007 	ldb	r17,0(r16)
1002d32c:	07000044 	movi	fp,1
1002d330:	84000044 	addi	r16,r16,1
1002d334:	003fa906 	br	1002d1dc <_strtoul_r+0x78>
1002d338:	81000007 	ldb	r4,0(r16)
1002d33c:	00801e04 	movi	r2,120
1002d340:	20800226 	beq	r4,r2,1002d34c <_strtoul_r+0x1e8>
1002d344:	00801604 	movi	r2,88
1002d348:	20bfe31e 	bne	r4,r2,1002d2d8 <_strtoul_r+0x174>
1002d34c:	84400047 	ldb	r17,1(r16)
1002d350:	04800404 	movi	r18,16
1002d354:	84000084 	addi	r16,r16,2
1002d358:	900f883a 	mov	r7,r18
1002d35c:	04c40034 	movhi	r19,4096
1002d360:	9cffffc4 	addi	r19,r19,-1
1002d364:	020003c4 	movi	r8,15
1002d368:	003fa906 	br	1002d210 <_strtoul_r+0xac>
1002d36c:	04800204 	movi	r18,8
1002d370:	900f883a 	mov	r7,r18
1002d374:	04c80034 	movhi	r19,8192
1002d378:	9cffffc4 	addi	r19,r19,-1
1002d37c:	020001c4 	movi	r8,7
1002d380:	003fa306 	br	1002d210 <_strtoul_r+0xac>
1002d384:	e005003a 	cmpeq	r2,fp,zero
1002d388:	103fc11e 	bne	r2,zero,1002d290 <_strtoul_r+0x12c>
1002d38c:	014bc83a 	sub	r5,zero,r5
1002d390:	003fbf06 	br	1002d290 <_strtoul_r+0x12c>

1002d394 <strtoul>:
1002d394:	00800034 	movhi	r2,0
1002d398:	108b0704 	addi	r2,r2,11292
1002d39c:	2013883a 	mov	r9,r4
1002d3a0:	11000017 	ldw	r4,0(r2)
1002d3a4:	2805883a 	mov	r2,r5
1002d3a8:	300f883a 	mov	r7,r6
1002d3ac:	480b883a 	mov	r5,r9
1002d3b0:	100d883a 	mov	r6,r2
1002d3b4:	002d1641 	jmpi	1002d164 <_strtoul_r>

1002d3b8 <_strtoull_r>:
1002d3b8:	defff104 	addi	sp,sp,-60
1002d3bc:	00800034 	movhi	r2,0
1002d3c0:	108b0b04 	addi	r2,r2,11308
1002d3c4:	df000d15 	stw	fp,52(sp)
1002d3c8:	17000017 	ldw	fp,0(r2)
1002d3cc:	ddc00c15 	stw	r23,48(sp)
1002d3d0:	dcc00815 	stw	r19,32(sp)
1002d3d4:	dfc00e15 	stw	ra,56(sp)
1002d3d8:	dd800b15 	stw	r22,44(sp)
1002d3dc:	dd400a15 	stw	r21,40(sp)
1002d3e0:	dd000915 	stw	r20,36(sp)
1002d3e4:	dc800715 	stw	r18,28(sp)
1002d3e8:	dc400615 	stw	r17,24(sp)
1002d3ec:	dc000515 	stw	r16,20(sp)
1002d3f0:	d9400215 	stw	r5,8(sp)
1002d3f4:	d9000115 	stw	r4,4(sp)
1002d3f8:	d9800315 	stw	r6,12(sp)
1002d3fc:	382f883a 	mov	r23,r7
1002d400:	2827883a 	mov	r19,r5
1002d404:	9d000007 	ldb	r20,0(r19)
1002d408:	9cc00044 	addi	r19,r19,1
1002d40c:	e507883a 	add	r3,fp,r20
1002d410:	18800003 	ldbu	r2,0(r3)
1002d414:	1080020c 	andi	r2,r2,8
1002d418:	103ffa1e 	bne	r2,zero,1002d404 <_strtoull_r+0x4c>
1002d41c:	00800b44 	movi	r2,45
1002d420:	a0807a26 	beq	r20,r2,1002d60c <_strtoull_r+0x254>
1002d424:	00800ac4 	movi	r2,43
1002d428:	a0807526 	beq	r20,r2,1002d600 <_strtoull_r+0x248>
1002d42c:	d8000015 	stw	zero,0(sp)
1002d430:	b807003a 	cmpeq	r3,r23,zero
1002d434:	18005a1e 	bne	r3,zero,1002d5a0 <_strtoull_r+0x1e8>
1002d438:	00800404 	movi	r2,16
1002d43c:	b8805826 	beq	r23,r2,1002d5a0 <_strtoull_r+0x1e8>
1002d440:	b82dd7fa 	srai	r22,r23,31
1002d444:	043fffc4 	movi	r16,-1
1002d448:	8009883a 	mov	r4,r16
1002d44c:	800b883a 	mov	r5,r16
1002d450:	b80d883a 	mov	r6,r23
1002d454:	b00f883a 	mov	r7,r22
1002d458:	002ebe00 	call	1002ebe0 <__udivdi3>
1002d45c:	8009883a 	mov	r4,r16
1002d460:	800b883a 	mov	r5,r16
1002d464:	b80d883a 	mov	r6,r23
1002d468:	b00f883a 	mov	r7,r22
1002d46c:	1023883a 	mov	r17,r2
1002d470:	1825883a 	mov	r18,r3
1002d474:	002f1bc0 	call	1002f1bc <__umoddi3>
1002d478:	b82b883a 	mov	r21,r23
1002d47c:	1019883a 	mov	r12,r2
1002d480:	e505883a 	add	r2,fp,r20
1002d484:	11000003 	ldbu	r4,0(r2)
1002d488:	0015883a 	mov	r10,zero
1002d48c:	0017883a 	mov	r11,zero
1002d490:	20c0010c 	andi	r3,r4,4
1002d494:	000d883a 	mov	r6,zero
1002d498:	18001c26 	beq	r3,zero,1002d50c <_strtoull_r+0x154>
1002d49c:	a43ff404 	addi	r16,r20,-48
1002d4a0:	85c0220e 	bge	r16,r23,1002d52c <_strtoull_r+0x174>
1002d4a4:	30003c16 	blt	r6,zero,1002d598 <_strtoull_r+0x1e0>
1002d4a8:	92c03b36 	bltu	r18,r11,1002d598 <_strtoull_r+0x1e0>
1002d4ac:	5c803926 	beq	r11,r18,1002d594 <_strtoull_r+0x1dc>
1002d4b0:	54404c26 	beq	r10,r17,1002d5e4 <_strtoull_r+0x22c>
1002d4b4:	580b883a 	mov	r5,r11
1002d4b8:	5009883a 	mov	r4,r10
1002d4bc:	a80d883a 	mov	r6,r21
1002d4c0:	b00f883a 	mov	r7,r22
1002d4c4:	db000415 	stw	r12,16(sp)
1002d4c8:	002eaa40 	call	1002eaa4 <__muldi3>
1002d4cc:	8013d7fa 	srai	r9,r16,31
1002d4d0:	100d883a 	mov	r6,r2
1002d4d4:	1405883a 	add	r2,r2,r16
1002d4d8:	118d803a 	cmpltu	r6,r2,r6
1002d4dc:	1a47883a 	add	r3,r3,r9
1002d4e0:	db000417 	ldw	r12,16(sp)
1002d4e4:	30cd883a 	add	r6,r6,r3
1002d4e8:	3017883a 	mov	r11,r6
1002d4ec:	1015883a 	mov	r10,r2
1002d4f0:	01800044 	movi	r6,1
1002d4f4:	9d000007 	ldb	r20,0(r19)
1002d4f8:	9cc00044 	addi	r19,r19,1
1002d4fc:	e505883a 	add	r2,fp,r20
1002d500:	11000003 	ldbu	r4,0(r2)
1002d504:	20c0010c 	andi	r3,r4,4
1002d508:	183fe41e 	bne	r3,zero,1002d49c <_strtoull_r+0xe4>
1002d50c:	208000cc 	andi	r2,r4,3
1002d510:	10000626 	beq	r2,zero,1002d52c <_strtoull_r+0x174>
1002d514:	2080004c 	andi	r2,r4,1
1002d518:	1005003a 	cmpeq	r2,r2,zero
1002d51c:	10002e1e 	bne	r2,zero,1002d5d8 <_strtoull_r+0x220>
1002d520:	02000dc4 	movi	r8,55
1002d524:	a221c83a 	sub	r16,r20,r8
1002d528:	85ffde16 	blt	r16,r23,1002d4a4 <_strtoull_r+0xec>
1002d52c:	3000530e 	bge	r6,zero,1002d67c <_strtoull_r+0x2c4>
1002d530:	d8c00117 	ldw	r3,4(sp)
1002d534:	02bfffc4 	movi	r10,-1
1002d538:	00800884 	movi	r2,34
1002d53c:	5017883a 	mov	r11,r10
1002d540:	18800015 	stw	r2,0(r3)
1002d544:	d8800317 	ldw	r2,12(sp)
1002d548:	10000426 	beq	r2,zero,1002d55c <_strtoull_r+0x1a4>
1002d54c:	3000291e 	bne	r6,zero,1002d5f4 <_strtoull_r+0x23c>
1002d550:	d8800217 	ldw	r2,8(sp)
1002d554:	d8c00317 	ldw	r3,12(sp)
1002d558:	18800015 	stw	r2,0(r3)
1002d55c:	5005883a 	mov	r2,r10
1002d560:	5807883a 	mov	r3,r11
1002d564:	dfc00e17 	ldw	ra,56(sp)
1002d568:	df000d17 	ldw	fp,52(sp)
1002d56c:	ddc00c17 	ldw	r23,48(sp)
1002d570:	dd800b17 	ldw	r22,44(sp)
1002d574:	dd400a17 	ldw	r21,40(sp)
1002d578:	dd000917 	ldw	r20,36(sp)
1002d57c:	dcc00817 	ldw	r19,32(sp)
1002d580:	dc800717 	ldw	r18,28(sp)
1002d584:	dc400617 	ldw	r17,24(sp)
1002d588:	dc000517 	ldw	r16,20(sp)
1002d58c:	dec00f04 	addi	sp,sp,60
1002d590:	f800283a 	ret
1002d594:	8abfc62e 	bgeu	r17,r10,1002d4b0 <_strtoull_r+0xf8>
1002d598:	01bfffc4 	movi	r6,-1
1002d59c:	003fd506 	br	1002d4f4 <_strtoull_r+0x13c>
1002d5a0:	00800c04 	movi	r2,48
1002d5a4:	a0801e26 	beq	r20,r2,1002d620 <_strtoull_r+0x268>
1002d5a8:	183fa526 	beq	r3,zero,1002d440 <_strtoull_r+0x88>
1002d5ac:	00800c04 	movi	r2,48
1002d5b0:	a0802a26 	beq	r20,r2,1002d65c <_strtoull_r+0x2a4>
1002d5b4:	05c00284 	movi	r23,10
1002d5b8:	b82b883a 	mov	r21,r23
1002d5bc:	046666b4 	movhi	r17,39322
1002d5c0:	8c666644 	addi	r17,r17,-26215
1002d5c4:	002d883a 	mov	r22,zero
1002d5c8:	048666b4 	movhi	r18,6554
1002d5cc:	94a66644 	addi	r18,r18,-26215
1002d5d0:	03000144 	movi	r12,5
1002d5d4:	003faa06 	br	1002d480 <_strtoull_r+0xc8>
1002d5d8:	020015c4 	movi	r8,87
1002d5dc:	a221c83a 	sub	r16,r20,r8
1002d5e0:	003fd106 	br	1002d528 <_strtoull_r+0x170>
1002d5e4:	5cbfb31e 	bne	r11,r18,1002d4b4 <_strtoull_r+0xfc>
1002d5e8:	643fb20e 	bge	r12,r16,1002d4b4 <_strtoull_r+0xfc>
1002d5ec:	01bfffc4 	movi	r6,-1
1002d5f0:	003fc006 	br	1002d4f4 <_strtoull_r+0x13c>
1002d5f4:	9cffffc4 	addi	r19,r19,-1
1002d5f8:	dcc00215 	stw	r19,8(sp)
1002d5fc:	003fd406 	br	1002d550 <_strtoull_r+0x198>
1002d600:	9d000007 	ldb	r20,0(r19)
1002d604:	9cc00044 	addi	r19,r19,1
1002d608:	003f8806 	br	1002d42c <_strtoull_r+0x74>
1002d60c:	9d000007 	ldb	r20,0(r19)
1002d610:	00800044 	movi	r2,1
1002d614:	9cc00044 	addi	r19,r19,1
1002d618:	d8800015 	stw	r2,0(sp)
1002d61c:	003f8406 	br	1002d430 <_strtoull_r+0x78>
1002d620:	99000007 	ldb	r4,0(r19)
1002d624:	00801e04 	movi	r2,120
1002d628:	20800226 	beq	r4,r2,1002d634 <_strtoull_r+0x27c>
1002d62c:	00801604 	movi	r2,88
1002d630:	20bfdd1e 	bne	r4,r2,1002d5a8 <_strtoull_r+0x1f0>
1002d634:	9d000047 	ldb	r20,1(r19)
1002d638:	05c00404 	movi	r23,16
1002d63c:	b82b883a 	mov	r21,r23
1002d640:	047fffc4 	movi	r17,-1
1002d644:	9cc00084 	addi	r19,r19,2
1002d648:	002d883a 	mov	r22,zero
1002d64c:	04840034 	movhi	r18,4096
1002d650:	94bfffc4 	addi	r18,r18,-1
1002d654:	030003c4 	movi	r12,15
1002d658:	003f8906 	br	1002d480 <_strtoull_r+0xc8>
1002d65c:	05c00204 	movi	r23,8
1002d660:	b82b883a 	mov	r21,r23
1002d664:	047fffc4 	movi	r17,-1
1002d668:	002d883a 	mov	r22,zero
1002d66c:	04880034 	movhi	r18,8192
1002d670:	94bfffc4 	addi	r18,r18,-1
1002d674:	030001c4 	movi	r12,7
1002d678:	003f8106 	br	1002d480 <_strtoull_r+0xc8>
1002d67c:	d8c00017 	ldw	r3,0(sp)
1002d680:	1805003a 	cmpeq	r2,r3,zero
1002d684:	103faf1e 	bne	r2,zero,1002d544 <_strtoull_r+0x18c>
1002d688:	0009883a 	mov	r4,zero
1002d68c:	2285c83a 	sub	r2,r4,r10
1002d690:	02c7c83a 	sub	r3,zero,r11
1002d694:	2089803a 	cmpltu	r4,r4,r2
1002d698:	1909c83a 	sub	r4,r3,r4
1002d69c:	1015883a 	mov	r10,r2
1002d6a0:	2017883a 	mov	r11,r4
1002d6a4:	003fa706 	br	1002d544 <_strtoull_r+0x18c>

1002d6a8 <__submore>:
1002d6a8:	defffa04 	addi	sp,sp,-24
1002d6ac:	28c00c17 	ldw	r3,48(r5)
1002d6b0:	dc800215 	stw	r18,8(sp)
1002d6b4:	2825883a 	mov	r18,r5
1002d6b8:	dc000015 	stw	r16,0(sp)
1002d6bc:	90801004 	addi	r2,r18,64
1002d6c0:	04010004 	movi	r16,1024
1002d6c4:	dfc00515 	stw	ra,20(sp)
1002d6c8:	dd000415 	stw	r20,16(sp)
1002d6cc:	dcc00315 	stw	r19,12(sp)
1002d6d0:	dc400115 	stw	r17,4(sp)
1002d6d4:	800b883a 	mov	r5,r16
1002d6d8:	18801b26 	beq	r3,r2,1002d748 <__submore+0xa0>
1002d6dc:	94400d17 	ldw	r17,52(r18)
1002d6e0:	180b883a 	mov	r5,r3
1002d6e4:	8c69883a 	add	r20,r17,r17
1002d6e8:	a00d883a 	mov	r6,r20
1002d6ec:	002a9900 	call	1002a990 <_realloc_r>
1002d6f0:	1467883a 	add	r19,r2,r17
1002d6f4:	1021883a 	mov	r16,r2
1002d6f8:	880d883a 	mov	r6,r17
1002d6fc:	9809883a 	mov	r4,r19
1002d700:	100b883a 	mov	r5,r2
1002d704:	10000e26 	beq	r2,zero,1002d740 <__submore+0x98>
1002d708:	0022c500 	call	10022c50 <memcpy>
1002d70c:	000d883a 	mov	r6,zero
1002d710:	95000d15 	stw	r20,52(r18)
1002d714:	94c00015 	stw	r19,0(r18)
1002d718:	94000c15 	stw	r16,48(r18)
1002d71c:	3005883a 	mov	r2,r6
1002d720:	dfc00517 	ldw	ra,20(sp)
1002d724:	dd000417 	ldw	r20,16(sp)
1002d728:	dcc00317 	ldw	r19,12(sp)
1002d72c:	dc800217 	ldw	r18,8(sp)
1002d730:	dc400117 	ldw	r17,4(sp)
1002d734:	dc000017 	ldw	r16,0(sp)
1002d738:	dec00604 	addi	sp,sp,24
1002d73c:	f800283a 	ret
1002d740:	01bfffc4 	movi	r6,-1
1002d744:	003ff506 	br	1002d71c <__submore+0x74>
1002d748:	002249c0 	call	1002249c <_malloc_r>
1002d74c:	1009883a 	mov	r4,r2
1002d750:	1140ff44 	addi	r5,r2,1021
1002d754:	000d883a 	mov	r6,zero
1002d758:	103ff926 	beq	r2,zero,1002d740 <__submore+0x98>
1002d75c:	90801083 	ldbu	r2,66(r18)
1002d760:	94000d15 	stw	r16,52(r18)
1002d764:	91000c15 	stw	r4,48(r18)
1002d768:	28800085 	stb	r2,2(r5)
1002d76c:	90c01043 	ldbu	r3,65(r18)
1002d770:	28c00045 	stb	r3,1(r5)
1002d774:	90801003 	ldbu	r2,64(r18)
1002d778:	2080ff45 	stb	r2,1021(r4)
1002d77c:	91400015 	stw	r5,0(r18)
1002d780:	003fe606 	br	1002d71c <__submore+0x74>

1002d784 <_ungetc_r>:
1002d784:	defffc04 	addi	sp,sp,-16
1002d788:	00bfffc4 	movi	r2,-1
1002d78c:	dc400215 	stw	r17,8(sp)
1002d790:	dc000115 	stw	r16,4(sp)
1002d794:	dfc00315 	stw	ra,12(sp)
1002d798:	2821883a 	mov	r16,r5
1002d79c:	2023883a 	mov	r17,r4
1002d7a0:	28801826 	beq	r5,r2,1002d804 <_ungetc_r+0x80>
1002d7a4:	20000226 	beq	r4,zero,1002d7b0 <_ungetc_r+0x2c>
1002d7a8:	20800e17 	ldw	r2,56(r4)
1002d7ac:	10001b26 	beq	r2,zero,1002d81c <_ungetc_r+0x98>
1002d7b0:	3100030b 	ldhu	r4,12(r6)
1002d7b4:	00bff7c4 	movi	r2,-33
1002d7b8:	2084703a 	and	r2,r4,r2
1002d7bc:	117fffcc 	andi	r5,r2,65535
1002d7c0:	28c0010c 	andi	r3,r5,4
1002d7c4:	1009883a 	mov	r4,r2
1002d7c8:	3080030d 	sth	r2,12(r6)
1002d7cc:	18003526 	beq	r3,zero,1002d8a4 <_ungetc_r+0x120>
1002d7d0:	30800c17 	ldw	r2,48(r6)
1002d7d4:	84003fcc 	andi	r16,r16,255
1002d7d8:	10001426 	beq	r2,zero,1002d82c <_ungetc_r+0xa8>
1002d7dc:	30c00117 	ldw	r3,4(r6)
1002d7e0:	30800d17 	ldw	r2,52(r6)
1002d7e4:	1880380e 	bge	r3,r2,1002d8c8 <_ungetc_r+0x144>
1002d7e8:	30c00017 	ldw	r3,0(r6)
1002d7ec:	19ffffc4 	addi	r7,r3,-1
1002d7f0:	31c00015 	stw	r7,0(r6)
1002d7f4:	1c3fffc5 	stb	r16,-1(r3)
1002d7f8:	30800117 	ldw	r2,4(r6)
1002d7fc:	10800044 	addi	r2,r2,1
1002d800:	30800115 	stw	r2,4(r6)
1002d804:	8005883a 	mov	r2,r16
1002d808:	dfc00317 	ldw	ra,12(sp)
1002d80c:	dc400217 	ldw	r17,8(sp)
1002d810:	dc000117 	ldw	r16,4(sp)
1002d814:	dec00404 	addi	sp,sp,16
1002d818:	f800283a 	ret
1002d81c:	d9800015 	stw	r6,0(sp)
1002d820:	00282e00 	call	100282e0 <__sinit>
1002d824:	d9800017 	ldw	r6,0(sp)
1002d828:	003fe106 	br	1002d7b0 <_ungetc_r+0x2c>
1002d82c:	30800417 	ldw	r2,16(r6)
1002d830:	10002326 	beq	r2,zero,1002d8c0 <_ungetc_r+0x13c>
1002d834:	31c00017 	ldw	r7,0(r6)
1002d838:	11c0022e 	bgeu	r2,r7,1002d844 <_ungetc_r+0xc0>
1002d83c:	38bfffc3 	ldbu	r2,-1(r7)
1002d840:	80801226 	beq	r16,r2,1002d88c <_ungetc_r+0x108>
1002d844:	30c00117 	ldw	r3,4(r6)
1002d848:	00800044 	movi	r2,1
1002d84c:	30800115 	stw	r2,4(r6)
1002d850:	008000c4 	movi	r2,3
1002d854:	31001004 	addi	r4,r6,64
1002d858:	31401084 	addi	r5,r6,66
1002d85c:	30800d15 	stw	r2,52(r6)
1002d860:	8005883a 	mov	r2,r16
1002d864:	30c00f15 	stw	r3,60(r6)
1002d868:	31c00e15 	stw	r7,56(r6)
1002d86c:	31000c15 	stw	r4,48(r6)
1002d870:	31400015 	stw	r5,0(r6)
1002d874:	34001085 	stb	r16,66(r6)
1002d878:	dfc00317 	ldw	ra,12(sp)
1002d87c:	dc400217 	ldw	r17,8(sp)
1002d880:	dc000117 	ldw	r16,4(sp)
1002d884:	dec00404 	addi	sp,sp,16
1002d888:	f800283a 	ret
1002d88c:	30800117 	ldw	r2,4(r6)
1002d890:	39ffffc4 	addi	r7,r7,-1
1002d894:	31c00015 	stw	r7,0(r6)
1002d898:	10800044 	addi	r2,r2,1
1002d89c:	30800115 	stw	r2,4(r6)
1002d8a0:	003fd806 	br	1002d804 <_ungetc_r+0x80>
1002d8a4:	2880040c 	andi	r2,r5,16
1002d8a8:	10000d26 	beq	r2,zero,1002d8e0 <_ungetc_r+0x15c>
1002d8ac:	2880020c 	andi	r2,r5,8
1002d8b0:	10000d1e 	bne	r2,zero,1002d8e8 <_ungetc_r+0x164>
1002d8b4:	20800114 	ori	r2,r4,4
1002d8b8:	3080030d 	sth	r2,12(r6)
1002d8bc:	003fc406 	br	1002d7d0 <_ungetc_r+0x4c>
1002d8c0:	31c00017 	ldw	r7,0(r6)
1002d8c4:	003fdf06 	br	1002d844 <_ungetc_r+0xc0>
1002d8c8:	300b883a 	mov	r5,r6
1002d8cc:	8809883a 	mov	r4,r17
1002d8d0:	d9800015 	stw	r6,0(sp)
1002d8d4:	002d6a80 	call	1002d6a8 <__submore>
1002d8d8:	d9800017 	ldw	r6,0(sp)
1002d8dc:	103fc226 	beq	r2,zero,1002d7e8 <_ungetc_r+0x64>
1002d8e0:	043fffc4 	movi	r16,-1
1002d8e4:	003fc706 	br	1002d804 <_ungetc_r+0x80>
1002d8e8:	300b883a 	mov	r5,r6
1002d8ec:	8809883a 	mov	r4,r17
1002d8f0:	d9800015 	stw	r6,0(sp)
1002d8f4:	00280480 	call	10028048 <_fflush_r>
1002d8f8:	d9800017 	ldw	r6,0(sp)
1002d8fc:	103ff81e 	bne	r2,zero,1002d8e0 <_ungetc_r+0x15c>
1002d900:	3100030b 	ldhu	r4,12(r6)
1002d904:	00bffdc4 	movi	r2,-9
1002d908:	30000215 	stw	zero,8(r6)
1002d90c:	2084703a 	and	r2,r4,r2
1002d910:	1009883a 	mov	r4,r2
1002d914:	3080030d 	sth	r2,12(r6)
1002d918:	30000615 	stw	zero,24(r6)
1002d91c:	003fe506 	br	1002d8b4 <_ungetc_r+0x130>

1002d920 <ungetc>:
1002d920:	01800034 	movhi	r6,0
1002d924:	318b0704 	addi	r6,r6,11292
1002d928:	2007883a 	mov	r3,r4
1002d92c:	31000017 	ldw	r4,0(r6)
1002d930:	280d883a 	mov	r6,r5
1002d934:	180b883a 	mov	r5,r3
1002d938:	002d7841 	jmpi	1002d784 <_ungetc_r>

1002d93c <__swbuf_r>:
1002d93c:	defffc04 	addi	sp,sp,-16
1002d940:	dc400215 	stw	r17,8(sp)
1002d944:	dc000115 	stw	r16,4(sp)
1002d948:	dfc00315 	stw	ra,12(sp)
1002d94c:	2023883a 	mov	r17,r4
1002d950:	2821883a 	mov	r16,r5
1002d954:	20000226 	beq	r4,zero,1002d960 <__swbuf_r+0x24>
1002d958:	20800e17 	ldw	r2,56(r4)
1002d95c:	10002f26 	beq	r2,zero,1002da1c <__swbuf_r+0xe0>
1002d960:	3080030b 	ldhu	r2,12(r6)
1002d964:	30c00617 	ldw	r3,24(r6)
1002d968:	1080020c 	andi	r2,r2,8
1002d96c:	30c00215 	stw	r3,8(r6)
1002d970:	10002226 	beq	r2,zero,1002d9fc <__swbuf_r+0xc0>
1002d974:	30c00417 	ldw	r3,16(r6)
1002d978:	18002026 	beq	r3,zero,1002d9fc <__swbuf_r+0xc0>
1002d97c:	31000017 	ldw	r4,0(r6)
1002d980:	30800517 	ldw	r2,20(r6)
1002d984:	20c7c83a 	sub	r3,r4,r3
1002d988:	18802f0e 	bge	r3,r2,1002da48 <__swbuf_r+0x10c>
1002d98c:	19400044 	addi	r5,r3,1
1002d990:	30800217 	ldw	r2,8(r6)
1002d994:	84003fcc 	andi	r16,r16,255
1002d998:	20c00044 	addi	r3,r4,1
1002d99c:	10bfffc4 	addi	r2,r2,-1
1002d9a0:	30800215 	stw	r2,8(r6)
1002d9a4:	24000005 	stb	r16,0(r4)
1002d9a8:	30800517 	ldw	r2,20(r6)
1002d9ac:	30c00015 	stw	r3,0(r6)
1002d9b0:	11400c26 	beq	r2,r5,1002d9e4 <__swbuf_r+0xa8>
1002d9b4:	3080030b 	ldhu	r2,12(r6)
1002d9b8:	1080004c 	andi	r2,r2,1
1002d9bc:	1005003a 	cmpeq	r2,r2,zero
1002d9c0:	10000626 	beq	r2,zero,1002d9dc <__swbuf_r+0xa0>
1002d9c4:	8005883a 	mov	r2,r16
1002d9c8:	dfc00317 	ldw	ra,12(sp)
1002d9cc:	dc400217 	ldw	r17,8(sp)
1002d9d0:	dc000117 	ldw	r16,4(sp)
1002d9d4:	dec00404 	addi	sp,sp,16
1002d9d8:	f800283a 	ret
1002d9dc:	00800284 	movi	r2,10
1002d9e0:	80bff81e 	bne	r16,r2,1002d9c4 <__swbuf_r+0x88>
1002d9e4:	8809883a 	mov	r4,r17
1002d9e8:	300b883a 	mov	r5,r6
1002d9ec:	00280480 	call	10028048 <_fflush_r>
1002d9f0:	103ff426 	beq	r2,zero,1002d9c4 <__swbuf_r+0x88>
1002d9f4:	043fffc4 	movi	r16,-1
1002d9f8:	003ff206 	br	1002d9c4 <__swbuf_r+0x88>
1002d9fc:	300b883a 	mov	r5,r6
1002da00:	8809883a 	mov	r4,r17
1002da04:	d9800015 	stw	r6,0(sp)
1002da08:	00267400 	call	10026740 <__swsetup_r>
1002da0c:	d9800017 	ldw	r6,0(sp)
1002da10:	1000061e 	bne	r2,zero,1002da2c <__swbuf_r+0xf0>
1002da14:	30c00417 	ldw	r3,16(r6)
1002da18:	003fd806 	br	1002d97c <__swbuf_r+0x40>
1002da1c:	d9800015 	stw	r6,0(sp)
1002da20:	00282e00 	call	100282e0 <__sinit>
1002da24:	d9800017 	ldw	r6,0(sp)
1002da28:	003fcd06 	br	1002d960 <__swbuf_r+0x24>
1002da2c:	3080030b 	ldhu	r2,12(r6)
1002da30:	00c00244 	movi	r3,9
1002da34:	043fffc4 	movi	r16,-1
1002da38:	10801014 	ori	r2,r2,64
1002da3c:	3080030d 	sth	r2,12(r6)
1002da40:	88c00015 	stw	r3,0(r17)
1002da44:	003fdf06 	br	1002d9c4 <__swbuf_r+0x88>
1002da48:	300b883a 	mov	r5,r6
1002da4c:	8809883a 	mov	r4,r17
1002da50:	d9800015 	stw	r6,0(sp)
1002da54:	00280480 	call	10028048 <_fflush_r>
1002da58:	d9800017 	ldw	r6,0(sp)
1002da5c:	103fe51e 	bne	r2,zero,1002d9f4 <__swbuf_r+0xb8>
1002da60:	31000017 	ldw	r4,0(r6)
1002da64:	01400044 	movi	r5,1
1002da68:	003fc906 	br	1002d990 <__swbuf_r+0x54>

1002da6c <__swbuf>:
1002da6c:	01800034 	movhi	r6,0
1002da70:	318b0704 	addi	r6,r6,11292
1002da74:	2007883a 	mov	r3,r4
1002da78:	31000017 	ldw	r4,0(r6)
1002da7c:	280d883a 	mov	r6,r5
1002da80:	180b883a 	mov	r5,r3
1002da84:	002d93c1 	jmpi	1002d93c <__swbuf_r>

1002da88 <_write_r>:
1002da88:	defffd04 	addi	sp,sp,-12
1002da8c:	dc000015 	stw	r16,0(sp)
1002da90:	04000034 	movhi	r16,0
1002da94:	840b1f04 	addi	r16,r16,11388
1002da98:	dc400115 	stw	r17,4(sp)
1002da9c:	80000015 	stw	zero,0(r16)
1002daa0:	2023883a 	mov	r17,r4
1002daa4:	2809883a 	mov	r4,r5
1002daa8:	300b883a 	mov	r5,r6
1002daac:	380d883a 	mov	r6,r7
1002dab0:	dfc00215 	stw	ra,8(sp)
1002dab4:	003196c0 	call	1003196c <write>
1002dab8:	1007883a 	mov	r3,r2
1002dabc:	00bfffc4 	movi	r2,-1
1002dac0:	18800626 	beq	r3,r2,1002dadc <_write_r+0x54>
1002dac4:	1805883a 	mov	r2,r3
1002dac8:	dfc00217 	ldw	ra,8(sp)
1002dacc:	dc400117 	ldw	r17,4(sp)
1002dad0:	dc000017 	ldw	r16,0(sp)
1002dad4:	dec00304 	addi	sp,sp,12
1002dad8:	f800283a 	ret
1002dadc:	80800017 	ldw	r2,0(r16)
1002dae0:	103ff826 	beq	r2,zero,1002dac4 <_write_r+0x3c>
1002dae4:	88800015 	stw	r2,0(r17)
1002dae8:	1805883a 	mov	r2,r3
1002daec:	dfc00217 	ldw	ra,8(sp)
1002daf0:	dc400117 	ldw	r17,4(sp)
1002daf4:	dc000017 	ldw	r16,0(sp)
1002daf8:	dec00304 	addi	sp,sp,12
1002dafc:	f800283a 	ret

1002db00 <_calloc_r>:
1002db00:	298b383a 	mul	r5,r5,r6
1002db04:	defffe04 	addi	sp,sp,-8
1002db08:	dc000015 	stw	r16,0(sp)
1002db0c:	dfc00115 	stw	ra,4(sp)
1002db10:	002249c0 	call	1002249c <_malloc_r>
1002db14:	1021883a 	mov	r16,r2
1002db18:	01c00904 	movi	r7,36
1002db1c:	10000d26 	beq	r2,zero,1002db54 <_calloc_r+0x54>
1002db20:	10ffff17 	ldw	r3,-4(r2)
1002db24:	1009883a 	mov	r4,r2
1002db28:	00bfff04 	movi	r2,-4
1002db2c:	1886703a 	and	r3,r3,r2
1002db30:	1887883a 	add	r3,r3,r2
1002db34:	180d883a 	mov	r6,r3
1002db38:	000b883a 	mov	r5,zero
1002db3c:	38c01736 	bltu	r7,r3,1002db9c <_calloc_r+0x9c>
1002db40:	008004c4 	movi	r2,19
1002db44:	10c00836 	bltu	r2,r3,1002db68 <_calloc_r+0x68>
1002db48:	20000215 	stw	zero,8(r4)
1002db4c:	20000015 	stw	zero,0(r4)
1002db50:	20000115 	stw	zero,4(r4)
1002db54:	8005883a 	mov	r2,r16
1002db58:	dfc00117 	ldw	ra,4(sp)
1002db5c:	dc000017 	ldw	r16,0(sp)
1002db60:	dec00204 	addi	sp,sp,8
1002db64:	f800283a 	ret
1002db68:	008006c4 	movi	r2,27
1002db6c:	80000015 	stw	zero,0(r16)
1002db70:	80000115 	stw	zero,4(r16)
1002db74:	81000204 	addi	r4,r16,8
1002db78:	10fff32e 	bgeu	r2,r3,1002db48 <_calloc_r+0x48>
1002db7c:	80000215 	stw	zero,8(r16)
1002db80:	80000315 	stw	zero,12(r16)
1002db84:	81000404 	addi	r4,r16,16
1002db88:	19ffef1e 	bne	r3,r7,1002db48 <_calloc_r+0x48>
1002db8c:	81000604 	addi	r4,r16,24
1002db90:	80000415 	stw	zero,16(r16)
1002db94:	80000515 	stw	zero,20(r16)
1002db98:	003feb06 	br	1002db48 <_calloc_r+0x48>
1002db9c:	00297180 	call	10029718 <memset>
1002dba0:	8005883a 	mov	r2,r16
1002dba4:	dfc00117 	ldw	ra,4(sp)
1002dba8:	dc000017 	ldw	r16,0(sp)
1002dbac:	dec00204 	addi	sp,sp,8
1002dbb0:	f800283a 	ret

1002dbb4 <_close_r>:
1002dbb4:	defffd04 	addi	sp,sp,-12
1002dbb8:	dc000015 	stw	r16,0(sp)
1002dbbc:	04000034 	movhi	r16,0
1002dbc0:	840b1f04 	addi	r16,r16,11388
1002dbc4:	dc400115 	stw	r17,4(sp)
1002dbc8:	80000015 	stw	zero,0(r16)
1002dbcc:	2023883a 	mov	r17,r4
1002dbd0:	2809883a 	mov	r4,r5
1002dbd4:	dfc00215 	stw	ra,8(sp)
1002dbd8:	003138c0 	call	1003138c <close>
1002dbdc:	1007883a 	mov	r3,r2
1002dbe0:	00bfffc4 	movi	r2,-1
1002dbe4:	18800626 	beq	r3,r2,1002dc00 <_close_r+0x4c>
1002dbe8:	1805883a 	mov	r2,r3
1002dbec:	dfc00217 	ldw	ra,8(sp)
1002dbf0:	dc400117 	ldw	r17,4(sp)
1002dbf4:	dc000017 	ldw	r16,0(sp)
1002dbf8:	dec00304 	addi	sp,sp,12
1002dbfc:	f800283a 	ret
1002dc00:	80800017 	ldw	r2,0(r16)
1002dc04:	103ff826 	beq	r2,zero,1002dbe8 <_close_r+0x34>
1002dc08:	88800015 	stw	r2,0(r17)
1002dc0c:	1805883a 	mov	r2,r3
1002dc10:	dfc00217 	ldw	ra,8(sp)
1002dc14:	dc400117 	ldw	r17,4(sp)
1002dc18:	dc000017 	ldw	r16,0(sp)
1002dc1c:	dec00304 	addi	sp,sp,12
1002dc20:	f800283a 	ret

1002dc24 <_fclose_r>:
1002dc24:	defffc04 	addi	sp,sp,-16
1002dc28:	dc400115 	stw	r17,4(sp)
1002dc2c:	dc000015 	stw	r16,0(sp)
1002dc30:	dfc00315 	stw	ra,12(sp)
1002dc34:	dc800215 	stw	r18,8(sp)
1002dc38:	2821883a 	mov	r16,r5
1002dc3c:	2023883a 	mov	r17,r4
1002dc40:	28002926 	beq	r5,zero,1002dce8 <_fclose_r+0xc4>
1002dc44:	00282d00 	call	100282d0 <__sfp_lock_acquire>
1002dc48:	88000226 	beq	r17,zero,1002dc54 <_fclose_r+0x30>
1002dc4c:	88800e17 	ldw	r2,56(r17)
1002dc50:	10002d26 	beq	r2,zero,1002dd08 <_fclose_r+0xe4>
1002dc54:	8080030f 	ldh	r2,12(r16)
1002dc58:	10002226 	beq	r2,zero,1002dce4 <_fclose_r+0xc0>
1002dc5c:	8809883a 	mov	r4,r17
1002dc60:	800b883a 	mov	r5,r16
1002dc64:	00280480 	call	10028048 <_fflush_r>
1002dc68:	1025883a 	mov	r18,r2
1002dc6c:	80800b17 	ldw	r2,44(r16)
1002dc70:	10000426 	beq	r2,zero,1002dc84 <_fclose_r+0x60>
1002dc74:	81400717 	ldw	r5,28(r16)
1002dc78:	8809883a 	mov	r4,r17
1002dc7c:	103ee83a 	callr	r2
1002dc80:	10002a16 	blt	r2,zero,1002dd2c <_fclose_r+0x108>
1002dc84:	8080030b 	ldhu	r2,12(r16)
1002dc88:	1080200c 	andi	r2,r2,128
1002dc8c:	1000231e 	bne	r2,zero,1002dd1c <_fclose_r+0xf8>
1002dc90:	81400c17 	ldw	r5,48(r16)
1002dc94:	28000526 	beq	r5,zero,1002dcac <_fclose_r+0x88>
1002dc98:	80801004 	addi	r2,r16,64
1002dc9c:	28800226 	beq	r5,r2,1002dca8 <_fclose_r+0x84>
1002dca0:	8809883a 	mov	r4,r17
1002dca4:	00288a00 	call	100288a0 <_free_r>
1002dca8:	80000c15 	stw	zero,48(r16)
1002dcac:	81401117 	ldw	r5,68(r16)
1002dcb0:	28000326 	beq	r5,zero,1002dcc0 <_fclose_r+0x9c>
1002dcb4:	8809883a 	mov	r4,r17
1002dcb8:	00288a00 	call	100288a0 <_free_r>
1002dcbc:	80001115 	stw	zero,68(r16)
1002dcc0:	8000030d 	sth	zero,12(r16)
1002dcc4:	00282d40 	call	100282d4 <__sfp_lock_release>
1002dcc8:	9005883a 	mov	r2,r18
1002dccc:	dfc00317 	ldw	ra,12(sp)
1002dcd0:	dc800217 	ldw	r18,8(sp)
1002dcd4:	dc400117 	ldw	r17,4(sp)
1002dcd8:	dc000017 	ldw	r16,0(sp)
1002dcdc:	dec00404 	addi	sp,sp,16
1002dce0:	f800283a 	ret
1002dce4:	00282d40 	call	100282d4 <__sfp_lock_release>
1002dce8:	0025883a 	mov	r18,zero
1002dcec:	9005883a 	mov	r2,r18
1002dcf0:	dfc00317 	ldw	ra,12(sp)
1002dcf4:	dc800217 	ldw	r18,8(sp)
1002dcf8:	dc400117 	ldw	r17,4(sp)
1002dcfc:	dc000017 	ldw	r16,0(sp)
1002dd00:	dec00404 	addi	sp,sp,16
1002dd04:	f800283a 	ret
1002dd08:	8809883a 	mov	r4,r17
1002dd0c:	00282e00 	call	100282e0 <__sinit>
1002dd10:	8080030f 	ldh	r2,12(r16)
1002dd14:	103fd11e 	bne	r2,zero,1002dc5c <_fclose_r+0x38>
1002dd18:	003ff206 	br	1002dce4 <_fclose_r+0xc0>
1002dd1c:	81400417 	ldw	r5,16(r16)
1002dd20:	8809883a 	mov	r4,r17
1002dd24:	00288a00 	call	100288a0 <_free_r>
1002dd28:	003fd906 	br	1002dc90 <_fclose_r+0x6c>
1002dd2c:	04bfffc4 	movi	r18,-1
1002dd30:	003fd406 	br	1002dc84 <_fclose_r+0x60>

1002dd34 <fclose>:
1002dd34:	00800034 	movhi	r2,0
1002dd38:	108b0704 	addi	r2,r2,11292
1002dd3c:	200b883a 	mov	r5,r4
1002dd40:	11000017 	ldw	r4,0(r2)
1002dd44:	002dc241 	jmpi	1002dc24 <_fclose_r>

1002dd48 <_fstat_r>:
1002dd48:	defffd04 	addi	sp,sp,-12
1002dd4c:	dc000015 	stw	r16,0(sp)
1002dd50:	04000034 	movhi	r16,0
1002dd54:	840b1f04 	addi	r16,r16,11388
1002dd58:	dc400115 	stw	r17,4(sp)
1002dd5c:	80000015 	stw	zero,0(r16)
1002dd60:	2023883a 	mov	r17,r4
1002dd64:	2809883a 	mov	r4,r5
1002dd68:	300b883a 	mov	r5,r6
1002dd6c:	dfc00215 	stw	ra,8(sp)
1002dd70:	003150c0 	call	1003150c <fstat>
1002dd74:	1007883a 	mov	r3,r2
1002dd78:	00bfffc4 	movi	r2,-1
1002dd7c:	18800626 	beq	r3,r2,1002dd98 <_fstat_r+0x50>
1002dd80:	1805883a 	mov	r2,r3
1002dd84:	dfc00217 	ldw	ra,8(sp)
1002dd88:	dc400117 	ldw	r17,4(sp)
1002dd8c:	dc000017 	ldw	r16,0(sp)
1002dd90:	dec00304 	addi	sp,sp,12
1002dd94:	f800283a 	ret
1002dd98:	80800017 	ldw	r2,0(r16)
1002dd9c:	103ff826 	beq	r2,zero,1002dd80 <_fstat_r+0x38>
1002dda0:	88800015 	stw	r2,0(r17)
1002dda4:	1805883a 	mov	r2,r3
1002dda8:	dfc00217 	ldw	ra,8(sp)
1002ddac:	dc400117 	ldw	r17,4(sp)
1002ddb0:	dc000017 	ldw	r16,0(sp)
1002ddb4:	dec00304 	addi	sp,sp,12
1002ddb8:	f800283a 	ret

1002ddbc <htinit>:
1002ddbc:	28800003 	ldbu	r2,0(r5)
1002ddc0:	10000626 	beq	r2,zero,1002dddc <htinit+0x20>
1002ddc4:	1105883a 	add	r2,r2,r4
1002ddc8:	11800005 	stb	r6,0(r2)
1002ddcc:	28800043 	ldbu	r2,1(r5)
1002ddd0:	31800044 	addi	r6,r6,1
1002ddd4:	29400044 	addi	r5,r5,1
1002ddd8:	103ffa1e 	bne	r2,zero,1002ddc4 <htinit+0x8>
1002dddc:	f800283a 	ret

1002dde0 <__hexdig_init>:
1002dde0:	defffd04 	addi	sp,sp,-12
1002dde4:	dc400015 	stw	r17,0(sp)
1002dde8:	04400034 	movhi	r17,0
1002ddec:	8c4b3304 	addi	r17,r17,11468
1002ddf0:	dcc00115 	stw	r19,4(sp)
1002ddf4:	8809883a 	mov	r4,r17
1002ddf8:	04c00684 	movi	r19,26
1002ddfc:	01400034 	movhi	r5,0
1002de00:	2943ef04 	addi	r5,r5,4028
1002de04:	01800404 	movi	r6,16
1002de08:	dfc00215 	stw	ra,8(sp)
1002de0c:	002ddbc0 	call	1002ddbc <htinit>
1002de10:	980d883a 	mov	r6,r19
1002de14:	8809883a 	mov	r4,r17
1002de18:	01400034 	movhi	r5,0
1002de1c:	2943f204 	addi	r5,r5,4040
1002de20:	002ddbc0 	call	1002ddbc <htinit>
1002de24:	8809883a 	mov	r4,r17
1002de28:	980d883a 	mov	r6,r19
1002de2c:	01400034 	movhi	r5,0
1002de30:	2943f404 	addi	r5,r5,4048
1002de34:	dfc00217 	ldw	ra,8(sp)
1002de38:	dcc00117 	ldw	r19,4(sp)
1002de3c:	dc400017 	ldw	r17,0(sp)
1002de40:	dec00304 	addi	sp,sp,12
1002de44:	002ddbc1 	jmpi	1002ddbc <htinit>

1002de48 <rshift>:
1002de48:	2807d17a 	srai	r3,r5,5
1002de4c:	20800417 	ldw	r2,16(r4)
1002de50:	22400504 	addi	r9,r4,20
1002de54:	480f883a 	mov	r7,r9
1002de58:	1880190e 	bge	r3,r2,1002dec0 <rshift+0x78>
1002de5c:	1085883a 	add	r2,r2,r2
1002de60:	18c7883a 	add	r3,r3,r3
1002de64:	1085883a 	add	r2,r2,r2
1002de68:	18c7883a 	add	r3,r3,r3
1002de6c:	294007cc 	andi	r5,r5,31
1002de70:	4891883a 	add	r8,r9,r2
1002de74:	48cd883a 	add	r6,r9,r3
1002de78:	28001726 	beq	r5,zero,1002ded8 <rshift+0x90>
1002de7c:	30c00017 	ldw	r3,0(r6)
1002de80:	00800804 	movi	r2,32
1002de84:	31800104 	addi	r6,r6,4
1002de88:	1155c83a 	sub	r10,r2,r5
1002de8c:	1946d83a 	srl	r3,r3,r5
1002de90:	3200092e 	bgeu	r6,r8,1002deb8 <rshift+0x70>
1002de94:	30800017 	ldw	r2,0(r6)
1002de98:	1284983a 	sll	r2,r2,r10
1002de9c:	10c4b03a 	or	r2,r2,r3
1002dea0:	38800015 	stw	r2,0(r7)
1002dea4:	30c00017 	ldw	r3,0(r6)
1002dea8:	31800104 	addi	r6,r6,4
1002deac:	39c00104 	addi	r7,r7,4
1002deb0:	1946d83a 	srl	r3,r3,r5
1002deb4:	323ff736 	bltu	r6,r8,1002de94 <rshift+0x4c>
1002deb8:	38c00015 	stw	r3,0(r7)
1002debc:	18000c1e 	bne	r3,zero,1002def0 <rshift+0xa8>
1002dec0:	3a45c83a 	sub	r2,r7,r9
1002dec4:	1005d0ba 	srai	r2,r2,2
1002dec8:	20800415 	stw	r2,16(r4)
1002decc:	1000011e 	bne	r2,zero,1002ded4 <rshift+0x8c>
1002ded0:	20000515 	stw	zero,20(r4)
1002ded4:	f800283a 	ret
1002ded8:	323ff92e 	bgeu	r6,r8,1002dec0 <rshift+0x78>
1002dedc:	30800017 	ldw	r2,0(r6)
1002dee0:	31800104 	addi	r6,r6,4
1002dee4:	38800015 	stw	r2,0(r7)
1002dee8:	39c00104 	addi	r7,r7,4
1002deec:	003ffa06 	br	1002ded8 <rshift+0x90>
1002def0:	39c00104 	addi	r7,r7,4
1002def4:	003ff206 	br	1002dec0 <rshift+0x78>

1002def8 <__gethex>:
1002def8:	defff304 	addi	sp,sp,-52
1002defc:	dd400815 	stw	r21,32(sp)
1002df00:	dd000715 	stw	r20,28(sp)
1002df04:	dcc00615 	stw	r19,24(sp)
1002df08:	dc400415 	stw	r17,16(sp)
1002df0c:	dfc00c15 	stw	ra,48(sp)
1002df10:	df000b15 	stw	fp,44(sp)
1002df14:	ddc00a15 	stw	r23,40(sp)
1002df18:	dd800915 	stw	r22,36(sp)
1002df1c:	dc800515 	stw	r18,20(sp)
1002df20:	dc000315 	stw	r16,12(sp)
1002df24:	04400034 	movhi	r17,0
1002df28:	8c4b3304 	addi	r17,r17,11468
1002df2c:	88800c03 	ldbu	r2,48(r17)
1002df30:	202b883a 	mov	r21,r4
1002df34:	2827883a 	mov	r19,r5
1002df38:	3029883a 	mov	r20,r6
1002df3c:	d9c00115 	stw	r7,4(sp)
1002df40:	10006e26 	beq	r2,zero,1002e0fc <__gethex+0x204>
1002df44:	99800017 	ldw	r6,0(r19)
1002df48:	00800c04 	movi	r2,48
1002df4c:	31000083 	ldbu	r4,2(r6)
1002df50:	30c00084 	addi	r3,r6,2
1002df54:	20806f1e 	bne	r4,r2,1002e114 <__gethex+0x21c>
1002df58:	200b883a 	mov	r5,r4
1002df5c:	3007883a 	mov	r3,r6
1002df60:	188000c3 	ldbu	r2,3(r3)
1002df64:	18c00044 	addi	r3,r3,1
1002df68:	1009883a 	mov	r4,r2
1002df6c:	117ffc26 	beq	r2,r5,1002df60 <__gethex+0x68>
1002df70:	1997c83a 	sub	r11,r3,r6
1002df74:	19400084 	addi	r5,r3,2
1002df78:	2445883a 	add	r2,r4,r17
1002df7c:	10c00003 	ldbu	r3,0(r2)
1002df80:	18002d26 	beq	r3,zero,1002e038 <__gethex+0x140>
1002df84:	29000003 	ldbu	r4,0(r5)
1002df88:	2825883a 	mov	r18,r5
1002df8c:	000d883a 	mov	r6,zero
1002df90:	0013883a 	mov	r9,zero
1002df94:	21003fcc 	andi	r4,r4,255
1002df98:	2445883a 	add	r2,r4,r17
1002df9c:	10c00003 	ldbu	r3,0(r2)
1002dfa0:	18000526 	beq	r3,zero,1002dfb8 <__gethex+0xc0>
1002dfa4:	29400044 	addi	r5,r5,1
1002dfa8:	29000003 	ldbu	r4,0(r5)
1002dfac:	2445883a 	add	r2,r4,r17
1002dfb0:	10c00003 	ldbu	r3,0(r2)
1002dfb4:	183ffb1e 	bne	r3,zero,1002dfa4 <__gethex+0xac>
1002dfb8:	00800b84 	movi	r2,46
1002dfbc:	20805826 	beq	r4,r2,1002e120 <__gethex+0x228>
1002dfc0:	30007a26 	beq	r6,zero,1002e1ac <__gethex+0x2b4>
1002dfc4:	2985c83a 	sub	r2,r5,r6
1002dfc8:	1085883a 	add	r2,r2,r2
1002dfcc:	1085883a 	add	r2,r2,r2
1002dfd0:	00adc83a 	sub	r22,zero,r2
1002dfd4:	2821883a 	mov	r16,r5
1002dfd8:	80c00003 	ldbu	r3,0(r16)
1002dfdc:	00801404 	movi	r2,80
1002dfe0:	18801e26 	beq	r3,r2,1002e05c <__gethex+0x164>
1002dfe4:	00801c04 	movi	r2,112
1002dfe8:	18801c26 	beq	r3,r2,1002e05c <__gethex+0x164>
1002dfec:	800d883a 	mov	r6,r16
1002dff0:	4805003a 	cmpeq	r2,r9,zero
1002dff4:	99800015 	stw	r6,0(r19)
1002dff8:	1000861e 	bne	r2,zero,1002e214 <__gethex+0x31c>
1002dffc:	58003d26 	beq	r11,zero,1002e0f4 <__gethex+0x1fc>
1002e000:	0025883a 	mov	r18,zero
1002e004:	9005883a 	mov	r2,r18
1002e008:	dfc00c17 	ldw	ra,48(sp)
1002e00c:	df000b17 	ldw	fp,44(sp)
1002e010:	ddc00a17 	ldw	r23,40(sp)
1002e014:	dd800917 	ldw	r22,36(sp)
1002e018:	dd400817 	ldw	r21,32(sp)
1002e01c:	dd000717 	ldw	r20,28(sp)
1002e020:	dcc00617 	ldw	r19,24(sp)
1002e024:	dc800517 	ldw	r18,20(sp)
1002e028:	dc400417 	ldw	r17,16(sp)
1002e02c:	dc000317 	ldw	r16,12(sp)
1002e030:	dec00d04 	addi	sp,sp,52
1002e034:	f800283a 	ret
1002e038:	00800b84 	movi	r2,46
1002e03c:	20804a26 	beq	r4,r2,1002e168 <__gethex+0x270>
1002e040:	2821883a 	mov	r16,r5
1002e044:	80c00003 	ldbu	r3,0(r16)
1002e048:	00801404 	movi	r2,80
1002e04c:	2825883a 	mov	r18,r5
1002e050:	02400044 	movi	r9,1
1002e054:	002d883a 	mov	r22,zero
1002e058:	18bfe21e 	bne	r3,r2,1002dfe4 <__gethex+0xec>
1002e05c:	80c00043 	ldbu	r3,1(r16)
1002e060:	00800ac4 	movi	r2,43
1002e064:	81000044 	addi	r4,r16,1
1002e068:	18804a26 	beq	r3,r2,1002e194 <__gethex+0x29c>
1002e06c:	00800b44 	movi	r2,45
1002e070:	18804c26 	beq	r3,r2,1002e1a4 <__gethex+0x2ac>
1002e074:	0015883a 	mov	r10,zero
1002e078:	1c45883a 	add	r2,r3,r17
1002e07c:	10800003 	ldbu	r2,0(r2)
1002e080:	103fda26 	beq	r2,zero,1002dfec <__gethex+0xf4>
1002e084:	02000644 	movi	r8,25
1002e088:	40bfd816 	blt	r8,r2,1002dfec <__gethex+0xf4>
1002e08c:	20c00043 	ldbu	r3,1(r4)
1002e090:	11fffc04 	addi	r7,r2,-16
1002e094:	00800034 	movhi	r2,0
1002e098:	108b3304 	addi	r2,r2,11468
1002e09c:	1887883a 	add	r3,r3,r2
1002e0a0:	18800003 	ldbu	r2,0(r3)
1002e0a4:	21800044 	addi	r6,r4,1
1002e0a8:	10000d26 	beq	r2,zero,1002e0e0 <__gethex+0x1e8>
1002e0ac:	100b883a 	mov	r5,r2
1002e0b0:	4080020e 	bge	r8,r2,1002e0bc <__gethex+0x1c4>
1002e0b4:	00000a06 	br	1002e0e0 <__gethex+0x1e8>
1002e0b8:	41000916 	blt	r8,r4,1002e0e0 <__gethex+0x1e8>
1002e0bc:	31800044 	addi	r6,r6,1
1002e0c0:	30800003 	ldbu	r2,0(r6)
1002e0c4:	38c002a4 	muli	r3,r7,10
1002e0c8:	1445883a 	add	r2,r2,r17
1002e0cc:	11000003 	ldbu	r4,0(r2)
1002e0d0:	1947883a 	add	r3,r3,r5
1002e0d4:	19fffc04 	addi	r7,r3,-16
1002e0d8:	200b883a 	mov	r5,r4
1002e0dc:	203ff61e 	bne	r4,zero,1002e0b8 <__gethex+0x1c0>
1002e0e0:	5005003a 	cmpeq	r2,r10,zero
1002e0e4:	1000011e 	bne	r2,zero,1002e0ec <__gethex+0x1f4>
1002e0e8:	01cfc83a 	sub	r7,zero,r7
1002e0ec:	b1ed883a 	add	r22,r22,r7
1002e0f0:	003fbf06 	br	1002dff0 <__gethex+0xf8>
1002e0f4:	04800184 	movi	r18,6
1002e0f8:	003fc206 	br	1002e004 <__gethex+0x10c>
1002e0fc:	002dde00 	call	1002dde0 <__hexdig_init>
1002e100:	99800017 	ldw	r6,0(r19)
1002e104:	00800c04 	movi	r2,48
1002e108:	31000083 	ldbu	r4,2(r6)
1002e10c:	30c00084 	addi	r3,r6,2
1002e110:	20bf9126 	beq	r4,r2,1002df58 <__gethex+0x60>
1002e114:	180b883a 	mov	r5,r3
1002e118:	0017883a 	mov	r11,zero
1002e11c:	003f9606 	br	1002df78 <__gethex+0x80>
1002e120:	303fa81e 	bne	r6,zero,1002dfc4 <__gethex+0xcc>
1002e124:	29400044 	addi	r5,r5,1
1002e128:	28800003 	ldbu	r2,0(r5)
1002e12c:	1445883a 	add	r2,r2,r17
1002e130:	10c00003 	ldbu	r3,0(r2)
1002e134:	1800ad26 	beq	r3,zero,1002e3ec <__gethex+0x4f4>
1002e138:	2809883a 	mov	r4,r5
1002e13c:	21000044 	addi	r4,r4,1
1002e140:	20800003 	ldbu	r2,0(r4)
1002e144:	1445883a 	add	r2,r2,r17
1002e148:	10c00003 	ldbu	r3,0(r2)
1002e14c:	183ffb1e 	bne	r3,zero,1002e13c <__gethex+0x244>
1002e150:	2145c83a 	sub	r2,r4,r5
1002e154:	1085883a 	add	r2,r2,r2
1002e158:	1085883a 	add	r2,r2,r2
1002e15c:	00adc83a 	sub	r22,zero,r2
1002e160:	200b883a 	mov	r5,r4
1002e164:	003f9b06 	br	1002dfd4 <__gethex+0xdc>
1002e168:	29000043 	ldbu	r4,1(r5)
1002e16c:	00800034 	movhi	r2,0
1002e170:	108b3304 	addi	r2,r2,11468
1002e174:	2c000044 	addi	r16,r5,1
1002e178:	2085883a 	add	r2,r4,r2
1002e17c:	10c00003 	ldbu	r3,0(r2)
1002e180:	18000d1e 	bne	r3,zero,1002e1b8 <__gethex+0x2c0>
1002e184:	2825883a 	mov	r18,r5
1002e188:	02400044 	movi	r9,1
1002e18c:	002d883a 	mov	r22,zero
1002e190:	003f9106 	br	1002dfd8 <__gethex+0xe0>
1002e194:	0015883a 	mov	r10,zero
1002e198:	21000044 	addi	r4,r4,1
1002e19c:	20c00003 	ldbu	r3,0(r4)
1002e1a0:	003fb506 	br	1002e078 <__gethex+0x180>
1002e1a4:	02800044 	movi	r10,1
1002e1a8:	003ffb06 	br	1002e198 <__gethex+0x2a0>
1002e1ac:	2821883a 	mov	r16,r5
1002e1b0:	002d883a 	mov	r22,zero
1002e1b4:	003f8806 	br	1002dfd8 <__gethex+0xe0>
1002e1b8:	00800c04 	movi	r2,48
1002e1bc:	20800e1e 	bne	r4,r2,1002e1f8 <__gethex+0x300>
1002e1c0:	2007883a 	mov	r3,r4
1002e1c4:	800b883a 	mov	r5,r16
1002e1c8:	29400044 	addi	r5,r5,1
1002e1cc:	29000003 	ldbu	r4,0(r5)
1002e1d0:	20803fcc 	andi	r2,r4,255
1002e1d4:	10fffc26 	beq	r2,r3,1002e1c8 <__gethex+0x2d0>
1002e1d8:	1445883a 	add	r2,r2,r17
1002e1dc:	10c00003 	ldbu	r3,0(r2)
1002e1e0:	1800071e 	bne	r3,zero,1002e200 <__gethex+0x308>
1002e1e4:	02c00044 	movi	r11,1
1002e1e8:	800d883a 	mov	r6,r16
1002e1ec:	2825883a 	mov	r18,r5
1002e1f0:	5813883a 	mov	r9,r11
1002e1f4:	003f6706 	br	1002df94 <__gethex+0x9c>
1002e1f8:	81000003 	ldbu	r4,0(r16)
1002e1fc:	800b883a 	mov	r5,r16
1002e200:	800d883a 	mov	r6,r16
1002e204:	2825883a 	mov	r18,r5
1002e208:	02c00044 	movi	r11,1
1002e20c:	0013883a 	mov	r9,zero
1002e210:	003f6006 	br	1002df94 <__gethex+0x9c>
1002e214:	8485c83a 	sub	r2,r16,r18
1002e218:	10bfffc4 	addi	r2,r2,-1
1002e21c:	00c001c4 	movi	r3,7
1002e220:	1880700e 	bge	r3,r2,1002e3e4 <__gethex+0x4ec>
1002e224:	000b883a 	mov	r5,zero
1002e228:	1005d07a 	srai	r2,r2,1
1002e22c:	29400044 	addi	r5,r5,1
1002e230:	18bffd16 	blt	r3,r2,1002e228 <__gethex+0x330>
1002e234:	a809883a 	mov	r4,r21
1002e238:	0029d300 	call	10029d30 <_Balloc>
1002e23c:	1027883a 	mov	r19,r2
1002e240:	10800504 	addi	r2,r2,20
1002e244:	d8800215 	stw	r2,8(sp)
1002e248:	9400522e 	bgeu	r18,r16,1002e394 <__gethex+0x49c>
1002e24c:	da000217 	ldw	r8,8(sp)
1002e250:	800b883a 	mov	r5,r16
1002e254:	000f883a 	mov	r7,zero
1002e258:	0009883a 	mov	r4,zero
1002e25c:	02400b84 	movi	r9,46
1002e260:	02800804 	movi	r10,32
1002e264:	297fffc4 	addi	r5,r5,-1
1002e268:	28c00003 	ldbu	r3,0(r5)
1002e26c:	1a400826 	beq	r3,r9,1002e290 <__gethex+0x398>
1002e270:	380d883a 	mov	r6,r7
1002e274:	3a802726 	beq	r7,r10,1002e314 <__gethex+0x41c>
1002e278:	39c00104 	addi	r7,r7,4
1002e27c:	1c47883a 	add	r3,r3,r17
1002e280:	18800003 	ldbu	r2,0(r3)
1002e284:	108003cc 	andi	r2,r2,15
1002e288:	1184983a 	sll	r2,r2,r6
1002e28c:	2088b03a 	or	r4,r4,r2
1002e290:	917ff436 	bltu	r18,r5,1002e264 <__gethex+0x36c>
1002e294:	d8c00217 	ldw	r3,8(sp)
1002e298:	40800104 	addi	r2,r8,4
1002e29c:	41000015 	stw	r4,0(r8)
1002e2a0:	10c5c83a 	sub	r2,r2,r3
1002e2a4:	1021d0ba 	srai	r16,r2,2
1002e2a8:	9c000415 	stw	r16,16(r19)
1002e2ac:	00297d80 	call	100297d8 <__hi0bits>
1002e2b0:	8006917a 	slli	r3,r16,5
1002e2b4:	a5c00017 	ldw	r23,0(r20)
1002e2b8:	1885c83a 	sub	r2,r3,r2
1002e2bc:	b8801c16 	blt	r23,r2,1002e330 <__gethex+0x438>
1002e2c0:	15c00a16 	blt	r2,r23,1002e2ec <__gethex+0x3f4>
1002e2c4:	0039883a 	mov	fp,zero
1002e2c8:	a0800217 	ldw	r2,8(r20)
1002e2cc:	1580340e 	bge	r2,r22,1002e3a0 <__gethex+0x4a8>
1002e2d0:	a809883a 	mov	r4,r21
1002e2d4:	980b883a 	mov	r5,r19
1002e2d8:	00297b00 	call	100297b0 <_Bfree>
1002e2dc:	d8c00d17 	ldw	r3,52(sp)
1002e2e0:	048028c4 	movi	r18,163
1002e2e4:	18000015 	stw	zero,0(r3)
1002e2e8:	003f4606 	br	1002e004 <__gethex+0x10c>
1002e2ec:	b8a1c83a 	sub	r16,r23,r2
1002e2f0:	980b883a 	mov	r5,r19
1002e2f4:	a809883a 	mov	r4,r21
1002e2f8:	800d883a 	mov	r6,r16
1002e2fc:	002a0f40 	call	1002a0f4 <__lshift>
1002e300:	1027883a 	mov	r19,r2
1002e304:	b42dc83a 	sub	r22,r22,r16
1002e308:	10800504 	addi	r2,r2,20
1002e30c:	d8800215 	stw	r2,8(sp)
1002e310:	003fec06 	br	1002e2c4 <__gethex+0x3cc>
1002e314:	41000015 	stw	r4,0(r8)
1002e318:	28c00003 	ldbu	r3,0(r5)
1002e31c:	01c00104 	movi	r7,4
1002e320:	000d883a 	mov	r6,zero
1002e324:	41d1883a 	add	r8,r8,r7
1002e328:	0009883a 	mov	r4,zero
1002e32c:	003fd306 	br	1002e27c <__gethex+0x384>
1002e330:	15e1c83a 	sub	r16,r2,r23
1002e334:	9809883a 	mov	r4,r19
1002e338:	800b883a 	mov	r5,r16
1002e33c:	0029ca80 	call	10029ca8 <__any_on>
1002e340:	1000061e 	bne	r2,zero,1002e35c <__gethex+0x464>
1002e344:	0039883a 	mov	fp,zero
1002e348:	9809883a 	mov	r4,r19
1002e34c:	800b883a 	mov	r5,r16
1002e350:	002de480 	call	1002de48 <rshift>
1002e354:	b42d883a 	add	r22,r22,r16
1002e358:	003fdb06 	br	1002e2c8 <__gethex+0x3d0>
1002e35c:	817fffc4 	addi	r5,r16,-1
1002e360:	2805d17a 	srai	r2,r5,5
1002e364:	d8c00217 	ldw	r3,8(sp)
1002e368:	290007cc 	andi	r4,r5,31
1002e36c:	1085883a 	add	r2,r2,r2
1002e370:	1085883a 	add	r2,r2,r2
1002e374:	01800044 	movi	r6,1
1002e378:	10c5883a 	add	r2,r2,r3
1002e37c:	3108983a 	sll	r4,r6,r4
1002e380:	10c00017 	ldw	r3,0(r2)
1002e384:	20c8703a 	and	r4,r4,r3
1002e388:	20001a1e 	bne	r4,zero,1002e3f4 <__gethex+0x4fc>
1002e38c:	3039883a 	mov	fp,r6
1002e390:	003fed06 	br	1002e348 <__gethex+0x450>
1002e394:	1011883a 	mov	r8,r2
1002e398:	0009883a 	mov	r4,zero
1002e39c:	003fbd06 	br	1002e294 <__gethex+0x39c>
1002e3a0:	a1000117 	ldw	r4,4(r20)
1002e3a4:	b1001a16 	blt	r22,r4,1002e410 <__gethex+0x518>
1002e3a8:	04800044 	movi	r18,1
1002e3ac:	e0000826 	beq	fp,zero,1002e3d0 <__gethex+0x4d8>
1002e3b0:	a1000317 	ldw	r4,12(r20)
1002e3b4:	00800084 	movi	r2,2
1002e3b8:	20809426 	beq	r4,r2,1002e60c <__gethex+0x714>
1002e3bc:	008000c4 	movi	r2,3
1002e3c0:	20805826 	beq	r4,r2,1002e524 <__gethex+0x62c>
1002e3c4:	00800044 	movi	r2,1
1002e3c8:	20803f26 	beq	r4,r2,1002e4c8 <__gethex+0x5d0>
1002e3cc:	94800414 	ori	r18,r18,16
1002e3d0:	d8800d17 	ldw	r2,52(sp)
1002e3d4:	d8c00117 	ldw	r3,4(sp)
1002e3d8:	14c00015 	stw	r19,0(r2)
1002e3dc:	1d800015 	stw	r22,0(r3)
1002e3e0:	003f0806 	br	1002e004 <__gethex+0x10c>
1002e3e4:	000b883a 	mov	r5,zero
1002e3e8:	003f9206 	br	1002e234 <__gethex+0x33c>
1002e3ec:	002d883a 	mov	r22,zero
1002e3f0:	003ef806 	br	1002dfd4 <__gethex+0xdc>
1002e3f4:	3140160e 	bge	r6,r5,1002e450 <__gethex+0x558>
1002e3f8:	9809883a 	mov	r4,r19
1002e3fc:	817fff84 	addi	r5,r16,-2
1002e400:	0029ca80 	call	10029ca8 <__any_on>
1002e404:	10001226 	beq	r2,zero,1002e450 <__gethex+0x558>
1002e408:	070000c4 	movi	fp,3
1002e40c:	003fce06 	br	1002e348 <__gethex+0x450>
1002e410:	25a3c83a 	sub	r17,r4,r22
1002e414:	8dc01016 	blt	r17,r23,1002e458 <__gethex+0x560>
1002e418:	a0c00317 	ldw	r3,12(r20)
1002e41c:	00800084 	movi	r2,2
1002e420:	18809326 	beq	r3,r2,1002e670 <__gethex+0x778>
1002e424:	008000c4 	movi	r2,3
1002e428:	18808e26 	beq	r3,r2,1002e664 <__gethex+0x76c>
1002e42c:	00800044 	movi	r2,1
1002e430:	18807b26 	beq	r3,r2,1002e620 <__gethex+0x728>
1002e434:	a809883a 	mov	r4,r21
1002e438:	980b883a 	mov	r5,r19
1002e43c:	00297b00 	call	100297b0 <_Bfree>
1002e440:	d8c00d17 	ldw	r3,52(sp)
1002e444:	04801404 	movi	r18,80
1002e448:	18000015 	stw	zero,0(r3)
1002e44c:	003eed06 	br	1002e004 <__gethex+0x10c>
1002e450:	07000084 	movi	fp,2
1002e454:	003fbc06 	br	1002e348 <__gethex+0x450>
1002e458:	8c3fffc4 	addi	r16,r17,-1
1002e45c:	e0001426 	beq	fp,zero,1002e4b0 <__gethex+0x5b8>
1002e460:	07000044 	movi	fp,1
1002e464:	8005d17a 	srai	r2,r16,5
1002e468:	d8c00217 	ldw	r3,8(sp)
1002e46c:	814007cc 	andi	r5,r16,31
1002e470:	1085883a 	add	r2,r2,r2
1002e474:	1085883a 	add	r2,r2,r2
1002e478:	10c5883a 	add	r2,r2,r3
1002e47c:	00c00044 	movi	r3,1
1002e480:	1946983a 	sll	r3,r3,r5
1002e484:	11000017 	ldw	r4,0(r2)
1002e488:	1906703a 	and	r3,r3,r4
1002e48c:	18000126 	beq	r3,zero,1002e494 <__gethex+0x59c>
1002e490:	e7000094 	ori	fp,fp,2
1002e494:	880b883a 	mov	r5,r17
1002e498:	9809883a 	mov	r4,r19
1002e49c:	002de480 	call	1002de48 <rshift>
1002e4a0:	a5800117 	ldw	r22,4(r20)
1002e4a4:	bc6fc83a 	sub	r23,r23,r17
1002e4a8:	04800084 	movi	r18,2
1002e4ac:	003fbf06 	br	1002e3ac <__gethex+0x4b4>
1002e4b0:	043fec0e 	bge	zero,r16,1002e464 <__gethex+0x56c>
1002e4b4:	9809883a 	mov	r4,r19
1002e4b8:	800b883a 	mov	r5,r16
1002e4bc:	0029ca80 	call	10029ca8 <__any_on>
1002e4c0:	1039883a 	mov	fp,r2
1002e4c4:	003fe706 	br	1002e464 <__gethex+0x56c>
1002e4c8:	e080008c 	andi	r2,fp,2
1002e4cc:	103fbf26 	beq	r2,zero,1002e3cc <__gethex+0x4d4>
1002e4d0:	d8c00217 	ldw	r3,8(sp)
1002e4d4:	18800017 	ldw	r2,0(r3)
1002e4d8:	e084b03a 	or	r2,fp,r2
1002e4dc:	1104703a 	and	r2,r2,r4
1002e4e0:	103fba26 	beq	r2,zero,1002e3cc <__gethex+0x4d4>
1002e4e4:	9c000417 	ldw	r16,16(r19)
1002e4e8:	d8c00217 	ldw	r3,8(sp)
1002e4ec:	017fffc4 	movi	r5,-1
1002e4f0:	8405883a 	add	r2,r16,r16
1002e4f4:	10b9883a 	add	fp,r2,r2
1002e4f8:	1f09883a 	add	r4,r3,fp
1002e4fc:	dc000015 	stw	r16,0(sp)
1002e500:	00000306 	br	1002e510 <__gethex+0x618>
1002e504:	18000015 	stw	zero,0(r3)
1002e508:	18c00104 	addi	r3,r3,4
1002e50c:	1900082e 	bgeu	r3,r4,1002e530 <__gethex+0x638>
1002e510:	18800017 	ldw	r2,0(r3)
1002e514:	117ffb26 	beq	r2,r5,1002e504 <__gethex+0x60c>
1002e518:	10800044 	addi	r2,r2,1
1002e51c:	18800015 	stw	r2,0(r3)
1002e520:	00001f06 	br	1002e5a0 <__gethex+0x6a8>
1002e524:	d8800e17 	ldw	r2,56(sp)
1002e528:	103fa826 	beq	r2,zero,1002e3cc <__gethex+0x4d4>
1002e52c:	003fed06 	br	1002e4e4 <__gethex+0x5ec>
1002e530:	98800217 	ldw	r2,8(r19)
1002e534:	80801316 	blt	r16,r2,1002e584 <__gethex+0x68c>
1002e538:	99400117 	ldw	r5,4(r19)
1002e53c:	a809883a 	mov	r4,r21
1002e540:	29400044 	addi	r5,r5,1
1002e544:	0029d300 	call	10029d30 <_Balloc>
1002e548:	99800417 	ldw	r6,16(r19)
1002e54c:	99400304 	addi	r5,r19,12
1002e550:	11000304 	addi	r4,r2,12
1002e554:	318d883a 	add	r6,r6,r6
1002e558:	318d883a 	add	r6,r6,r6
1002e55c:	31800204 	addi	r6,r6,8
1002e560:	1023883a 	mov	r17,r2
1002e564:	0022c500 	call	10022c50 <memcpy>
1002e568:	980b883a 	mov	r5,r19
1002e56c:	a809883a 	mov	r4,r21
1002e570:	00297b00 	call	100297b0 <_Bfree>
1002e574:	8c000417 	ldw	r16,16(r17)
1002e578:	88800504 	addi	r2,r17,20
1002e57c:	8827883a 	mov	r19,r17
1002e580:	d8800215 	stw	r2,8(sp)
1002e584:	8405883a 	add	r2,r16,r16
1002e588:	1085883a 	add	r2,r2,r2
1002e58c:	14c5883a 	add	r2,r2,r19
1002e590:	84000044 	addi	r16,r16,1
1002e594:	00c00044 	movi	r3,1
1002e598:	10c00515 	stw	r3,20(r2)
1002e59c:	9c000415 	stw	r16,16(r19)
1002e5a0:	00800084 	movi	r2,2
1002e5a4:	90801426 	beq	r18,r2,1002e5f8 <__gethex+0x700>
1002e5a8:	d8800017 	ldw	r2,0(sp)
1002e5ac:	14000b16 	blt	r2,r16,1002e5dc <__gethex+0x6e4>
1002e5b0:	bc0007cc 	andi	r16,r23,31
1002e5b4:	8000021e 	bne	r16,zero,1002e5c0 <__gethex+0x6c8>
1002e5b8:	94800814 	ori	r18,r18,32
1002e5bc:	003f8406 	br	1002e3d0 <__gethex+0x4d8>
1002e5c0:	d8c00217 	ldw	r3,8(sp)
1002e5c4:	1f05883a 	add	r2,r3,fp
1002e5c8:	113fff17 	ldw	r4,-4(r2)
1002e5cc:	00297d80 	call	100297d8 <__hi0bits>
1002e5d0:	00c00804 	movi	r3,32
1002e5d4:	1c07c83a 	sub	r3,r3,r16
1002e5d8:	10fff70e 	bge	r2,r3,1002e5b8 <__gethex+0x6c0>
1002e5dc:	9809883a 	mov	r4,r19
1002e5e0:	01400044 	movi	r5,1
1002e5e4:	002de480 	call	1002de48 <rshift>
1002e5e8:	a0800217 	ldw	r2,8(r20)
1002e5ec:	b5800044 	addi	r22,r22,1
1002e5f0:	15bf3716 	blt	r2,r22,1002e2d0 <__gethex+0x3d8>
1002e5f4:	003ff006 	br	1002e5b8 <__gethex+0x6c0>
1002e5f8:	a0800017 	ldw	r2,0(r20)
1002e5fc:	10bfffc4 	addi	r2,r2,-1
1002e600:	b8801e26 	beq	r23,r2,1002e67c <__gethex+0x784>
1002e604:	04800884 	movi	r18,34
1002e608:	003f7106 	br	1002e3d0 <__gethex+0x4d8>
1002e60c:	d8c00e17 	ldw	r3,56(sp)
1002e610:	00800044 	movi	r2,1
1002e614:	10c5c83a 	sub	r2,r2,r3
1002e618:	103f6c26 	beq	r2,zero,1002e3cc <__gethex+0x4d4>
1002e61c:	003fb106 	br	1002e4e4 <__gethex+0x5ec>
1002e620:	bc7f841e 	bne	r23,r17,1002e434 <__gethex+0x53c>
1002e624:	1dc0050e 	bge	r3,r23,1002e63c <__gethex+0x744>
1002e628:	b8cbc83a 	sub	r5,r23,r3
1002e62c:	9809883a 	mov	r4,r19
1002e630:	0029ca80 	call	10029ca8 <__any_on>
1002e634:	103f7f26 	beq	r2,zero,1002e434 <__gethex+0x53c>
1002e638:	a1000117 	ldw	r4,4(r20)
1002e63c:	d8800117 	ldw	r2,4(sp)
1002e640:	d8c00217 	ldw	r3,8(sp)
1002e644:	04000044 	movi	r16,1
1002e648:	11000015 	stw	r4,0(r2)
1002e64c:	d8800d17 	ldw	r2,52(sp)
1002e650:	04801884 	movi	r18,98
1002e654:	1c000015 	stw	r16,0(r3)
1002e658:	14c00015 	stw	r19,0(r2)
1002e65c:	9c000415 	stw	r16,16(r19)
1002e660:	003e6806 	br	1002e004 <__gethex+0x10c>
1002e664:	d8c00e17 	ldw	r3,56(sp)
1002e668:	183f7226 	beq	r3,zero,1002e434 <__gethex+0x53c>
1002e66c:	003ff306 	br	1002e63c <__gethex+0x744>
1002e670:	d8800e17 	ldw	r2,56(sp)
1002e674:	103ff126 	beq	r2,zero,1002e63c <__gethex+0x744>
1002e678:	003f6e06 	br	1002e434 <__gethex+0x53c>
1002e67c:	b805d17a 	srai	r2,r23,5
1002e680:	d8c00217 	ldw	r3,8(sp)
1002e684:	b94007cc 	andi	r5,r23,31
1002e688:	1085883a 	add	r2,r2,r2
1002e68c:	1085883a 	add	r2,r2,r2
1002e690:	10c5883a 	add	r2,r2,r3
1002e694:	00c00044 	movi	r3,1
1002e698:	1946983a 	sll	r3,r3,r5
1002e69c:	11000017 	ldw	r4,0(r2)
1002e6a0:	1906703a 	and	r3,r3,r4
1002e6a4:	183fd726 	beq	r3,zero,1002e604 <__gethex+0x70c>
1002e6a8:	04800844 	movi	r18,33
1002e6ac:	003f4806 	br	1002e3d0 <__gethex+0x4d8>

1002e6b0 <L_shift>:
1002e6b0:	00800204 	movi	r2,8
1002e6b4:	1185c83a 	sub	r2,r2,r6
1002e6b8:	1085883a 	add	r2,r2,r2
1002e6bc:	21c00017 	ldw	r7,0(r4)
1002e6c0:	1093883a 	add	r9,r2,r2
1002e6c4:	00800804 	movi	r2,32
1002e6c8:	200d883a 	mov	r6,r4
1002e6cc:	1251c83a 	sub	r8,r2,r9
1002e6d0:	31800104 	addi	r6,r6,4
1002e6d4:	3805883a 	mov	r2,r7
1002e6d8:	31c00017 	ldw	r7,0(r6)
1002e6dc:	3a08983a 	sll	r4,r7,r8
1002e6e0:	3a46d83a 	srl	r3,r7,r9
1002e6e4:	1104b03a 	or	r2,r2,r4
1002e6e8:	180f883a 	mov	r7,r3
1002e6ec:	30bfff15 	stw	r2,-4(r6)
1002e6f0:	30c00015 	stw	r3,0(r6)
1002e6f4:	317ff636 	bltu	r6,r5,1002e6d0 <L_shift+0x20>
1002e6f8:	f800283a 	ret

1002e6fc <__hexnan>:
1002e6fc:	defff404 	addi	sp,sp,-48
1002e700:	dd800815 	stw	r22,32(sp)
1002e704:	05800034 	movhi	r22,0
1002e708:	b58b3304 	addi	r22,r22,11468
1002e70c:	b0800c03 	ldbu	r2,48(r22)
1002e710:	dcc00515 	stw	r19,20(sp)
1002e714:	dc000215 	stw	r16,8(sp)
1002e718:	dfc00b15 	stw	ra,44(sp)
1002e71c:	df000a15 	stw	fp,40(sp)
1002e720:	ddc00915 	stw	r23,36(sp)
1002e724:	dd400715 	stw	r21,28(sp)
1002e728:	dd000615 	stw	r20,24(sp)
1002e72c:	dc800415 	stw	r18,16(sp)
1002e730:	dc400315 	stw	r17,12(sp)
1002e734:	d9000115 	stw	r4,4(sp)
1002e738:	2821883a 	mov	r16,r5
1002e73c:	3027883a 	mov	r19,r6
1002e740:	10007426 	beq	r2,zero,1002e914 <__hexnan+0x218>
1002e744:	80c00017 	ldw	r3,0(r16)
1002e748:	1805d17a 	srai	r2,r3,5
1002e74c:	18c007cc 	andi	r3,r3,31
1002e750:	1839003a 	cmpeq	fp,r3,zero
1002e754:	1085883a 	add	r2,r2,r2
1002e758:	1085883a 	add	r2,r2,r2
1002e75c:	d8c00015 	stw	r3,0(sp)
1002e760:	14c5883a 	add	r2,r2,r19
1002e764:	e000011e 	bne	fp,zero,1002e76c <__hexnan+0x70>
1002e768:	10800104 	addi	r2,r2,4
1002e76c:	d8c00117 	ldw	r3,4(sp)
1002e770:	153fff04 	addi	r20,r2,-4
1002e774:	a021883a 	mov	r16,r20
1002e778:	1c400017 	ldw	r17,0(r3)
1002e77c:	a02b883a 	mov	r21,r20
1002e780:	0025883a 	mov	r18,zero
1002e784:	002f883a 	mov	r23,zero
1002e788:	000d883a 	mov	r6,zero
1002e78c:	103fff15 	stw	zero,-4(r2)
1002e790:	8c400044 	addi	r17,r17,1
1002e794:	89000003 	ldbu	r4,0(r17)
1002e798:	20000e26 	beq	r4,zero,1002e7d4 <__hexnan+0xd8>
1002e79c:	2585883a 	add	r2,r4,r22
1002e7a0:	10c00003 	ldbu	r3,0(r2)
1002e7a4:	18002e1e 	bne	r3,zero,1002e860 <__hexnan+0x164>
1002e7a8:	00800804 	movi	r2,32
1002e7ac:	11005536 	bltu	r2,r4,1002e904 <__hexnan+0x208>
1002e7b0:	bcbff70e 	bge	r23,r18,1002e790 <__hexnan+0x94>
1002e7b4:	8540022e 	bgeu	r16,r21,1002e7c0 <__hexnan+0xc4>
1002e7b8:	008001c4 	movi	r2,7
1002e7bc:	11803c0e 	bge	r2,r6,1002e8b0 <__hexnan+0x1b4>
1002e7c0:	9c003536 	bltu	r19,r16,1002e898 <__hexnan+0x19c>
1002e7c4:	8c400044 	addi	r17,r17,1
1002e7c8:	89000003 	ldbu	r4,0(r17)
1002e7cc:	01800204 	movi	r6,8
1002e7d0:	203ff21e 	bne	r4,zero,1002e79c <__hexnan+0xa0>
1002e7d4:	90004d26 	beq	r18,zero,1002e90c <__hexnan+0x210>
1002e7d8:	85404336 	bltu	r16,r21,1002e8e8 <__hexnan+0x1ec>
1002e7dc:	9c00382e 	bgeu	r19,r16,1002e8c0 <__hexnan+0x1c4>
1002e7e0:	9807883a 	mov	r3,r19
1002e7e4:	80800017 	ldw	r2,0(r16)
1002e7e8:	84000104 	addi	r16,r16,4
1002e7ec:	18800015 	stw	r2,0(r3)
1002e7f0:	18c00104 	addi	r3,r3,4
1002e7f4:	a43ffb2e 	bgeu	r20,r16,1002e7e4 <__hexnan+0xe8>
1002e7f8:	18000015 	stw	zero,0(r3)
1002e7fc:	18c00104 	addi	r3,r3,4
1002e800:	a0fffd2e 	bgeu	r20,r3,1002e7f8 <__hexnan+0xfc>
1002e804:	a0800017 	ldw	r2,0(r20)
1002e808:	1000071e 	bne	r2,zero,1002e828 <__hexnan+0x12c>
1002e80c:	9d004326 	beq	r19,r20,1002e91c <__hexnan+0x220>
1002e810:	a007883a 	mov	r3,r20
1002e814:	00000106 	br	1002e81c <__hexnan+0x120>
1002e818:	98c04026 	beq	r19,r3,1002e91c <__hexnan+0x220>
1002e81c:	18ffff04 	addi	r3,r3,-4
1002e820:	18800017 	ldw	r2,0(r3)
1002e824:	103ffc26 	beq	r2,zero,1002e818 <__hexnan+0x11c>
1002e828:	00c00144 	movi	r3,5
1002e82c:	1805883a 	mov	r2,r3
1002e830:	dfc00b17 	ldw	ra,44(sp)
1002e834:	df000a17 	ldw	fp,40(sp)
1002e838:	ddc00917 	ldw	r23,36(sp)
1002e83c:	dd800817 	ldw	r22,32(sp)
1002e840:	dd400717 	ldw	r21,28(sp)
1002e844:	dd000617 	ldw	r20,24(sp)
1002e848:	dcc00517 	ldw	r19,20(sp)
1002e84c:	dc800417 	ldw	r18,16(sp)
1002e850:	dc400317 	ldw	r17,12(sp)
1002e854:	dc000217 	ldw	r16,8(sp)
1002e858:	dec00c04 	addi	sp,sp,48
1002e85c:	f800283a 	ret
1002e860:	31800044 	addi	r6,r6,1
1002e864:	00800204 	movi	r2,8
1002e868:	94800044 	addi	r18,r18,1
1002e86c:	1180040e 	bge	r2,r6,1002e880 <__hexnan+0x184>
1002e870:	9c3fc72e 	bgeu	r19,r16,1002e790 <__hexnan+0x94>
1002e874:	843fff04 	addi	r16,r16,-4
1002e878:	80000015 	stw	zero,0(r16)
1002e87c:	01800044 	movi	r6,1
1002e880:	80800017 	ldw	r2,0(r16)
1002e884:	18c003cc 	andi	r3,r3,15
1002e888:	1004913a 	slli	r2,r2,4
1002e88c:	10c4b03a 	or	r2,r2,r3
1002e890:	80800015 	stw	r2,0(r16)
1002e894:	003fbe06 	br	1002e790 <__hexnan+0x94>
1002e898:	843fff04 	addi	r16,r16,-4
1002e89c:	802b883a 	mov	r21,r16
1002e8a0:	902f883a 	mov	r23,r18
1002e8a4:	000d883a 	mov	r6,zero
1002e8a8:	80000015 	stw	zero,0(r16)
1002e8ac:	003fb806 	br	1002e790 <__hexnan+0x94>
1002e8b0:	8009883a 	mov	r4,r16
1002e8b4:	a80b883a 	mov	r5,r21
1002e8b8:	002e6b00 	call	1002e6b0 <L_shift>
1002e8bc:	003fc006 	br	1002e7c0 <__hexnan+0xc4>
1002e8c0:	e03fd01e 	bne	fp,zero,1002e804 <__hexnan+0x108>
1002e8c4:	d8c00017 	ldw	r3,0(sp)
1002e8c8:	00800804 	movi	r2,32
1002e8cc:	10c5c83a 	sub	r2,r2,r3
1002e8d0:	00ffffc4 	movi	r3,-1
1002e8d4:	1886d83a 	srl	r3,r3,r2
1002e8d8:	a0800017 	ldw	r2,0(r20)
1002e8dc:	10c4703a 	and	r2,r2,r3
1002e8e0:	a0800015 	stw	r2,0(r20)
1002e8e4:	003fc806 	br	1002e808 <__hexnan+0x10c>
1002e8e8:	008001c4 	movi	r2,7
1002e8ec:	11bfbb16 	blt	r2,r6,1002e7dc <__hexnan+0xe0>
1002e8f0:	a80b883a 	mov	r5,r21
1002e8f4:	8009883a 	mov	r4,r16
1002e8f8:	002e6b00 	call	1002e6b0 <L_shift>
1002e8fc:	9c3ff02e 	bgeu	r19,r16,1002e8c0 <__hexnan+0x1c4>
1002e900:	003fb706 	br	1002e7e0 <__hexnan+0xe4>
1002e904:	00800a44 	movi	r2,41
1002e908:	20800826 	beq	r4,r2,1002e92c <__hexnan+0x230>
1002e90c:	00c00104 	movi	r3,4
1002e910:	003fc606 	br	1002e82c <__hexnan+0x130>
1002e914:	002dde00 	call	1002dde0 <__hexdig_init>
1002e918:	003f8a06 	br	1002e744 <__hexnan+0x48>
1002e91c:	00800044 	movi	r2,1
1002e920:	00c00144 	movi	r3,5
1002e924:	98800015 	stw	r2,0(r19)
1002e928:	003fc006 	br	1002e82c <__hexnan+0x130>
1002e92c:	903ff726 	beq	r18,zero,1002e90c <__hexnan+0x210>
1002e930:	d8c00117 	ldw	r3,4(sp)
1002e934:	88800044 	addi	r2,r17,1
1002e938:	18800015 	stw	r2,0(r3)
1002e93c:	857fa72e 	bgeu	r16,r21,1002e7dc <__hexnan+0xe0>
1002e940:	003fe906 	br	1002e8e8 <__hexnan+0x1ec>

1002e944 <_isatty_r>:
1002e944:	defffd04 	addi	sp,sp,-12
1002e948:	dc000015 	stw	r16,0(sp)
1002e94c:	04000034 	movhi	r16,0
1002e950:	840b1f04 	addi	r16,r16,11388
1002e954:	dc400115 	stw	r17,4(sp)
1002e958:	80000015 	stw	zero,0(r16)
1002e95c:	2023883a 	mov	r17,r4
1002e960:	2809883a 	mov	r4,r5
1002e964:	dfc00215 	stw	ra,8(sp)
1002e968:	003159c0 	call	1003159c <isatty>
1002e96c:	1007883a 	mov	r3,r2
1002e970:	00bfffc4 	movi	r2,-1
1002e974:	18800626 	beq	r3,r2,1002e990 <_isatty_r+0x4c>
1002e978:	1805883a 	mov	r2,r3
1002e97c:	dfc00217 	ldw	ra,8(sp)
1002e980:	dc400117 	ldw	r17,4(sp)
1002e984:	dc000017 	ldw	r16,0(sp)
1002e988:	dec00304 	addi	sp,sp,12
1002e98c:	f800283a 	ret
1002e990:	80800017 	ldw	r2,0(r16)
1002e994:	103ff826 	beq	r2,zero,1002e978 <_isatty_r+0x34>
1002e998:	88800015 	stw	r2,0(r17)
1002e99c:	1805883a 	mov	r2,r3
1002e9a0:	dfc00217 	ldw	ra,8(sp)
1002e9a4:	dc400117 	ldw	r17,4(sp)
1002e9a8:	dc000017 	ldw	r16,0(sp)
1002e9ac:	dec00304 	addi	sp,sp,12
1002e9b0:	f800283a 	ret

1002e9b4 <_lseek_r>:
1002e9b4:	defffd04 	addi	sp,sp,-12
1002e9b8:	dc000015 	stw	r16,0(sp)
1002e9bc:	04000034 	movhi	r16,0
1002e9c0:	840b1f04 	addi	r16,r16,11388
1002e9c4:	dc400115 	stw	r17,4(sp)
1002e9c8:	80000015 	stw	zero,0(r16)
1002e9cc:	2023883a 	mov	r17,r4
1002e9d0:	2809883a 	mov	r4,r5
1002e9d4:	300b883a 	mov	r5,r6
1002e9d8:	380d883a 	mov	r6,r7
1002e9dc:	dfc00215 	stw	ra,8(sp)
1002e9e0:	00316d40 	call	100316d4 <lseek>
1002e9e4:	1007883a 	mov	r3,r2
1002e9e8:	00bfffc4 	movi	r2,-1
1002e9ec:	18800626 	beq	r3,r2,1002ea08 <_lseek_r+0x54>
1002e9f0:	1805883a 	mov	r2,r3
1002e9f4:	dfc00217 	ldw	ra,8(sp)
1002e9f8:	dc400117 	ldw	r17,4(sp)
1002e9fc:	dc000017 	ldw	r16,0(sp)
1002ea00:	dec00304 	addi	sp,sp,12
1002ea04:	f800283a 	ret
1002ea08:	80800017 	ldw	r2,0(r16)
1002ea0c:	103ff826 	beq	r2,zero,1002e9f0 <_lseek_r+0x3c>
1002ea10:	88800015 	stw	r2,0(r17)
1002ea14:	1805883a 	mov	r2,r3
1002ea18:	dfc00217 	ldw	ra,8(sp)
1002ea1c:	dc400117 	ldw	r17,4(sp)
1002ea20:	dc000017 	ldw	r16,0(sp)
1002ea24:	dec00304 	addi	sp,sp,12
1002ea28:	f800283a 	ret

1002ea2c <_read_r>:
1002ea2c:	defffd04 	addi	sp,sp,-12
1002ea30:	dc000015 	stw	r16,0(sp)
1002ea34:	04000034 	movhi	r16,0
1002ea38:	840b1f04 	addi	r16,r16,11388
1002ea3c:	dc400115 	stw	r17,4(sp)
1002ea40:	80000015 	stw	zero,0(r16)
1002ea44:	2023883a 	mov	r17,r4
1002ea48:	2809883a 	mov	r4,r5
1002ea4c:	300b883a 	mov	r5,r6
1002ea50:	380d883a 	mov	r6,r7
1002ea54:	dfc00215 	stw	ra,8(sp)
1002ea58:	00317d80 	call	100317d8 <read>
1002ea5c:	1007883a 	mov	r3,r2
1002ea60:	00bfffc4 	movi	r2,-1
1002ea64:	18800626 	beq	r3,r2,1002ea80 <_read_r+0x54>
1002ea68:	1805883a 	mov	r2,r3
1002ea6c:	dfc00217 	ldw	ra,8(sp)
1002ea70:	dc400117 	ldw	r17,4(sp)
1002ea74:	dc000017 	ldw	r16,0(sp)
1002ea78:	dec00304 	addi	sp,sp,12
1002ea7c:	f800283a 	ret
1002ea80:	80800017 	ldw	r2,0(r16)
1002ea84:	103ff826 	beq	r2,zero,1002ea68 <_read_r+0x3c>
1002ea88:	88800015 	stw	r2,0(r17)
1002ea8c:	1805883a 	mov	r2,r3
1002ea90:	dfc00217 	ldw	ra,8(sp)
1002ea94:	dc400117 	ldw	r17,4(sp)
1002ea98:	dc000017 	ldw	r16,0(sp)
1002ea9c:	dec00304 	addi	sp,sp,12
1002eaa0:	f800283a 	ret

1002eaa4 <__muldi3>:
1002eaa4:	2011883a 	mov	r8,r4
1002eaa8:	427fffcc 	andi	r9,r8,65535
1002eaac:	4018d43a 	srli	r12,r8,16
1002eab0:	32bfffcc 	andi	r10,r6,65535
1002eab4:	3016d43a 	srli	r11,r6,16
1002eab8:	4a85383a 	mul	r2,r9,r10
1002eabc:	6295383a 	mul	r10,r12,r10
1002eac0:	4ad3383a 	mul	r9,r9,r11
1002eac4:	113fffcc 	andi	r4,r2,65535
1002eac8:	1004d43a 	srli	r2,r2,16
1002eacc:	4a93883a 	add	r9,r9,r10
1002ead0:	3807883a 	mov	r3,r7
1002ead4:	1245883a 	add	r2,r2,r9
1002ead8:	280f883a 	mov	r7,r5
1002eadc:	180b883a 	mov	r5,r3
1002eae0:	1006943a 	slli	r3,r2,16
1002eae4:	defffd04 	addi	sp,sp,-12
1002eae8:	dc800215 	stw	r18,8(sp)
1002eaec:	1907883a 	add	r3,r3,r4
1002eaf0:	dc400115 	stw	r17,4(sp)
1002eaf4:	dc000015 	stw	r16,0(sp)
1002eaf8:	4165383a 	mul	r18,r8,r5
1002eafc:	31e3383a 	mul	r17,r6,r7
1002eb00:	1012d43a 	srli	r9,r2,16
1002eb04:	62d9383a 	mul	r12,r12,r11
1002eb08:	181f883a 	mov	r15,r3
1002eb0c:	1280022e 	bgeu	r2,r10,1002eb18 <__muldi3+0x74>
1002eb10:	00800074 	movhi	r2,1
1002eb14:	6099883a 	add	r12,r12,r2
1002eb18:	624d883a 	add	r6,r12,r9
1002eb1c:	9187883a 	add	r3,r18,r6
1002eb20:	88c7883a 	add	r3,r17,r3
1002eb24:	7805883a 	mov	r2,r15
1002eb28:	dc800217 	ldw	r18,8(sp)
1002eb2c:	dc400117 	ldw	r17,4(sp)
1002eb30:	dc000017 	ldw	r16,0(sp)
1002eb34:	dec00304 	addi	sp,sp,12
1002eb38:	f800283a 	ret

1002eb3c <__fixunsdfsi>:
1002eb3c:	defffb04 	addi	sp,sp,-20
1002eb40:	dc400115 	stw	r17,4(sp)
1002eb44:	dc000015 	stw	r16,0(sp)
1002eb48:	04507834 	movhi	r17,16864
1002eb4c:	0021883a 	mov	r16,zero
1002eb50:	800d883a 	mov	r6,r16
1002eb54:	880f883a 	mov	r7,r17
1002eb58:	dcc00315 	stw	r19,12(sp)
1002eb5c:	dc800215 	stw	r18,8(sp)
1002eb60:	2827883a 	mov	r19,r5
1002eb64:	2025883a 	mov	r18,r4
1002eb68:	dfc00415 	stw	ra,16(sp)
1002eb6c:	003058c0 	call	1003058c <__gedf2>
1002eb70:	000d883a 	mov	r6,zero
1002eb74:	880f883a 	mov	r7,r17
1002eb78:	980b883a 	mov	r5,r19
1002eb7c:	9009883a 	mov	r4,r18
1002eb80:	10000d16 	blt	r2,zero,1002ebb8 <__fixunsdfsi+0x7c>
1002eb84:	002fce40 	call	1002fce4 <__subdf3>
1002eb88:	180b883a 	mov	r5,r3
1002eb8c:	1009883a 	mov	r4,r2
1002eb90:	003081c0 	call	1003081c <__fixdfsi>
1002eb94:	00e00034 	movhi	r3,32768
1002eb98:	10c5883a 	add	r2,r2,r3
1002eb9c:	dfc00417 	ldw	ra,16(sp)
1002eba0:	dcc00317 	ldw	r19,12(sp)
1002eba4:	dc800217 	ldw	r18,8(sp)
1002eba8:	dc400117 	ldw	r17,4(sp)
1002ebac:	dc000017 	ldw	r16,0(sp)
1002ebb0:	dec00504 	addi	sp,sp,20
1002ebb4:	f800283a 	ret
1002ebb8:	980b883a 	mov	r5,r19
1002ebbc:	9009883a 	mov	r4,r18
1002ebc0:	003081c0 	call	1003081c <__fixdfsi>
1002ebc4:	dfc00417 	ldw	ra,16(sp)
1002ebc8:	dcc00317 	ldw	r19,12(sp)
1002ebcc:	dc800217 	ldw	r18,8(sp)
1002ebd0:	dc400117 	ldw	r17,4(sp)
1002ebd4:	dc000017 	ldw	r16,0(sp)
1002ebd8:	dec00504 	addi	sp,sp,20
1002ebdc:	f800283a 	ret

1002ebe0 <__udivdi3>:
1002ebe0:	defff004 	addi	sp,sp,-64
1002ebe4:	2005883a 	mov	r2,r4
1002ebe8:	3011883a 	mov	r8,r6
1002ebec:	df000e15 	stw	fp,56(sp)
1002ebf0:	dd000a15 	stw	r20,40(sp)
1002ebf4:	dc000615 	stw	r16,24(sp)
1002ebf8:	dfc00f15 	stw	ra,60(sp)
1002ebfc:	ddc00d15 	stw	r23,52(sp)
1002ec00:	dd800c15 	stw	r22,48(sp)
1002ec04:	dd400b15 	stw	r21,44(sp)
1002ec08:	dcc00915 	stw	r19,36(sp)
1002ec0c:	dc800815 	stw	r18,32(sp)
1002ec10:	dc400715 	stw	r17,28(sp)
1002ec14:	4021883a 	mov	r16,r8
1002ec18:	1039883a 	mov	fp,r2
1002ec1c:	2829883a 	mov	r20,r5
1002ec20:	38003b1e 	bne	r7,zero,1002ed10 <__udivdi3+0x130>
1002ec24:	2a005c36 	bltu	r5,r8,1002ed98 <__udivdi3+0x1b8>
1002ec28:	4000a626 	beq	r8,zero,1002eec4 <__udivdi3+0x2e4>
1002ec2c:	00bfffd4 	movui	r2,65535
1002ec30:	14009e36 	bltu	r2,r16,1002eeac <__udivdi3+0x2cc>
1002ec34:	00803fc4 	movi	r2,255
1002ec38:	14013d36 	bltu	r2,r16,1002f130 <__udivdi3+0x550>
1002ec3c:	000b883a 	mov	r5,zero
1002ec40:	0005883a 	mov	r2,zero
1002ec44:	8084d83a 	srl	r2,r16,r2
1002ec48:	01000034 	movhi	r4,0
1002ec4c:	2103fb04 	addi	r4,r4,4076
1002ec50:	01800804 	movi	r6,32
1002ec54:	1105883a 	add	r2,r2,r4
1002ec58:	10c00003 	ldbu	r3,0(r2)
1002ec5c:	28c7883a 	add	r3,r5,r3
1002ec60:	30edc83a 	sub	r22,r6,r3
1002ec64:	b000ee1e 	bne	r22,zero,1002f020 <__udivdi3+0x440>
1002ec68:	802ad43a 	srli	r21,r16,16
1002ec6c:	00800044 	movi	r2,1
1002ec70:	a423c83a 	sub	r17,r20,r16
1002ec74:	85ffffcc 	andi	r23,r16,65535
1002ec78:	d8800315 	stw	r2,12(sp)
1002ec7c:	8809883a 	mov	r4,r17
1002ec80:	a80b883a 	mov	r5,r21
1002ec84:	002233c0 	call	1002233c <__udivsi3>
1002ec88:	8809883a 	mov	r4,r17
1002ec8c:	a80b883a 	mov	r5,r21
1002ec90:	102d883a 	mov	r22,r2
1002ec94:	00223440 	call	10022344 <__umodsi3>
1002ec98:	1004943a 	slli	r2,r2,16
1002ec9c:	e006d43a 	srli	r3,fp,16
1002eca0:	bda3383a 	mul	r17,r23,r22
1002eca4:	10c4b03a 	or	r2,r2,r3
1002eca8:	1440042e 	bgeu	r2,r17,1002ecbc <__udivdi3+0xdc>
1002ecac:	1405883a 	add	r2,r2,r16
1002ecb0:	b5bfffc4 	addi	r22,r22,-1
1002ecb4:	14000136 	bltu	r2,r16,1002ecbc <__udivdi3+0xdc>
1002ecb8:	14413d36 	bltu	r2,r17,1002f1b0 <__udivdi3+0x5d0>
1002ecbc:	1463c83a 	sub	r17,r2,r17
1002ecc0:	8809883a 	mov	r4,r17
1002ecc4:	a80b883a 	mov	r5,r21
1002ecc8:	002233c0 	call	1002233c <__udivsi3>
1002eccc:	8809883a 	mov	r4,r17
1002ecd0:	a80b883a 	mov	r5,r21
1002ecd4:	1029883a 	mov	r20,r2
1002ecd8:	00223440 	call	10022344 <__umodsi3>
1002ecdc:	1004943a 	slli	r2,r2,16
1002ece0:	bd09383a 	mul	r4,r23,r20
1002ece4:	e0ffffcc 	andi	r3,fp,65535
1002ece8:	10c4b03a 	or	r2,r2,r3
1002ecec:	1100042e 	bgeu	r2,r4,1002ed00 <__udivdi3+0x120>
1002ecf0:	8085883a 	add	r2,r16,r2
1002ecf4:	a53fffc4 	addi	r20,r20,-1
1002ecf8:	14000136 	bltu	r2,r16,1002ed00 <__udivdi3+0x120>
1002ecfc:	11012036 	bltu	r2,r4,1002f180 <__udivdi3+0x5a0>
1002ed00:	b004943a 	slli	r2,r22,16
1002ed04:	d9000317 	ldw	r4,12(sp)
1002ed08:	a084b03a 	or	r2,r20,r2
1002ed0c:	00001506 	br	1002ed64 <__udivdi3+0x184>
1002ed10:	380d883a 	mov	r6,r7
1002ed14:	29c06236 	bltu	r5,r7,1002eea0 <__udivdi3+0x2c0>
1002ed18:	00bfffd4 	movui	r2,65535
1002ed1c:	11c05a36 	bltu	r2,r7,1002ee88 <__udivdi3+0x2a8>
1002ed20:	00803fc4 	movi	r2,255
1002ed24:	11c0fc36 	bltu	r2,r7,1002f118 <__udivdi3+0x538>
1002ed28:	000b883a 	mov	r5,zero
1002ed2c:	0005883a 	mov	r2,zero
1002ed30:	3084d83a 	srl	r2,r6,r2
1002ed34:	01000034 	movhi	r4,0
1002ed38:	2103fb04 	addi	r4,r4,4076
1002ed3c:	01c00804 	movi	r7,32
1002ed40:	1105883a 	add	r2,r2,r4
1002ed44:	10c00003 	ldbu	r3,0(r2)
1002ed48:	28c7883a 	add	r3,r5,r3
1002ed4c:	38efc83a 	sub	r23,r7,r3
1002ed50:	b800691e 	bne	r23,zero,1002eef8 <__udivdi3+0x318>
1002ed54:	35000136 	bltu	r6,r20,1002ed5c <__udivdi3+0x17c>
1002ed58:	e4005136 	bltu	fp,r16,1002eea0 <__udivdi3+0x2c0>
1002ed5c:	00800044 	movi	r2,1
1002ed60:	0009883a 	mov	r4,zero
1002ed64:	2007883a 	mov	r3,r4
1002ed68:	dfc00f17 	ldw	ra,60(sp)
1002ed6c:	df000e17 	ldw	fp,56(sp)
1002ed70:	ddc00d17 	ldw	r23,52(sp)
1002ed74:	dd800c17 	ldw	r22,48(sp)
1002ed78:	dd400b17 	ldw	r21,44(sp)
1002ed7c:	dd000a17 	ldw	r20,40(sp)
1002ed80:	dcc00917 	ldw	r19,36(sp)
1002ed84:	dc800817 	ldw	r18,32(sp)
1002ed88:	dc400717 	ldw	r17,28(sp)
1002ed8c:	dc000617 	ldw	r16,24(sp)
1002ed90:	dec01004 	addi	sp,sp,64
1002ed94:	f800283a 	ret
1002ed98:	00bfffd4 	movui	r2,65535
1002ed9c:	12005036 	bltu	r2,r8,1002eee0 <__udivdi3+0x300>
1002eda0:	00803fc4 	movi	r2,255
1002eda4:	1200e836 	bltu	r2,r8,1002f148 <__udivdi3+0x568>
1002eda8:	000b883a 	mov	r5,zero
1002edac:	0005883a 	mov	r2,zero
1002edb0:	8084d83a 	srl	r2,r16,r2
1002edb4:	01000034 	movhi	r4,0
1002edb8:	2103fb04 	addi	r4,r4,4076
1002edbc:	01800804 	movi	r6,32
1002edc0:	1105883a 	add	r2,r2,r4
1002edc4:	10c00003 	ldbu	r3,0(r2)
1002edc8:	28c7883a 	add	r3,r5,r3
1002edcc:	30cbc83a 	sub	r5,r6,r3
1002edd0:	28000626 	beq	r5,zero,1002edec <__udivdi3+0x20c>
1002edd4:	3145c83a 	sub	r2,r6,r5
1002edd8:	e084d83a 	srl	r2,fp,r2
1002eddc:	a146983a 	sll	r3,r20,r5
1002ede0:	e178983a 	sll	fp,fp,r5
1002ede4:	8160983a 	sll	r16,r16,r5
1002ede8:	18a8b03a 	or	r20,r3,r2
1002edec:	802ad43a 	srli	r21,r16,16
1002edf0:	a009883a 	mov	r4,r20
1002edf4:	85ffffcc 	andi	r23,r16,65535
1002edf8:	a80b883a 	mov	r5,r21
1002edfc:	002233c0 	call	1002233c <__udivsi3>
1002ee00:	a009883a 	mov	r4,r20
1002ee04:	a80b883a 	mov	r5,r21
1002ee08:	102d883a 	mov	r22,r2
1002ee0c:	00223440 	call	10022344 <__umodsi3>
1002ee10:	1004943a 	slli	r2,r2,16
1002ee14:	e006d43a 	srli	r3,fp,16
1002ee18:	bda3383a 	mul	r17,r23,r22
1002ee1c:	10c4b03a 	or	r2,r2,r3
1002ee20:	1440042e 	bgeu	r2,r17,1002ee34 <__udivdi3+0x254>
1002ee24:	1405883a 	add	r2,r2,r16
1002ee28:	b5bfffc4 	addi	r22,r22,-1
1002ee2c:	14000136 	bltu	r2,r16,1002ee34 <__udivdi3+0x254>
1002ee30:	1440d536 	bltu	r2,r17,1002f188 <__udivdi3+0x5a8>
1002ee34:	1463c83a 	sub	r17,r2,r17
1002ee38:	8809883a 	mov	r4,r17
1002ee3c:	a80b883a 	mov	r5,r21
1002ee40:	002233c0 	call	1002233c <__udivsi3>
1002ee44:	8809883a 	mov	r4,r17
1002ee48:	a80b883a 	mov	r5,r21
1002ee4c:	1029883a 	mov	r20,r2
1002ee50:	00223440 	call	10022344 <__umodsi3>
1002ee54:	1004943a 	slli	r2,r2,16
1002ee58:	bd09383a 	mul	r4,r23,r20
1002ee5c:	e0ffffcc 	andi	r3,fp,65535
1002ee60:	10c4b03a 	or	r2,r2,r3
1002ee64:	1100042e 	bgeu	r2,r4,1002ee78 <__udivdi3+0x298>
1002ee68:	8085883a 	add	r2,r16,r2
1002ee6c:	a53fffc4 	addi	r20,r20,-1
1002ee70:	14000136 	bltu	r2,r16,1002ee78 <__udivdi3+0x298>
1002ee74:	1100c736 	bltu	r2,r4,1002f194 <__udivdi3+0x5b4>
1002ee78:	b004943a 	slli	r2,r22,16
1002ee7c:	0009883a 	mov	r4,zero
1002ee80:	a084b03a 	or	r2,r20,r2
1002ee84:	003fb706 	br	1002ed64 <__udivdi3+0x184>
1002ee88:	00804034 	movhi	r2,256
1002ee8c:	10bfffc4 	addi	r2,r2,-1
1002ee90:	11c0a436 	bltu	r2,r7,1002f124 <__udivdi3+0x544>
1002ee94:	01400404 	movi	r5,16
1002ee98:	2805883a 	mov	r2,r5
1002ee9c:	003fa406 	br	1002ed30 <__udivdi3+0x150>
1002eea0:	0005883a 	mov	r2,zero
1002eea4:	0009883a 	mov	r4,zero
1002eea8:	003fae06 	br	1002ed64 <__udivdi3+0x184>
1002eeac:	00804034 	movhi	r2,256
1002eeb0:	10bfffc4 	addi	r2,r2,-1
1002eeb4:	1400a136 	bltu	r2,r16,1002f13c <__udivdi3+0x55c>
1002eeb8:	01400404 	movi	r5,16
1002eebc:	2805883a 	mov	r2,r5
1002eec0:	003f6006 	br	1002ec44 <__udivdi3+0x64>
1002eec4:	01000044 	movi	r4,1
1002eec8:	000b883a 	mov	r5,zero
1002eecc:	002233c0 	call	1002233c <__udivsi3>
1002eed0:	1021883a 	mov	r16,r2
1002eed4:	00bfffd4 	movui	r2,65535
1002eed8:	143ff436 	bltu	r2,r16,1002eeac <__udivdi3+0x2cc>
1002eedc:	003f5506 	br	1002ec34 <__udivdi3+0x54>
1002eee0:	00804034 	movhi	r2,256
1002eee4:	10bfffc4 	addi	r2,r2,-1
1002eee8:	12009a36 	bltu	r2,r8,1002f154 <__udivdi3+0x574>
1002eeec:	01400404 	movi	r5,16
1002eef0:	2805883a 	mov	r2,r5
1002eef4:	003fae06 	br	1002edb0 <__udivdi3+0x1d0>
1002eef8:	3dc5c83a 	sub	r2,r7,r23
1002eefc:	35c8983a 	sll	r4,r6,r23
1002ef00:	8086d83a 	srl	r3,r16,r2
1002ef04:	a0a2d83a 	srl	r17,r20,r2
1002ef08:	e084d83a 	srl	r2,fp,r2
1002ef0c:	20eab03a 	or	r21,r4,r3
1002ef10:	a82cd43a 	srli	r22,r21,16
1002ef14:	a5c6983a 	sll	r3,r20,r23
1002ef18:	8809883a 	mov	r4,r17
1002ef1c:	b00b883a 	mov	r5,r22
1002ef20:	1886b03a 	or	r3,r3,r2
1002ef24:	d8c00215 	stw	r3,8(sp)
1002ef28:	002233c0 	call	1002233c <__udivsi3>
1002ef2c:	8809883a 	mov	r4,r17
1002ef30:	b00b883a 	mov	r5,r22
1002ef34:	1029883a 	mov	r20,r2
1002ef38:	00223440 	call	10022344 <__umodsi3>
1002ef3c:	a8ffffcc 	andi	r3,r21,65535
1002ef40:	d8c00515 	stw	r3,20(sp)
1002ef44:	d9000217 	ldw	r4,8(sp)
1002ef48:	d9400517 	ldw	r5,20(sp)
1002ef4c:	1004943a 	slli	r2,r2,16
1002ef50:	2006d43a 	srli	r3,r4,16
1002ef54:	85e0983a 	sll	r16,r16,r23
1002ef58:	2d23383a 	mul	r17,r5,r20
1002ef5c:	10c4b03a 	or	r2,r2,r3
1002ef60:	dc000015 	stw	r16,0(sp)
1002ef64:	1440032e 	bgeu	r2,r17,1002ef74 <__udivdi3+0x394>
1002ef68:	1545883a 	add	r2,r2,r21
1002ef6c:	a53fffc4 	addi	r20,r20,-1
1002ef70:	15407f2e 	bgeu	r2,r21,1002f170 <__udivdi3+0x590>
1002ef74:	1463c83a 	sub	r17,r2,r17
1002ef78:	8809883a 	mov	r4,r17
1002ef7c:	b00b883a 	mov	r5,r22
1002ef80:	002233c0 	call	1002233c <__udivsi3>
1002ef84:	8809883a 	mov	r4,r17
1002ef88:	b00b883a 	mov	r5,r22
1002ef8c:	1021883a 	mov	r16,r2
1002ef90:	00223440 	call	10022344 <__umodsi3>
1002ef94:	d8c00517 	ldw	r3,20(sp)
1002ef98:	d9000217 	ldw	r4,8(sp)
1002ef9c:	1004943a 	slli	r2,r2,16
1002efa0:	1c0f383a 	mul	r7,r3,r16
1002efa4:	20ffffcc 	andi	r3,r4,65535
1002efa8:	10e2b03a 	or	r17,r2,r3
1002efac:	89c0032e 	bgeu	r17,r7,1002efbc <__udivdi3+0x3dc>
1002efb0:	8d63883a 	add	r17,r17,r21
1002efb4:	843fffc4 	addi	r16,r16,-1
1002efb8:	8d40692e 	bgeu	r17,r21,1002f160 <__udivdi3+0x580>
1002efbc:	a008943a 	slli	r4,r20,16
1002efc0:	d9400017 	ldw	r5,0(sp)
1002efc4:	89e3c83a 	sub	r17,r17,r7
1002efc8:	8110b03a 	or	r8,r16,r4
1002efcc:	280cd43a 	srli	r6,r5,16
1002efd0:	28ffffcc 	andi	r3,r5,65535
1002efd4:	40bfffcc 	andi	r2,r8,65535
1002efd8:	400ad43a 	srli	r5,r8,16
1002efdc:	10d3383a 	mul	r9,r2,r3
1002efe0:	1185383a 	mul	r2,r2,r6
1002efe4:	28c7383a 	mul	r3,r5,r3
1002efe8:	4808d43a 	srli	r4,r9,16
1002efec:	298b383a 	mul	r5,r5,r6
1002eff0:	10c5883a 	add	r2,r2,r3
1002eff4:	2089883a 	add	r4,r4,r2
1002eff8:	20c0022e 	bgeu	r4,r3,1002f004 <__udivdi3+0x424>
1002effc:	00800074 	movhi	r2,1
1002f000:	288b883a 	add	r5,r5,r2
1002f004:	2004d43a 	srli	r2,r4,16
1002f008:	288b883a 	add	r5,r5,r2
1002f00c:	89403f36 	bltu	r17,r5,1002f10c <__udivdi3+0x52c>
1002f010:	89403926 	beq	r17,r5,1002f0f8 <__udivdi3+0x518>
1002f014:	4005883a 	mov	r2,r8
1002f018:	0009883a 	mov	r4,zero
1002f01c:	003f5106 	br	1002ed64 <__udivdi3+0x184>
1002f020:	85a0983a 	sll	r16,r16,r22
1002f024:	3585c83a 	sub	r2,r6,r22
1002f028:	a0a2d83a 	srl	r17,r20,r2
1002f02c:	802ad43a 	srli	r21,r16,16
1002f030:	e084d83a 	srl	r2,fp,r2
1002f034:	a586983a 	sll	r3,r20,r22
1002f038:	8809883a 	mov	r4,r17
1002f03c:	a80b883a 	mov	r5,r21
1002f040:	1886b03a 	or	r3,r3,r2
1002f044:	d8c00115 	stw	r3,4(sp)
1002f048:	002233c0 	call	1002233c <__udivsi3>
1002f04c:	8809883a 	mov	r4,r17
1002f050:	a80b883a 	mov	r5,r21
1002f054:	d8800415 	stw	r2,16(sp)
1002f058:	00223440 	call	10022344 <__umodsi3>
1002f05c:	d9000117 	ldw	r4,4(sp)
1002f060:	d9400417 	ldw	r5,16(sp)
1002f064:	1004943a 	slli	r2,r2,16
1002f068:	85ffffcc 	andi	r23,r16,65535
1002f06c:	2006d43a 	srli	r3,r4,16
1002f070:	b963383a 	mul	r17,r23,r5
1002f074:	10c4b03a 	or	r2,r2,r3
1002f078:	1440042e 	bgeu	r2,r17,1002f08c <__udivdi3+0x4ac>
1002f07c:	297fffc4 	addi	r5,r5,-1
1002f080:	1405883a 	add	r2,r2,r16
1002f084:	d9400415 	stw	r5,16(sp)
1002f088:	1400442e 	bgeu	r2,r16,1002f19c <__udivdi3+0x5bc>
1002f08c:	1463c83a 	sub	r17,r2,r17
1002f090:	8809883a 	mov	r4,r17
1002f094:	a80b883a 	mov	r5,r21
1002f098:	002233c0 	call	1002233c <__udivsi3>
1002f09c:	8809883a 	mov	r4,r17
1002f0a0:	a80b883a 	mov	r5,r21
1002f0a4:	1029883a 	mov	r20,r2
1002f0a8:	00223440 	call	10022344 <__umodsi3>
1002f0ac:	d9400117 	ldw	r5,4(sp)
1002f0b0:	1004943a 	slli	r2,r2,16
1002f0b4:	bd09383a 	mul	r4,r23,r20
1002f0b8:	28ffffcc 	andi	r3,r5,65535
1002f0bc:	10c6b03a 	or	r3,r2,r3
1002f0c0:	1900062e 	bgeu	r3,r4,1002f0dc <__udivdi3+0x4fc>
1002f0c4:	1c07883a 	add	r3,r3,r16
1002f0c8:	a53fffc4 	addi	r20,r20,-1
1002f0cc:	1c000336 	bltu	r3,r16,1002f0dc <__udivdi3+0x4fc>
1002f0d0:	1900022e 	bgeu	r3,r4,1002f0dc <__udivdi3+0x4fc>
1002f0d4:	a53fffc4 	addi	r20,r20,-1
1002f0d8:	1c07883a 	add	r3,r3,r16
1002f0dc:	d9400417 	ldw	r5,16(sp)
1002f0e0:	e5b8983a 	sll	fp,fp,r22
1002f0e4:	1923c83a 	sub	r17,r3,r4
1002f0e8:	2804943a 	slli	r2,r5,16
1002f0ec:	a0a8b03a 	or	r20,r20,r2
1002f0f0:	dd000315 	stw	r20,12(sp)
1002f0f4:	003ee106 	br	1002ec7c <__udivdi3+0x9c>
1002f0f8:	2004943a 	slli	r2,r4,16
1002f0fc:	e5c8983a 	sll	r4,fp,r23
1002f100:	48ffffcc 	andi	r3,r9,65535
1002f104:	10c5883a 	add	r2,r2,r3
1002f108:	20bfc22e 	bgeu	r4,r2,1002f014 <__udivdi3+0x434>
1002f10c:	40bfffc4 	addi	r2,r8,-1
1002f110:	0009883a 	mov	r4,zero
1002f114:	003f1306 	br	1002ed64 <__udivdi3+0x184>
1002f118:	01400204 	movi	r5,8
1002f11c:	2805883a 	mov	r2,r5
1002f120:	003f0306 	br	1002ed30 <__udivdi3+0x150>
1002f124:	01400604 	movi	r5,24
1002f128:	2805883a 	mov	r2,r5
1002f12c:	003f0006 	br	1002ed30 <__udivdi3+0x150>
1002f130:	01400204 	movi	r5,8
1002f134:	2805883a 	mov	r2,r5
1002f138:	003ec206 	br	1002ec44 <__udivdi3+0x64>
1002f13c:	01400604 	movi	r5,24
1002f140:	2805883a 	mov	r2,r5
1002f144:	003ebf06 	br	1002ec44 <__udivdi3+0x64>
1002f148:	01400204 	movi	r5,8
1002f14c:	2805883a 	mov	r2,r5
1002f150:	003f1706 	br	1002edb0 <__udivdi3+0x1d0>
1002f154:	01400604 	movi	r5,24
1002f158:	2805883a 	mov	r2,r5
1002f15c:	003f1406 	br	1002edb0 <__udivdi3+0x1d0>
1002f160:	89ff962e 	bgeu	r17,r7,1002efbc <__udivdi3+0x3dc>
1002f164:	8d63883a 	add	r17,r17,r21
1002f168:	843fffc4 	addi	r16,r16,-1
1002f16c:	003f9306 	br	1002efbc <__udivdi3+0x3dc>
1002f170:	147f802e 	bgeu	r2,r17,1002ef74 <__udivdi3+0x394>
1002f174:	a53fffc4 	addi	r20,r20,-1
1002f178:	1545883a 	add	r2,r2,r21
1002f17c:	003f7d06 	br	1002ef74 <__udivdi3+0x394>
1002f180:	a53fffc4 	addi	r20,r20,-1
1002f184:	003ede06 	br	1002ed00 <__udivdi3+0x120>
1002f188:	b5bfffc4 	addi	r22,r22,-1
1002f18c:	1405883a 	add	r2,r2,r16
1002f190:	003f2806 	br	1002ee34 <__udivdi3+0x254>
1002f194:	a53fffc4 	addi	r20,r20,-1
1002f198:	003f3706 	br	1002ee78 <__udivdi3+0x298>
1002f19c:	147fbb2e 	bgeu	r2,r17,1002f08c <__udivdi3+0x4ac>
1002f1a0:	297fffc4 	addi	r5,r5,-1
1002f1a4:	1405883a 	add	r2,r2,r16
1002f1a8:	d9400415 	stw	r5,16(sp)
1002f1ac:	003fb706 	br	1002f08c <__udivdi3+0x4ac>
1002f1b0:	b5bfffc4 	addi	r22,r22,-1
1002f1b4:	1405883a 	add	r2,r2,r16
1002f1b8:	003ec006 	br	1002ecbc <__udivdi3+0xdc>

1002f1bc <__umoddi3>:
1002f1bc:	defff104 	addi	sp,sp,-60
1002f1c0:	dd800b15 	stw	r22,44(sp)
1002f1c4:	dd000915 	stw	r20,36(sp)
1002f1c8:	dc000515 	stw	r16,20(sp)
1002f1cc:	dfc00e15 	stw	ra,56(sp)
1002f1d0:	df000d15 	stw	fp,52(sp)
1002f1d4:	ddc00c15 	stw	r23,48(sp)
1002f1d8:	dd400a15 	stw	r21,40(sp)
1002f1dc:	dcc00815 	stw	r19,32(sp)
1002f1e0:	dc800715 	stw	r18,28(sp)
1002f1e4:	dc400615 	stw	r17,24(sp)
1002f1e8:	3021883a 	mov	r16,r6
1002f1ec:	202d883a 	mov	r22,r4
1002f1f0:	2829883a 	mov	r20,r5
1002f1f4:	38002b1e 	bne	r7,zero,1002f2a4 <__umoddi3+0xe8>
1002f1f8:	29805036 	bltu	r5,r6,1002f33c <__umoddi3+0x180>
1002f1fc:	30008a26 	beq	r6,zero,1002f428 <__umoddi3+0x26c>
1002f200:	00bfffd4 	movui	r2,65535
1002f204:	14008236 	bltu	r2,r16,1002f410 <__umoddi3+0x254>
1002f208:	00803fc4 	movi	r2,255
1002f20c:	14013636 	bltu	r2,r16,1002f6e8 <__umoddi3+0x52c>
1002f210:	000b883a 	mov	r5,zero
1002f214:	0005883a 	mov	r2,zero
1002f218:	8084d83a 	srl	r2,r16,r2
1002f21c:	01000034 	movhi	r4,0
1002f220:	2103fb04 	addi	r4,r4,4076
1002f224:	01800804 	movi	r6,32
1002f228:	1105883a 	add	r2,r2,r4
1002f22c:	10c00003 	ldbu	r3,0(r2)
1002f230:	28c7883a 	add	r3,r5,r3
1002f234:	30efc83a 	sub	r23,r6,r3
1002f238:	b800941e 	bne	r23,zero,1002f48c <__umoddi3+0x2d0>
1002f23c:	802ad43a 	srli	r21,r16,16
1002f240:	a423c83a 	sub	r17,r20,r16
1002f244:	0039883a 	mov	fp,zero
1002f248:	853fffcc 	andi	r20,r16,65535
1002f24c:	8809883a 	mov	r4,r17
1002f250:	a80b883a 	mov	r5,r21
1002f254:	002233c0 	call	1002233c <__udivsi3>
1002f258:	8809883a 	mov	r4,r17
1002f25c:	a80b883a 	mov	r5,r21
1002f260:	a0a3383a 	mul	r17,r20,r2
1002f264:	00223440 	call	10022344 <__umodsi3>
1002f268:	1004943a 	slli	r2,r2,16
1002f26c:	b006d43a 	srli	r3,r22,16
1002f270:	10c4b03a 	or	r2,r2,r3
1002f274:	1440032e 	bgeu	r2,r17,1002f284 <__umoddi3+0xc8>
1002f278:	1405883a 	add	r2,r2,r16
1002f27c:	14000136 	bltu	r2,r16,1002f284 <__umoddi3+0xc8>
1002f280:	14413536 	bltu	r2,r17,1002f758 <__umoddi3+0x59c>
1002f284:	1463c83a 	sub	r17,r2,r17
1002f288:	8809883a 	mov	r4,r17
1002f28c:	a80b883a 	mov	r5,r21
1002f290:	002233c0 	call	1002233c <__udivsi3>
1002f294:	8809883a 	mov	r4,r17
1002f298:	a0a3383a 	mul	r17,r20,r2
1002f29c:	a80b883a 	mov	r5,r21
1002f2a0:	00004d06 	br	1002f3d8 <__umoddi3+0x21c>
1002f2a4:	380d883a 	mov	r6,r7
1002f2a8:	29c0102e 	bgeu	r5,r7,1002f2ec <__umoddi3+0x130>
1002f2ac:	2011883a 	mov	r8,r4
1002f2b0:	2813883a 	mov	r9,r5
1002f2b4:	4005883a 	mov	r2,r8
1002f2b8:	4807883a 	mov	r3,r9
1002f2bc:	dfc00e17 	ldw	ra,56(sp)
1002f2c0:	df000d17 	ldw	fp,52(sp)
1002f2c4:	ddc00c17 	ldw	r23,48(sp)
1002f2c8:	dd800b17 	ldw	r22,44(sp)
1002f2cc:	dd400a17 	ldw	r21,40(sp)
1002f2d0:	dd000917 	ldw	r20,36(sp)
1002f2d4:	dcc00817 	ldw	r19,32(sp)
1002f2d8:	dc800717 	ldw	r18,28(sp)
1002f2dc:	dc400617 	ldw	r17,24(sp)
1002f2e0:	dc000517 	ldw	r16,20(sp)
1002f2e4:	dec00f04 	addi	sp,sp,60
1002f2e8:	f800283a 	ret
1002f2ec:	00bfffd4 	movui	r2,65535
1002f2f0:	11c05a36 	bltu	r2,r7,1002f45c <__umoddi3+0x2a0>
1002f2f4:	00803fc4 	movi	r2,255
1002f2f8:	11c0fe36 	bltu	r2,r7,1002f6f4 <__umoddi3+0x538>
1002f2fc:	000b883a 	mov	r5,zero
1002f300:	0005883a 	mov	r2,zero
1002f304:	3084d83a 	srl	r2,r6,r2
1002f308:	01000034 	movhi	r4,0
1002f30c:	2103fb04 	addi	r4,r4,4076
1002f310:	01c00804 	movi	r7,32
1002f314:	1105883a 	add	r2,r2,r4
1002f318:	10c00003 	ldbu	r3,0(r2)
1002f31c:	28c7883a 	add	r3,r5,r3
1002f320:	38ebc83a 	sub	r21,r7,r3
1002f324:	a800851e 	bne	r21,zero,1002f53c <__umoddi3+0x380>
1002f328:	35005236 	bltu	r6,r20,1002f474 <__umoddi3+0x2b8>
1002f32c:	b400512e 	bgeu	r22,r16,1002f474 <__umoddi3+0x2b8>
1002f330:	b011883a 	mov	r8,r22
1002f334:	a013883a 	mov	r9,r20
1002f338:	003fde06 	br	1002f2b4 <__umoddi3+0xf8>
1002f33c:	00bfffd4 	movui	r2,65535
1002f340:	11804036 	bltu	r2,r6,1002f444 <__umoddi3+0x288>
1002f344:	00803fc4 	movi	r2,255
1002f348:	1180ed36 	bltu	r2,r6,1002f700 <__umoddi3+0x544>
1002f34c:	000b883a 	mov	r5,zero
1002f350:	0005883a 	mov	r2,zero
1002f354:	8084d83a 	srl	r2,r16,r2
1002f358:	01000034 	movhi	r4,0
1002f35c:	2103fb04 	addi	r4,r4,4076
1002f360:	01800804 	movi	r6,32
1002f364:	1105883a 	add	r2,r2,r4
1002f368:	10c00003 	ldbu	r3,0(r2)
1002f36c:	28c7883a 	add	r3,r5,r3
1002f370:	30c7c83a 	sub	r3,r6,r3
1002f374:	1800bf1e 	bne	r3,zero,1002f674 <__umoddi3+0x4b8>
1002f378:	0039883a 	mov	fp,zero
1002f37c:	802ad43a 	srli	r21,r16,16
1002f380:	a009883a 	mov	r4,r20
1002f384:	85ffffcc 	andi	r23,r16,65535
1002f388:	a80b883a 	mov	r5,r21
1002f38c:	002233c0 	call	1002233c <__udivsi3>
1002f390:	a009883a 	mov	r4,r20
1002f394:	a80b883a 	mov	r5,r21
1002f398:	b8a3383a 	mul	r17,r23,r2
1002f39c:	00223440 	call	10022344 <__umodsi3>
1002f3a0:	1004943a 	slli	r2,r2,16
1002f3a4:	b006d43a 	srli	r3,r22,16
1002f3a8:	10c4b03a 	or	r2,r2,r3
1002f3ac:	1440032e 	bgeu	r2,r17,1002f3bc <__umoddi3+0x200>
1002f3b0:	1405883a 	add	r2,r2,r16
1002f3b4:	14000136 	bltu	r2,r16,1002f3bc <__umoddi3+0x200>
1002f3b8:	1440e536 	bltu	r2,r17,1002f750 <__umoddi3+0x594>
1002f3bc:	1463c83a 	sub	r17,r2,r17
1002f3c0:	8809883a 	mov	r4,r17
1002f3c4:	a80b883a 	mov	r5,r21
1002f3c8:	002233c0 	call	1002233c <__udivsi3>
1002f3cc:	8809883a 	mov	r4,r17
1002f3d0:	b8a3383a 	mul	r17,r23,r2
1002f3d4:	a80b883a 	mov	r5,r21
1002f3d8:	00223440 	call	10022344 <__umodsi3>
1002f3dc:	1004943a 	slli	r2,r2,16
1002f3e0:	b0ffffcc 	andi	r3,r22,65535
1002f3e4:	10c4b03a 	or	r2,r2,r3
1002f3e8:	1440042e 	bgeu	r2,r17,1002f3fc <__umoddi3+0x240>
1002f3ec:	1405883a 	add	r2,r2,r16
1002f3f0:	14000236 	bltu	r2,r16,1002f3fc <__umoddi3+0x240>
1002f3f4:	1440012e 	bgeu	r2,r17,1002f3fc <__umoddi3+0x240>
1002f3f8:	1405883a 	add	r2,r2,r16
1002f3fc:	1445c83a 	sub	r2,r2,r17
1002f400:	1724d83a 	srl	r18,r2,fp
1002f404:	0013883a 	mov	r9,zero
1002f408:	9011883a 	mov	r8,r18
1002f40c:	003fa906 	br	1002f2b4 <__umoddi3+0xf8>
1002f410:	00804034 	movhi	r2,256
1002f414:	10bfffc4 	addi	r2,r2,-1
1002f418:	1400b036 	bltu	r2,r16,1002f6dc <__umoddi3+0x520>
1002f41c:	01400404 	movi	r5,16
1002f420:	2805883a 	mov	r2,r5
1002f424:	003f7c06 	br	1002f218 <__umoddi3+0x5c>
1002f428:	01000044 	movi	r4,1
1002f42c:	000b883a 	mov	r5,zero
1002f430:	002233c0 	call	1002233c <__udivsi3>
1002f434:	1021883a 	mov	r16,r2
1002f438:	00bfffd4 	movui	r2,65535
1002f43c:	143ff436 	bltu	r2,r16,1002f410 <__umoddi3+0x254>
1002f440:	003f7106 	br	1002f208 <__umoddi3+0x4c>
1002f444:	00804034 	movhi	r2,256
1002f448:	10bfffc4 	addi	r2,r2,-1
1002f44c:	1180af36 	bltu	r2,r6,1002f70c <__umoddi3+0x550>
1002f450:	01400404 	movi	r5,16
1002f454:	2805883a 	mov	r2,r5
1002f458:	003fbe06 	br	1002f354 <__umoddi3+0x198>
1002f45c:	00804034 	movhi	r2,256
1002f460:	10bfffc4 	addi	r2,r2,-1
1002f464:	11c0ac36 	bltu	r2,r7,1002f718 <__umoddi3+0x55c>
1002f468:	01400404 	movi	r5,16
1002f46c:	2805883a 	mov	r2,r5
1002f470:	003fa406 	br	1002f304 <__umoddi3+0x148>
1002f474:	b409c83a 	sub	r4,r22,r16
1002f478:	b105803a 	cmpltu	r2,r22,r4
1002f47c:	a187c83a 	sub	r3,r20,r6
1002f480:	18a9c83a 	sub	r20,r3,r2
1002f484:	202d883a 	mov	r22,r4
1002f488:	003fa906 	br	1002f330 <__umoddi3+0x174>
1002f48c:	85e0983a 	sll	r16,r16,r23
1002f490:	35c5c83a 	sub	r2,r6,r23
1002f494:	a0a2d83a 	srl	r17,r20,r2
1002f498:	802ad43a 	srli	r21,r16,16
1002f49c:	b084d83a 	srl	r2,r22,r2
1002f4a0:	a5c6983a 	sll	r3,r20,r23
1002f4a4:	8809883a 	mov	r4,r17
1002f4a8:	a80b883a 	mov	r5,r21
1002f4ac:	1886b03a 	or	r3,r3,r2
1002f4b0:	d8c00115 	stw	r3,4(sp)
1002f4b4:	853fffcc 	andi	r20,r16,65535
1002f4b8:	002233c0 	call	1002233c <__udivsi3>
1002f4bc:	8809883a 	mov	r4,r17
1002f4c0:	a80b883a 	mov	r5,r21
1002f4c4:	a0a3383a 	mul	r17,r20,r2
1002f4c8:	00223440 	call	10022344 <__umodsi3>
1002f4cc:	d9000117 	ldw	r4,4(sp)
1002f4d0:	1004943a 	slli	r2,r2,16
1002f4d4:	b839883a 	mov	fp,r23
1002f4d8:	2006d43a 	srli	r3,r4,16
1002f4dc:	10c4b03a 	or	r2,r2,r3
1002f4e0:	1440022e 	bgeu	r2,r17,1002f4ec <__umoddi3+0x330>
1002f4e4:	1405883a 	add	r2,r2,r16
1002f4e8:	1400962e 	bgeu	r2,r16,1002f744 <__umoddi3+0x588>
1002f4ec:	1463c83a 	sub	r17,r2,r17
1002f4f0:	8809883a 	mov	r4,r17
1002f4f4:	a80b883a 	mov	r5,r21
1002f4f8:	002233c0 	call	1002233c <__udivsi3>
1002f4fc:	8809883a 	mov	r4,r17
1002f500:	a80b883a 	mov	r5,r21
1002f504:	a0a3383a 	mul	r17,r20,r2
1002f508:	00223440 	call	10022344 <__umodsi3>
1002f50c:	d9400117 	ldw	r5,4(sp)
1002f510:	1004943a 	slli	r2,r2,16
1002f514:	28ffffcc 	andi	r3,r5,65535
1002f518:	10c4b03a 	or	r2,r2,r3
1002f51c:	1440042e 	bgeu	r2,r17,1002f530 <__umoddi3+0x374>
1002f520:	1405883a 	add	r2,r2,r16
1002f524:	14000236 	bltu	r2,r16,1002f530 <__umoddi3+0x374>
1002f528:	1440012e 	bgeu	r2,r17,1002f530 <__umoddi3+0x374>
1002f52c:	1405883a 	add	r2,r2,r16
1002f530:	b5ec983a 	sll	r22,r22,r23
1002f534:	1463c83a 	sub	r17,r2,r17
1002f538:	003f4406 	br	1002f24c <__umoddi3+0x90>
1002f53c:	3d4fc83a 	sub	r7,r7,r21
1002f540:	3546983a 	sll	r3,r6,r21
1002f544:	81c4d83a 	srl	r2,r16,r7
1002f548:	a1e2d83a 	srl	r17,r20,r7
1002f54c:	a54c983a 	sll	r6,r20,r21
1002f550:	18aeb03a 	or	r23,r3,r2
1002f554:	b828d43a 	srli	r20,r23,16
1002f558:	b1c4d83a 	srl	r2,r22,r7
1002f55c:	8809883a 	mov	r4,r17
1002f560:	a00b883a 	mov	r5,r20
1002f564:	308cb03a 	or	r6,r6,r2
1002f568:	d9c00315 	stw	r7,12(sp)
1002f56c:	d9800215 	stw	r6,8(sp)
1002f570:	002233c0 	call	1002233c <__udivsi3>
1002f574:	8809883a 	mov	r4,r17
1002f578:	a00b883a 	mov	r5,r20
1002f57c:	1039883a 	mov	fp,r2
1002f580:	00223440 	call	10022344 <__umodsi3>
1002f584:	b8ffffcc 	andi	r3,r23,65535
1002f588:	d8c00415 	stw	r3,16(sp)
1002f58c:	d9000217 	ldw	r4,8(sp)
1002f590:	d9400417 	ldw	r5,16(sp)
1002f594:	1004943a 	slli	r2,r2,16
1002f598:	2006d43a 	srli	r3,r4,16
1002f59c:	8560983a 	sll	r16,r16,r21
1002f5a0:	2f23383a 	mul	r17,r5,fp
1002f5a4:	10c4b03a 	or	r2,r2,r3
1002f5a8:	dc000015 	stw	r16,0(sp)
1002f5ac:	b56c983a 	sll	r22,r22,r21
1002f5b0:	1440032e 	bgeu	r2,r17,1002f5c0 <__umoddi3+0x404>
1002f5b4:	15c5883a 	add	r2,r2,r23
1002f5b8:	e73fffc4 	addi	fp,fp,-1
1002f5bc:	15c05d2e 	bgeu	r2,r23,1002f734 <__umoddi3+0x578>
1002f5c0:	1463c83a 	sub	r17,r2,r17
1002f5c4:	8809883a 	mov	r4,r17
1002f5c8:	a00b883a 	mov	r5,r20
1002f5cc:	002233c0 	call	1002233c <__udivsi3>
1002f5d0:	8809883a 	mov	r4,r17
1002f5d4:	a00b883a 	mov	r5,r20
1002f5d8:	1021883a 	mov	r16,r2
1002f5dc:	00223440 	call	10022344 <__umodsi3>
1002f5e0:	d8c00417 	ldw	r3,16(sp)
1002f5e4:	d9000217 	ldw	r4,8(sp)
1002f5e8:	1004943a 	slli	r2,r2,16
1002f5ec:	1c23383a 	mul	r17,r3,r16
1002f5f0:	20ffffcc 	andi	r3,r4,65535
1002f5f4:	10ceb03a 	or	r7,r2,r3
1002f5f8:	3c40032e 	bgeu	r7,r17,1002f608 <__umoddi3+0x44c>
1002f5fc:	3dcf883a 	add	r7,r7,r23
1002f600:	843fffc4 	addi	r16,r16,-1
1002f604:	3dc0472e 	bgeu	r7,r23,1002f724 <__umoddi3+0x568>
1002f608:	e004943a 	slli	r2,fp,16
1002f60c:	d9400017 	ldw	r5,0(sp)
1002f610:	3c4fc83a 	sub	r7,r7,r17
1002f614:	8084b03a 	or	r2,r16,r2
1002f618:	28ffffcc 	andi	r3,r5,65535
1002f61c:	280cd43a 	srli	r6,r5,16
1002f620:	100ad43a 	srli	r5,r2,16
1002f624:	10bfffcc 	andi	r2,r2,65535
1002f628:	10d1383a 	mul	r8,r2,r3
1002f62c:	28c7383a 	mul	r3,r5,r3
1002f630:	1185383a 	mul	r2,r2,r6
1002f634:	4008d43a 	srli	r4,r8,16
1002f638:	298b383a 	mul	r5,r5,r6
1002f63c:	10c5883a 	add	r2,r2,r3
1002f640:	2089883a 	add	r4,r4,r2
1002f644:	20c0022e 	bgeu	r4,r3,1002f650 <__umoddi3+0x494>
1002f648:	00800074 	movhi	r2,1
1002f64c:	288b883a 	add	r5,r5,r2
1002f650:	2004d43a 	srli	r2,r4,16
1002f654:	2008943a 	slli	r4,r4,16
1002f658:	40ffffcc 	andi	r3,r8,65535
1002f65c:	288b883a 	add	r5,r5,r2
1002f660:	20c9883a 	add	r4,r4,r3
1002f664:	39400b36 	bltu	r7,r5,1002f694 <__umoddi3+0x4d8>
1002f668:	39403d26 	beq	r7,r5,1002f760 <__umoddi3+0x5a4>
1002f66c:	394bc83a 	sub	r5,r7,r5
1002f670:	00000f06 	br	1002f6b0 <__umoddi3+0x4f4>
1002f674:	30c5c83a 	sub	r2,r6,r3
1002f678:	1839883a 	mov	fp,r3
1002f67c:	b084d83a 	srl	r2,r22,r2
1002f680:	a0c6983a 	sll	r3,r20,r3
1002f684:	8720983a 	sll	r16,r16,fp
1002f688:	b72c983a 	sll	r22,r22,fp
1002f68c:	18a8b03a 	or	r20,r3,r2
1002f690:	003f3a06 	br	1002f37c <__umoddi3+0x1c0>
1002f694:	d8c00017 	ldw	r3,0(sp)
1002f698:	20c5c83a 	sub	r2,r4,r3
1002f69c:	2089803a 	cmpltu	r4,r4,r2
1002f6a0:	2dc7c83a 	sub	r3,r5,r23
1002f6a4:	1907c83a 	sub	r3,r3,r4
1002f6a8:	38cbc83a 	sub	r5,r7,r3
1002f6ac:	1009883a 	mov	r4,r2
1002f6b0:	b105c83a 	sub	r2,r22,r4
1002f6b4:	b087803a 	cmpltu	r3,r22,r2
1002f6b8:	28c7c83a 	sub	r3,r5,r3
1002f6bc:	d9400317 	ldw	r5,12(sp)
1002f6c0:	1544d83a 	srl	r2,r2,r21
1002f6c4:	1948983a 	sll	r4,r3,r5
1002f6c8:	1d46d83a 	srl	r3,r3,r21
1002f6cc:	20a4b03a 	or	r18,r4,r2
1002f6d0:	9011883a 	mov	r8,r18
1002f6d4:	1813883a 	mov	r9,r3
1002f6d8:	003ef606 	br	1002f2b4 <__umoddi3+0xf8>
1002f6dc:	01400604 	movi	r5,24
1002f6e0:	2805883a 	mov	r2,r5
1002f6e4:	003ecc06 	br	1002f218 <__umoddi3+0x5c>
1002f6e8:	01400204 	movi	r5,8
1002f6ec:	2805883a 	mov	r2,r5
1002f6f0:	003ec906 	br	1002f218 <__umoddi3+0x5c>
1002f6f4:	01400204 	movi	r5,8
1002f6f8:	2805883a 	mov	r2,r5
1002f6fc:	003f0106 	br	1002f304 <__umoddi3+0x148>
1002f700:	01400204 	movi	r5,8
1002f704:	2805883a 	mov	r2,r5
1002f708:	003f1206 	br	1002f354 <__umoddi3+0x198>
1002f70c:	01400604 	movi	r5,24
1002f710:	2805883a 	mov	r2,r5
1002f714:	003f0f06 	br	1002f354 <__umoddi3+0x198>
1002f718:	01400604 	movi	r5,24
1002f71c:	2805883a 	mov	r2,r5
1002f720:	003ef806 	br	1002f304 <__umoddi3+0x148>
1002f724:	3c7fb82e 	bgeu	r7,r17,1002f608 <__umoddi3+0x44c>
1002f728:	843fffc4 	addi	r16,r16,-1
1002f72c:	3dcf883a 	add	r7,r7,r23
1002f730:	003fb506 	br	1002f608 <__umoddi3+0x44c>
1002f734:	147fa22e 	bgeu	r2,r17,1002f5c0 <__umoddi3+0x404>
1002f738:	e73fffc4 	addi	fp,fp,-1
1002f73c:	15c5883a 	add	r2,r2,r23
1002f740:	003f9f06 	br	1002f5c0 <__umoddi3+0x404>
1002f744:	147f692e 	bgeu	r2,r17,1002f4ec <__umoddi3+0x330>
1002f748:	1405883a 	add	r2,r2,r16
1002f74c:	003f6706 	br	1002f4ec <__umoddi3+0x330>
1002f750:	1405883a 	add	r2,r2,r16
1002f754:	003f1906 	br	1002f3bc <__umoddi3+0x200>
1002f758:	1405883a 	add	r2,r2,r16
1002f75c:	003ec906 	br	1002f284 <__umoddi3+0xc8>
1002f760:	b13fcc36 	bltu	r22,r4,1002f694 <__umoddi3+0x4d8>
1002f764:	000b883a 	mov	r5,zero
1002f768:	003fd106 	br	1002f6b0 <__umoddi3+0x4f4>

1002f76c <__nesf2>:
1002f76c:	defff304 	addi	sp,sp,-52
1002f770:	dc400b15 	stw	r17,44(sp)
1002f774:	dc400204 	addi	r17,sp,8
1002f778:	dc000a15 	stw	r16,40(sp)
1002f77c:	d9000015 	stw	r4,0(sp)
1002f780:	d9400115 	stw	r5,4(sp)
1002f784:	d809883a 	mov	r4,sp
1002f788:	880b883a 	mov	r5,r17
1002f78c:	dc000604 	addi	r16,sp,24
1002f790:	dfc00c15 	stw	ra,48(sp)
1002f794:	0030b7c0 	call	10030b7c <__unpack_f>
1002f798:	d9000104 	addi	r4,sp,4
1002f79c:	800b883a 	mov	r5,r16
1002f7a0:	0030b7c0 	call	10030b7c <__unpack_f>
1002f7a4:	d8800217 	ldw	r2,8(sp)
1002f7a8:	00c00044 	movi	r3,1
1002f7ac:	180d883a 	mov	r6,r3
1002f7b0:	1880062e 	bgeu	r3,r2,1002f7cc <__nesf2+0x60>
1002f7b4:	d8800617 	ldw	r2,24(sp)
1002f7b8:	8809883a 	mov	r4,r17
1002f7bc:	800b883a 	mov	r5,r16
1002f7c0:	1880022e 	bgeu	r3,r2,1002f7cc <__nesf2+0x60>
1002f7c4:	0030c440 	call	10030c44 <__fpcmp_parts_f>
1002f7c8:	100d883a 	mov	r6,r2
1002f7cc:	3005883a 	mov	r2,r6
1002f7d0:	dfc00c17 	ldw	ra,48(sp)
1002f7d4:	dc400b17 	ldw	r17,44(sp)
1002f7d8:	dc000a17 	ldw	r16,40(sp)
1002f7dc:	dec00d04 	addi	sp,sp,52
1002f7e0:	f800283a 	ret

1002f7e4 <__gtsf2>:
1002f7e4:	defff304 	addi	sp,sp,-52
1002f7e8:	dc400b15 	stw	r17,44(sp)
1002f7ec:	dc400204 	addi	r17,sp,8
1002f7f0:	dc000a15 	stw	r16,40(sp)
1002f7f4:	d9000015 	stw	r4,0(sp)
1002f7f8:	d9400115 	stw	r5,4(sp)
1002f7fc:	d809883a 	mov	r4,sp
1002f800:	880b883a 	mov	r5,r17
1002f804:	dc000604 	addi	r16,sp,24
1002f808:	dfc00c15 	stw	ra,48(sp)
1002f80c:	0030b7c0 	call	10030b7c <__unpack_f>
1002f810:	d9000104 	addi	r4,sp,4
1002f814:	800b883a 	mov	r5,r16
1002f818:	0030b7c0 	call	10030b7c <__unpack_f>
1002f81c:	d8800217 	ldw	r2,8(sp)
1002f820:	00c00044 	movi	r3,1
1002f824:	01bfffc4 	movi	r6,-1
1002f828:	1880062e 	bgeu	r3,r2,1002f844 <__gtsf2+0x60>
1002f82c:	d8800617 	ldw	r2,24(sp)
1002f830:	8809883a 	mov	r4,r17
1002f834:	800b883a 	mov	r5,r16
1002f838:	1880022e 	bgeu	r3,r2,1002f844 <__gtsf2+0x60>
1002f83c:	0030c440 	call	10030c44 <__fpcmp_parts_f>
1002f840:	100d883a 	mov	r6,r2
1002f844:	3005883a 	mov	r2,r6
1002f848:	dfc00c17 	ldw	ra,48(sp)
1002f84c:	dc400b17 	ldw	r17,44(sp)
1002f850:	dc000a17 	ldw	r16,40(sp)
1002f854:	dec00d04 	addi	sp,sp,52
1002f858:	f800283a 	ret

1002f85c <__ltsf2>:
1002f85c:	defff304 	addi	sp,sp,-52
1002f860:	dc400b15 	stw	r17,44(sp)
1002f864:	dc400204 	addi	r17,sp,8
1002f868:	dc000a15 	stw	r16,40(sp)
1002f86c:	d9000015 	stw	r4,0(sp)
1002f870:	d9400115 	stw	r5,4(sp)
1002f874:	d809883a 	mov	r4,sp
1002f878:	880b883a 	mov	r5,r17
1002f87c:	dc000604 	addi	r16,sp,24
1002f880:	dfc00c15 	stw	ra,48(sp)
1002f884:	0030b7c0 	call	10030b7c <__unpack_f>
1002f888:	d9000104 	addi	r4,sp,4
1002f88c:	800b883a 	mov	r5,r16
1002f890:	0030b7c0 	call	10030b7c <__unpack_f>
1002f894:	d8800217 	ldw	r2,8(sp)
1002f898:	00c00044 	movi	r3,1
1002f89c:	180d883a 	mov	r6,r3
1002f8a0:	1880062e 	bgeu	r3,r2,1002f8bc <__ltsf2+0x60>
1002f8a4:	d8800617 	ldw	r2,24(sp)
1002f8a8:	8809883a 	mov	r4,r17
1002f8ac:	800b883a 	mov	r5,r16
1002f8b0:	1880022e 	bgeu	r3,r2,1002f8bc <__ltsf2+0x60>
1002f8b4:	0030c440 	call	10030c44 <__fpcmp_parts_f>
1002f8b8:	100d883a 	mov	r6,r2
1002f8bc:	3005883a 	mov	r2,r6
1002f8c0:	dfc00c17 	ldw	ra,48(sp)
1002f8c4:	dc400b17 	ldw	r17,44(sp)
1002f8c8:	dc000a17 	ldw	r16,40(sp)
1002f8cc:	dec00d04 	addi	sp,sp,52
1002f8d0:	f800283a 	ret

1002f8d4 <_fpadd_parts>:
1002f8d4:	defff804 	addi	sp,sp,-32
1002f8d8:	dcc00315 	stw	r19,12(sp)
1002f8dc:	2027883a 	mov	r19,r4
1002f8e0:	21000017 	ldw	r4,0(r4)
1002f8e4:	00c00044 	movi	r3,1
1002f8e8:	dd400515 	stw	r21,20(sp)
1002f8ec:	dd000415 	stw	r20,16(sp)
1002f8f0:	ddc00715 	stw	r23,28(sp)
1002f8f4:	dd800615 	stw	r22,24(sp)
1002f8f8:	dc800215 	stw	r18,8(sp)
1002f8fc:	dc400115 	stw	r17,4(sp)
1002f900:	dc000015 	stw	r16,0(sp)
1002f904:	282b883a 	mov	r21,r5
1002f908:	3029883a 	mov	r20,r6
1002f90c:	1900632e 	bgeu	r3,r4,1002fa9c <_fpadd_parts+0x1c8>
1002f910:	28800017 	ldw	r2,0(r5)
1002f914:	1880812e 	bgeu	r3,r2,1002fb1c <_fpadd_parts+0x248>
1002f918:	00c00104 	movi	r3,4
1002f91c:	20c0dc26 	beq	r4,r3,1002fc90 <_fpadd_parts+0x3bc>
1002f920:	10c07e26 	beq	r2,r3,1002fb1c <_fpadd_parts+0x248>
1002f924:	00c00084 	movi	r3,2
1002f928:	10c06726 	beq	r2,r3,1002fac8 <_fpadd_parts+0x1f4>
1002f92c:	20c07b26 	beq	r4,r3,1002fb1c <_fpadd_parts+0x248>
1002f930:	9dc00217 	ldw	r23,8(r19)
1002f934:	28c00217 	ldw	r3,8(r5)
1002f938:	9c400317 	ldw	r17,12(r19)
1002f93c:	2bc00317 	ldw	r15,12(r5)
1002f940:	b8cdc83a 	sub	r6,r23,r3
1002f944:	9c800417 	ldw	r18,16(r19)
1002f948:	2c000417 	ldw	r16,16(r5)
1002f94c:	3009883a 	mov	r4,r6
1002f950:	30009716 	blt	r6,zero,1002fbb0 <_fpadd_parts+0x2dc>
1002f954:	00800fc4 	movi	r2,63
1002f958:	11806b16 	blt	r2,r6,1002fb08 <_fpadd_parts+0x234>
1002f95c:	0100a40e 	bge	zero,r4,1002fbf0 <_fpadd_parts+0x31c>
1002f960:	35bff804 	addi	r22,r6,-32
1002f964:	b000bc16 	blt	r22,zero,1002fc58 <_fpadd_parts+0x384>
1002f968:	8596d83a 	srl	r11,r16,r22
1002f96c:	0019883a 	mov	r12,zero
1002f970:	0013883a 	mov	r9,zero
1002f974:	01000044 	movi	r4,1
1002f978:	0015883a 	mov	r10,zero
1002f97c:	b000be16 	blt	r22,zero,1002fc78 <_fpadd_parts+0x3a4>
1002f980:	2590983a 	sll	r8,r4,r22
1002f984:	000f883a 	mov	r7,zero
1002f988:	00bfffc4 	movi	r2,-1
1002f98c:	3889883a 	add	r4,r7,r2
1002f990:	408b883a 	add	r5,r8,r2
1002f994:	21cd803a 	cmpltu	r6,r4,r7
1002f998:	314b883a 	add	r5,r6,r5
1002f99c:	7904703a 	and	r2,r15,r4
1002f9a0:	8146703a 	and	r3,r16,r5
1002f9a4:	10c4b03a 	or	r2,r2,r3
1002f9a8:	10000226 	beq	r2,zero,1002f9b4 <_fpadd_parts+0xe0>
1002f9ac:	02400044 	movi	r9,1
1002f9b0:	0015883a 	mov	r10,zero
1002f9b4:	5a5eb03a 	or	r15,r11,r9
1002f9b8:	62a0b03a 	or	r16,r12,r10
1002f9bc:	99400117 	ldw	r5,4(r19)
1002f9c0:	a8800117 	ldw	r2,4(r21)
1002f9c4:	28806e26 	beq	r5,r2,1002fb80 <_fpadd_parts+0x2ac>
1002f9c8:	28006626 	beq	r5,zero,1002fb64 <_fpadd_parts+0x290>
1002f9cc:	7c45c83a 	sub	r2,r15,r17
1002f9d0:	7889803a 	cmpltu	r4,r15,r2
1002f9d4:	8487c83a 	sub	r3,r16,r18
1002f9d8:	1909c83a 	sub	r4,r3,r4
1002f9dc:	100d883a 	mov	r6,r2
1002f9e0:	200f883a 	mov	r7,r4
1002f9e4:	38007716 	blt	r7,zero,1002fbc4 <_fpadd_parts+0x2f0>
1002f9e8:	a5c00215 	stw	r23,8(r20)
1002f9ec:	a1c00415 	stw	r7,16(r20)
1002f9f0:	a0000115 	stw	zero,4(r20)
1002f9f4:	a1800315 	stw	r6,12(r20)
1002f9f8:	a2000317 	ldw	r8,12(r20)
1002f9fc:	a2400417 	ldw	r9,16(r20)
1002fa00:	00bfffc4 	movi	r2,-1
1002fa04:	408b883a 	add	r5,r8,r2
1002fa08:	2a09803a 	cmpltu	r4,r5,r8
1002fa0c:	488d883a 	add	r6,r9,r2
1002fa10:	01c40034 	movhi	r7,4096
1002fa14:	39ffffc4 	addi	r7,r7,-1
1002fa18:	218d883a 	add	r6,r4,r6
1002fa1c:	39801736 	bltu	r7,r6,1002fa7c <_fpadd_parts+0x1a8>
1002fa20:	31c06526 	beq	r6,r7,1002fbb8 <_fpadd_parts+0x2e4>
1002fa24:	a3000217 	ldw	r12,8(r20)
1002fa28:	4209883a 	add	r4,r8,r8
1002fa2c:	00bfffc4 	movi	r2,-1
1002fa30:	220f803a 	cmpltu	r7,r4,r8
1002fa34:	4a4b883a 	add	r5,r9,r9
1002fa38:	394f883a 	add	r7,r7,r5
1002fa3c:	2095883a 	add	r10,r4,r2
1002fa40:	3897883a 	add	r11,r7,r2
1002fa44:	510d803a 	cmpltu	r6,r10,r4
1002fa48:	6099883a 	add	r12,r12,r2
1002fa4c:	32d7883a 	add	r11,r6,r11
1002fa50:	00840034 	movhi	r2,4096
1002fa54:	10bfffc4 	addi	r2,r2,-1
1002fa58:	2011883a 	mov	r8,r4
1002fa5c:	3813883a 	mov	r9,r7
1002fa60:	a1000315 	stw	r4,12(r20)
1002fa64:	a1c00415 	stw	r7,16(r20)
1002fa68:	a3000215 	stw	r12,8(r20)
1002fa6c:	12c00336 	bltu	r2,r11,1002fa7c <_fpadd_parts+0x1a8>
1002fa70:	58bfed1e 	bne	r11,r2,1002fa28 <_fpadd_parts+0x154>
1002fa74:	00bfff84 	movi	r2,-2
1002fa78:	12bfeb2e 	bgeu	r2,r10,1002fa28 <_fpadd_parts+0x154>
1002fa7c:	a2800417 	ldw	r10,16(r20)
1002fa80:	008000c4 	movi	r2,3
1002fa84:	00c80034 	movhi	r3,8192
1002fa88:	18ffffc4 	addi	r3,r3,-1
1002fa8c:	a2400317 	ldw	r9,12(r20)
1002fa90:	a0800015 	stw	r2,0(r20)
1002fa94:	1a802336 	bltu	r3,r10,1002fb24 <_fpadd_parts+0x250>
1002fa98:	a027883a 	mov	r19,r20
1002fa9c:	9805883a 	mov	r2,r19
1002faa0:	ddc00717 	ldw	r23,28(sp)
1002faa4:	dd800617 	ldw	r22,24(sp)
1002faa8:	dd400517 	ldw	r21,20(sp)
1002faac:	dd000417 	ldw	r20,16(sp)
1002fab0:	dcc00317 	ldw	r19,12(sp)
1002fab4:	dc800217 	ldw	r18,8(sp)
1002fab8:	dc400117 	ldw	r17,4(sp)
1002fabc:	dc000017 	ldw	r16,0(sp)
1002fac0:	dec00804 	addi	sp,sp,32
1002fac4:	f800283a 	ret
1002fac8:	20fff41e 	bne	r4,r3,1002fa9c <_fpadd_parts+0x1c8>
1002facc:	31000015 	stw	r4,0(r6)
1002fad0:	98800117 	ldw	r2,4(r19)
1002fad4:	30800115 	stw	r2,4(r6)
1002fad8:	98c00217 	ldw	r3,8(r19)
1002fadc:	30c00215 	stw	r3,8(r6)
1002fae0:	98800317 	ldw	r2,12(r19)
1002fae4:	30800315 	stw	r2,12(r6)
1002fae8:	98c00417 	ldw	r3,16(r19)
1002faec:	30c00415 	stw	r3,16(r6)
1002faf0:	98800117 	ldw	r2,4(r19)
1002faf4:	28c00117 	ldw	r3,4(r5)
1002faf8:	3027883a 	mov	r19,r6
1002fafc:	10c4703a 	and	r2,r2,r3
1002fb00:	30800115 	stw	r2,4(r6)
1002fb04:	003fe506 	br	1002fa9c <_fpadd_parts+0x1c8>
1002fb08:	1dc02616 	blt	r3,r23,1002fba4 <_fpadd_parts+0x2d0>
1002fb0c:	0023883a 	mov	r17,zero
1002fb10:	182f883a 	mov	r23,r3
1002fb14:	0025883a 	mov	r18,zero
1002fb18:	003fa806 	br	1002f9bc <_fpadd_parts+0xe8>
1002fb1c:	a827883a 	mov	r19,r21
1002fb20:	003fde06 	br	1002fa9c <_fpadd_parts+0x1c8>
1002fb24:	01800044 	movi	r6,1
1002fb28:	500497fa 	slli	r2,r10,31
1002fb2c:	4808d07a 	srli	r4,r9,1
1002fb30:	518ad83a 	srl	r5,r10,r6
1002fb34:	a2000217 	ldw	r8,8(r20)
1002fb38:	1108b03a 	or	r4,r2,r4
1002fb3c:	0007883a 	mov	r3,zero
1002fb40:	4984703a 	and	r2,r9,r6
1002fb44:	208cb03a 	or	r6,r4,r2
1002fb48:	28ceb03a 	or	r7,r5,r3
1002fb4c:	42000044 	addi	r8,r8,1
1002fb50:	a027883a 	mov	r19,r20
1002fb54:	a1c00415 	stw	r7,16(r20)
1002fb58:	a2000215 	stw	r8,8(r20)
1002fb5c:	a1800315 	stw	r6,12(r20)
1002fb60:	003fce06 	br	1002fa9c <_fpadd_parts+0x1c8>
1002fb64:	8bc5c83a 	sub	r2,r17,r15
1002fb68:	8889803a 	cmpltu	r4,r17,r2
1002fb6c:	9407c83a 	sub	r3,r18,r16
1002fb70:	1909c83a 	sub	r4,r3,r4
1002fb74:	100d883a 	mov	r6,r2
1002fb78:	200f883a 	mov	r7,r4
1002fb7c:	003f9906 	br	1002f9e4 <_fpadd_parts+0x110>
1002fb80:	7c45883a 	add	r2,r15,r17
1002fb84:	13c9803a 	cmpltu	r4,r2,r15
1002fb88:	8487883a 	add	r3,r16,r18
1002fb8c:	20c9883a 	add	r4,r4,r3
1002fb90:	a1400115 	stw	r5,4(r20)
1002fb94:	a5c00215 	stw	r23,8(r20)
1002fb98:	a0800315 	stw	r2,12(r20)
1002fb9c:	a1000415 	stw	r4,16(r20)
1002fba0:	003fb606 	br	1002fa7c <_fpadd_parts+0x1a8>
1002fba4:	001f883a 	mov	r15,zero
1002fba8:	0021883a 	mov	r16,zero
1002fbac:	003f8306 	br	1002f9bc <_fpadd_parts+0xe8>
1002fbb0:	018dc83a 	sub	r6,zero,r6
1002fbb4:	003f6706 	br	1002f954 <_fpadd_parts+0x80>
1002fbb8:	00bfff84 	movi	r2,-2
1002fbbc:	117faf36 	bltu	r2,r5,1002fa7c <_fpadd_parts+0x1a8>
1002fbc0:	003f9806 	br	1002fa24 <_fpadd_parts+0x150>
1002fbc4:	0005883a 	mov	r2,zero
1002fbc8:	1189c83a 	sub	r4,r2,r6
1002fbcc:	1105803a 	cmpltu	r2,r2,r4
1002fbd0:	01cbc83a 	sub	r5,zero,r7
1002fbd4:	2885c83a 	sub	r2,r5,r2
1002fbd8:	01800044 	movi	r6,1
1002fbdc:	a1800115 	stw	r6,4(r20)
1002fbe0:	a5c00215 	stw	r23,8(r20)
1002fbe4:	a1000315 	stw	r4,12(r20)
1002fbe8:	a0800415 	stw	r2,16(r20)
1002fbec:	003f8206 	br	1002f9f8 <_fpadd_parts+0x124>
1002fbf0:	203f7226 	beq	r4,zero,1002f9bc <_fpadd_parts+0xe8>
1002fbf4:	35bff804 	addi	r22,r6,-32
1002fbf8:	b9af883a 	add	r23,r23,r6
1002fbfc:	b0003116 	blt	r22,zero,1002fcc4 <_fpadd_parts+0x3f0>
1002fc00:	959ad83a 	srl	r13,r18,r22
1002fc04:	001d883a 	mov	r14,zero
1002fc08:	000f883a 	mov	r7,zero
1002fc0c:	01000044 	movi	r4,1
1002fc10:	0011883a 	mov	r8,zero
1002fc14:	b0002516 	blt	r22,zero,1002fcac <_fpadd_parts+0x3d8>
1002fc18:	2594983a 	sll	r10,r4,r22
1002fc1c:	0013883a 	mov	r9,zero
1002fc20:	00bfffc4 	movi	r2,-1
1002fc24:	4889883a 	add	r4,r9,r2
1002fc28:	508b883a 	add	r5,r10,r2
1002fc2c:	224d803a 	cmpltu	r6,r4,r9
1002fc30:	314b883a 	add	r5,r6,r5
1002fc34:	8904703a 	and	r2,r17,r4
1002fc38:	9146703a 	and	r3,r18,r5
1002fc3c:	10c4b03a 	or	r2,r2,r3
1002fc40:	10000226 	beq	r2,zero,1002fc4c <_fpadd_parts+0x378>
1002fc44:	01c00044 	movi	r7,1
1002fc48:	0011883a 	mov	r8,zero
1002fc4c:	69e2b03a 	or	r17,r13,r7
1002fc50:	7224b03a 	or	r18,r14,r8
1002fc54:	003f5906 	br	1002f9bc <_fpadd_parts+0xe8>
1002fc58:	8407883a 	add	r3,r16,r16
1002fc5c:	008007c4 	movi	r2,31
1002fc60:	1185c83a 	sub	r2,r2,r6
1002fc64:	1886983a 	sll	r3,r3,r2
1002fc68:	7996d83a 	srl	r11,r15,r6
1002fc6c:	8198d83a 	srl	r12,r16,r6
1002fc70:	1ad6b03a 	or	r11,r3,r11
1002fc74:	003f3e06 	br	1002f970 <_fpadd_parts+0x9c>
1002fc78:	2006d07a 	srli	r3,r4,1
1002fc7c:	008007c4 	movi	r2,31
1002fc80:	1185c83a 	sub	r2,r2,r6
1002fc84:	1890d83a 	srl	r8,r3,r2
1002fc88:	218e983a 	sll	r7,r4,r6
1002fc8c:	003f3e06 	br	1002f988 <_fpadd_parts+0xb4>
1002fc90:	113f821e 	bne	r2,r4,1002fa9c <_fpadd_parts+0x1c8>
1002fc94:	28c00117 	ldw	r3,4(r5)
1002fc98:	98800117 	ldw	r2,4(r19)
1002fc9c:	10ff7f26 	beq	r2,r3,1002fa9c <_fpadd_parts+0x1c8>
1002fca0:	04c00034 	movhi	r19,0
1002fca4:	9cc3f604 	addi	r19,r19,4056
1002fca8:	003f7c06 	br	1002fa9c <_fpadd_parts+0x1c8>
1002fcac:	2006d07a 	srli	r3,r4,1
1002fcb0:	008007c4 	movi	r2,31
1002fcb4:	1185c83a 	sub	r2,r2,r6
1002fcb8:	1894d83a 	srl	r10,r3,r2
1002fcbc:	2192983a 	sll	r9,r4,r6
1002fcc0:	003fd706 	br	1002fc20 <_fpadd_parts+0x34c>
1002fcc4:	9487883a 	add	r3,r18,r18
1002fcc8:	008007c4 	movi	r2,31
1002fccc:	1185c83a 	sub	r2,r2,r6
1002fcd0:	1886983a 	sll	r3,r3,r2
1002fcd4:	899ad83a 	srl	r13,r17,r6
1002fcd8:	919cd83a 	srl	r14,r18,r6
1002fcdc:	1b5ab03a 	or	r13,r3,r13
1002fce0:	003fc906 	br	1002fc08 <_fpadd_parts+0x334>

1002fce4 <__subdf3>:
1002fce4:	deffea04 	addi	sp,sp,-88
1002fce8:	dcc01415 	stw	r19,80(sp)
1002fcec:	dcc00404 	addi	r19,sp,16
1002fcf0:	2011883a 	mov	r8,r4
1002fcf4:	2813883a 	mov	r9,r5
1002fcf8:	dc401315 	stw	r17,76(sp)
1002fcfc:	d809883a 	mov	r4,sp
1002fd00:	980b883a 	mov	r5,r19
1002fd04:	dc400904 	addi	r17,sp,36
1002fd08:	dfc01515 	stw	ra,84(sp)
1002fd0c:	da400115 	stw	r9,4(sp)
1002fd10:	d9c00315 	stw	r7,12(sp)
1002fd14:	da000015 	stw	r8,0(sp)
1002fd18:	d9800215 	stw	r6,8(sp)
1002fd1c:	003102c0 	call	1003102c <__unpack_d>
1002fd20:	d9000204 	addi	r4,sp,8
1002fd24:	880b883a 	mov	r5,r17
1002fd28:	003102c0 	call	1003102c <__unpack_d>
1002fd2c:	d8800a17 	ldw	r2,40(sp)
1002fd30:	880b883a 	mov	r5,r17
1002fd34:	9809883a 	mov	r4,r19
1002fd38:	d9800e04 	addi	r6,sp,56
1002fd3c:	1080005c 	xori	r2,r2,1
1002fd40:	d8800a15 	stw	r2,40(sp)
1002fd44:	002f8d40 	call	1002f8d4 <_fpadd_parts>
1002fd48:	1009883a 	mov	r4,r2
1002fd4c:	0030d180 	call	10030d18 <__pack_d>
1002fd50:	dfc01517 	ldw	ra,84(sp)
1002fd54:	dcc01417 	ldw	r19,80(sp)
1002fd58:	dc401317 	ldw	r17,76(sp)
1002fd5c:	dec01604 	addi	sp,sp,88
1002fd60:	f800283a 	ret

1002fd64 <__adddf3>:
1002fd64:	deffea04 	addi	sp,sp,-88
1002fd68:	dcc01415 	stw	r19,80(sp)
1002fd6c:	dcc00404 	addi	r19,sp,16
1002fd70:	2011883a 	mov	r8,r4
1002fd74:	2813883a 	mov	r9,r5
1002fd78:	dc401315 	stw	r17,76(sp)
1002fd7c:	d809883a 	mov	r4,sp
1002fd80:	980b883a 	mov	r5,r19
1002fd84:	dc400904 	addi	r17,sp,36
1002fd88:	dfc01515 	stw	ra,84(sp)
1002fd8c:	da400115 	stw	r9,4(sp)
1002fd90:	d9c00315 	stw	r7,12(sp)
1002fd94:	da000015 	stw	r8,0(sp)
1002fd98:	d9800215 	stw	r6,8(sp)
1002fd9c:	003102c0 	call	1003102c <__unpack_d>
1002fda0:	d9000204 	addi	r4,sp,8
1002fda4:	880b883a 	mov	r5,r17
1002fda8:	003102c0 	call	1003102c <__unpack_d>
1002fdac:	d9800e04 	addi	r6,sp,56
1002fdb0:	9809883a 	mov	r4,r19
1002fdb4:	880b883a 	mov	r5,r17
1002fdb8:	002f8d40 	call	1002f8d4 <_fpadd_parts>
1002fdbc:	1009883a 	mov	r4,r2
1002fdc0:	0030d180 	call	10030d18 <__pack_d>
1002fdc4:	dfc01517 	ldw	ra,84(sp)
1002fdc8:	dcc01417 	ldw	r19,80(sp)
1002fdcc:	dc401317 	ldw	r17,76(sp)
1002fdd0:	dec01604 	addi	sp,sp,88
1002fdd4:	f800283a 	ret

1002fdd8 <__muldf3>:
1002fdd8:	deffe004 	addi	sp,sp,-128
1002fddc:	dc401815 	stw	r17,96(sp)
1002fde0:	dc400404 	addi	r17,sp,16
1002fde4:	2011883a 	mov	r8,r4
1002fde8:	2813883a 	mov	r9,r5
1002fdec:	dc001715 	stw	r16,92(sp)
1002fdf0:	d809883a 	mov	r4,sp
1002fdf4:	880b883a 	mov	r5,r17
1002fdf8:	dc000904 	addi	r16,sp,36
1002fdfc:	dfc01f15 	stw	ra,124(sp)
1002fe00:	da400115 	stw	r9,4(sp)
1002fe04:	d9c00315 	stw	r7,12(sp)
1002fe08:	da000015 	stw	r8,0(sp)
1002fe0c:	d9800215 	stw	r6,8(sp)
1002fe10:	ddc01e15 	stw	r23,120(sp)
1002fe14:	dd801d15 	stw	r22,116(sp)
1002fe18:	dd401c15 	stw	r21,112(sp)
1002fe1c:	dd001b15 	stw	r20,108(sp)
1002fe20:	dcc01a15 	stw	r19,104(sp)
1002fe24:	dc801915 	stw	r18,100(sp)
1002fe28:	003102c0 	call	1003102c <__unpack_d>
1002fe2c:	d9000204 	addi	r4,sp,8
1002fe30:	800b883a 	mov	r5,r16
1002fe34:	003102c0 	call	1003102c <__unpack_d>
1002fe38:	d9000417 	ldw	r4,16(sp)
1002fe3c:	00800044 	movi	r2,1
1002fe40:	1100102e 	bgeu	r2,r4,1002fe84 <__muldf3+0xac>
1002fe44:	d8c00917 	ldw	r3,36(sp)
1002fe48:	10c0062e 	bgeu	r2,r3,1002fe64 <__muldf3+0x8c>
1002fe4c:	00800104 	movi	r2,4
1002fe50:	20800a26 	beq	r4,r2,1002fe7c <__muldf3+0xa4>
1002fe54:	1880cc26 	beq	r3,r2,10030188 <__muldf3+0x3b0>
1002fe58:	00800084 	movi	r2,2
1002fe5c:	20800926 	beq	r4,r2,1002fe84 <__muldf3+0xac>
1002fe60:	1880191e 	bne	r3,r2,1002fec8 <__muldf3+0xf0>
1002fe64:	d8c00a17 	ldw	r3,40(sp)
1002fe68:	d8800517 	ldw	r2,20(sp)
1002fe6c:	8009883a 	mov	r4,r16
1002fe70:	10c4c03a 	cmpne	r2,r2,r3
1002fe74:	d8800a15 	stw	r2,40(sp)
1002fe78:	00000706 	br	1002fe98 <__muldf3+0xc0>
1002fe7c:	00800084 	movi	r2,2
1002fe80:	1880c326 	beq	r3,r2,10030190 <__muldf3+0x3b8>
1002fe84:	d8800517 	ldw	r2,20(sp)
1002fe88:	d8c00a17 	ldw	r3,40(sp)
1002fe8c:	8809883a 	mov	r4,r17
1002fe90:	10c4c03a 	cmpne	r2,r2,r3
1002fe94:	d8800515 	stw	r2,20(sp)
1002fe98:	0030d180 	call	10030d18 <__pack_d>
1002fe9c:	dfc01f17 	ldw	ra,124(sp)
1002fea0:	ddc01e17 	ldw	r23,120(sp)
1002fea4:	dd801d17 	ldw	r22,116(sp)
1002fea8:	dd401c17 	ldw	r21,112(sp)
1002feac:	dd001b17 	ldw	r20,108(sp)
1002feb0:	dcc01a17 	ldw	r19,104(sp)
1002feb4:	dc801917 	ldw	r18,100(sp)
1002feb8:	dc401817 	ldw	r17,96(sp)
1002febc:	dc001717 	ldw	r16,92(sp)
1002fec0:	dec02004 	addi	sp,sp,128
1002fec4:	f800283a 	ret
1002fec8:	dd800717 	ldw	r22,28(sp)
1002fecc:	dc800c17 	ldw	r18,48(sp)
1002fed0:	002b883a 	mov	r21,zero
1002fed4:	0023883a 	mov	r17,zero
1002fed8:	a80b883a 	mov	r5,r21
1002fedc:	b00d883a 	mov	r6,r22
1002fee0:	880f883a 	mov	r7,r17
1002fee4:	ddc00817 	ldw	r23,32(sp)
1002fee8:	dcc00d17 	ldw	r19,52(sp)
1002feec:	9009883a 	mov	r4,r18
1002fef0:	002eaa40 	call	1002eaa4 <__muldi3>
1002fef4:	001b883a 	mov	r13,zero
1002fef8:	680f883a 	mov	r7,r13
1002fefc:	b009883a 	mov	r4,r22
1002ff00:	000b883a 	mov	r5,zero
1002ff04:	980d883a 	mov	r6,r19
1002ff08:	b82d883a 	mov	r22,r23
1002ff0c:	002f883a 	mov	r23,zero
1002ff10:	db401615 	stw	r13,88(sp)
1002ff14:	d8801315 	stw	r2,76(sp)
1002ff18:	d8c01415 	stw	r3,80(sp)
1002ff1c:	dcc01515 	stw	r19,84(sp)
1002ff20:	002eaa40 	call	1002eaa4 <__muldi3>
1002ff24:	b00d883a 	mov	r6,r22
1002ff28:	000b883a 	mov	r5,zero
1002ff2c:	9009883a 	mov	r4,r18
1002ff30:	b80f883a 	mov	r7,r23
1002ff34:	1021883a 	mov	r16,r2
1002ff38:	1823883a 	mov	r17,r3
1002ff3c:	002eaa40 	call	1002eaa4 <__muldi3>
1002ff40:	8085883a 	add	r2,r16,r2
1002ff44:	140d803a 	cmpltu	r6,r2,r16
1002ff48:	88c7883a 	add	r3,r17,r3
1002ff4c:	30cd883a 	add	r6,r6,r3
1002ff50:	1029883a 	mov	r20,r2
1002ff54:	302b883a 	mov	r21,r6
1002ff58:	da801317 	ldw	r10,76(sp)
1002ff5c:	dac01417 	ldw	r11,80(sp)
1002ff60:	db001517 	ldw	r12,84(sp)
1002ff64:	db401617 	ldw	r13,88(sp)
1002ff68:	3440612e 	bgeu	r6,r17,100300f0 <__muldf3+0x318>
1002ff6c:	0009883a 	mov	r4,zero
1002ff70:	5105883a 	add	r2,r10,r4
1002ff74:	128d803a 	cmpltu	r6,r2,r10
1002ff78:	5d07883a 	add	r3,r11,r20
1002ff7c:	30cd883a 	add	r6,r6,r3
1002ff80:	0021883a 	mov	r16,zero
1002ff84:	04400044 	movi	r17,1
1002ff88:	1025883a 	mov	r18,r2
1002ff8c:	3027883a 	mov	r19,r6
1002ff90:	32c06236 	bltu	r6,r11,1003011c <__muldf3+0x344>
1002ff94:	59807a26 	beq	r11,r6,10030180 <__muldf3+0x3a8>
1002ff98:	680b883a 	mov	r5,r13
1002ff9c:	b80f883a 	mov	r7,r23
1002ffa0:	6009883a 	mov	r4,r12
1002ffa4:	b00d883a 	mov	r6,r22
1002ffa8:	002eaa40 	call	1002eaa4 <__muldi3>
1002ffac:	1009883a 	mov	r4,r2
1002ffb0:	000f883a 	mov	r7,zero
1002ffb4:	1545883a 	add	r2,r2,r21
1002ffb8:	1111803a 	cmpltu	r8,r2,r4
1002ffbc:	19c7883a 	add	r3,r3,r7
1002ffc0:	40c7883a 	add	r3,r8,r3
1002ffc4:	88cb883a 	add	r5,r17,r3
1002ffc8:	d8c00617 	ldw	r3,24(sp)
1002ffcc:	8089883a 	add	r4,r16,r2
1002ffd0:	d8800b17 	ldw	r2,44(sp)
1002ffd4:	18c00104 	addi	r3,r3,4
1002ffd8:	240d803a 	cmpltu	r6,r4,r16
1002ffdc:	10c7883a 	add	r3,r2,r3
1002ffe0:	2013883a 	mov	r9,r4
1002ffe4:	d8800a17 	ldw	r2,40(sp)
1002ffe8:	d9000517 	ldw	r4,20(sp)
1002ffec:	314d883a 	add	r6,r6,r5
1002fff0:	3015883a 	mov	r10,r6
1002fff4:	2088c03a 	cmpne	r4,r4,r2
1002fff8:	00880034 	movhi	r2,8192
1002fffc:	10bfffc4 	addi	r2,r2,-1
10030000:	d9000f15 	stw	r4,60(sp)
10030004:	d8c01015 	stw	r3,64(sp)
10030008:	1180162e 	bgeu	r2,r6,10030064 <__muldf3+0x28c>
1003000c:	1811883a 	mov	r8,r3
10030010:	101f883a 	mov	r15,r2
10030014:	980497fa 	slli	r2,r19,31
10030018:	9016d07a 	srli	r11,r18,1
1003001c:	500697fa 	slli	r3,r10,31
10030020:	480cd07a 	srli	r6,r9,1
10030024:	500ed07a 	srli	r7,r10,1
10030028:	12d6b03a 	or	r11,r2,r11
1003002c:	00800044 	movi	r2,1
10030030:	198cb03a 	or	r6,r3,r6
10030034:	4888703a 	and	r4,r9,r2
10030038:	9818d07a 	srli	r12,r19,1
1003003c:	001b883a 	mov	r13,zero
10030040:	03a00034 	movhi	r14,32768
10030044:	3013883a 	mov	r9,r6
10030048:	3815883a 	mov	r10,r7
1003004c:	4091883a 	add	r8,r8,r2
10030050:	20000226 	beq	r4,zero,1003005c <__muldf3+0x284>
10030054:	5b64b03a 	or	r18,r11,r13
10030058:	63a6b03a 	or	r19,r12,r14
1003005c:	7abfed36 	bltu	r15,r10,10030014 <__muldf3+0x23c>
10030060:	da001015 	stw	r8,64(sp)
10030064:	00840034 	movhi	r2,4096
10030068:	10bfffc4 	addi	r2,r2,-1
1003006c:	12801436 	bltu	r2,r10,100300c0 <__muldf3+0x2e8>
10030070:	da001017 	ldw	r8,64(sp)
10030074:	101f883a 	mov	r15,r2
10030078:	4a45883a 	add	r2,r9,r9
1003007c:	124d803a 	cmpltu	r6,r2,r9
10030080:	5287883a 	add	r3,r10,r10
10030084:	9497883a 	add	r11,r18,r18
10030088:	5c8f803a 	cmpltu	r7,r11,r18
1003008c:	9cd9883a 	add	r12,r19,r19
10030090:	01000044 	movi	r4,1
10030094:	30cd883a 	add	r6,r6,r3
10030098:	3b0f883a 	add	r7,r7,r12
1003009c:	423fffc4 	addi	r8,r8,-1
100300a0:	1013883a 	mov	r9,r2
100300a4:	3015883a 	mov	r10,r6
100300a8:	111ab03a 	or	r13,r2,r4
100300ac:	98003016 	blt	r19,zero,10030170 <__muldf3+0x398>
100300b0:	5825883a 	mov	r18,r11
100300b4:	3827883a 	mov	r19,r7
100300b8:	7abfef2e 	bgeu	r15,r10,10030078 <__muldf3+0x2a0>
100300bc:	da001015 	stw	r8,64(sp)
100300c0:	00803fc4 	movi	r2,255
100300c4:	488e703a 	and	r7,r9,r2
100300c8:	00802004 	movi	r2,128
100300cc:	0007883a 	mov	r3,zero
100300d0:	0011883a 	mov	r8,zero
100300d4:	38801826 	beq	r7,r2,10030138 <__muldf3+0x360>
100300d8:	008000c4 	movi	r2,3
100300dc:	d9000e04 	addi	r4,sp,56
100300e0:	da801215 	stw	r10,72(sp)
100300e4:	d8800e15 	stw	r2,56(sp)
100300e8:	da401115 	stw	r9,68(sp)
100300ec:	003f6a06 	br	1002fe98 <__muldf3+0xc0>
100300f0:	89802126 	beq	r17,r6,10030178 <__muldf3+0x3a0>
100300f4:	0009883a 	mov	r4,zero
100300f8:	5105883a 	add	r2,r10,r4
100300fc:	128d803a 	cmpltu	r6,r2,r10
10030100:	5d07883a 	add	r3,r11,r20
10030104:	30cd883a 	add	r6,r6,r3
10030108:	0021883a 	mov	r16,zero
1003010c:	0023883a 	mov	r17,zero
10030110:	1025883a 	mov	r18,r2
10030114:	3027883a 	mov	r19,r6
10030118:	32ff9e2e 	bgeu	r6,r11,1002ff94 <__muldf3+0x1bc>
1003011c:	00800044 	movi	r2,1
10030120:	8089883a 	add	r4,r16,r2
10030124:	240d803a 	cmpltu	r6,r4,r16
10030128:	344d883a 	add	r6,r6,r17
1003012c:	2021883a 	mov	r16,r4
10030130:	3023883a 	mov	r17,r6
10030134:	003f9806 	br	1002ff98 <__muldf3+0x1c0>
10030138:	403fe71e 	bne	r8,zero,100300d8 <__muldf3+0x300>
1003013c:	01004004 	movi	r4,256
10030140:	4904703a 	and	r2,r9,r4
10030144:	10c4b03a 	or	r2,r2,r3
10030148:	103fe31e 	bne	r2,zero,100300d8 <__muldf3+0x300>
1003014c:	94c4b03a 	or	r2,r18,r19
10030150:	103fe126 	beq	r2,zero,100300d8 <__muldf3+0x300>
10030154:	49c5883a 	add	r2,r9,r7
10030158:	1251803a 	cmpltu	r8,r2,r9
1003015c:	4291883a 	add	r8,r8,r10
10030160:	013fc004 	movi	r4,-256
10030164:	1112703a 	and	r9,r2,r4
10030168:	4015883a 	mov	r10,r8
1003016c:	003fda06 	br	100300d8 <__muldf3+0x300>
10030170:	6813883a 	mov	r9,r13
10030174:	003fce06 	br	100300b0 <__muldf3+0x2d8>
10030178:	143f7c36 	bltu	r2,r16,1002ff6c <__muldf3+0x194>
1003017c:	003fdd06 	br	100300f4 <__muldf3+0x31c>
10030180:	12bf852e 	bgeu	r2,r10,1002ff98 <__muldf3+0x1c0>
10030184:	003fe506 	br	1003011c <__muldf3+0x344>
10030188:	00800084 	movi	r2,2
1003018c:	20bf351e 	bne	r4,r2,1002fe64 <__muldf3+0x8c>
10030190:	01000034 	movhi	r4,0
10030194:	2103f604 	addi	r4,r4,4056
10030198:	003f3f06 	br	1002fe98 <__muldf3+0xc0>

1003019c <__divdf3>:
1003019c:	deffed04 	addi	sp,sp,-76
100301a0:	dcc01115 	stw	r19,68(sp)
100301a4:	dcc00404 	addi	r19,sp,16
100301a8:	2011883a 	mov	r8,r4
100301ac:	2813883a 	mov	r9,r5
100301b0:	dc000e15 	stw	r16,56(sp)
100301b4:	d809883a 	mov	r4,sp
100301b8:	980b883a 	mov	r5,r19
100301bc:	dc000904 	addi	r16,sp,36
100301c0:	dfc01215 	stw	ra,72(sp)
100301c4:	da400115 	stw	r9,4(sp)
100301c8:	d9c00315 	stw	r7,12(sp)
100301cc:	da000015 	stw	r8,0(sp)
100301d0:	d9800215 	stw	r6,8(sp)
100301d4:	dc801015 	stw	r18,64(sp)
100301d8:	dc400f15 	stw	r17,60(sp)
100301dc:	003102c0 	call	1003102c <__unpack_d>
100301e0:	d9000204 	addi	r4,sp,8
100301e4:	800b883a 	mov	r5,r16
100301e8:	003102c0 	call	1003102c <__unpack_d>
100301ec:	d9000417 	ldw	r4,16(sp)
100301f0:	00800044 	movi	r2,1
100301f4:	11000b2e 	bgeu	r2,r4,10030224 <__divdf3+0x88>
100301f8:	d9400917 	ldw	r5,36(sp)
100301fc:	1140762e 	bgeu	r2,r5,100303d8 <__divdf3+0x23c>
10030200:	d8800517 	ldw	r2,20(sp)
10030204:	d8c00a17 	ldw	r3,40(sp)
10030208:	01800104 	movi	r6,4
1003020c:	10c4f03a 	xor	r2,r2,r3
10030210:	d8800515 	stw	r2,20(sp)
10030214:	21800226 	beq	r4,r6,10030220 <__divdf3+0x84>
10030218:	00800084 	movi	r2,2
1003021c:	2080141e 	bne	r4,r2,10030270 <__divdf3+0xd4>
10030220:	29000926 	beq	r5,r4,10030248 <__divdf3+0xac>
10030224:	9809883a 	mov	r4,r19
10030228:	0030d180 	call	10030d18 <__pack_d>
1003022c:	dfc01217 	ldw	ra,72(sp)
10030230:	dcc01117 	ldw	r19,68(sp)
10030234:	dc801017 	ldw	r18,64(sp)
10030238:	dc400f17 	ldw	r17,60(sp)
1003023c:	dc000e17 	ldw	r16,56(sp)
10030240:	dec01304 	addi	sp,sp,76
10030244:	f800283a 	ret
10030248:	01000034 	movhi	r4,0
1003024c:	2103f604 	addi	r4,r4,4056
10030250:	0030d180 	call	10030d18 <__pack_d>
10030254:	dfc01217 	ldw	ra,72(sp)
10030258:	dcc01117 	ldw	r19,68(sp)
1003025c:	dc801017 	ldw	r18,64(sp)
10030260:	dc400f17 	ldw	r17,60(sp)
10030264:	dc000e17 	ldw	r16,56(sp)
10030268:	dec01304 	addi	sp,sp,76
1003026c:	f800283a 	ret
10030270:	29805b26 	beq	r5,r6,100303e0 <__divdf3+0x244>
10030274:	28802d26 	beq	r5,r2,1003032c <__divdf3+0x190>
10030278:	d8c00617 	ldw	r3,24(sp)
1003027c:	d8800b17 	ldw	r2,44(sp)
10030280:	d9c00817 	ldw	r7,32(sp)
10030284:	dc400d17 	ldw	r17,52(sp)
10030288:	188bc83a 	sub	r5,r3,r2
1003028c:	d9800717 	ldw	r6,28(sp)
10030290:	dc000c17 	ldw	r16,48(sp)
10030294:	d9400615 	stw	r5,24(sp)
10030298:	3c403836 	bltu	r7,r17,1003037c <__divdf3+0x1e0>
1003029c:	89c03626 	beq	r17,r7,10030378 <__divdf3+0x1dc>
100302a0:	0015883a 	mov	r10,zero
100302a4:	001d883a 	mov	r14,zero
100302a8:	02c40034 	movhi	r11,4096
100302ac:	001f883a 	mov	r15,zero
100302b0:	003f883a 	mov	ra,zero
100302b4:	04800f44 	movi	r18,61
100302b8:	00000f06 	br	100302f8 <__divdf3+0x15c>
100302bc:	601d883a 	mov	r14,r12
100302c0:	681f883a 	mov	r15,r13
100302c4:	400d883a 	mov	r6,r8
100302c8:	100f883a 	mov	r7,r2
100302cc:	3191883a 	add	r8,r6,r6
100302d0:	5808d07a 	srli	r4,r11,1
100302d4:	4185803a 	cmpltu	r2,r8,r6
100302d8:	39d3883a 	add	r9,r7,r7
100302dc:	28c6b03a 	or	r3,r5,r3
100302e0:	1245883a 	add	r2,r2,r9
100302e4:	1815883a 	mov	r10,r3
100302e8:	2017883a 	mov	r11,r4
100302ec:	400d883a 	mov	r6,r8
100302f0:	100f883a 	mov	r7,r2
100302f4:	fc801726 	beq	ra,r18,10030354 <__divdf3+0x1b8>
100302f8:	580a97fa 	slli	r5,r11,31
100302fc:	5006d07a 	srli	r3,r10,1
10030300:	ffc00044 	addi	ra,ra,1
10030304:	3c7ff136 	bltu	r7,r17,100302cc <__divdf3+0x130>
10030308:	3411c83a 	sub	r8,r6,r16
1003030c:	3205803a 	cmpltu	r2,r6,r8
10030310:	3c53c83a 	sub	r9,r7,r17
10030314:	7298b03a 	or	r12,r14,r10
10030318:	7adab03a 	or	r13,r15,r11
1003031c:	4885c83a 	sub	r2,r9,r2
10030320:	89ffe61e 	bne	r17,r7,100302bc <__divdf3+0x120>
10030324:	343fe936 	bltu	r6,r16,100302cc <__divdf3+0x130>
10030328:	003fe406 	br	100302bc <__divdf3+0x120>
1003032c:	9809883a 	mov	r4,r19
10030330:	d9800415 	stw	r6,16(sp)
10030334:	0030d180 	call	10030d18 <__pack_d>
10030338:	dfc01217 	ldw	ra,72(sp)
1003033c:	dcc01117 	ldw	r19,68(sp)
10030340:	dc801017 	ldw	r18,64(sp)
10030344:	dc400f17 	ldw	r17,60(sp)
10030348:	dc000e17 	ldw	r16,56(sp)
1003034c:	dec01304 	addi	sp,sp,76
10030350:	f800283a 	ret
10030354:	00803fc4 	movi	r2,255
10030358:	7090703a 	and	r8,r14,r2
1003035c:	00802004 	movi	r2,128
10030360:	0007883a 	mov	r3,zero
10030364:	0013883a 	mov	r9,zero
10030368:	40800d26 	beq	r8,r2,100303a0 <__divdf3+0x204>
1003036c:	dbc00815 	stw	r15,32(sp)
10030370:	db800715 	stw	r14,28(sp)
10030374:	003fab06 	br	10030224 <__divdf3+0x88>
10030378:	343fc92e 	bgeu	r6,r16,100302a0 <__divdf3+0x104>
1003037c:	3185883a 	add	r2,r6,r6
10030380:	1189803a 	cmpltu	r4,r2,r6
10030384:	39c7883a 	add	r3,r7,r7
10030388:	20c9883a 	add	r4,r4,r3
1003038c:	297fffc4 	addi	r5,r5,-1
10030390:	100d883a 	mov	r6,r2
10030394:	200f883a 	mov	r7,r4
10030398:	d9400615 	stw	r5,24(sp)
1003039c:	003fc006 	br	100302a0 <__divdf3+0x104>
100303a0:	483ff21e 	bne	r9,zero,1003036c <__divdf3+0x1d0>
100303a4:	01004004 	movi	r4,256
100303a8:	7104703a 	and	r2,r14,r4
100303ac:	10c4b03a 	or	r2,r2,r3
100303b0:	103fee1e 	bne	r2,zero,1003036c <__divdf3+0x1d0>
100303b4:	31c4b03a 	or	r2,r6,r7
100303b8:	103fec26 	beq	r2,zero,1003036c <__divdf3+0x1d0>
100303bc:	7205883a 	add	r2,r14,r8
100303c0:	1391803a 	cmpltu	r8,r2,r14
100303c4:	43d1883a 	add	r8,r8,r15
100303c8:	013fc004 	movi	r4,-256
100303cc:	111c703a 	and	r14,r2,r4
100303d0:	401f883a 	mov	r15,r8
100303d4:	003fe506 	br	1003036c <__divdf3+0x1d0>
100303d8:	8009883a 	mov	r4,r16
100303dc:	003f9206 	br	10030228 <__divdf3+0x8c>
100303e0:	9809883a 	mov	r4,r19
100303e4:	d8000715 	stw	zero,28(sp)
100303e8:	d8000815 	stw	zero,32(sp)
100303ec:	d8000615 	stw	zero,24(sp)
100303f0:	003f8d06 	br	10030228 <__divdf3+0x8c>

100303f4 <__eqdf2>:
100303f4:	deffef04 	addi	sp,sp,-68
100303f8:	dc400f15 	stw	r17,60(sp)
100303fc:	dc400404 	addi	r17,sp,16
10030400:	2005883a 	mov	r2,r4
10030404:	2807883a 	mov	r3,r5
10030408:	dc000e15 	stw	r16,56(sp)
1003040c:	d809883a 	mov	r4,sp
10030410:	880b883a 	mov	r5,r17
10030414:	dc000904 	addi	r16,sp,36
10030418:	d8c00115 	stw	r3,4(sp)
1003041c:	d8800015 	stw	r2,0(sp)
10030420:	d9800215 	stw	r6,8(sp)
10030424:	dfc01015 	stw	ra,64(sp)
10030428:	d9c00315 	stw	r7,12(sp)
1003042c:	003102c0 	call	1003102c <__unpack_d>
10030430:	d9000204 	addi	r4,sp,8
10030434:	800b883a 	mov	r5,r16
10030438:	003102c0 	call	1003102c <__unpack_d>
1003043c:	d8800417 	ldw	r2,16(sp)
10030440:	00c00044 	movi	r3,1
10030444:	180d883a 	mov	r6,r3
10030448:	1880062e 	bgeu	r3,r2,10030464 <__eqdf2+0x70>
1003044c:	d8800917 	ldw	r2,36(sp)
10030450:	8809883a 	mov	r4,r17
10030454:	800b883a 	mov	r5,r16
10030458:	1880022e 	bgeu	r3,r2,10030464 <__eqdf2+0x70>
1003045c:	00311640 	call	10031164 <__fpcmp_parts_d>
10030460:	100d883a 	mov	r6,r2
10030464:	3005883a 	mov	r2,r6
10030468:	dfc01017 	ldw	ra,64(sp)
1003046c:	dc400f17 	ldw	r17,60(sp)
10030470:	dc000e17 	ldw	r16,56(sp)
10030474:	dec01104 	addi	sp,sp,68
10030478:	f800283a 	ret

1003047c <__nedf2>:
1003047c:	deffef04 	addi	sp,sp,-68
10030480:	dc400f15 	stw	r17,60(sp)
10030484:	dc400404 	addi	r17,sp,16
10030488:	2005883a 	mov	r2,r4
1003048c:	2807883a 	mov	r3,r5
10030490:	dc000e15 	stw	r16,56(sp)
10030494:	d809883a 	mov	r4,sp
10030498:	880b883a 	mov	r5,r17
1003049c:	dc000904 	addi	r16,sp,36
100304a0:	d8c00115 	stw	r3,4(sp)
100304a4:	d8800015 	stw	r2,0(sp)
100304a8:	d9800215 	stw	r6,8(sp)
100304ac:	dfc01015 	stw	ra,64(sp)
100304b0:	d9c00315 	stw	r7,12(sp)
100304b4:	003102c0 	call	1003102c <__unpack_d>
100304b8:	d9000204 	addi	r4,sp,8
100304bc:	800b883a 	mov	r5,r16
100304c0:	003102c0 	call	1003102c <__unpack_d>
100304c4:	d8800417 	ldw	r2,16(sp)
100304c8:	00c00044 	movi	r3,1
100304cc:	180d883a 	mov	r6,r3
100304d0:	1880062e 	bgeu	r3,r2,100304ec <__nedf2+0x70>
100304d4:	d8800917 	ldw	r2,36(sp)
100304d8:	8809883a 	mov	r4,r17
100304dc:	800b883a 	mov	r5,r16
100304e0:	1880022e 	bgeu	r3,r2,100304ec <__nedf2+0x70>
100304e4:	00311640 	call	10031164 <__fpcmp_parts_d>
100304e8:	100d883a 	mov	r6,r2
100304ec:	3005883a 	mov	r2,r6
100304f0:	dfc01017 	ldw	ra,64(sp)
100304f4:	dc400f17 	ldw	r17,60(sp)
100304f8:	dc000e17 	ldw	r16,56(sp)
100304fc:	dec01104 	addi	sp,sp,68
10030500:	f800283a 	ret

10030504 <__gtdf2>:
10030504:	deffef04 	addi	sp,sp,-68
10030508:	dc400f15 	stw	r17,60(sp)
1003050c:	dc400404 	addi	r17,sp,16
10030510:	2005883a 	mov	r2,r4
10030514:	2807883a 	mov	r3,r5
10030518:	dc000e15 	stw	r16,56(sp)
1003051c:	d809883a 	mov	r4,sp
10030520:	880b883a 	mov	r5,r17
10030524:	dc000904 	addi	r16,sp,36
10030528:	d8c00115 	stw	r3,4(sp)
1003052c:	d8800015 	stw	r2,0(sp)
10030530:	d9800215 	stw	r6,8(sp)
10030534:	dfc01015 	stw	ra,64(sp)
10030538:	d9c00315 	stw	r7,12(sp)
1003053c:	003102c0 	call	1003102c <__unpack_d>
10030540:	d9000204 	addi	r4,sp,8
10030544:	800b883a 	mov	r5,r16
10030548:	003102c0 	call	1003102c <__unpack_d>
1003054c:	d8800417 	ldw	r2,16(sp)
10030550:	00c00044 	movi	r3,1
10030554:	01bfffc4 	movi	r6,-1
10030558:	1880062e 	bgeu	r3,r2,10030574 <__gtdf2+0x70>
1003055c:	d8800917 	ldw	r2,36(sp)
10030560:	8809883a 	mov	r4,r17
10030564:	800b883a 	mov	r5,r16
10030568:	1880022e 	bgeu	r3,r2,10030574 <__gtdf2+0x70>
1003056c:	00311640 	call	10031164 <__fpcmp_parts_d>
10030570:	100d883a 	mov	r6,r2
10030574:	3005883a 	mov	r2,r6
10030578:	dfc01017 	ldw	ra,64(sp)
1003057c:	dc400f17 	ldw	r17,60(sp)
10030580:	dc000e17 	ldw	r16,56(sp)
10030584:	dec01104 	addi	sp,sp,68
10030588:	f800283a 	ret

1003058c <__gedf2>:
1003058c:	deffef04 	addi	sp,sp,-68
10030590:	dc400f15 	stw	r17,60(sp)
10030594:	dc400404 	addi	r17,sp,16
10030598:	2005883a 	mov	r2,r4
1003059c:	2807883a 	mov	r3,r5
100305a0:	dc000e15 	stw	r16,56(sp)
100305a4:	d809883a 	mov	r4,sp
100305a8:	880b883a 	mov	r5,r17
100305ac:	dc000904 	addi	r16,sp,36
100305b0:	d8c00115 	stw	r3,4(sp)
100305b4:	d8800015 	stw	r2,0(sp)
100305b8:	d9800215 	stw	r6,8(sp)
100305bc:	dfc01015 	stw	ra,64(sp)
100305c0:	d9c00315 	stw	r7,12(sp)
100305c4:	003102c0 	call	1003102c <__unpack_d>
100305c8:	d9000204 	addi	r4,sp,8
100305cc:	800b883a 	mov	r5,r16
100305d0:	003102c0 	call	1003102c <__unpack_d>
100305d4:	d8800417 	ldw	r2,16(sp)
100305d8:	00c00044 	movi	r3,1
100305dc:	01bfffc4 	movi	r6,-1
100305e0:	1880062e 	bgeu	r3,r2,100305fc <__gedf2+0x70>
100305e4:	d8800917 	ldw	r2,36(sp)
100305e8:	8809883a 	mov	r4,r17
100305ec:	800b883a 	mov	r5,r16
100305f0:	1880022e 	bgeu	r3,r2,100305fc <__gedf2+0x70>
100305f4:	00311640 	call	10031164 <__fpcmp_parts_d>
100305f8:	100d883a 	mov	r6,r2
100305fc:	3005883a 	mov	r2,r6
10030600:	dfc01017 	ldw	ra,64(sp)
10030604:	dc400f17 	ldw	r17,60(sp)
10030608:	dc000e17 	ldw	r16,56(sp)
1003060c:	dec01104 	addi	sp,sp,68
10030610:	f800283a 	ret

10030614 <__ltdf2>:
10030614:	deffef04 	addi	sp,sp,-68
10030618:	dc400f15 	stw	r17,60(sp)
1003061c:	dc400404 	addi	r17,sp,16
10030620:	2005883a 	mov	r2,r4
10030624:	2807883a 	mov	r3,r5
10030628:	dc000e15 	stw	r16,56(sp)
1003062c:	d809883a 	mov	r4,sp
10030630:	880b883a 	mov	r5,r17
10030634:	dc000904 	addi	r16,sp,36
10030638:	d8c00115 	stw	r3,4(sp)
1003063c:	d8800015 	stw	r2,0(sp)
10030640:	d9800215 	stw	r6,8(sp)
10030644:	dfc01015 	stw	ra,64(sp)
10030648:	d9c00315 	stw	r7,12(sp)
1003064c:	003102c0 	call	1003102c <__unpack_d>
10030650:	d9000204 	addi	r4,sp,8
10030654:	800b883a 	mov	r5,r16
10030658:	003102c0 	call	1003102c <__unpack_d>
1003065c:	d8800417 	ldw	r2,16(sp)
10030660:	00c00044 	movi	r3,1
10030664:	180d883a 	mov	r6,r3
10030668:	1880062e 	bgeu	r3,r2,10030684 <__ltdf2+0x70>
1003066c:	d8800917 	ldw	r2,36(sp)
10030670:	8809883a 	mov	r4,r17
10030674:	800b883a 	mov	r5,r16
10030678:	1880022e 	bgeu	r3,r2,10030684 <__ltdf2+0x70>
1003067c:	00311640 	call	10031164 <__fpcmp_parts_d>
10030680:	100d883a 	mov	r6,r2
10030684:	3005883a 	mov	r2,r6
10030688:	dfc01017 	ldw	ra,64(sp)
1003068c:	dc400f17 	ldw	r17,60(sp)
10030690:	dc000e17 	ldw	r16,56(sp)
10030694:	dec01104 	addi	sp,sp,68
10030698:	f800283a 	ret

1003069c <__ledf2>:
1003069c:	deffef04 	addi	sp,sp,-68
100306a0:	dc400f15 	stw	r17,60(sp)
100306a4:	dc400404 	addi	r17,sp,16
100306a8:	2005883a 	mov	r2,r4
100306ac:	2807883a 	mov	r3,r5
100306b0:	dc000e15 	stw	r16,56(sp)
100306b4:	d809883a 	mov	r4,sp
100306b8:	880b883a 	mov	r5,r17
100306bc:	dc000904 	addi	r16,sp,36
100306c0:	d8c00115 	stw	r3,4(sp)
100306c4:	d8800015 	stw	r2,0(sp)
100306c8:	d9800215 	stw	r6,8(sp)
100306cc:	dfc01015 	stw	ra,64(sp)
100306d0:	d9c00315 	stw	r7,12(sp)
100306d4:	003102c0 	call	1003102c <__unpack_d>
100306d8:	d9000204 	addi	r4,sp,8
100306dc:	800b883a 	mov	r5,r16
100306e0:	003102c0 	call	1003102c <__unpack_d>
100306e4:	d8800417 	ldw	r2,16(sp)
100306e8:	00c00044 	movi	r3,1
100306ec:	180d883a 	mov	r6,r3
100306f0:	1880062e 	bgeu	r3,r2,1003070c <__ledf2+0x70>
100306f4:	d8800917 	ldw	r2,36(sp)
100306f8:	8809883a 	mov	r4,r17
100306fc:	800b883a 	mov	r5,r16
10030700:	1880022e 	bgeu	r3,r2,1003070c <__ledf2+0x70>
10030704:	00311640 	call	10031164 <__fpcmp_parts_d>
10030708:	100d883a 	mov	r6,r2
1003070c:	3005883a 	mov	r2,r6
10030710:	dfc01017 	ldw	ra,64(sp)
10030714:	dc400f17 	ldw	r17,60(sp)
10030718:	dc000e17 	ldw	r16,56(sp)
1003071c:	dec01104 	addi	sp,sp,68
10030720:	f800283a 	ret

10030724 <__floatsidf>:
10030724:	2006d7fa 	srli	r3,r4,31
10030728:	defff604 	addi	sp,sp,-40
1003072c:	008000c4 	movi	r2,3
10030730:	dfc00915 	stw	ra,36(sp)
10030734:	dcc00815 	stw	r19,32(sp)
10030738:	dc800715 	stw	r18,28(sp)
1003073c:	dc400615 	stw	r17,24(sp)
10030740:	dc000515 	stw	r16,20(sp)
10030744:	d8800015 	stw	r2,0(sp)
10030748:	d8c00115 	stw	r3,4(sp)
1003074c:	20000f1e 	bne	r4,zero,1003078c <__floatsidf+0x68>
10030750:	00800084 	movi	r2,2
10030754:	d8800015 	stw	r2,0(sp)
10030758:	d809883a 	mov	r4,sp
1003075c:	0030d180 	call	10030d18 <__pack_d>
10030760:	1009883a 	mov	r4,r2
10030764:	180b883a 	mov	r5,r3
10030768:	2005883a 	mov	r2,r4
1003076c:	2807883a 	mov	r3,r5
10030770:	dfc00917 	ldw	ra,36(sp)
10030774:	dcc00817 	ldw	r19,32(sp)
10030778:	dc800717 	ldw	r18,28(sp)
1003077c:	dc400617 	ldw	r17,24(sp)
10030780:	dc000517 	ldw	r16,20(sp)
10030784:	dec00a04 	addi	sp,sp,40
10030788:	f800283a 	ret
1003078c:	00800f04 	movi	r2,60
10030790:	1807003a 	cmpeq	r3,r3,zero
10030794:	d8800215 	stw	r2,8(sp)
10030798:	18001126 	beq	r3,zero,100307e0 <__floatsidf+0xbc>
1003079c:	0027883a 	mov	r19,zero
100307a0:	2025883a 	mov	r18,r4
100307a4:	d9000315 	stw	r4,12(sp)
100307a8:	dcc00415 	stw	r19,16(sp)
100307ac:	0030afc0 	call	10030afc <__clzsi2>
100307b0:	11000744 	addi	r4,r2,29
100307b4:	013fe80e 	bge	zero,r4,10030758 <__floatsidf+0x34>
100307b8:	10bfff44 	addi	r2,r2,-3
100307bc:	10000c16 	blt	r2,zero,100307f0 <__floatsidf+0xcc>
100307c0:	90a2983a 	sll	r17,r18,r2
100307c4:	0021883a 	mov	r16,zero
100307c8:	d8800217 	ldw	r2,8(sp)
100307cc:	dc400415 	stw	r17,16(sp)
100307d0:	dc000315 	stw	r16,12(sp)
100307d4:	1105c83a 	sub	r2,r2,r4
100307d8:	d8800215 	stw	r2,8(sp)
100307dc:	003fde06 	br	10030758 <__floatsidf+0x34>
100307e0:	00a00034 	movhi	r2,32768
100307e4:	20800a26 	beq	r4,r2,10030810 <__floatsidf+0xec>
100307e8:	0109c83a 	sub	r4,zero,r4
100307ec:	003feb06 	br	1003079c <__floatsidf+0x78>
100307f0:	9006d07a 	srli	r3,r18,1
100307f4:	008007c4 	movi	r2,31
100307f8:	1105c83a 	sub	r2,r2,r4
100307fc:	1886d83a 	srl	r3,r3,r2
10030800:	9922983a 	sll	r17,r19,r4
10030804:	9120983a 	sll	r16,r18,r4
10030808:	1c62b03a 	or	r17,r3,r17
1003080c:	003fee06 	br	100307c8 <__floatsidf+0xa4>
10030810:	0009883a 	mov	r4,zero
10030814:	01707834 	movhi	r5,49632
10030818:	003fd306 	br	10030768 <__floatsidf+0x44>

1003081c <__fixdfsi>:
1003081c:	defff804 	addi	sp,sp,-32
10030820:	2005883a 	mov	r2,r4
10030824:	2807883a 	mov	r3,r5
10030828:	d809883a 	mov	r4,sp
1003082c:	d9400204 	addi	r5,sp,8
10030830:	d8c00115 	stw	r3,4(sp)
10030834:	d8800015 	stw	r2,0(sp)
10030838:	dfc00715 	stw	ra,28(sp)
1003083c:	003102c0 	call	1003102c <__unpack_d>
10030840:	d8c00217 	ldw	r3,8(sp)
10030844:	00800084 	movi	r2,2
10030848:	1880051e 	bne	r3,r2,10030860 <__fixdfsi+0x44>
1003084c:	0007883a 	mov	r3,zero
10030850:	1805883a 	mov	r2,r3
10030854:	dfc00717 	ldw	ra,28(sp)
10030858:	dec00804 	addi	sp,sp,32
1003085c:	f800283a 	ret
10030860:	00800044 	movi	r2,1
10030864:	10fff92e 	bgeu	r2,r3,1003084c <__fixdfsi+0x30>
10030868:	00800104 	movi	r2,4
1003086c:	18800426 	beq	r3,r2,10030880 <__fixdfsi+0x64>
10030870:	d8c00417 	ldw	r3,16(sp)
10030874:	183ff516 	blt	r3,zero,1003084c <__fixdfsi+0x30>
10030878:	00800784 	movi	r2,30
1003087c:	10c0080e 	bge	r2,r3,100308a0 <__fixdfsi+0x84>
10030880:	d8800317 	ldw	r2,12(sp)
10030884:	1000121e 	bne	r2,zero,100308d0 <__fixdfsi+0xb4>
10030888:	00e00034 	movhi	r3,32768
1003088c:	18ffffc4 	addi	r3,r3,-1
10030890:	1805883a 	mov	r2,r3
10030894:	dfc00717 	ldw	ra,28(sp)
10030898:	dec00804 	addi	sp,sp,32
1003089c:	f800283a 	ret
100308a0:	00800f04 	movi	r2,60
100308a4:	10d1c83a 	sub	r8,r2,r3
100308a8:	40bff804 	addi	r2,r8,-32
100308ac:	d9800517 	ldw	r6,20(sp)
100308b0:	d9c00617 	ldw	r7,24(sp)
100308b4:	10000816 	blt	r2,zero,100308d8 <__fixdfsi+0xbc>
100308b8:	3888d83a 	srl	r4,r7,r2
100308bc:	d8800317 	ldw	r2,12(sp)
100308c0:	2007883a 	mov	r3,r4
100308c4:	103fe226 	beq	r2,zero,10030850 <__fixdfsi+0x34>
100308c8:	0107c83a 	sub	r3,zero,r4
100308cc:	003fe006 	br	10030850 <__fixdfsi+0x34>
100308d0:	00e00034 	movhi	r3,32768
100308d4:	003fde06 	br	10030850 <__fixdfsi+0x34>
100308d8:	39c7883a 	add	r3,r7,r7
100308dc:	008007c4 	movi	r2,31
100308e0:	1205c83a 	sub	r2,r2,r8
100308e4:	1886983a 	sll	r3,r3,r2
100308e8:	3208d83a 	srl	r4,r6,r8
100308ec:	1908b03a 	or	r4,r3,r4
100308f0:	003ff206 	br	100308bc <__fixdfsi+0xa0>

100308f4 <__truncdfsf2>:
100308f4:	defff804 	addi	sp,sp,-32
100308f8:	2005883a 	mov	r2,r4
100308fc:	2807883a 	mov	r3,r5
10030900:	d809883a 	mov	r4,sp
10030904:	d9400204 	addi	r5,sp,8
10030908:	d8c00115 	stw	r3,4(sp)
1003090c:	d8800015 	stw	r2,0(sp)
10030910:	dfc00715 	stw	ra,28(sp)
10030914:	003102c0 	call	1003102c <__unpack_d>
10030918:	d9c00517 	ldw	r7,20(sp)
1003091c:	da000617 	ldw	r8,24(sp)
10030920:	02d00034 	movhi	r11,16384
10030924:	5affffc4 	addi	r11,r11,-1
10030928:	3812d7ba 	srli	r9,r7,30
1003092c:	401a90ba 	slli	r13,r8,2
10030930:	3ac4703a 	and	r2,r7,r11
10030934:	0007883a 	mov	r3,zero
10030938:	6a52b03a 	or	r9,r13,r9
1003093c:	10c4b03a 	or	r2,r2,r3
10030940:	d9000217 	ldw	r4,8(sp)
10030944:	d9400317 	ldw	r5,12(sp)
10030948:	d9800417 	ldw	r6,16(sp)
1003094c:	480f883a 	mov	r7,r9
10030950:	10000126 	beq	r2,zero,10030958 <__truncdfsf2+0x64>
10030954:	49c00054 	ori	r7,r9,1
10030958:	0030cec0 	call	10030cec <__make_fp>
1003095c:	dfc00717 	ldw	ra,28(sp)
10030960:	dec00804 	addi	sp,sp,32
10030964:	f800283a 	ret

10030968 <__floatunsidf>:
10030968:	defff204 	addi	sp,sp,-56
1003096c:	dfc00d15 	stw	ra,52(sp)
10030970:	ddc00c15 	stw	r23,48(sp)
10030974:	dd800b15 	stw	r22,44(sp)
10030978:	dd400a15 	stw	r21,40(sp)
1003097c:	dd000915 	stw	r20,36(sp)
10030980:	dcc00815 	stw	r19,32(sp)
10030984:	dc800715 	stw	r18,28(sp)
10030988:	dc400615 	stw	r17,24(sp)
1003098c:	dc000515 	stw	r16,20(sp)
10030990:	d8000115 	stw	zero,4(sp)
10030994:	20000f1e 	bne	r4,zero,100309d4 <__floatunsidf+0x6c>
10030998:	00800084 	movi	r2,2
1003099c:	d8800015 	stw	r2,0(sp)
100309a0:	d809883a 	mov	r4,sp
100309a4:	0030d180 	call	10030d18 <__pack_d>
100309a8:	dfc00d17 	ldw	ra,52(sp)
100309ac:	ddc00c17 	ldw	r23,48(sp)
100309b0:	dd800b17 	ldw	r22,44(sp)
100309b4:	dd400a17 	ldw	r21,40(sp)
100309b8:	dd000917 	ldw	r20,36(sp)
100309bc:	dcc00817 	ldw	r19,32(sp)
100309c0:	dc800717 	ldw	r18,28(sp)
100309c4:	dc400617 	ldw	r17,24(sp)
100309c8:	dc000517 	ldw	r16,20(sp)
100309cc:	dec00e04 	addi	sp,sp,56
100309d0:	f800283a 	ret
100309d4:	008000c4 	movi	r2,3
100309d8:	00c00f04 	movi	r3,60
100309dc:	002f883a 	mov	r23,zero
100309e0:	202d883a 	mov	r22,r4
100309e4:	d8800015 	stw	r2,0(sp)
100309e8:	d8c00215 	stw	r3,8(sp)
100309ec:	d9000315 	stw	r4,12(sp)
100309f0:	ddc00415 	stw	r23,16(sp)
100309f4:	0030afc0 	call	10030afc <__clzsi2>
100309f8:	12400744 	addi	r9,r2,29
100309fc:	48000b16 	blt	r9,zero,10030a2c <__floatunsidf+0xc4>
10030a00:	483fe726 	beq	r9,zero,100309a0 <__floatunsidf+0x38>
10030a04:	10bfff44 	addi	r2,r2,-3
10030a08:	10002e16 	blt	r2,zero,10030ac4 <__floatunsidf+0x15c>
10030a0c:	b0a2983a 	sll	r17,r22,r2
10030a10:	0021883a 	mov	r16,zero
10030a14:	d8800217 	ldw	r2,8(sp)
10030a18:	dc400415 	stw	r17,16(sp)
10030a1c:	dc000315 	stw	r16,12(sp)
10030a20:	1245c83a 	sub	r2,r2,r9
10030a24:	d8800215 	stw	r2,8(sp)
10030a28:	003fdd06 	br	100309a0 <__floatunsidf+0x38>
10030a2c:	0255c83a 	sub	r10,zero,r9
10030a30:	51bff804 	addi	r6,r10,-32
10030a34:	30001b16 	blt	r6,zero,10030aa4 <__floatunsidf+0x13c>
10030a38:	b9a8d83a 	srl	r20,r23,r6
10030a3c:	002b883a 	mov	r21,zero
10030a40:	000f883a 	mov	r7,zero
10030a44:	01000044 	movi	r4,1
10030a48:	0011883a 	mov	r8,zero
10030a4c:	30002516 	blt	r6,zero,10030ae4 <__floatunsidf+0x17c>
10030a50:	21a6983a 	sll	r19,r4,r6
10030a54:	0025883a 	mov	r18,zero
10030a58:	00bfffc4 	movi	r2,-1
10030a5c:	9089883a 	add	r4,r18,r2
10030a60:	988b883a 	add	r5,r19,r2
10030a64:	248d803a 	cmpltu	r6,r4,r18
10030a68:	314b883a 	add	r5,r6,r5
10030a6c:	b104703a 	and	r2,r22,r4
10030a70:	b946703a 	and	r3,r23,r5
10030a74:	10c4b03a 	or	r2,r2,r3
10030a78:	10000226 	beq	r2,zero,10030a84 <__floatunsidf+0x11c>
10030a7c:	01c00044 	movi	r7,1
10030a80:	0011883a 	mov	r8,zero
10030a84:	d9000217 	ldw	r4,8(sp)
10030a88:	a1c4b03a 	or	r2,r20,r7
10030a8c:	aa06b03a 	or	r3,r21,r8
10030a90:	2249c83a 	sub	r4,r4,r9
10030a94:	d8c00415 	stw	r3,16(sp)
10030a98:	d9000215 	stw	r4,8(sp)
10030a9c:	d8800315 	stw	r2,12(sp)
10030aa0:	003fbf06 	br	100309a0 <__floatunsidf+0x38>
10030aa4:	bdc7883a 	add	r3,r23,r23
10030aa8:	008007c4 	movi	r2,31
10030aac:	1285c83a 	sub	r2,r2,r10
10030ab0:	1886983a 	sll	r3,r3,r2
10030ab4:	b2a8d83a 	srl	r20,r22,r10
10030ab8:	baaad83a 	srl	r21,r23,r10
10030abc:	1d28b03a 	or	r20,r3,r20
10030ac0:	003fdf06 	br	10030a40 <__floatunsidf+0xd8>
10030ac4:	b006d07a 	srli	r3,r22,1
10030ac8:	008007c4 	movi	r2,31
10030acc:	1245c83a 	sub	r2,r2,r9
10030ad0:	1886d83a 	srl	r3,r3,r2
10030ad4:	ba62983a 	sll	r17,r23,r9
10030ad8:	b260983a 	sll	r16,r22,r9
10030adc:	1c62b03a 	or	r17,r3,r17
10030ae0:	003fcc06 	br	10030a14 <__floatunsidf+0xac>
10030ae4:	2006d07a 	srli	r3,r4,1
10030ae8:	008007c4 	movi	r2,31
10030aec:	1285c83a 	sub	r2,r2,r10
10030af0:	18a6d83a 	srl	r19,r3,r2
10030af4:	22a4983a 	sll	r18,r4,r10
10030af8:	003fd706 	br	10030a58 <__floatunsidf+0xf0>

10030afc <__clzsi2>:
10030afc:	00bfffd4 	movui	r2,65535
10030b00:	11000e36 	bltu	r2,r4,10030b3c <__clzsi2+0x40>
10030b04:	00803fc4 	movi	r2,255
10030b08:	01400204 	movi	r5,8
10030b0c:	0007883a 	mov	r3,zero
10030b10:	11001036 	bltu	r2,r4,10030b54 <__clzsi2+0x58>
10030b14:	000b883a 	mov	r5,zero
10030b18:	20c6d83a 	srl	r3,r4,r3
10030b1c:	00800034 	movhi	r2,0
10030b20:	1083fb04 	addi	r2,r2,4076
10030b24:	1887883a 	add	r3,r3,r2
10030b28:	18800003 	ldbu	r2,0(r3)
10030b2c:	00c00804 	movi	r3,32
10030b30:	2885883a 	add	r2,r5,r2
10030b34:	1885c83a 	sub	r2,r3,r2
10030b38:	f800283a 	ret
10030b3c:	01400404 	movi	r5,16
10030b40:	00804034 	movhi	r2,256
10030b44:	10bfffc4 	addi	r2,r2,-1
10030b48:	2807883a 	mov	r3,r5
10030b4c:	113ff22e 	bgeu	r2,r4,10030b18 <__clzsi2+0x1c>
10030b50:	01400604 	movi	r5,24
10030b54:	2807883a 	mov	r3,r5
10030b58:	20c6d83a 	srl	r3,r4,r3
10030b5c:	00800034 	movhi	r2,0
10030b60:	1083fb04 	addi	r2,r2,4076
10030b64:	1887883a 	add	r3,r3,r2
10030b68:	18800003 	ldbu	r2,0(r3)
10030b6c:	00c00804 	movi	r3,32
10030b70:	2885883a 	add	r2,r5,r2
10030b74:	1885c83a 	sub	r2,r3,r2
10030b78:	f800283a 	ret

10030b7c <__unpack_f>:
10030b7c:	21800017 	ldw	r6,0(r4)
10030b80:	00c02034 	movhi	r3,128
10030b84:	18ffffc4 	addi	r3,r3,-1
10030b88:	3004d5fa 	srli	r2,r6,23
10030b8c:	3008d7fa 	srli	r4,r6,31
10030b90:	30ce703a 	and	r7,r6,r3
10030b94:	10c03fcc 	andi	r3,r2,255
10030b98:	29000115 	stw	r4,4(r5)
10030b9c:	1800131e 	bne	r3,zero,10030bec <__unpack_f+0x70>
10030ba0:	38000f26 	beq	r7,zero,10030be0 <__unpack_f+0x64>
10030ba4:	380691fa 	slli	r3,r7,7
10030ba8:	01bfe084 	movi	r6,-126
10030bac:	008000c4 	movi	r2,3
10030bb0:	01100034 	movhi	r4,16384
10030bb4:	213fffc4 	addi	r4,r4,-1
10030bb8:	28800015 	stw	r2,0(r5)
10030bbc:	29800215 	stw	r6,8(r5)
10030bc0:	20c00536 	bltu	r4,r3,10030bd8 <__unpack_f+0x5c>
10030bc4:	3005883a 	mov	r2,r6
10030bc8:	18c7883a 	add	r3,r3,r3
10030bcc:	10bfffc4 	addi	r2,r2,-1
10030bd0:	20fffd2e 	bgeu	r4,r3,10030bc8 <__unpack_f+0x4c>
10030bd4:	28800215 	stw	r2,8(r5)
10030bd8:	28c00315 	stw	r3,12(r5)
10030bdc:	f800283a 	ret
10030be0:	00800084 	movi	r2,2
10030be4:	28800015 	stw	r2,0(r5)
10030be8:	f800283a 	ret
10030bec:	00803fc4 	movi	r2,255
10030bf0:	18800826 	beq	r3,r2,10030c14 <__unpack_f+0x98>
10030bf4:	380491fa 	slli	r2,r7,7
10030bf8:	18ffe044 	addi	r3,r3,-127
10030bfc:	28c00215 	stw	r3,8(r5)
10030c00:	10900034 	orhi	r2,r2,16384
10030c04:	28800315 	stw	r2,12(r5)
10030c08:	008000c4 	movi	r2,3
10030c0c:	28800015 	stw	r2,0(r5)
10030c10:	f800283a 	ret
10030c14:	3800031e 	bne	r7,zero,10030c24 <__unpack_f+0xa8>
10030c18:	00800104 	movi	r2,4
10030c1c:	28800015 	stw	r2,0(r5)
10030c20:	f800283a 	ret
10030c24:	3080042c 	andhi	r2,r6,16
10030c28:	10000426 	beq	r2,zero,10030c3c <__unpack_f+0xc0>
10030c2c:	00800044 	movi	r2,1
10030c30:	28800015 	stw	r2,0(r5)
10030c34:	29c00315 	stw	r7,12(r5)
10030c38:	f800283a 	ret
10030c3c:	28000015 	stw	zero,0(r5)
10030c40:	003ffc06 	br	10030c34 <__unpack_f+0xb8>

10030c44 <__fpcmp_parts_f>:
10030c44:	21800017 	ldw	r6,0(r4)
10030c48:	00c00044 	movi	r3,1
10030c4c:	19800a2e 	bgeu	r3,r6,10030c78 <__fpcmp_parts_f+0x34>
10030c50:	28800017 	ldw	r2,0(r5)
10030c54:	1880082e 	bgeu	r3,r2,10030c78 <__fpcmp_parts_f+0x34>
10030c58:	00c00104 	movi	r3,4
10030c5c:	30c01e26 	beq	r6,r3,10030cd8 <__fpcmp_parts_f+0x94>
10030c60:	10c01a26 	beq	r2,r3,10030ccc <__fpcmp_parts_f+0x88>
10030c64:	00c00084 	movi	r3,2
10030c68:	30c00526 	beq	r6,r3,10030c80 <__fpcmp_parts_f+0x3c>
10030c6c:	10c0071e 	bne	r2,r3,10030c8c <__fpcmp_parts_f+0x48>
10030c70:	20800117 	ldw	r2,4(r4)
10030c74:	1000091e 	bne	r2,zero,10030c9c <__fpcmp_parts_f+0x58>
10030c78:	00800044 	movi	r2,1
10030c7c:	f800283a 	ret
10030c80:	10c0121e 	bne	r2,r3,10030ccc <__fpcmp_parts_f+0x88>
10030c84:	0005883a 	mov	r2,zero
10030c88:	f800283a 	ret
10030c8c:	20c00117 	ldw	r3,4(r4)
10030c90:	28800117 	ldw	r2,4(r5)
10030c94:	18800326 	beq	r3,r2,10030ca4 <__fpcmp_parts_f+0x60>
10030c98:	183ff726 	beq	r3,zero,10030c78 <__fpcmp_parts_f+0x34>
10030c9c:	00bfffc4 	movi	r2,-1
10030ca0:	f800283a 	ret
10030ca4:	21800217 	ldw	r6,8(r4)
10030ca8:	28800217 	ldw	r2,8(r5)
10030cac:	11bffa16 	blt	r2,r6,10030c98 <__fpcmp_parts_f+0x54>
10030cb0:	30800416 	blt	r6,r2,10030cc4 <__fpcmp_parts_f+0x80>
10030cb4:	21000317 	ldw	r4,12(r4)
10030cb8:	29400317 	ldw	r5,12(r5)
10030cbc:	293ff636 	bltu	r5,r4,10030c98 <__fpcmp_parts_f+0x54>
10030cc0:	217ff02e 	bgeu	r4,r5,10030c84 <__fpcmp_parts_f+0x40>
10030cc4:	183fec1e 	bne	r3,zero,10030c78 <__fpcmp_parts_f+0x34>
10030cc8:	003ff406 	br	10030c9c <__fpcmp_parts_f+0x58>
10030ccc:	28800117 	ldw	r2,4(r5)
10030cd0:	103fe91e 	bne	r2,zero,10030c78 <__fpcmp_parts_f+0x34>
10030cd4:	003ff106 	br	10030c9c <__fpcmp_parts_f+0x58>
10030cd8:	11bfe51e 	bne	r2,r6,10030c70 <__fpcmp_parts_f+0x2c>
10030cdc:	28c00117 	ldw	r3,4(r5)
10030ce0:	20800117 	ldw	r2,4(r4)
10030ce4:	1885c83a 	sub	r2,r3,r2
10030ce8:	f800283a 	ret

10030cec <__make_fp>:
10030cec:	defffb04 	addi	sp,sp,-20
10030cf0:	d9000015 	stw	r4,0(sp)
10030cf4:	d809883a 	mov	r4,sp
10030cf8:	dfc00415 	stw	ra,16(sp)
10030cfc:	d9400115 	stw	r5,4(sp)
10030d00:	d9800215 	stw	r6,8(sp)
10030d04:	d9c00315 	stw	r7,12(sp)
10030d08:	003122c0 	call	1003122c <__pack_f>
10030d0c:	dfc00417 	ldw	ra,16(sp)
10030d10:	dec00504 	addi	sp,sp,20
10030d14:	f800283a 	ret

10030d18 <__pack_d>:
10030d18:	20c00017 	ldw	r3,0(r4)
10030d1c:	defffd04 	addi	sp,sp,-12
10030d20:	dc000015 	stw	r16,0(sp)
10030d24:	dc800215 	stw	r18,8(sp)
10030d28:	dc400115 	stw	r17,4(sp)
10030d2c:	00800044 	movi	r2,1
10030d30:	22000317 	ldw	r8,12(r4)
10030d34:	001f883a 	mov	r15,zero
10030d38:	22400417 	ldw	r9,16(r4)
10030d3c:	24000117 	ldw	r16,4(r4)
10030d40:	10c0552e 	bgeu	r2,r3,10030e98 <__pack_d+0x180>
10030d44:	00800104 	movi	r2,4
10030d48:	18804f26 	beq	r3,r2,10030e88 <__pack_d+0x170>
10030d4c:	00800084 	movi	r2,2
10030d50:	18800226 	beq	r3,r2,10030d5c <__pack_d+0x44>
10030d54:	4244b03a 	or	r2,r8,r9
10030d58:	10001a1e 	bne	r2,zero,10030dc4 <__pack_d+0xac>
10030d5c:	000d883a 	mov	r6,zero
10030d60:	000f883a 	mov	r7,zero
10030d64:	0011883a 	mov	r8,zero
10030d68:	00800434 	movhi	r2,16
10030d6c:	10bfffc4 	addi	r2,r2,-1
10030d70:	301d883a 	mov	r14,r6
10030d74:	3884703a 	and	r2,r7,r2
10030d78:	400a953a 	slli	r5,r8,20
10030d7c:	79bffc2c 	andhi	r6,r15,65520
10030d80:	308cb03a 	or	r6,r6,r2
10030d84:	00e00434 	movhi	r3,32784
10030d88:	18ffffc4 	addi	r3,r3,-1
10030d8c:	800497fa 	slli	r2,r16,31
10030d90:	30c6703a 	and	r3,r6,r3
10030d94:	1946b03a 	or	r3,r3,r5
10030d98:	01600034 	movhi	r5,32768
10030d9c:	297fffc4 	addi	r5,r5,-1
10030da0:	194a703a 	and	r5,r3,r5
10030da4:	288ab03a 	or	r5,r5,r2
10030da8:	2807883a 	mov	r3,r5
10030dac:	7005883a 	mov	r2,r14
10030db0:	dc800217 	ldw	r18,8(sp)
10030db4:	dc400117 	ldw	r17,4(sp)
10030db8:	dc000017 	ldw	r16,0(sp)
10030dbc:	dec00304 	addi	sp,sp,12
10030dc0:	f800283a 	ret
10030dc4:	21000217 	ldw	r4,8(r4)
10030dc8:	00bf0084 	movi	r2,-1022
10030dcc:	20803f16 	blt	r4,r2,10030ecc <__pack_d+0x1b4>
10030dd0:	0080ffc4 	movi	r2,1023
10030dd4:	11002c16 	blt	r2,r4,10030e88 <__pack_d+0x170>
10030dd8:	00803fc4 	movi	r2,255
10030ddc:	408c703a 	and	r6,r8,r2
10030de0:	00802004 	movi	r2,128
10030de4:	0007883a 	mov	r3,zero
10030de8:	000f883a 	mov	r7,zero
10030dec:	2280ffc4 	addi	r10,r4,1023
10030df0:	30801e26 	beq	r6,r2,10030e6c <__pack_d+0x154>
10030df4:	00801fc4 	movi	r2,127
10030df8:	4089883a 	add	r4,r8,r2
10030dfc:	220d803a 	cmpltu	r6,r4,r8
10030e00:	324d883a 	add	r6,r6,r9
10030e04:	2011883a 	mov	r8,r4
10030e08:	3013883a 	mov	r9,r6
10030e0c:	00880034 	movhi	r2,8192
10030e10:	10bfffc4 	addi	r2,r2,-1
10030e14:	12400d36 	bltu	r2,r9,10030e4c <__pack_d+0x134>
10030e18:	4804963a 	slli	r2,r9,24
10030e1c:	400cd23a 	srli	r6,r8,8
10030e20:	480ed23a 	srli	r7,r9,8
10030e24:	013fffc4 	movi	r4,-1
10030e28:	118cb03a 	or	r6,r2,r6
10030e2c:	01400434 	movhi	r5,16
10030e30:	297fffc4 	addi	r5,r5,-1
10030e34:	3104703a 	and	r2,r6,r4
10030e38:	3946703a 	and	r3,r7,r5
10030e3c:	5201ffcc 	andi	r8,r10,2047
10030e40:	100d883a 	mov	r6,r2
10030e44:	180f883a 	mov	r7,r3
10030e48:	003fc706 	br	10030d68 <__pack_d+0x50>
10030e4c:	480897fa 	slli	r4,r9,31
10030e50:	4004d07a 	srli	r2,r8,1
10030e54:	4806d07a 	srli	r3,r9,1
10030e58:	52800044 	addi	r10,r10,1
10030e5c:	2084b03a 	or	r2,r4,r2
10030e60:	1011883a 	mov	r8,r2
10030e64:	1813883a 	mov	r9,r3
10030e68:	003feb06 	br	10030e18 <__pack_d+0x100>
10030e6c:	383fe11e 	bne	r7,zero,10030df4 <__pack_d+0xdc>
10030e70:	01004004 	movi	r4,256
10030e74:	4104703a 	and	r2,r8,r4
10030e78:	10c4b03a 	or	r2,r2,r3
10030e7c:	103fe326 	beq	r2,zero,10030e0c <__pack_d+0xf4>
10030e80:	3005883a 	mov	r2,r6
10030e84:	003fdc06 	br	10030df8 <__pack_d+0xe0>
10030e88:	000d883a 	mov	r6,zero
10030e8c:	000f883a 	mov	r7,zero
10030e90:	0201ffc4 	movi	r8,2047
10030e94:	003fb406 	br	10030d68 <__pack_d+0x50>
10030e98:	0005883a 	mov	r2,zero
10030e9c:	00c00234 	movhi	r3,8
10030ea0:	408cb03a 	or	r6,r8,r2
10030ea4:	48ceb03a 	or	r7,r9,r3
10030ea8:	013fffc4 	movi	r4,-1
10030eac:	01400434 	movhi	r5,16
10030eb0:	297fffc4 	addi	r5,r5,-1
10030eb4:	3104703a 	and	r2,r6,r4
10030eb8:	3946703a 	and	r3,r7,r5
10030ebc:	100d883a 	mov	r6,r2
10030ec0:	180f883a 	mov	r7,r3
10030ec4:	0201ffc4 	movi	r8,2047
10030ec8:	003fa706 	br	10030d68 <__pack_d+0x50>
10030ecc:	1109c83a 	sub	r4,r2,r4
10030ed0:	00800e04 	movi	r2,56
10030ed4:	11004316 	blt	r2,r4,10030fe4 <__pack_d+0x2cc>
10030ed8:	21fff804 	addi	r7,r4,-32
10030edc:	38004516 	blt	r7,zero,10030ff4 <__pack_d+0x2dc>
10030ee0:	49d8d83a 	srl	r12,r9,r7
10030ee4:	001b883a 	mov	r13,zero
10030ee8:	0023883a 	mov	r17,zero
10030eec:	01400044 	movi	r5,1
10030ef0:	0025883a 	mov	r18,zero
10030ef4:	38004716 	blt	r7,zero,10031014 <__pack_d+0x2fc>
10030ef8:	29d6983a 	sll	r11,r5,r7
10030efc:	0015883a 	mov	r10,zero
10030f00:	00bfffc4 	movi	r2,-1
10030f04:	5089883a 	add	r4,r10,r2
10030f08:	588b883a 	add	r5,r11,r2
10030f0c:	228d803a 	cmpltu	r6,r4,r10
10030f10:	314b883a 	add	r5,r6,r5
10030f14:	4104703a 	and	r2,r8,r4
10030f18:	4946703a 	and	r3,r9,r5
10030f1c:	10c4b03a 	or	r2,r2,r3
10030f20:	10000226 	beq	r2,zero,10030f2c <__pack_d+0x214>
10030f24:	04400044 	movi	r17,1
10030f28:	0025883a 	mov	r18,zero
10030f2c:	00803fc4 	movi	r2,255
10030f30:	644eb03a 	or	r7,r12,r17
10030f34:	3892703a 	and	r9,r7,r2
10030f38:	00802004 	movi	r2,128
10030f3c:	6c90b03a 	or	r8,r13,r18
10030f40:	0015883a 	mov	r10,zero
10030f44:	48801626 	beq	r9,r2,10030fa0 <__pack_d+0x288>
10030f48:	01001fc4 	movi	r4,127
10030f4c:	3905883a 	add	r2,r7,r4
10030f50:	11cd803a 	cmpltu	r6,r2,r7
10030f54:	320d883a 	add	r6,r6,r8
10030f58:	100f883a 	mov	r7,r2
10030f5c:	00840034 	movhi	r2,4096
10030f60:	10bfffc4 	addi	r2,r2,-1
10030f64:	3011883a 	mov	r8,r6
10030f68:	0007883a 	mov	r3,zero
10030f6c:	11801b36 	bltu	r2,r6,10030fdc <__pack_d+0x2c4>
10030f70:	4004963a 	slli	r2,r8,24
10030f74:	3808d23a 	srli	r4,r7,8
10030f78:	400ad23a 	srli	r5,r8,8
10030f7c:	1813883a 	mov	r9,r3
10030f80:	1108b03a 	or	r4,r2,r4
10030f84:	00bfffc4 	movi	r2,-1
10030f88:	00c00434 	movhi	r3,16
10030f8c:	18ffffc4 	addi	r3,r3,-1
10030f90:	208c703a 	and	r6,r4,r2
10030f94:	28ce703a 	and	r7,r5,r3
10030f98:	4a01ffcc 	andi	r8,r9,2047
10030f9c:	003f7206 	br	10030d68 <__pack_d+0x50>
10030fa0:	503fe91e 	bne	r10,zero,10030f48 <__pack_d+0x230>
10030fa4:	01004004 	movi	r4,256
10030fa8:	3904703a 	and	r2,r7,r4
10030fac:	0007883a 	mov	r3,zero
10030fb0:	10c4b03a 	or	r2,r2,r3
10030fb4:	10000626 	beq	r2,zero,10030fd0 <__pack_d+0x2b8>
10030fb8:	3a45883a 	add	r2,r7,r9
10030fbc:	11cd803a 	cmpltu	r6,r2,r7
10030fc0:	320d883a 	add	r6,r6,r8
10030fc4:	100f883a 	mov	r7,r2
10030fc8:	3011883a 	mov	r8,r6
10030fcc:	0007883a 	mov	r3,zero
10030fd0:	00840034 	movhi	r2,4096
10030fd4:	10bfffc4 	addi	r2,r2,-1
10030fd8:	123fe52e 	bgeu	r2,r8,10030f70 <__pack_d+0x258>
10030fdc:	00c00044 	movi	r3,1
10030fe0:	003fe306 	br	10030f70 <__pack_d+0x258>
10030fe4:	0009883a 	mov	r4,zero
10030fe8:	0013883a 	mov	r9,zero
10030fec:	000b883a 	mov	r5,zero
10030ff0:	003fe406 	br	10030f84 <__pack_d+0x26c>
10030ff4:	4a47883a 	add	r3,r9,r9
10030ff8:	008007c4 	movi	r2,31
10030ffc:	1105c83a 	sub	r2,r2,r4
10031000:	1886983a 	sll	r3,r3,r2
10031004:	4118d83a 	srl	r12,r8,r4
10031008:	491ad83a 	srl	r13,r9,r4
1003100c:	1b18b03a 	or	r12,r3,r12
10031010:	003fb506 	br	10030ee8 <__pack_d+0x1d0>
10031014:	2806d07a 	srli	r3,r5,1
10031018:	008007c4 	movi	r2,31
1003101c:	1105c83a 	sub	r2,r2,r4
10031020:	1896d83a 	srl	r11,r3,r2
10031024:	2914983a 	sll	r10,r5,r4
10031028:	003fb506 	br	10030f00 <__pack_d+0x1e8>

1003102c <__unpack_d>:
1003102c:	20c00117 	ldw	r3,4(r4)
10031030:	22400017 	ldw	r9,0(r4)
10031034:	00800434 	movhi	r2,16
10031038:	10bfffc4 	addi	r2,r2,-1
1003103c:	1808d53a 	srli	r4,r3,20
10031040:	180cd7fa 	srli	r6,r3,31
10031044:	1894703a 	and	r10,r3,r2
10031048:	2201ffcc 	andi	r8,r4,2047
1003104c:	281b883a 	mov	r13,r5
10031050:	4817883a 	mov	r11,r9
10031054:	29800115 	stw	r6,4(r5)
10031058:	5019883a 	mov	r12,r10
1003105c:	40001e1e 	bne	r8,zero,100310d8 <__unpack_d+0xac>
10031060:	4a84b03a 	or	r2,r9,r10
10031064:	10001926 	beq	r2,zero,100310cc <__unpack_d+0xa0>
10031068:	4804d63a 	srli	r2,r9,24
1003106c:	500c923a 	slli	r6,r10,8
10031070:	013f0084 	movi	r4,-1022
10031074:	00c40034 	movhi	r3,4096
10031078:	18ffffc4 	addi	r3,r3,-1
1003107c:	118cb03a 	or	r6,r2,r6
10031080:	008000c4 	movi	r2,3
10031084:	480a923a 	slli	r5,r9,8
10031088:	68800015 	stw	r2,0(r13)
1003108c:	69000215 	stw	r4,8(r13)
10031090:	19800b36 	bltu	r3,r6,100310c0 <__unpack_d+0x94>
10031094:	200f883a 	mov	r7,r4
10031098:	1811883a 	mov	r8,r3
1003109c:	2945883a 	add	r2,r5,r5
100310a0:	1149803a 	cmpltu	r4,r2,r5
100310a4:	3187883a 	add	r3,r6,r6
100310a8:	20c9883a 	add	r4,r4,r3
100310ac:	100b883a 	mov	r5,r2
100310b0:	200d883a 	mov	r6,r4
100310b4:	39ffffc4 	addi	r7,r7,-1
100310b8:	413ff82e 	bgeu	r8,r4,1003109c <__unpack_d+0x70>
100310bc:	69c00215 	stw	r7,8(r13)
100310c0:	69800415 	stw	r6,16(r13)
100310c4:	69400315 	stw	r5,12(r13)
100310c8:	f800283a 	ret
100310cc:	00800084 	movi	r2,2
100310d0:	28800015 	stw	r2,0(r5)
100310d4:	f800283a 	ret
100310d8:	0081ffc4 	movi	r2,2047
100310dc:	40800f26 	beq	r8,r2,1003111c <__unpack_d+0xf0>
100310e0:	480cd63a 	srli	r6,r9,24
100310e4:	5006923a 	slli	r3,r10,8
100310e8:	4804923a 	slli	r2,r9,8
100310ec:	0009883a 	mov	r4,zero
100310f0:	30c6b03a 	or	r3,r6,r3
100310f4:	01440034 	movhi	r5,4096
100310f8:	110cb03a 	or	r6,r2,r4
100310fc:	423f0044 	addi	r8,r8,-1023
10031100:	194eb03a 	or	r7,r3,r5
10031104:	008000c4 	movi	r2,3
10031108:	69c00415 	stw	r7,16(r13)
1003110c:	6a000215 	stw	r8,8(r13)
10031110:	68800015 	stw	r2,0(r13)
10031114:	69800315 	stw	r6,12(r13)
10031118:	f800283a 	ret
1003111c:	4a84b03a 	or	r2,r9,r10
10031120:	1000031e 	bne	r2,zero,10031130 <__unpack_d+0x104>
10031124:	00800104 	movi	r2,4
10031128:	28800015 	stw	r2,0(r5)
1003112c:	f800283a 	ret
10031130:	0009883a 	mov	r4,zero
10031134:	01400234 	movhi	r5,8
10031138:	4904703a 	and	r2,r9,r4
1003113c:	5146703a 	and	r3,r10,r5
10031140:	10c4b03a 	or	r2,r2,r3
10031144:	10000526 	beq	r2,zero,1003115c <__unpack_d+0x130>
10031148:	00800044 	movi	r2,1
1003114c:	68800015 	stw	r2,0(r13)
10031150:	6b000415 	stw	r12,16(r13)
10031154:	6ac00315 	stw	r11,12(r13)
10031158:	f800283a 	ret
1003115c:	68000015 	stw	zero,0(r13)
10031160:	003ffb06 	br	10031150 <__unpack_d+0x124>

10031164 <__fpcmp_parts_d>:
10031164:	21800017 	ldw	r6,0(r4)
10031168:	00c00044 	movi	r3,1
1003116c:	19800a2e 	bgeu	r3,r6,10031198 <__fpcmp_parts_d+0x34>
10031170:	28800017 	ldw	r2,0(r5)
10031174:	1880082e 	bgeu	r3,r2,10031198 <__fpcmp_parts_d+0x34>
10031178:	00c00104 	movi	r3,4
1003117c:	30c02626 	beq	r6,r3,10031218 <__fpcmp_parts_d+0xb4>
10031180:	10c02226 	beq	r2,r3,1003120c <__fpcmp_parts_d+0xa8>
10031184:	00c00084 	movi	r3,2
10031188:	30c00526 	beq	r6,r3,100311a0 <__fpcmp_parts_d+0x3c>
1003118c:	10c0071e 	bne	r2,r3,100311ac <__fpcmp_parts_d+0x48>
10031190:	20800117 	ldw	r2,4(r4)
10031194:	1000091e 	bne	r2,zero,100311bc <__fpcmp_parts_d+0x58>
10031198:	00800044 	movi	r2,1
1003119c:	f800283a 	ret
100311a0:	10c01a1e 	bne	r2,r3,1003120c <__fpcmp_parts_d+0xa8>
100311a4:	0005883a 	mov	r2,zero
100311a8:	f800283a 	ret
100311ac:	22000117 	ldw	r8,4(r4)
100311b0:	28800117 	ldw	r2,4(r5)
100311b4:	40800326 	beq	r8,r2,100311c4 <__fpcmp_parts_d+0x60>
100311b8:	403ff726 	beq	r8,zero,10031198 <__fpcmp_parts_d+0x34>
100311bc:	00bfffc4 	movi	r2,-1
100311c0:	f800283a 	ret
100311c4:	20c00217 	ldw	r3,8(r4)
100311c8:	28800217 	ldw	r2,8(r5)
100311cc:	10fffa16 	blt	r2,r3,100311b8 <__fpcmp_parts_d+0x54>
100311d0:	18800916 	blt	r3,r2,100311f8 <__fpcmp_parts_d+0x94>
100311d4:	21c00417 	ldw	r7,16(r4)
100311d8:	28c00417 	ldw	r3,16(r5)
100311dc:	21800317 	ldw	r6,12(r4)
100311e0:	28800317 	ldw	r2,12(r5)
100311e4:	19fff436 	bltu	r3,r7,100311b8 <__fpcmp_parts_d+0x54>
100311e8:	38c00526 	beq	r7,r3,10031200 <__fpcmp_parts_d+0x9c>
100311ec:	38c00236 	bltu	r7,r3,100311f8 <__fpcmp_parts_d+0x94>
100311f0:	19ffec1e 	bne	r3,r7,100311a4 <__fpcmp_parts_d+0x40>
100311f4:	30bfeb2e 	bgeu	r6,r2,100311a4 <__fpcmp_parts_d+0x40>
100311f8:	403fe71e 	bne	r8,zero,10031198 <__fpcmp_parts_d+0x34>
100311fc:	003fef06 	br	100311bc <__fpcmp_parts_d+0x58>
10031200:	11bffa2e 	bgeu	r2,r6,100311ec <__fpcmp_parts_d+0x88>
10031204:	403fe426 	beq	r8,zero,10031198 <__fpcmp_parts_d+0x34>
10031208:	003fec06 	br	100311bc <__fpcmp_parts_d+0x58>
1003120c:	28800117 	ldw	r2,4(r5)
10031210:	103fe11e 	bne	r2,zero,10031198 <__fpcmp_parts_d+0x34>
10031214:	003fe906 	br	100311bc <__fpcmp_parts_d+0x58>
10031218:	11bfdd1e 	bne	r2,r6,10031190 <__fpcmp_parts_d+0x2c>
1003121c:	28c00117 	ldw	r3,4(r5)
10031220:	20800117 	ldw	r2,4(r4)
10031224:	1885c83a 	sub	r2,r3,r2
10031228:	f800283a 	ret

1003122c <__pack_f>:
1003122c:	20c00017 	ldw	r3,0(r4)
10031230:	01c00044 	movi	r7,1
10031234:	21800317 	ldw	r6,12(r4)
10031238:	21400117 	ldw	r5,4(r4)
1003123c:	38c02d2e 	bgeu	r7,r3,100312f4 <__pack_f+0xc8>
10031240:	00800104 	movi	r2,4
10031244:	18802826 	beq	r3,r2,100312e8 <__pack_f+0xbc>
10031248:	00800084 	movi	r2,2
1003124c:	18800126 	beq	r3,r2,10031254 <__pack_f+0x28>
10031250:	3000101e 	bne	r6,zero,10031294 <__pack_f+0x68>
10031254:	000d883a 	mov	r6,zero
10031258:	0007883a 	mov	r3,zero
1003125c:	19003fcc 	andi	r4,r3,255
10031260:	200895fa 	slli	r4,r4,23
10031264:	00c02034 	movhi	r3,128
10031268:	18ffffc4 	addi	r3,r3,-1
1003126c:	30c6703a 	and	r3,r6,r3
10031270:	10a0002c 	andhi	r2,r2,32768
10031274:	10c4b03a 	or	r2,r2,r3
10031278:	280a97fa 	slli	r5,r5,31
1003127c:	1104b03a 	or	r2,r2,r4
10031280:	00e00034 	movhi	r3,32768
10031284:	18ffffc4 	addi	r3,r3,-1
10031288:	10c4703a 	and	r2,r2,r3
1003128c:	1144b03a 	or	r2,r2,r5
10031290:	f800283a 	ret
10031294:	21000217 	ldw	r4,8(r4)
10031298:	00bfe084 	movi	r2,-126
1003129c:	20801b16 	blt	r4,r2,1003130c <__pack_f+0xe0>
100312a0:	00801fc4 	movi	r2,127
100312a4:	11001016 	blt	r2,r4,100312e8 <__pack_f+0xbc>
100312a8:	308e703a 	and	r7,r6,r2
100312ac:	2087883a 	add	r3,r4,r2
100312b0:	00801004 	movi	r2,64
100312b4:	38800526 	beq	r7,r2,100312cc <__pack_f+0xa0>
100312b8:	31800fc4 	addi	r6,r6,63
100312bc:	30000716 	blt	r6,zero,100312dc <__pack_f+0xb0>
100312c0:	300490ba 	slli	r2,r6,2
100312c4:	100cd27a 	srli	r6,r2,9
100312c8:	003fe406 	br	1003125c <__pack_f+0x30>
100312cc:	3080200c 	andi	r2,r6,128
100312d0:	103ffa26 	beq	r2,zero,100312bc <__pack_f+0x90>
100312d4:	31cd883a 	add	r6,r6,r7
100312d8:	003ff806 	br	100312bc <__pack_f+0x90>
100312dc:	300cd07a 	srli	r6,r6,1
100312e0:	18c00044 	addi	r3,r3,1
100312e4:	003ff606 	br	100312c0 <__pack_f+0x94>
100312e8:	000d883a 	mov	r6,zero
100312ec:	00ffffc4 	movi	r3,-1
100312f0:	003fda06 	br	1003125c <__pack_f+0x30>
100312f4:	31800434 	orhi	r6,r6,16
100312f8:	00802034 	movhi	r2,128
100312fc:	10bfffc4 	addi	r2,r2,-1
10031300:	308c703a 	and	r6,r6,r2
10031304:	00ffffc4 	movi	r3,-1
10031308:	003fd406 	br	1003125c <__pack_f+0x30>
1003130c:	1109c83a 	sub	r4,r2,r4
10031310:	00800644 	movi	r2,25
10031314:	11001216 	blt	r2,r4,10031360 <__pack_f+0x134>
10031318:	3904983a 	sll	r2,r7,r4
1003131c:	3106d83a 	srl	r3,r6,r4
10031320:	10bfffc4 	addi	r2,r2,-1
10031324:	3084703a 	and	r2,r6,r2
10031328:	1004c03a 	cmpne	r2,r2,zero
1003132c:	1886b03a 	or	r3,r3,r2
10031330:	19001fcc 	andi	r4,r3,127
10031334:	00801004 	movi	r2,64
10031338:	20800c26 	beq	r4,r2,1003136c <__pack_f+0x140>
1003133c:	18c00fc4 	addi	r3,r3,63
10031340:	00900034 	movhi	r2,16384
10031344:	10bfffc4 	addi	r2,r2,-1
10031348:	180cd1fa 	srli	r6,r3,7
1003134c:	10c7803a 	cmpltu	r3,r2,r3
10031350:	00802034 	movhi	r2,128
10031354:	10bfffc4 	addi	r2,r2,-1
10031358:	308c703a 	and	r6,r6,r2
1003135c:	003fbf06 	br	1003125c <__pack_f+0x30>
10031360:	0007883a 	mov	r3,zero
10031364:	000d883a 	mov	r6,zero
10031368:	003ff906 	br	10031350 <__pack_f+0x124>
1003136c:	1880200c 	andi	r2,r3,128
10031370:	10000126 	beq	r2,zero,10031378 <__pack_f+0x14c>
10031374:	1907883a 	add	r3,r3,r4
10031378:	180cd1fa 	srli	r6,r3,7
1003137c:	00900034 	movhi	r2,16384
10031380:	10bfffc4 	addi	r2,r2,-1
10031384:	10c7803a 	cmpltu	r3,r2,r3
10031388:	003ff106 	br	10031350 <__pack_f+0x124>

1003138c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1003138c:	defffd04 	addi	sp,sp,-12
10031390:	dc000015 	stw	r16,0(sp)
10031394:	dfc00215 	stw	ra,8(sp)
10031398:	dc400115 	stw	r17,4(sp)
1003139c:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
100313a0:	20001516 	blt	r4,zero,100313f8 <close+0x6c>
100313a4:	20c00324 	muli	r3,r4,12
100313a8:	00800034 	movhi	r2,0
100313ac:	10865e04 	addi	r2,r2,6520
100313b0:	1887883a 	add	r3,r3,r2

  if (fd)
100313b4:	18001026 	beq	r3,zero,100313f8 <close+0x6c>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
100313b8:	18800017 	ldw	r2,0(r3)
100313bc:	10800417 	ldw	r2,16(r2)
100313c0:	10001c26 	beq	r2,zero,10031434 <close+0xa8>
100313c4:	1809883a 	mov	r4,r3
100313c8:	103ee83a 	callr	r2
100313cc:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
100313d0:	8009883a 	mov	r4,r16
100313d4:	00318f40 	call	100318f4 <alt_release_fd>
    if (rval < 0)
100313d8:	88001b16 	blt	r17,zero,10031448 <close+0xbc>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
100313dc:	0007883a 	mov	r3,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
100313e0:	1805883a 	mov	r2,r3
100313e4:	dfc00217 	ldw	ra,8(sp)
100313e8:	dc400117 	ldw	r17,4(sp)
100313ec:	dc000017 	ldw	r16,0(sp)
100313f0:	dec00304 	addi	sp,sp,12
100313f4:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
100313f8:	00800034 	movhi	r2,0
100313fc:	108b1304 	addi	r2,r2,11340
10031400:	10800017 	ldw	r2,0(r2)
10031404:	10000d26 	beq	r2,zero,1003143c <close+0xb0>
10031408:	103ee83a 	callr	r2
1003140c:	1009883a 	mov	r4,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
10031410:	00ffffc4 	movi	r3,-1
10031414:	00801444 	movi	r2,81
10031418:	20800015 	stw	r2,0(r4)
    return -1;
  }
}
1003141c:	1805883a 	mov	r2,r3
10031420:	dfc00217 	ldw	ra,8(sp)
10031424:	dc400117 	ldw	r17,4(sp)
10031428:	dc000017 	ldw	r16,0(sp)
1003142c:	dec00304 	addi	sp,sp,12
10031430:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10031434:	00318f40 	call	100318f4 <alt_release_fd>
10031438:	003fe806 	br	100313dc <close+0x50>
1003143c:	01000034 	movhi	r4,0
10031440:	210b1f04 	addi	r4,r4,11388
10031444:	003ff206 	br	10031410 <close+0x84>
10031448:	00800034 	movhi	r2,0
1003144c:	108b1304 	addi	r2,r2,11340
10031450:	10800017 	ldw	r2,0(r2)
10031454:	10000626 	beq	r2,zero,10031470 <close+0xe4>
10031458:	103ee83a 	callr	r2
1003145c:	1009883a 	mov	r4,r2
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
10031460:	0445c83a 	sub	r2,zero,r17
10031464:	00ffffc4 	movi	r3,-1
10031468:	20800015 	stw	r2,0(r4)
1003146c:	003fdc06 	br	100313e0 <close+0x54>
10031470:	01000034 	movhi	r4,0
10031474:	210b1f04 	addi	r4,r4,11388
10031478:	003ff906 	br	10031460 <close+0xd4>

1003147c <alt_dcache_flush>:
  {
    len = NIOS2_DCACHE_SIZE;
  }
  #endif

  end = ((char*) start) + len; 
1003147c:	2145883a 	add	r2,r4,r5
10031480:	2007883a 	mov	r3,r4

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
10031484:	2080032e 	bgeu	r4,r2,10031494 <alt_dcache_flush+0x18>
  { 
    ALT_FLUSH_DATA(i); 
10031488:	1800001b 	flushda	0(r3)
  }
  #endif

  end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
1003148c:	18c00804 	addi	r3,r3,32
10031490:	18bffd36 	bltu	r3,r2,10031488 <alt_dcache_flush+0xc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
10031494:	208007cc 	andi	r2,r4,31
10031498:	10000126 	beq	r2,zero,100314a0 <alt_dcache_flush+0x24>
  {
    ALT_FLUSH_DATA(i);
1003149c:	1800001b 	flushda	0(r3)
100314a0:	f800283a 	ret

100314a4 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
100314a4:	3005883a 	mov	r2,r6
100314a8:	f800283a 	ret

100314ac <alt_flash_close_dev>:
  return dev;
}

void alt_flash_close_dev(alt_flash_fd* fd)
{
  if (fd && fd->close)
100314ac:	20000326 	beq	r4,zero,100314bc <alt_flash_close_dev+0x10>
100314b0:	20800417 	ldw	r2,16(r4)
100314b4:	10000126 	beq	r2,zero,100314bc <alt_flash_close_dev+0x10>
  {
    fd->close(fd);
100314b8:	1000683a 	jmp	r2
100314bc:	f800283a 	ret

100314c0 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
100314c0:	defffe04 	addi	sp,sp,-8
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
100314c4:	d1600d04 	addi	r5,gp,-32716
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
100314c8:	dc000015 	stw	r16,0(sp)
100314cc:	dfc00115 	stw	ra,4(sp)
100314d0:	2021883a 	mov	r16,r4
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
100314d4:	00327080 	call	10032708 <alt_find_dev>

  if ((dev) && dev->open)
100314d8:	10000826 	beq	r2,zero,100314fc <alt_flash_open_dev+0x3c>
100314dc:	10c00317 	ldw	r3,12(r2)
  {
    return dev->open(dev, name);
100314e0:	1009883a 	mov	r4,r2
100314e4:	800b883a 	mov	r5,r16

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);

  if ((dev) && dev->open)
100314e8:	18000426 	beq	r3,zero,100314fc <alt_flash_open_dev+0x3c>
  {
    return dev->open(dev, name);
  }

  return dev;
}
100314ec:	dfc00117 	ldw	ra,4(sp)
100314f0:	dc000017 	ldw	r16,0(sp)
100314f4:	dec00204 	addi	sp,sp,8
{
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);

  if ((dev) && dev->open)
  {
    return dev->open(dev, name);
100314f8:	1800683a 	jmp	r3
  }

  return dev;
}
100314fc:	dfc00117 	ldw	ra,4(sp)
10031500:	dc000017 	ldw	r16,0(sp)
10031504:	dec00204 	addi	sp,sp,8
10031508:	f800283a 	ret

1003150c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1003150c:	deffff04 	addi	sp,sp,-4
10031510:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10031514:	20c00324 	muli	r3,r4,12
10031518:	20001116 	blt	r4,zero,10031560 <fstat+0x54>
1003151c:	00800034 	movhi	r2,0
10031520:	10865e04 	addi	r2,r2,6520
10031524:	1889883a 	add	r4,r3,r2
  
  if (fd)
10031528:	20000d26 	beq	r4,zero,10031560 <fstat+0x54>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1003152c:	20800017 	ldw	r2,0(r4)
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10031530:	0007883a 	mov	r3,zero
  
  if (fd)
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10031534:	10800817 	ldw	r2,32(r2)
10031538:	10000326 	beq	r2,zero,10031548 <fstat+0x3c>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
1003153c:	dfc00017 	ldw	ra,0(sp)
10031540:	dec00104 	addi	sp,sp,4
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    {
      return fd->dev->fstat(fd, st);
10031544:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10031548:	00880004 	movi	r2,8192
1003154c:	28800115 	stw	r2,4(r5)
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
10031550:	1805883a 	mov	r2,r3
10031554:	dfc00017 	ldw	ra,0(sp)
10031558:	dec00104 	addi	sp,sp,4
1003155c:	f800283a 	ret
10031560:	00800034 	movhi	r2,0
10031564:	108b1304 	addi	r2,r2,11340
10031568:	10800017 	ldw	r2,0(r2)
1003156c:	00c00034 	movhi	r3,0
10031570:	18cb1f04 	addi	r3,r3,11388
10031574:	10000226 	beq	r2,zero,10031580 <fstat+0x74>
10031578:	103ee83a 	callr	r2
1003157c:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10031580:	00801444 	movi	r2,81
10031584:	18800015 	stw	r2,0(r3)
10031588:	00ffffc4 	movi	r3,-1
    return -1;
  }
}
1003158c:	1805883a 	mov	r2,r3
10031590:	dfc00017 	ldw	ra,0(sp)
10031594:	dec00104 	addi	sp,sp,4
10031598:	f800283a 	ret

1003159c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1003159c:	defff004 	addi	sp,sp,-64
100315a0:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100315a4:	20c00324 	muli	r3,r4,12
100315a8:	20000f16 	blt	r4,zero,100315e8 <isatty+0x4c>
100315ac:	00800034 	movhi	r2,0
100315b0:	10865e04 	addi	r2,r2,6520
100315b4:	1885883a 	add	r2,r3,r2
  
  if (fd)
100315b8:	10000b26 	beq	r2,zero,100315e8 <isatty+0x4c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
100315bc:	10800017 	ldw	r2,0(r2)
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
100315c0:	d80b883a 	mov	r5,sp
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
100315c4:	10c00817 	ldw	r3,32(r2)
100315c8:	00800044 	movi	r2,1
100315cc:	18000326 	beq	r3,zero,100315dc <isatty+0x40>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
100315d0:	003150c0 	call	1003150c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
100315d4:	d8c00117 	ldw	r3,4(sp)
100315d8:	18880020 	cmpeqi	r2,r3,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
100315dc:	dfc00f17 	ldw	ra,60(sp)
100315e0:	dec01004 	addi	sp,sp,64
100315e4:	f800283a 	ret
100315e8:	00800034 	movhi	r2,0
100315ec:	108b1304 	addi	r2,r2,11340
100315f0:	10800017 	ldw	r2,0(r2)
100315f4:	00c00034 	movhi	r3,0
100315f8:	18cb1f04 	addi	r3,r3,11388
100315fc:	10000226 	beq	r2,zero,10031608 <isatty+0x6c>
10031600:	103ee83a 	callr	r2
10031604:	1007883a 	mov	r3,r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10031608:	00801444 	movi	r2,81
1003160c:	18800015 	stw	r2,0(r3)
10031610:	0005883a 	mov	r2,zero
    return 0;
  }
}
10031614:	dfc00f17 	ldw	ra,60(sp)
10031618:	dec01004 	addi	sp,sp,64
1003161c:	f800283a 	ret

10031620 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10031620:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10031624:	010400f4 	movhi	r4,4099
10031628:	21108704 	addi	r4,r4,16924
1003162c:	00c00034 	movhi	r3,0
10031630:	18c44504 	addi	r3,r3,4372
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10031634:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
10031638:	20c00826 	beq	r4,r3,1003165c <alt_load+0x3c>
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1003163c:	01400034 	movhi	r5,0
10031640:	294b1a04 	addi	r5,r5,11368
  {
    while( to != end )
10031644:	19400526 	beq	r3,r5,1003165c <alt_load+0x3c>
    {
      *to++ = *from++;
10031648:	20800017 	ldw	r2,0(r4)
1003164c:	21000104 	addi	r4,r4,4
10031650:	18800015 	stw	r2,0(r3)
10031654:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10031658:	28fffb1e 	bne	r5,r3,10031648 <alt_load+0x28>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1003165c:	010400b4 	movhi	r4,4098
10031660:	21000804 	addi	r4,r4,32
10031664:	00c400b4 	movhi	r3,4098
10031668:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
1003166c:	20c00826 	beq	r4,r3,10031690 <alt_load+0x70>
10031670:	014400b4 	movhi	r5,4098
10031674:	29406104 	addi	r5,r5,388
  {
    while( to != end )
10031678:	19400526 	beq	r3,r5,10031690 <alt_load+0x70>
    {
      *to++ = *from++;
1003167c:	20800017 	ldw	r2,0(r4)
10031680:	21000104 	addi	r4,r4,4
10031684:	18800015 	stw	r2,0(r3)
10031688:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1003168c:	28fffb1e 	bne	r5,r3,1003167c <alt_load+0x5c>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10031690:	010400f4 	movhi	r4,4099
10031694:	210c4204 	addi	r4,r4,12552
10031698:	00c00034 	movhi	r3,0
1003169c:	18c00004 	addi	r3,r3,0

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
100316a0:	20c00826 	beq	r4,r3,100316c4 <alt_load+0xa4>
100316a4:	01400034 	movhi	r5,0
100316a8:	29444504 	addi	r5,r5,4372
  {
    while( to != end )
100316ac:	19400526 	beq	r3,r5,100316c4 <alt_load+0xa4>
    {
      *to++ = *from++;
100316b0:	20800017 	ldw	r2,0(r4)
100316b4:	21000104 	addi	r4,r4,4
100316b8:	18800015 	stw	r2,0(r3)
100316bc:	18c00104 	addi	r3,r3,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
100316c0:	28fffb1e 	bne	r5,r3,100316b0 <alt_load+0x90>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100316c4:	00325dc0 	call	100325dc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
100316c8:	dfc00017 	ldw	ra,0(sp)
100316cc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
100316d0:	003279c1 	jmpi	1003279c <alt_icache_flush_all>

100316d4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
100316d4:	defffe04 	addi	sp,sp,-8
100316d8:	dfc00115 	stw	ra,4(sp)
100316dc:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100316e0:	20001f16 	blt	r4,zero,10031760 <lseek+0x8c>
100316e4:	20c00324 	muli	r3,r4,12
100316e8:	00800034 	movhi	r2,0
100316ec:	10865e04 	addi	r2,r2,6520
100316f0:	1889883a 	add	r4,r3,r2
  
  if (fd) 
100316f4:	20001c26 	beq	r4,zero,10031768 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
100316f8:	20800017 	ldw	r2,0(r4)
100316fc:	10800717 	ldw	r2,28(r2)
10031700:	10000626 	beq	r2,zero,1003171c <lseek+0x48>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10031704:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
10031708:	10000516 	blt	r2,zero,10031720 <lseek+0x4c>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
1003170c:	dfc00117 	ldw	ra,4(sp)
10031710:	dc000017 	ldw	r16,0(sp)
10031714:	dec00204 	addi	sp,sp,8
10031718:	f800283a 	ret
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1003171c:	00bfde84 	movi	r2,-134
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
10031720:	00a1c83a 	sub	r16,zero,r2
10031724:	00800034 	movhi	r2,0
10031728:	108b1304 	addi	r2,r2,11340
1003172c:	10800017 	ldw	r2,0(r2)
10031730:	10000826 	beq	r2,zero,10031754 <lseek+0x80>
10031734:	103ee83a 	callr	r2
10031738:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
1003173c:	00bfffc4 	movi	r2,-1
10031740:	1c000015 	stw	r16,0(r3)
    rc = -1;
  }

  return rc;
}
10031744:	dfc00117 	ldw	ra,4(sp)
10031748:	dc000017 	ldw	r16,0(sp)
1003174c:	dec00204 	addi	sp,sp,8
10031750:	f800283a 	ret
10031754:	00c00034 	movhi	r3,0
10031758:	18cb1f04 	addi	r3,r3,11388
1003175c:	003ff706 	br	1003173c <lseek+0x68>
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10031760:	04001444 	movi	r16,81
10031764:	003fef06 	br	10031724 <lseek+0x50>
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
10031768:	00bfebc4 	movi	r2,-81
1003176c:	003fec06 	br	10031720 <lseek+0x4c>

10031770 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10031770:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10031774:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10031778:	dfc00115 	stw	ra,4(sp)
1003177c:	dc400015 	stw	r17,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10031780:	0031a840 	call	10031a84 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10031784:	0031aa40 	call	10031aa4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10031788:	01000034 	movhi	r4,0
1003178c:	21043e04 	addi	r4,r4,4344
10031790:	200b883a 	mov	r5,r4
10031794:	200d883a 	mov	r6,r4
10031798:	00328cc0 	call	100328cc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1003179c:	00326700 	call	10032670 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
100317a0:	010400f4 	movhi	r4,4099
100317a4:	2109af04 	addi	r4,r4,9916
100317a8:	0032dbc0 	call	10032dbc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
100317ac:	d1201c17 	ldw	r4,-32656(gp)
100317b0:	d1601d17 	ldw	r5,-32652(gp)
100317b4:	d1a01e17 	ldw	r6,-32648(gp)
100317b8:	00221b40 	call	100221b4 <main>
100317bc:	1023883a 	mov	r17,r2
  close(STDOUT_FILENO);
100317c0:	01000044 	movi	r4,1
100317c4:	003138c0 	call	1003138c <close>
  exit (result);
100317c8:	8809883a 	mov	r4,r17
100317cc:	0032dd00 	call	10032dd0 <exit>

100317d0 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
100317d0:	f800283a 	ret

100317d4 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
100317d4:	f800283a 	ret

100317d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
100317d8:	defffe04 	addi	sp,sp,-8
100317dc:	dfc00115 	stw	ra,4(sp)
100317e0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100317e4:	20002516 	blt	r4,zero,1003187c <read+0xa4>
100317e8:	20c00324 	muli	r3,r4,12
100317ec:	00800034 	movhi	r2,0
100317f0:	10865e04 	addi	r2,r2,6520
100317f4:	1889883a 	add	r4,r3,r2
  
  if (fd)
100317f8:	20002026 	beq	r4,zero,1003187c <read+0xa4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100317fc:	20800217 	ldw	r2,8(r4)
10031800:	00c00044 	movi	r3,1
10031804:	108000cc 	andi	r2,r2,3
10031808:	10c00b26 	beq	r2,r3,10031838 <read+0x60>
1003180c:	20800017 	ldw	r2,0(r4)
10031810:	10800517 	ldw	r2,20(r2)
10031814:	10000826 	beq	r2,zero,10031838 <read+0x60>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10031818:	103ee83a 	callr	r2
1003181c:	1021883a 	mov	r16,r2
10031820:	10002716 	blt	r2,zero,100318c0 <read+0xe8>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
10031824:	8005883a 	mov	r2,r16
10031828:	dfc00117 	ldw	ra,4(sp)
1003182c:	dc000017 	ldw	r16,0(sp)
10031830:	dec00204 	addi	sp,sp,8
10031834:	f800283a 	ret
10031838:	00800034 	movhi	r2,0
1003183c:	108b1304 	addi	r2,r2,11340
10031840:	10800017 	ldw	r2,0(r2)
10031844:	10000a26 	beq	r2,zero,10031870 <read+0x98>
10031848:	103ee83a 	callr	r2
1003184c:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
10031850:	043fffc4 	movi	r16,-1
10031854:	00800344 	movi	r2,13
10031858:	18800015 	stw	r2,0(r3)
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
1003185c:	8005883a 	mov	r2,r16
10031860:	dfc00117 	ldw	ra,4(sp)
10031864:	dc000017 	ldw	r16,0(sp)
10031868:	dec00204 	addi	sp,sp,8
1003186c:	f800283a 	ret
10031870:	00c00034 	movhi	r3,0
10031874:	18cb1f04 	addi	r3,r3,11388
10031878:	003ff506 	br	10031850 <read+0x78>
1003187c:	00800034 	movhi	r2,0
10031880:	108b1304 	addi	r2,r2,11340
10031884:	10800017 	ldw	r2,0(r2)
10031888:	10000a26 	beq	r2,zero,100318b4 <read+0xdc>
1003188c:	103ee83a 	callr	r2
10031890:	1007883a 	mov	r3,r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10031894:	00801444 	movi	r2,81
10031898:	043fffc4 	movi	r16,-1
1003189c:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
100318a0:	8005883a 	mov	r2,r16
100318a4:	dfc00117 	ldw	ra,4(sp)
100318a8:	dc000017 	ldw	r16,0(sp)
100318ac:	dec00204 	addi	sp,sp,8
100318b0:	f800283a 	ret
100318b4:	00c00034 	movhi	r3,0
100318b8:	18cb1f04 	addi	r3,r3,11388
100318bc:	003ff506 	br	10031894 <read+0xbc>
100318c0:	00800034 	movhi	r2,0
100318c4:	108b1304 	addi	r2,r2,11340
100318c8:	10800017 	ldw	r2,0(r2)
100318cc:	10000626 	beq	r2,zero,100318e8 <read+0x110>
100318d0:	103ee83a 	callr	r2
100318d4:	1007883a 	mov	r3,r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
100318d8:	0405c83a 	sub	r2,zero,r16
100318dc:	043fffc4 	movi	r16,-1
100318e0:	18800015 	stw	r2,0(r3)
100318e4:	003fcf06 	br	10031824 <read+0x4c>
100318e8:	00c00034 	movhi	r3,0
100318ec:	18cb1f04 	addi	r3,r3,11388
100318f0:	003ff906 	br	100318d8 <read+0x100>

100318f4 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
100318f4:	00800084 	movi	r2,2
  {
    alt_fd_list[fd].fd_flags = 0;
100318f8:	20c00324 	muli	r3,r4,12
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
100318fc:	1100050e 	bge	r2,r4,10031914 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
10031900:	00800034 	movhi	r2,0
10031904:	10865e04 	addi	r2,r2,6520
10031908:	1885883a 	add	r2,r3,r2
    alt_fd_list[fd].dev      = 0;
1003190c:	10000015 	stw	zero,0(r2)

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
10031910:	10000215 	stw	zero,8(r2)
10031914:	f800283a 	ret

10031918 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10031918:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1003191c:	00bfff84 	movi	r2,-2
10031920:	2884703a 	and	r2,r5,r2
10031924:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10031928:	d0e00f17 	ldw	r3,-32708(gp)
1003192c:	00bfff04 	movi	r2,-4
10031930:	18c000c4 	addi	r3,r3,3
10031934:	1886703a 	and	r3,r3,r2
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10031938:	1909883a 	add	r4,r3,r4
1003193c:	00840034 	movhi	r2,4096
10031940:	10800004 	addi	r2,r2,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10031944:	d0e00f15 	stw	r3,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10031948:	1100042e 	bgeu	r2,r4,1003195c <sbrk+0x44>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1003194c:	2801703a 	wrctl	status,r5
10031950:	00ffffc4 	movi	r3,-1
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
10031954:	1805883a 	mov	r2,r3
10031958:	f800283a 	ret
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
1003195c:	d1200f15 	stw	r4,-32708(gp)
10031960:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
10031964:	1805883a 	mov	r2,r3
10031968:	f800283a 	ret

1003196c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1003196c:	defffe04 	addi	sp,sp,-8
10031970:	dfc00115 	stw	ra,4(sp)
10031974:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10031978:	20002416 	blt	r4,zero,10031a0c <write+0xa0>
1003197c:	20c00324 	muli	r3,r4,12
10031980:	00800034 	movhi	r2,0
10031984:	10865e04 	addi	r2,r2,6520
10031988:	1889883a 	add	r4,r3,r2
  
  if (fd)
1003198c:	20001f26 	beq	r4,zero,10031a0c <write+0xa0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10031990:	20800217 	ldw	r2,8(r4)
10031994:	108000cc 	andi	r2,r2,3
10031998:	10000b26 	beq	r2,zero,100319c8 <write+0x5c>
1003199c:	20800017 	ldw	r2,0(r4)
100319a0:	10800617 	ldw	r2,24(r2)
100319a4:	10000826 	beq	r2,zero,100319c8 <write+0x5c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
100319a8:	103ee83a 	callr	r2
100319ac:	1021883a 	mov	r16,r2
100319b0:	10002716 	blt	r2,zero,10031a50 <write+0xe4>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
100319b4:	8005883a 	mov	r2,r16
100319b8:	dfc00117 	ldw	ra,4(sp)
100319bc:	dc000017 	ldw	r16,0(sp)
100319c0:	dec00204 	addi	sp,sp,8
100319c4:	f800283a 	ret
100319c8:	00800034 	movhi	r2,0
100319cc:	108b1304 	addi	r2,r2,11340
100319d0:	10800017 	ldw	r2,0(r2)
100319d4:	10000a26 	beq	r2,zero,10031a00 <write+0x94>
100319d8:	103ee83a 	callr	r2
100319dc:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
100319e0:	043fffc4 	movi	r16,-1
100319e4:	00800344 	movi	r2,13
100319e8:	18800015 	stw	r2,0(r3)
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
100319ec:	8005883a 	mov	r2,r16
100319f0:	dfc00117 	ldw	ra,4(sp)
100319f4:	dc000017 	ldw	r16,0(sp)
100319f8:	dec00204 	addi	sp,sp,8
100319fc:	f800283a 	ret
10031a00:	00c00034 	movhi	r3,0
10031a04:	18cb1f04 	addi	r3,r3,11388
10031a08:	003ff506 	br	100319e0 <write+0x74>
10031a0c:	00800034 	movhi	r2,0
10031a10:	108b1304 	addi	r2,r2,11340
10031a14:	10800017 	ldw	r2,0(r2)
10031a18:	10000a26 	beq	r2,zero,10031a44 <write+0xd8>
10031a1c:	103ee83a 	callr	r2
10031a20:	1007883a 	mov	r3,r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10031a24:	00801444 	movi	r2,81
10031a28:	043fffc4 	movi	r16,-1
10031a2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
}
10031a30:	8005883a 	mov	r2,r16
10031a34:	dfc00117 	ldw	ra,4(sp)
10031a38:	dc000017 	ldw	r16,0(sp)
10031a3c:	dec00204 	addi	sp,sp,8
10031a40:	f800283a 	ret
10031a44:	00c00034 	movhi	r3,0
10031a48:	18cb1f04 	addi	r3,r3,11388
10031a4c:	003ff506 	br	10031a24 <write+0xb8>
10031a50:	00800034 	movhi	r2,0
10031a54:	108b1304 	addi	r2,r2,11340
10031a58:	10800017 	ldw	r2,0(r2)
10031a5c:	10000626 	beq	r2,zero,10031a78 <write+0x10c>
10031a60:	103ee83a 	callr	r2
10031a64:	1007883a 	mov	r3,r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
10031a68:	0405c83a 	sub	r2,zero,r16
10031a6c:	043fffc4 	movi	r16,-1
10031a70:	18800015 	stw	r2,0(r3)
10031a74:	003fcf06 	br	100319b4 <write+0x48>
10031a78:	00c00034 	movhi	r3,0
10031a7c:	18cb1f04 	addi	r3,r3,11388
10031a80:	003ff906 	br	10031a68 <write+0xfc>

10031a84 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10031a84:	deffff04 	addi	sp,sp,-4
10031a88:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
10031a8c:	0032c6c0 	call	10032c6c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10031a90:	00800044 	movi	r2,1
10031a94:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10031a98:	dfc00017 	ldw	ra,0(sp)
10031a9c:	dec00104 	addi	sp,sp,4
10031aa0:	f800283a 	ret

10031aa4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10031aa4:	defffd04 	addi	sp,sp,-12
10031aa8:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
10031aac:	04000034 	movhi	r16,0
10031ab0:	8406c804 	addi	r16,r16,6944
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10031ab4:	dc800115 	stw	r18,4(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
10031ab8:	000d883a 	mov	r6,zero
10031abc:	8009883a 	mov	r4,r16

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10031ac0:	04800034 	movhi	r18,0
10031ac4:	948b1004 	addi	r18,r18,11328
10031ac8:	000b883a 	mov	r5,zero
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10031acc:	dfc00215 	stw	ra,8(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
10031ad0:	0031bf00 	call	10031bf0 <altera_avalon_jtag_uart_init>
10031ad4:	813ff604 	addi	r4,r16,-40
10031ad8:	900b883a 	mov	r5,r18
10031adc:	00325f40 	call	100325f4 <alt_dev_llist_insert>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
10031ae0:	04000034 	movhi	r16,0
10031ae4:	840ae004 	addi	r16,r16,11136
10031ae8:	8009883a 	mov	r4,r16
10031aec:	000b883a 	mov	r5,zero
10031af0:	01800044 	movi	r6,1
10031af4:	00322900 	call	10032290 <altera_avalon_uart_init>
10031af8:	813ff604 	addi	r4,r16,-40
10031afc:	900b883a 	mov	r5,r18
}
10031b00:	dfc00217 	ldw	ra,8(sp)
10031b04:	dc800117 	ldw	r18,4(sp)
10031b08:	dc000017 	ldw	r16,0(sp)
10031b0c:	dec00304 	addi	sp,sp,12
10031b10:	00325f41 	jmpi	100325f4 <alt_dev_llist_insert>

10031b14 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10031b14:	21000017 	ldw	r4,0(r4)
10031b18:	21000a04 	addi	r4,r4,40
10031b1c:	0031d781 	jmpi	10031d78 <altera_avalon_jtag_uart_ioctl>

10031b20 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10031b20:	20800017 	ldw	r2,0(r4)
10031b24:	21400217 	ldw	r5,8(r4)
10031b28:	11000a04 	addi	r4,r2,40
10031b2c:	0031b501 	jmpi	10031b50 <altera_avalon_jtag_uart_close>

10031b30 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10031b30:	20800017 	ldw	r2,0(r4)
10031b34:	21c00217 	ldw	r7,8(r4)
10031b38:	11000a04 	addi	r4,r2,40
10031b3c:	0031f6c1 	jmpi	10031f6c <altera_avalon_jtag_uart_write>

10031b40 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10031b40:	20800017 	ldw	r2,0(r4)
10031b44:	21c00217 	ldw	r7,8(r4)
10031b48:	11000a04 	addi	r4,r2,40
10031b4c:	0031e001 	jmpi	10031e00 <altera_avalon_jtag_uart_read>

10031b50 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10031b50:	2950000c 	andi	r5,r5,16384
10031b54:	21800c17 	ldw	r6,48(r4)
10031b58:	28000426 	beq	r5,zero,10031b6c <altera_avalon_jtag_uart_close+0x1c>
10031b5c:	00000706 	br	10031b7c <altera_avalon_jtag_uart_close+0x2c>
10031b60:	20c00917 	ldw	r3,36(r4)
10031b64:	20800117 	ldw	r2,4(r4)
10031b68:	1880022e 	bgeu	r3,r2,10031b74 <altera_avalon_jtag_uart_close+0x24>
10031b6c:	20800d17 	ldw	r2,52(r4)
10031b70:	11bffb1e 	bne	r2,r6,10031b60 <altera_avalon_jtag_uart_close+0x10>
10031b74:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
10031b78:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10031b7c:	20800d17 	ldw	r2,52(r4)
10031b80:	11bffc26 	beq	r2,r6,10031b74 <altera_avalon_jtag_uart_close+0x24>
10031b84:	20c00117 	ldw	r3,4(r4)
10031b88:	20800917 	ldw	r2,36(r4)
10031b8c:	10fff92e 	bgeu	r2,r3,10031b74 <altera_avalon_jtag_uart_close+0x24>
10031b90:	00bffd44 	movi	r2,-11
10031b94:	f800283a 	ret

10031b98 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10031b98:	20c00017 	ldw	r3,0(r4)
10031b9c:	18800137 	ldwio	r2,4(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10031ba0:	1081000c 	andi	r2,r2,1024
10031ba4:	10000a1e 	bne	r2,zero,10031bd0 <altera_avalon_jtag_uart_timeout+0x38>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10031ba8:	20c00917 	ldw	r3,36(r4)
10031bac:	00a00034 	movhi	r2,32768
10031bb0:	10bfff04 	addi	r2,r2,-4
    sp->host_inactive++;
10031bb4:	19400044 	addi	r5,r3,1
  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10031bb8:	10c00136 	bltu	r2,r3,10031bc0 <altera_avalon_jtag_uart_timeout+0x28>
    sp->host_inactive++;
10031bbc:	21400915 	stw	r5,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10031bc0:	00c00034 	movhi	r3,0
10031bc4:	18cb2704 	addi	r3,r3,11420
10031bc8:	18800017 	ldw	r2,0(r3)
10031bcc:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10031bd0:	20800817 	ldw	r2,32(r4)
10031bd4:	10810014 	ori	r2,r2,1024
10031bd8:	18800135 	stwio	r2,4(r3)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10031bdc:	00c00034 	movhi	r3,0
10031be0:	18cb2704 	addi	r3,r3,11420
10031be4:	18800017 	ldw	r2,0(r3)
  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
10031be8:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10031bec:	f800283a 	ret

10031bf0 <altera_avalon_jtag_uart_init>:
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10031bf0:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10031bf4:	defffd04 	addi	sp,sp,-12
10031bf8:	dc000115 	stw	r16,4(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10031bfc:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10031c00:	2021883a 	mov	r16,r4
10031c04:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10031c08:	20800815 	stw	r2,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10031c0c:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10031c10:	2809883a 	mov	r4,r5
10031c14:	800f883a 	mov	r7,r16
10031c18:	300b883a 	mov	r5,r6
10031c1c:	018400f4 	movhi	r6,4099
10031c20:	31871c04 	addi	r6,r6,7280
10031c24:	d8000015 	stw	zero,0(sp)
10031c28:	00328400 	call	10032840 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10031c2c:	00c00034 	movhi	r3,0
10031c30:	18cb2704 	addi	r3,r3,11420
10031c34:	19400017 	ldw	r5,0(r3)
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10031c38:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10031c3c:	81000204 	addi	r4,r16,8
10031c40:	018400f4 	movhi	r6,4099
10031c44:	3186e604 	addi	r6,r6,7064
10031c48:	800f883a 	mov	r7,r16
10031c4c:	00325480 	call	10032548 <alt_alarm_start>
10031c50:	1000030e 	bge	r2,zero,10031c60 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10031c54:	00a00034 	movhi	r2,32768
10031c58:	10bfffc4 	addi	r2,r2,-1
10031c5c:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10031c60:	dfc00217 	ldw	ra,8(sp)
10031c64:	dc000117 	ldw	r16,4(sp)
10031c68:	dec00304 	addi	sp,sp,12
10031c6c:	f800283a 	ret

10031c70 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
10031c70:	21c00017 	ldw	r7,0(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10031c74:	200b883a 	mov	r5,r4
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
10031c78:	3a800104 	addi	r10,r7,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10031c7c:	52400037 	ldwio	r9,0(r10)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10031c80:	4880c00c 	andi	r2,r9,768
10031c84:	10003426 	beq	r2,zero,10031d58 <altera_avalon_jtag_uart_irq+0xe8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10031c88:	4880400c 	andi	r2,r9,256
10031c8c:	10001626 	beq	r2,zero,10031ce8 <altera_avalon_jtag_uart_irq+0x78>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10031c90:	28800a17 	ldw	r2,40(r5)
        if (next == sp->rx_out)
10031c94:	2a000b17 	ldw	r8,44(r5)
10031c98:	10800044 	addi	r2,r2,1
10031c9c:	1081ffcc 	andi	r2,r2,2047
10031ca0:	12000c1e 	bne	r2,r8,10031cd4 <altera_avalon_jtag_uart_irq+0x64>
10031ca4:	00002d06 	br	10031d5c <altera_avalon_jtag_uart_irq+0xec>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10031ca8:	28800a17 	ldw	r2,40(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10031cac:	28c00a17 	ldw	r3,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10031cb0:	1145883a 	add	r2,r2,r5
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10031cb4:	18c00044 	addi	r3,r3,1
10031cb8:	18c1ffcc 	andi	r3,r3,2047
10031cbc:	28c00a15 	stw	r3,40(r5)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10031cc0:	29000a17 	ldw	r4,40(r5)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10031cc4:	11800e05 	stb	r6,56(r2)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
10031cc8:	21000044 	addi	r4,r4,1
10031ccc:	2101ffcc 	andi	r4,r4,2047
10031cd0:	22000326 	beq	r4,r8,10031ce0 <altera_avalon_jtag_uart_irq+0x70>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10031cd4:	39800037 	ldwio	r6,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10031cd8:	30a0000c 	andi	r2,r6,32768
10031cdc:	103ff21e 	bne	r2,zero,10031ca8 <altera_avalon_jtag_uart_irq+0x38>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10031ce0:	30bfffec 	andhi	r2,r6,65535
10031ce4:	10001d1e 	bne	r2,zero,10031d5c <altera_avalon_jtag_uart_irq+0xec>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10031ce8:	4880800c 	andi	r2,r9,512
10031cec:	103fe326 	beq	r2,zero,10031c7c <altera_avalon_jtag_uart_irq+0xc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10031cf0:	4808d43a 	srli	r4,r9,16

      while (space > 0 && sp->tx_out != sp->tx_in)
10031cf4:	20000b1e 	bne	r4,zero,10031d24 <altera_avalon_jtag_uart_irq+0xb4>
10031cf8:	003fe006 	br	10031c7c <altera_avalon_jtag_uart_irq+0xc>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10031cfc:	28800d17 	ldw	r2,52(r5)
10031d00:	1145883a 	add	r2,r2,r5
10031d04:	10c20e07 	ldb	r3,2104(r2)
10031d08:	38c00035 	stwio	r3,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10031d0c:	28800d17 	ldw	r2,52(r5)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10031d10:	213fffc4 	addi	r4,r4,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10031d14:	10800044 	addi	r2,r2,1
10031d18:	1081ffcc 	andi	r2,r2,2047
10031d1c:	28800d15 	stw	r2,52(r5)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10031d20:	203fd626 	beq	r4,zero,10031c7c <altera_avalon_jtag_uart_irq+0xc>
10031d24:	28c00d17 	ldw	r3,52(r5)
10031d28:	28800c17 	ldw	r2,48(r5)
10031d2c:	18bff31e 	bne	r3,r2,10031cfc <altera_avalon_jtag_uart_irq+0x8c>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10031d30:	28800817 	ldw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10031d34:	29000017 	ldw	r4,0(r5)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10031d38:	00ffff44 	movi	r3,-3
10031d3c:	10c4703a 	and	r2,r2,r3
10031d40:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10031d44:	20800135 	stwio	r2,4(r4)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10031d48:	50c00037 	ldwio	r3,0(r10)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10031d4c:	52400037 	ldwio	r9,0(r10)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10031d50:	4880c00c 	andi	r2,r9,768
10031d54:	103fcc1e 	bne	r2,zero,10031c88 <altera_avalon_jtag_uart_irq+0x18>
10031d58:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10031d5c:	28800817 	ldw	r2,32(r5)
10031d60:	00ffff84 	movi	r3,-2
10031d64:	10c4703a 	and	r2,r2,r3
10031d68:	28800815 	stw	r2,32(r5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10031d6c:	50800035 	stwio	r2,0(r10)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10031d70:	50c00037 	ldwio	r3,0(r10)
10031d74:	003fdc06 	br	10031ce8 <altera_avalon_jtag_uart_irq+0x78>

10031d78 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
10031d78:	009a8044 	movi	r2,27137
10031d7c:	28800f26 	beq	r5,r2,10031dbc <altera_avalon_jtag_uart_ioctl+0x44>
10031d80:	009a8084 	movi	r2,27138
10031d84:	28800326 	beq	r5,r2,10031d94 <altera_avalon_jtag_uart_ioctl+0x1c>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10031d88:	00fff9c4 	movi	r3,-25
  default:
    break;
  }

  return rc;
}
10031d8c:	1805883a 	mov	r2,r3
10031d90:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10031d94:	21400117 	ldw	r5,4(r4)
10031d98:	00a00034 	movhi	r2,32768
10031d9c:	10bfffc4 	addi	r2,r2,-1
10031da0:	28bff926 	beq	r5,r2,10031d88 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10031da4:	20800917 	ldw	r2,36(r4)
10031da8:	0007883a 	mov	r3,zero
10031dac:	1145803a 	cmpltu	r2,r2,r5
10031db0:	30800015 	stw	r2,0(r6)
  default:
    break;
  }

  return rc;
}
10031db4:	1805883a 	mov	r2,r3
10031db8:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10031dbc:	20c00117 	ldw	r3,4(r4)
10031dc0:	00a00034 	movhi	r2,32768
10031dc4:	10bfffc4 	addi	r2,r2,-1
10031dc8:	18bfef26 	beq	r3,r2,10031d88 <altera_avalon_jtag_uart_ioctl+0x10>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10031dcc:	31800017 	ldw	r6,0(r6)
10031dd0:	10bfff44 	addi	r2,r2,-3
10031dd4:	30ffff84 	addi	r3,r6,-2
10031dd8:	10c00436 	bltu	r2,r3,10031dec <altera_avalon_jtag_uart_ioctl+0x74>
10031ddc:	0007883a 	mov	r3,zero
10031de0:	21800115 	stw	r6,4(r4)
  default:
    break;
  }

  return rc;
}
10031de4:	1805883a 	mov	r2,r3
10031de8:	f800283a 	ret
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10031dec:	01a00034 	movhi	r6,32768
10031df0:	31bfff84 	addi	r6,r6,-2
10031df4:	0007883a 	mov	r3,zero
10031df8:	21800115 	stw	r6,4(r4)
10031dfc:	003ff906 	br	10031de4 <altera_avalon_jtag_uart_ioctl+0x6c>

10031e00 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10031e00:	defff404 	addi	sp,sp,-48
10031e04:	dd400715 	stw	r21,28(sp)
10031e08:	dcc00515 	stw	r19,20(sp)
10031e0c:	dfc00b15 	stw	ra,44(sp)
10031e10:	df000a15 	stw	fp,40(sp)
10031e14:	ddc00915 	stw	r23,36(sp)
10031e18:	dd800815 	stw	r22,32(sp)
10031e1c:	dd000615 	stw	r20,24(sp)
10031e20:	dc800415 	stw	r18,16(sp)
10031e24:	dc400315 	stw	r17,12(sp)
10031e28:	dc000215 	stw	r16,8(sp)
10031e2c:	302b883a 	mov	r21,r6
10031e30:	2027883a 	mov	r19,r4
10031e34:	d9400115 	stw	r5,4(sp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10031e38:	0180480e 	bge	zero,r6,10031f5c <altera_avalon_jtag_uart_read+0x15c>
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10031e3c:	39d0000c 	andi	r7,r7,16384
10031e40:	d9c00015 	stw	r7,0(sp)
10031e44:	dd000117 	ldw	r20,4(sp)
10031e48:	07020004 	movi	fp,2048
10031e4c:	9dc00e04 	addi	r23,r19,56

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;
10031e50:	9c400b17 	ldw	r17,44(r19)
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10031e54:	9d800a17 	ldw	r22,40(r19)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10031e58:	e461c83a 	sub	r16,fp,r17
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
10031e5c:	b4400136 	bltu	r22,r17,10031e64 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10031e60:	b461c83a 	sub	r16,r22,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
10031e64:	a009883a 	mov	r4,r20
10031e68:	bc4b883a 	add	r5,r23,r17
10031e6c:	800d883a 	mov	r6,r16
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
10031e70:	80000826 	beq	r16,zero,10031e94 <altera_avalon_jtag_uart_read+0x94>
        break; /* No more data available */

      if (n > space)
10031e74:	ac002036 	bltu	r21,r16,10031ef8 <altera_avalon_jtag_uart_read+0xf8>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
10031e78:	0022c500 	call	10022c50 <memcpy>
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10031e7c:	8445883a 	add	r2,r16,r17
10031e80:	1081ffcc 	andi	r2,r2,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
10031e84:	ac2bc83a 	sub	r21,r21,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10031e88:	98800b15 	stw	r2,44(r19)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
10031e8c:	a429883a 	add	r20,r20,r16
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
10031e90:	057fef16 	blt	zero,r21,10031e50 <altera_avalon_jtag_uart_read+0x50>

    /* If we read any data then return it */
    if (ptr != buffer)
10031e94:	d8800117 	ldw	r2,4(sp)
10031e98:	a080231e 	bne	r20,r2,10031f28 <altera_avalon_jtag_uart_read+0x128>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10031e9c:	d8c00017 	ldw	r3,0(sp)
10031ea0:	1800301e 	bne	r3,zero,10031f64 <altera_avalon_jtag_uart_read+0x164>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10031ea4:	98800a17 	ldw	r2,40(r19)
10031ea8:	b080031e 	bne	r22,r2,10031eb8 <altera_avalon_jtag_uart_read+0xb8>
10031eac:	98c00917 	ldw	r3,36(r19)
10031eb0:	98800117 	ldw	r2,4(r19)
10031eb4:	18bffb36 	bltu	r3,r2,10031ea4 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10031eb8:	98800a17 	ldw	r2,40(r19)
10031ebc:	b0800126 	beq	r22,r2,10031ec4 <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10031ec0:	057fe016 	blt	zero,r21,10031e44 <altera_avalon_jtag_uart_read+0x44>
10031ec4:	00bffec4 	movi	r2,-5
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
10031ec8:	dfc00b17 	ldw	ra,44(sp)
10031ecc:	df000a17 	ldw	fp,40(sp)
10031ed0:	ddc00917 	ldw	r23,36(sp)
10031ed4:	dd800817 	ldw	r22,32(sp)
10031ed8:	dd400717 	ldw	r21,28(sp)
10031edc:	dd000617 	ldw	r20,24(sp)
10031ee0:	dcc00517 	ldw	r19,20(sp)
10031ee4:	dc800417 	ldw	r18,16(sp)
10031ee8:	dc400317 	ldw	r17,12(sp)
10031eec:	dc000217 	ldw	r16,8(sp)
10031ef0:	dec00c04 	addi	sp,sp,48
10031ef4:	f800283a 	ret
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
10031ef8:	99400e04 	addi	r5,r19,56
10031efc:	a009883a 	mov	r4,r20
10031f00:	a80d883a 	mov	r6,r21
10031f04:	894b883a 	add	r5,r17,r5
10031f08:	0022c500 	call	10022c50 <memcpy>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10031f0c:	d8800117 	ldw	r2,4(sp)

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10031f10:	ac47883a 	add	r3,r21,r17

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
10031f14:	a569883a 	add	r20,r20,r21
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10031f18:	18c1ffcc 	andi	r3,r3,2047
      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;
10031f1c:	002b883a 	mov	r21,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10031f20:	98c00b15 	stw	r3,44(r19)
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10031f24:	a0bfdd26 	beq	r20,r2,10031e9c <altera_avalon_jtag_uart_read+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10031f28:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10031f2c:	00bfff84 	movi	r2,-2
10031f30:	2084703a 	and	r2,r4,r2
10031f34:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10031f38:	98c00817 	ldw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10031f3c:	98800017 	ldw	r2,0(r19)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10031f40:	18c00054 	ori	r3,r3,1
10031f44:	98c00815 	stw	r3,32(r19)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10031f48:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10031f4c:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
10031f50:	d8c00117 	ldw	r3,4(sp)
10031f54:	a0c5c83a 	sub	r2,r20,r3
10031f58:	003fdb06 	br	10031ec8 <altera_avalon_jtag_uart_read+0xc8>
  else if (flags & O_NONBLOCK)
10031f5c:	3890000c 	andi	r2,r7,16384
10031f60:	103fd826 	beq	r2,zero,10031ec4 <altera_avalon_jtag_uart_read+0xc4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10031f64:	00bffd44 	movi	r2,-11
10031f68:	003fd706 	br	10031ec8 <altera_avalon_jtag_uart_read+0xc8>

10031f6c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10031f6c:	defff704 	addi	sp,sp,-36
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10031f70:	32000048 	cmpgei	r8,r6,1
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10031f74:	ddc00715 	stw	r23,28(sp)
10031f78:	dd800615 	stw	r22,24(sp)
10031f7c:	dcc00315 	stw	r19,12(sp)
10031f80:	dc000015 	stw	r16,0(sp)
10031f84:	dfc00815 	stw	ra,32(sp)
10031f88:	dd400515 	stw	r21,20(sp)
10031f8c:	dd000415 	stw	r20,16(sp)
10031f90:	dc800215 	stw	r18,8(sp)
10031f94:	dc400115 	stw	r17,4(sp)
10031f98:	3027883a 	mov	r19,r6
10031f9c:	2021883a 	mov	r16,r4
10031fa0:	282d883a 	mov	r22,r5
10031fa4:	382f883a 	mov	r23,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10031fa8:	40004926 	beq	r8,zero,100320d0 <altera_avalon_jtag_uart_write+0x164>
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
10031fac:	3d50000c 	andi	r21,r7,16384
10031fb0:	2829883a 	mov	r20,r5
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10031fb4:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
10031fb8:	81400d17 	ldw	r5,52(r16)

      if (in < out)
10031fbc:	91403d2e 	bgeu	r18,r5,100320b4 <altera_avalon_jtag_uart_write+0x148>
        n = out - 1 - in;
10031fc0:	2c85c83a 	sub	r2,r5,r18
10031fc4:	11bfffc4 	addi	r6,r2,-1
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
10031fc8:	30002626 	beq	r6,zero,10032064 <altera_avalon_jtag_uart_write+0xf8>
        break;

      if (n > count)
10031fcc:	3023883a 	mov	r17,r6
10031fd0:	9980012e 	bgeu	r19,r6,10031fd8 <altera_avalon_jtag_uart_write+0x6c>
10031fd4:	9823883a 	mov	r17,r19
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
10031fd8:	81020e04 	addi	r4,r16,2104
10031fdc:	a00b883a 	mov	r5,r20
10031fe0:	2489883a 	add	r4,r4,r18
10031fe4:	880d883a 	mov	r6,r17
10031fe8:	0022c500 	call	10022c50 <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10031fec:	9447883a 	add	r3,r18,r17
      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
      count -= n;
10031ff0:	9c67c83a 	sub	r19,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10031ff4:	18c1ffcc 	andi	r3,r3,2047
10031ff8:	9a000048 	cmpgei	r8,r19,1
10031ffc:	80c00c15 	stw	r3,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
10032000:	a469883a 	add	r20,r20,r17
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10032004:	403feb1e 	bne	r8,zero,10031fb4 <altera_avalon_jtag_uart_write+0x48>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10032008:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1003200c:	00bfff84 	movi	r2,-2
10032010:	2084703a 	and	r2,r4,r2
10032014:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10032018:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1003201c:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10032020:	18c00094 	ori	r3,r3,2
10032024:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10032028:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1003202c:	2001703a 	wrctl	status,r4
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10032030:	b5002926 	beq	r22,r20,100320d8 <altera_avalon_jtag_uart_write+0x16c>
    return ptr - start;
10032034:	a585c83a 	sub	r2,r20,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO; /* Host not connected */
}
10032038:	dfc00817 	ldw	ra,32(sp)
1003203c:	ddc00717 	ldw	r23,28(sp)
10032040:	dd800617 	ldw	r22,24(sp)
10032044:	dd400517 	ldw	r21,20(sp)
10032048:	dd000417 	ldw	r20,16(sp)
1003204c:	dcc00317 	ldw	r19,12(sp)
10032050:	dc800217 	ldw	r18,8(sp)
10032054:	dc400117 	ldw	r17,4(sp)
10032058:	dc000017 	ldw	r16,0(sp)
1003205c:	dec00904 	addi	sp,sp,36
10032060:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10032064:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10032068:	00bfff84 	movi	r2,-2
1003206c:	2084703a 	and	r2,r4,r2
10032070:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10032074:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10032078:	80800017 	ldw	r2,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1003207c:	18c00094 	ori	r3,r3,2
10032080:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10032084:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10032088:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
1003208c:	a83fe81e 	bne	r21,zero,10032030 <altera_avalon_jtag_uart_write+0xc4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10032090:	80800d17 	ldw	r2,52(r16)
10032094:	1140031e 	bne	r2,r5,100320a4 <altera_avalon_jtag_uart_write+0x138>
10032098:	80c00917 	ldw	r3,36(r16)
1003209c:	80800117 	ldw	r2,4(r16)
100320a0:	18bffb36 	bltu	r3,r2,10032090 <altera_avalon_jtag_uart_write+0x124>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
100320a4:	80800d17 	ldw	r2,52(r16)
100320a8:	117fe126 	beq	r2,r5,10032030 <altera_avalon_jtag_uart_write+0xc4>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100320ac:	403fc11e 	bne	r8,zero,10031fb4 <altera_avalon_jtag_uart_write+0x48>
100320b0:	003fd506 	br	10032008 <altera_avalon_jtag_uart_write+0x9c>
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
100320b4:	28000326 	beq	r5,zero,100320c4 <altera_avalon_jtag_uart_write+0x158>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100320b8:	00820004 	movi	r2,2048
100320bc:	148dc83a 	sub	r6,r2,r18
100320c0:	003fc106 	br	10031fc8 <altera_avalon_jtag_uart_write+0x5c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100320c4:	0081ffc4 	movi	r2,2047
100320c8:	148dc83a 	sub	r6,r2,r18
100320cc:	003fbe06 	br	10031fc8 <altera_avalon_jtag_uart_write+0x5c>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100320d0:	2829883a 	mov	r20,r5
100320d4:	003fcc06 	br	10032008 <altera_avalon_jtag_uart_write+0x9c>
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
100320d8:	b890000c 	andi	r2,r23,16384
100320dc:	1000021e 	bne	r2,zero,100320e8 <altera_avalon_jtag_uart_write+0x17c>
100320e0:	00bffec4 	movi	r2,-5
100320e4:	003fd406 	br	10032038 <altera_avalon_jtag_uart_write+0xcc>
100320e8:	00bffd44 	movi	r2,-11
100320ec:	003fd206 	br	10032038 <altera_avalon_jtag_uart_write+0xcc>

100320f0 <altera_avalon_uart_close_fd>:
int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
100320f0:	20800017 	ldw	r2,0(r4)
100320f4:	21400217 	ldw	r5,8(r4)
100320f8:	11000a04 	addi	r4,r2,40
100320fc:	00321201 	jmpi	10032120 <altera_avalon_uart_close>

10032100 <altera_avalon_uart_write_fd>:
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
10032100:	20800017 	ldw	r2,0(r4)
10032104:	21c00217 	ldw	r7,8(r4)
10032108:	11000a04 	addi	r4,r2,40
1003210c:	00324101 	jmpi	10032410 <altera_avalon_uart_write>

10032110 <altera_avalon_uart_read_fd>:
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
10032110:	20800017 	ldw	r2,0(r4)
10032114:	21c00217 	ldw	r7,8(r4)
10032118:	11000a04 	addi	r4,r2,40
1003211c:	00322d01 	jmpi	100322d0 <altera_avalon_uart_read>

10032120 <altera_avalon_uart_close>:
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
10032120:	2950000c 	andi	r5,r5,16384
10032124:	20c00517 	ldw	r3,20(r4)
10032128:	2800041e 	bne	r5,zero,1003213c <altera_avalon_uart_close+0x1c>
1003212c:	20800417 	ldw	r2,16(r4)
10032130:	10fffe1e 	bne	r2,r3,1003212c <altera_avalon_uart_close+0xc>
10032134:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
10032138:	f800283a 	ret
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
1003213c:	20800417 	ldw	r2,16(r4)
10032140:	10fffc26 	beq	r2,r3,10032134 <altera_avalon_uart_close+0x14>
10032144:	00bffd44 	movi	r2,-11
10032148:	f800283a 	ret

1003214c <altera_avalon_uart_irq>:
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
1003214c:	20800017 	ldw	r2,0(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
10032150:	200d883a 	mov	r6,r4
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
10032154:	10c00204 	addi	r3,r2,8
10032158:	1a000037 	ldwio	r8,0(r3)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
1003215c:	10000235 	stwio	zero,8(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
10032160:	19000037 	ldwio	r4,0(r3)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
10032164:	4080200c 	andi	r2,r8,128
10032168:	10000226 	beq	r2,zero,10032174 <altera_avalon_uart_irq+0x28>
{
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
1003216c:	408000cc 	andi	r2,r8,3
10032170:	10002726 	beq	r2,zero,10032210 <altera_avalon_uart_irq+0xc4>
  {
    altera_avalon_uart_rxirq(sp, status);
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
10032174:	4081100c 	andi	r2,r8,1088
10032178:	10001c26 	beq	r2,zero,100321ec <altera_avalon_uart_irq+0xa0>
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
1003217c:	30800417 	ldw	r2,16(r6)
10032180:	31400517 	ldw	r5,20(r6)
10032184:	11401f26 	beq	r2,r5,10032204 <altera_avalon_uart_irq+0xb8>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
10032188:	30800617 	ldw	r2,24(r6)
1003218c:	1080008c 	andi	r2,r2,2
10032190:	10000226 	beq	r2,zero,1003219c <altera_avalon_uart_irq+0x50>
10032194:	4082000c 	andi	r2,r8,2048
10032198:	10003226 	beq	r2,zero,10032264 <altera_avalon_uart_irq+0x118>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
1003219c:	30c00417 	ldw	r3,16(r6)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
100321a0:	30800417 	ldw	r2,16(r6)
100321a4:	31000017 	ldw	r4,0(r6)
100321a8:	1185883a 	add	r2,r2,r6
100321ac:	10c01703 	ldbu	r3,92(r2)
100321b0:	20c00135 	stwio	r3,4(r4)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
100321b4:	30800417 	ldw	r2,16(r6)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
100321b8:	31000117 	ldw	r4,4(r6)
100321bc:	31c00017 	ldw	r7,0(r6)

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
100321c0:	10800044 	addi	r2,r2,1
100321c4:	30800415 	stw	r2,16(r6)
100321c8:	30c00417 	ldw	r3,16(r6)
100321cc:	31400517 	ldw	r5,20(r6)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
100321d0:	21001014 	ori	r4,r4,64

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
100321d4:	18c00fcc 	andi	r3,r3,63
100321d8:	30c00415 	stw	r3,16(r6)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
100321dc:	31000115 	stw	r4,4(r6)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
100321e0:	30800417 	ldw	r2,16(r6)
100321e4:	11400226 	beq	r2,r5,100321f0 <altera_avalon_uart_irq+0xa4>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
100321e8:	39000335 	stwio	r4,12(r7)
100321ec:	f800283a 	ret
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
100321f0:	00beefc4 	movi	r2,-1089
100321f4:	2088703a 	and	r4,r4,r2
100321f8:	31000115 	stw	r4,4(r6)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
100321fc:	39000335 	stwio	r4,12(r7)
10032200:	003ffa06 	br	100321ec <altera_avalon_uart_irq+0xa0>
10032204:	31c00017 	ldw	r7,0(r6)
10032208:	31000117 	ldw	r4,4(r6)
1003220c:	003ff406 	br	100321e0 <altera_avalon_uart_irq+0x94>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
10032210:	30c00317 	ldw	r3,12(r6)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
10032214:	30800317 	ldw	r2,12(r6)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
10032218:	31c00017 	ldw	r7,0(r6)
1003221c:	31000317 	ldw	r4,12(r6)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
10032220:	10800044 	addi	r2,r2,1
10032224:	10800fcc 	andi	r2,r2,63

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
10032228:	39400037 	ldwio	r5,0(r7)

  sp->rx_end = next;
1003222c:	30800315 	stw	r2,12(r6)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
10032230:	30c00317 	ldw	r3,12(r6)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
10032234:	30800217 	ldw	r2,8(r6)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
10032238:	2189883a 	add	r4,r4,r6
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
1003223c:	18c00044 	addi	r3,r3,1
10032240:	18c00fcc 	andi	r3,r3,63

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
10032244:	21400705 	stb	r5,28(r4)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
10032248:	18bfca1e 	bne	r3,r2,10032174 <altera_avalon_uart_irq+0x28>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
1003224c:	30c00117 	ldw	r3,4(r6)
10032250:	00bfdfc4 	movi	r2,-129
10032254:	1888703a 	and	r4,r3,r2
10032258:	31000115 	stw	r4,4(r6)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
1003225c:	39000335 	stwio	r4,12(r7)
10032260:	003fc406 	br	10032174 <altera_avalon_uart_irq+0x28>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
10032264:	31c00017 	ldw	r7,0(r6)
10032268:	38800237 	ldwio	r2,8(r7)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
1003226c:	1082000c 	andi	r2,r2,2048
10032270:	1000051e 	bne	r2,zero,10032288 <altera_avalon_uart_irq+0x13c>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
10032274:	31000117 	ldw	r4,4(r6)
10032278:	00bfefc4 	movi	r2,-65
1003227c:	2088703a 	and	r4,r4,r2
10032280:	31000115 	stw	r4,4(r6)
10032284:	003fd606 	br	100321e0 <altera_avalon_uart_irq+0x94>
10032288:	31000117 	ldw	r4,4(r6)
1003228c:	003fd406 	br	100321e0 <altera_avalon_uart_irq+0x94>

10032290 <altera_avalon_uart_init>:

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  void* base = sp->base;
10032290:	20c00017 	ldw	r3,0(r4)
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
10032294:	defffe04 	addi	sp,sp,-8
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
10032298:	00832004 	movi	r2,3200
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
1003229c:	200f883a 	mov	r7,r4
100322a0:	dfc00115 	stw	ra,4(sp)
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
100322a4:	20800115 	stw	r2,4(r4)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
100322a8:	18800335 	stwio	r2,12(r3)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
100322ac:	2809883a 	mov	r4,r5
100322b0:	300b883a 	mov	r5,r6
100322b4:	018400f4 	movhi	r6,4099
100322b8:	31885304 	addi	r6,r6,8524
100322bc:	d8000015 	stw	zero,0(sp)
100322c0:	00328400 	call	10032840 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
100322c4:	dfc00117 	ldw	ra,4(sp)
100322c8:	dec00204 	addi	sp,sp,8
100322cc:	f800283a 	ret

100322d0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
100322d0:	defffe04 	addi	sp,sp,-8
100322d4:	dc000015 	stw	r16,0(sp)
100322d8:	dfc00115 	stw	ra,4(sp)
100322dc:	2021883a 	mov	r16,r4
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
100322e0:	39d0000c 	andi	r7,r7,16384
100322e4:	0011883a 	mov	r8,zero
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
100322e8:	41800d0e 	bge	r8,r6,10032320 <altera_avalon_uart_read+0x50>
100322ec:	80800217 	ldw	r2,8(r16)
100322f0:	80c00317 	ldw	r3,12(r16)
    {
      count++;
      *ptr++ = sp->rx_buf[sp->rx_start];
100322f4:	1409883a 	add	r4,r2,r16
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
100322f8:	10c00926 	beq	r2,r3,10032320 <altera_avalon_uart_read+0x50>
    {
      count++;
      *ptr++ = sp->rx_buf[sp->rx_start];
100322fc:	20800703 	ldbu	r2,28(r4)
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    {
      count++;
10032300:	42000044 	addi	r8,r8,1
      *ptr++ = sp->rx_buf[sp->rx_start];
10032304:	28800005 	stb	r2,0(r5)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
10032308:	80800217 	ldw	r2,8(r16)
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    {
      count++;
      *ptr++ = sp->rx_buf[sp->rx_start];
1003230c:	29400044 	addi	r5,r5,1
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
10032310:	10800044 	addi	r2,r2,1
10032314:	10800fcc 	andi	r2,r2,63
10032318:	80800215 	stw	r2,8(r16)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
1003231c:	41bff316 	blt	r8,r6,100322ec <altera_avalon_uart_read+0x1c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
10032320:	4000041e 	bne	r8,zero,10032334 <altera_avalon_uart_read+0x64>
10032324:	80c00317 	ldw	r3,12(r16)
10032328:	80800217 	ldw	r2,8(r16)
1003232c:	10c01026 	beq	r2,r3,10032370 <altera_avalon_uart_read+0xa0>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
10032330:	303fed1e 	bne	r6,zero,100322e8 <altera_avalon_uart_read+0x18>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10032334:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10032338:	00bfff84 	movi	r2,-2
1003233c:	2084703a 	and	r2,r4,r2
10032340:	1001703a 	wrctl	status,r2
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
10032344:	80c00117 	ldw	r3,4(r16)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
10032348:	80800017 	ldw	r2,0(r16)
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
1003234c:	18c02014 	ori	r3,r3,128
10032350:	80c00115 	stw	r3,4(r16)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
10032354:	10c00335 	stwio	r3,12(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10032358:	2001703a 	wrctl	status,r4
    return ~EWOULDBLOCK;
  }
  else {
    return count;
  }
}
1003235c:	4005883a 	mov	r2,r8
10032360:	dfc00117 	ldw	ra,4(sp)
10032364:	dc000017 	ldw	r16,0(sp)
10032368:	dec00204 	addi	sp,sp,8
1003236c:	f800283a 	ret
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    {
      if (!block)
10032370:	38000c1e 	bne	r7,zero,100323a4 <altera_avalon_uart_read+0xd4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10032374:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10032378:	00bfff84 	movi	r2,-2
1003237c:	2084703a 	and	r2,r4,r2
10032380:	1001703a 	wrctl	status,r2
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
10032384:	80c00117 	ldw	r3,4(r16)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
10032388:	80800017 	ldw	r2,0(r16)
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
1003238c:	18c02014 	ori	r3,r3,128
10032390:	80c00115 	stw	r3,4(r16)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
10032394:	10c00335 	stwio	r3,12(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10032398:	2001703a 	wrctl	status,r4
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
1003239c:	303fd21e 	bne	r6,zero,100322e8 <altera_avalon_uart_read+0x18>
100323a0:	003fe406 	br	10032334 <altera_avalon_uart_read+0x64>
100323a4:	00800034 	movhi	r2,0
100323a8:	108b1304 	addi	r2,r2,11340
100323ac:	10800017 	ldw	r2,0(r2)
100323b0:	10001426 	beq	r2,zero,10032404 <altera_avalon_uart_read+0x134>
100323b4:	103ee83a 	callr	r2
100323b8:	1007883a 	mov	r3,r2
    {
      if (!block)
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
100323bc:	008002c4 	movi	r2,11
100323c0:	18800015 	stw	r2,0(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100323c4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100323c8:	00bfff84 	movi	r2,-2
100323cc:	2084703a 	and	r2,r4,r2
100323d0:	1001703a 	wrctl	status,r2
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
100323d4:	80c00117 	ldw	r3,4(r16)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
100323d8:	80800017 	ldw	r2,0(r16)
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
100323dc:	18c02014 	ori	r3,r3,128
100323e0:	80c00115 	stw	r3,4(r16)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
100323e4:	10c00335 	stwio	r3,12(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100323e8:	2001703a 	wrctl	status,r4
100323ec:	023ffd04 	movi	r8,-12
    return ~EWOULDBLOCK;
  }
  else {
    return count;
  }
}
100323f0:	4005883a 	mov	r2,r8
100323f4:	dfc00117 	ldw	ra,4(sp)
100323f8:	dc000017 	ldw	r16,0(sp)
100323fc:	dec00204 	addi	sp,sp,8
10032400:	f800283a 	ret
10032404:	00c00034 	movhi	r3,0
10032408:	18cb1f04 	addi	r3,r3,11388
1003240c:	003feb06 	br	100323bc <altera_avalon_uart_read+0xec>

10032410 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
10032410:	defffc04 	addi	sp,sp,-16
10032414:	dc800215 	stw	r18,8(sp)
10032418:	dc000015 	stw	r16,0(sp)
1003241c:	dfc00315 	stw	ra,12(sp)
10032420:	dc400115 	stw	r17,4(sp)
10032424:	3025883a 	mov	r18,r6
10032428:	2021883a 	mov	r16,r4
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
1003242c:	39d0000c 	andi	r7,r7,16384
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
10032430:	30004326 	beq	r6,zero,10032540 <altera_avalon_uart_write+0x130>
10032434:	21000517 	ldw	r4,20(r4)
10032438:	3023883a 	mov	r17,r6
1003243c:	00000806 	br	10032460 <altera_avalon_uart_write+0x50>

    count--;

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
10032440:	28c00003 	ldbu	r3,0(r5)
10032444:	2405883a 	add	r2,r4,r16
        }
        while ((next == sp->tx_start));
      }
    }

    count--;
10032448:	8c7fffc4 	addi	r17,r17,-1

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    sp->tx_end = next;
1003244c:	3009883a 	mov	r4,r6

    count--;

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
10032450:	10c01705 	stb	r3,92(r2)
    sp->tx_end = next;
10032454:	81800515 	stw	r6,20(r16)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
10032458:	88001a26 	beq	r17,zero,100324c4 <altera_avalon_uart_write+0xb4>

    count--;

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
1003245c:	29400044 	addi	r5,r5,1

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
10032460:	80c00417 	ldw	r3,16(r16)

  while (count)
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
10032464:	20800044 	addi	r2,r4,1
10032468:	11800fcc 	andi	r6,r2,63

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
1003246c:	30fff41e 	bne	r6,r3,10032440 <altera_avalon_uart_write+0x30>
    {
      if (no_block)
10032470:	3800261e 	bne	r7,zero,1003250c <altera_avalon_uart_write+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10032474:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10032478:	00bfff84 	movi	r2,-2
1003247c:	2084703a 	and	r2,r4,r2
10032480:	1001703a 	wrctl	status,r2
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
10032484:	80c00117 	ldw	r3,4(r16)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
10032488:	80800017 	ldw	r2,0(r16)
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
1003248c:	18c11014 	ori	r3,r3,1088
10032490:	80c00115 	stw	r3,4(r16)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
10032494:	10c00335 	stwio	r3,12(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10032498:	2001703a 	wrctl	status,r4
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
1003249c:	80800417 	ldw	r2,16(r16)
100324a0:	30bffe26 	beq	r6,r2,1003249c <altera_avalon_uart_write+0x8c>
100324a4:	81000517 	ldw	r4,20(r16)

    count--;

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
100324a8:	28c00003 	ldbu	r3,0(r5)
        }
        while ((next == sp->tx_start));
      }
    }

    count--;
100324ac:	8c7fffc4 	addi	r17,r17,-1

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
100324b0:	2405883a 	add	r2,r4,r16
100324b4:	10c01705 	stb	r3,92(r2)
    sp->tx_end = next;
100324b8:	3009883a 	mov	r4,r6
100324bc:	81800515 	stw	r6,20(r16)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
100324c0:	883fe61e 	bne	r17,zero,1003245c <altera_avalon_uart_write+0x4c>

    count--;

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
100324c4:	944bc83a 	sub	r5,r18,r17
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100324c8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100324cc:	00bfff84 	movi	r2,-2
100324d0:	2084703a 	and	r2,r4,r2
100324d4:	1001703a 	wrctl	status,r2
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
100324d8:	80c00117 	ldw	r3,4(r16)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
100324dc:	80800017 	ldw	r2,0(r16)
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
100324e0:	18c11014 	ori	r3,r3,1088
100324e4:	80c00115 	stw	r3,4(r16)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
100324e8:	10c00335 	stwio	r3,12(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100324ec:	2001703a 	wrctl	status,r4
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
}
100324f0:	2805883a 	mov	r2,r5
100324f4:	dfc00317 	ldw	ra,12(sp)
100324f8:	dc800217 	ldw	r18,8(sp)
100324fc:	dc400117 	ldw	r17,4(sp)
10032500:	dc000017 	ldw	r16,0(sp)
10032504:	dec00404 	addi	sp,sp,16
10032508:	f800283a 	ret
1003250c:	00800034 	movhi	r2,0
10032510:	108b1304 	addi	r2,r2,11340
10032514:	10800017 	ldw	r2,0(r2)
10032518:	10000626 	beq	r2,zero,10032534 <altera_avalon_uart_write+0x124>
1003251c:	103ee83a 	callr	r2
10032520:	1007883a 	mov	r3,r2
    {
      if (no_block)
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
10032524:	008002c4 	movi	r2,11
10032528:	944bc83a 	sub	r5,r18,r17
1003252c:	18800015 	stw	r2,0(r3)
10032530:	003fe506 	br	100324c8 <altera_avalon_uart_write+0xb8>
10032534:	00c00034 	movhi	r3,0
10032538:	18cb1f04 	addi	r3,r3,11388
1003253c:	003ff906 	br	10032524 <altera_avalon_uart_write+0x114>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
10032540:	000b883a 	mov	r5,zero
10032544:	003fe006 	br	100324c8 <altera_avalon_uart_write+0xb8>

10032548 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
10032548:	00800034 	movhi	r2,0
1003254c:	108b2704 	addi	r2,r2,11420
10032550:	10c00017 	ldw	r3,0(r2)
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10032554:	2011883a 	mov	r8,r4
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
10032558:	00bfde84 	movi	r2,-134
1003255c:	1800011e 	bne	r3,zero,10032564 <alt_alarm_start+0x1c>
  }
  else
  {
    return -ENOTSUP;
  }
}
10032560:	f800283a 	ret
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  {
    if (alarm)
10032564:	00bffa84 	movi	r2,-22
10032568:	203ffd26 	beq	r4,zero,10032560 <alt_alarm_start+0x18>
    {
      alarm->callback = callback;
1003256c:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
10032570:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10032574:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10032578:	00bfff84 	movi	r2,-2
1003257c:	3084703a 	and	r2,r6,r2
10032580:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10032584:	00c00034 	movhi	r3,0
10032588:	18cb2804 	addi	r3,r3,11424
1003258c:	19000017 	ldw	r4,0(r3)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
10032590:	20800044 	addi	r2,r4,1
10032594:	2885883a 	add	r2,r5,r2
10032598:	40800215 	stw	r2,8(r8)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1003259c:	11000d2e 	bgeu	r2,r4,100325d4 <alt_alarm_start+0x8c>
      {
        alarm->rollover = 1;
100325a0:	00800044 	movi	r2,1
100325a4:	40800405 	stb	r2,16(r8)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100325a8:	00800034 	movhi	r2,0
100325ac:	108b1804 	addi	r2,r2,11360
  entry->next     = list->next;
100325b0:	10c00017 	ldw	r3,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100325b4:	40800115 	stw	r2,4(r8)
  entry->next     = list->next;
100325b8:	40c00015 	stw	r3,0(r8)

  list->next->previous = entry;
100325bc:	11000017 	ldw	r4,0(r2)
  list->next           = entry;
100325c0:	12000015 	stw	r8,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
100325c4:	22000115 	stw	r8,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100325c8:	3001703a 	wrctl	status,r6
100325cc:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
100325d0:	f800283a 	ret
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
100325d4:	40000405 	stb	zero,16(r8)
100325d8:	003ff306 	br	100325a8 <alt_alarm_start+0x60>

100325dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100325dc:	0005883a 	mov	r2,zero
100325e0:	00c20004 	movi	r3,2048
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
100325e4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
100325e8:	10800804 	addi	r2,r2,32
100325ec:	10fffd1e 	bne	r2,r3,100325e4 <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100325f0:	f800283a 	ret

100325f4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100325f4:	deffff04 	addi	sp,sp,-4
100325f8:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100325fc:	20000d26 	beq	r4,zero,10032634 <alt_dev_llist_insert+0x40>
10032600:	20800217 	ldw	r2,8(r4)
  list->next           = entry;
10032604:	000d883a 	mov	r6,zero
10032608:	10000a26 	beq	r2,zero,10032634 <alt_dev_llist_insert+0x40>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
1003260c:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10032610:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
10032614:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
10032618:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
1003261c:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
10032620:	11000115 	stw	r4,4(r2)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
10032624:	3005883a 	mov	r2,r6
10032628:	dfc00017 	ldw	ra,0(sp)
1003262c:	dec00104 	addi	sp,sp,4
10032630:	f800283a 	ret
10032634:	00800034 	movhi	r2,0
10032638:	108b1304 	addi	r2,r2,11340
1003263c:	10800017 	ldw	r2,0(r2)
10032640:	00c00034 	movhi	r3,0
10032644:	18cb1f04 	addi	r3,r3,11388
10032648:	10000226 	beq	r2,zero,10032654 <alt_dev_llist_insert+0x60>
1003264c:	103ee83a 	callr	r2
10032650:	1007883a 	mov	r3,r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
10032654:	01bffa84 	movi	r6,-22
10032658:	00800584 	movi	r2,22
1003265c:	18800015 	stw	r2,0(r3)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
10032660:	3005883a 	mov	r2,r6
10032664:	dfc00017 	ldw	ra,0(sp)
10032668:	dec00104 	addi	sp,sp,4
1003266c:	f800283a 	ret

10032670 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10032670:	defffd04 	addi	sp,sp,-12
10032674:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10032678:	008400f4 	movhi	r2,4099
1003267c:	108c4104 	addi	r2,r2,12548
10032680:	044400f4 	movhi	r17,4099
10032684:	8c4c4104 	addi	r17,r17,12548
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10032688:	dfc00215 	stw	ra,8(sp)
1003268c:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10032690:	14400536 	bltu	r2,r17,100326a8 <_do_ctors+0x38>
10032694:	1021883a 	mov	r16,r2
        (*ctor) (); 
10032698:	80800017 	ldw	r2,0(r16)

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1003269c:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
100326a0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100326a4:	847ffc2e 	bgeu	r16,r17,10032698 <_do_ctors+0x28>
        (*ctor) (); 
}
100326a8:	dfc00217 	ldw	ra,8(sp)
100326ac:	dc400117 	ldw	r17,4(sp)
100326b0:	dc000017 	ldw	r16,0(sp)
100326b4:	dec00304 	addi	sp,sp,12
100326b8:	f800283a 	ret

100326bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100326bc:	defffd04 	addi	sp,sp,-12
100326c0:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100326c4:	008400f4 	movhi	r2,4099
100326c8:	108c4104 	addi	r2,r2,12548
100326cc:	044400f4 	movhi	r17,4099
100326d0:	8c4c4204 	addi	r17,r17,12552
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100326d4:	dfc00215 	stw	ra,8(sp)
100326d8:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100326dc:	14400536 	bltu	r2,r17,100326f4 <_do_dtors+0x38>
100326e0:	1021883a 	mov	r16,r2
        (*dtor) (); 
100326e4:	80800017 	ldw	r2,0(r16)

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100326e8:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
100326ec:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100326f0:	847ffc2e 	bgeu	r16,r17,100326e4 <_do_dtors+0x28>
        (*dtor) (); 
}
100326f4:	dfc00217 	ldw	ra,8(sp)
100326f8:	dc400117 	ldw	r17,4(sp)
100326fc:	dc000017 	ldw	r16,0(sp)
10032700:	dec00304 	addi	sp,sp,12
10032704:	f800283a 	ret

10032708 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10032708:	defffb04 	addi	sp,sp,-20
1003270c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
10032710:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10032714:	dcc00315 	stw	r19,12(sp)
10032718:	dc400115 	stw	r17,4(sp)
1003271c:	dfc00415 	stw	ra,16(sp)
10032720:	2823883a 	mov	r17,r5
10032724:	dc800215 	stw	r18,8(sp)
10032728:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
1003272c:	00230240 	call	10023024 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10032730:	84401126 	beq	r16,r17,10032778 <alt_find_dev+0x70>
10032734:	14800044 	addi	r18,r2,1
10032738:	00000206 	br	10032744 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
1003273c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10032740:	84400d26 	beq	r16,r17,10032778 <alt_find_dev+0x70>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10032744:	81000217 	ldw	r4,8(r16)
10032748:	980b883a 	mov	r5,r19
1003274c:	900d883a 	mov	r6,r18
10032750:	0022bdc0 	call	10022bdc <memcmp>
10032754:	103ff91e 	bne	r2,zero,1003273c <alt_find_dev+0x34>
  }
  
  /* No match found */
  
  return NULL;
}
10032758:	8005883a 	mov	r2,r16
1003275c:	dfc00417 	ldw	ra,16(sp)
10032760:	dcc00317 	ldw	r19,12(sp)
10032764:	dc800217 	ldw	r18,8(sp)
10032768:	dc400117 	ldw	r17,4(sp)
1003276c:	dc000017 	ldw	r16,0(sp)
10032770:	dec00504 	addi	sp,sp,20
10032774:	f800283a 	ret
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10032778:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
1003277c:	8005883a 	mov	r2,r16
10032780:	dfc00417 	ldw	ra,16(sp)
10032784:	dcc00317 	ldw	r19,12(sp)
10032788:	dc800217 	ldw	r18,8(sp)
1003278c:	dc400117 	ldw	r17,4(sp)
10032790:	dc000017 	ldw	r16,0(sp)
10032794:	dec00504 	addi	sp,sp,20
10032798:	f800283a 	ret

1003279c <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
1003279c:	0009883a 	mov	r4,zero
100327a0:	01440004 	movi	r5,4096
100327a4:	0032d841 	jmpi	10032d84 <alt_icache_flush>

100327a8 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100327a8:	000530fa 	rdctl	r2,ienable
100327ac:	00c00044 	movi	r3,1
100327b0:	1946983a 	sll	r3,r3,r5
100327b4:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
100327b8:	1004c03a 	cmpne	r2,r2,zero
100327bc:	f800283a 	ret

100327c0 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100327c0:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100327c4:	00bfff84 	movi	r2,-2
100327c8:	3084703a 	and	r2,r6,r2
100327cc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
100327d0:	01000034 	movhi	r4,0
100327d4:	210b2604 	addi	r4,r4,11416
100327d8:	00800044 	movi	r2,1
100327dc:	20c00017 	ldw	r3,0(r4)
100327e0:	1144983a 	sll	r2,r2,r5
100327e4:	10c4b03a 	or	r2,r2,r3
100327e8:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100327ec:	20c00017 	ldw	r3,0(r4)
100327f0:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100327f4:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
100327f8:	0005883a 	mov	r2,zero
100327fc:	f800283a 	ret

10032800 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10032800:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10032804:	00bfff84 	movi	r2,-2
10032808:	3084703a 	and	r2,r6,r2
1003280c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
10032810:	01000034 	movhi	r4,0
10032814:	210b2604 	addi	r4,r4,11416
10032818:	00bfff84 	movi	r2,-2
1003281c:	20c00017 	ldw	r3,0(r4)
10032820:	1144183a 	rol	r2,r2,r5
10032824:	10c4703a 	and	r2,r2,r3
10032828:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1003282c:	20c00017 	ldw	r3,0(r4)
10032830:	180170fa 	wrctl	ienable,r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10032834:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
10032838:	0005883a 	mov	r2,zero
1003283c:	f800283a 	ret

10032840 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10032840:	00328441 	jmpi	10032844 <alt_iic_isr_register>

10032844 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10032844:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
10032848:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1003284c:	dfc00115 	stw	ra,4(sp)
10032850:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
10032854:	023ffa84 	movi	r8,-22
10032858:	1140050e 	bge	r2,r5,10032870 <alt_iic_isr_register+0x2c>

    alt_irq_enable_all(status);
  }

  return rc; 
}
1003285c:	4005883a 	mov	r2,r8
10032860:	dfc00117 	ldw	ra,4(sp)
10032864:	dc000017 	ldw	r16,0(sp)
10032868:	dec00204 	addi	sp,sp,8
1003286c:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10032870:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10032874:	00bfff84 	movi	r2,-2
10032878:	8084703a 	and	r2,r16,r2
1003287c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
10032880:	280690fa 	slli	r3,r5,3
10032884:	00800034 	movhi	r2,0
10032888:	108b7304 	addi	r2,r2,11724
1003288c:	1887883a 	add	r3,r3,r2
    alt_irq[id].context = isr_context;
10032890:	19c00115 	stw	r7,4(r3)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
10032894:	19800015 	stw	r6,0(r3)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10032898:	30000826 	beq	r6,zero,100328bc <alt_iic_isr_register+0x78>
1003289c:	00327c00 	call	100327c0 <alt_ic_irq_enable>
100328a0:	1011883a 	mov	r8,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100328a4:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
100328a8:	4005883a 	mov	r2,r8
100328ac:	dfc00117 	ldw	ra,4(sp)
100328b0:	dc000017 	ldw	r16,0(sp)
100328b4:	dec00204 	addi	sp,sp,8
100328b8:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100328bc:	00328000 	call	10032800 <alt_ic_irq_disable>
100328c0:	1011883a 	mov	r8,r2
100328c4:	8001703a 	wrctl	status,r16
100328c8:	003ff706 	br	100328a8 <alt_iic_isr_register+0x64>

100328cc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100328cc:	defffd04 	addi	sp,sp,-12
100328d0:	dc400115 	stw	r17,4(sp)
100328d4:	dc000015 	stw	r16,0(sp)
100328d8:	3023883a 	mov	r17,r6
100328dc:	2821883a 	mov	r16,r5

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
100328e0:	01807fc4 	movi	r6,511
100328e4:	01400044 	movi	r5,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100328e8:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
100328ec:	00329d00 	call	100329d0 <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
100328f0:	10c00324 	muli	r3,r2,12
100328f4:	01800034 	movhi	r6,0
100328f8:	31865e04 	addi	r6,r6,6520
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
100328fc:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
10032900:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
10032904:	10000716 	blt	r2,zero,10032924 <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
10032908:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
1003290c:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
10032910:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10032914:	30800515 	stw	r2,20(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
10032918:	30c00315 	stw	r3,12(r6)
    fd->priv     = alt_fd_list[old].priv;
1003291c:	31400415 	stw	r5,16(r6)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
10032920:	00318f40 	call	100318f4 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
10032924:	8009883a 	mov	r4,r16
10032928:	000b883a 	mov	r5,zero
1003292c:	01807fc4 	movi	r6,511
10032930:	00329d00 	call	100329d0 <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
10032934:	10c00324 	muli	r3,r2,12
10032938:	01800034 	movhi	r6,0
1003293c:	31865e04 	addi	r6,r6,6520
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
10032940:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
10032944:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
10032948:	10000716 	blt	r2,zero,10032968 <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
1003294c:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
10032950:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
10032954:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10032958:	30800215 	stw	r2,8(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
1003295c:	30c00015 	stw	r3,0(r6)
    fd->priv     = alt_fd_list[old].priv;
10032960:	31400115 	stw	r5,4(r6)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
10032964:	00318f40 	call	100318f4 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
10032968:	8809883a 	mov	r4,r17
1003296c:	01400044 	movi	r5,1
10032970:	01807fc4 	movi	r6,511
10032974:	00329d00 	call	100329d0 <open>

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
10032978:	10c00324 	muli	r3,r2,12
1003297c:	01800034 	movhi	r6,0
10032980:	31865e04 	addi	r6,r6,6520
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
10032984:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
10032988:	198b883a 	add	r5,r3,r6
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
1003298c:	10000b16 	blt	r2,zero,100329bc <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
10032990:	28800217 	ldw	r2,8(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
10032994:	28c00017 	ldw	r3,0(r5)
    fd->priv     = alt_fd_list[old].priv;
10032998:	29400117 	ldw	r5,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1003299c:	30800815 	stw	r2,32(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
100329a0:	30c00615 	stw	r3,24(r6)
    fd->priv     = alt_fd_list[old].priv;
100329a4:	31400715 	stw	r5,28(r6)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
100329a8:	dfc00217 	ldw	ra,8(sp)
100329ac:	dc400117 	ldw	r17,4(sp)
100329b0:	dc000017 	ldw	r16,0(sp)
100329b4:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
100329b8:	00318f41 	jmpi	100318f4 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
100329bc:	dfc00217 	ldw	ra,8(sp)
100329c0:	dc400117 	ldw	r17,4(sp)
100329c4:	dc000017 	ldw	r16,0(sp)
100329c8:	dec00304 	addi	sp,sp,12
100329cc:	f800283a 	ret

100329d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100329d0:	defff904 	addi	sp,sp,-28
100329d4:	dcc00315 	stw	r19,12(sp)
100329d8:	2827883a 	mov	r19,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100329dc:	01400034 	movhi	r5,0
100329e0:	294b1004 	addi	r5,r5,11328
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100329e4:	dd400515 	stw	r21,20(sp)
100329e8:	dd000415 	stw	r20,16(sp)
100329ec:	dc400115 	stw	r17,4(sp)
100329f0:	dfc00615 	stw	ra,24(sp)
100329f4:	dc800215 	stw	r18,8(sp)
100329f8:	dc000015 	stw	r16,0(sp)
100329fc:	302b883a 	mov	r21,r6
10032a00:	2029883a 	mov	r20,r4
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10032a04:	00327080 	call	10032708 <alt_find_dev>
10032a08:	1023883a 	mov	r17,r2
10032a0c:	10004726 	beq	r2,zero,10032b2c <open+0x15c>
10032a10:	0025883a 	mov	r18,zero
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
10032a14:	8809883a 	mov	r4,r17
10032a18:	0032d240 	call	10032d24 <alt_get_fd>
10032a1c:	1021883a 	mov	r16,r2
10032a20:	10002d16 	blt	r2,zero,10032ad8 <open+0x108>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
10032a24:	10800324 	muli	r2,r2,12
10032a28:	01400034 	movhi	r5,0
10032a2c:	29465e04 	addi	r5,r5,6520
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10032a30:	00d00034 	movhi	r3,16384
10032a34:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
10032a38:	1149883a 	add	r4,r2,r5
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10032a3c:	98c6703a 	and	r3,r19,r3
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10032a40:	9004c03a 	cmpne	r2,r18,zero
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10032a44:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10032a48:	1000121e 	bne	r2,zero,10032a94 <open+0xc4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10032a4c:	00800034 	movhi	r2,0
10032a50:	108b1204 	addi	r2,r2,11336
10032a54:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10032a58:	21800017 	ldw	r6,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10032a5c:	18900034 	orhi	r2,r3,16384
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10032a60:	0007883a 	mov	r3,zero

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10032a64:	20800215 	stw	r2,8(r4)
10032a68:	00000206 	br	10032a74 <open+0xa4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10032a6c:	29400304 	addi	r5,r5,12
10032a70:	38c00836 	bltu	r7,r3,10032a94 <open+0xc4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10032a74:	28800017 	ldw	r2,0(r5)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10032a78:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10032a7c:	11bffb1e 	bne	r2,r6,10032a6c <open+0x9c>
10032a80:	28800217 	ldw	r2,8(r5)
10032a84:	103ff90e 	bge	r2,zero,10032a6c <open+0x9c>
10032a88:	293ff826 	beq	r5,r4,10032a6c <open+0x9c>
10032a8c:	04400344 	movi	r17,13
10032a90:	00001206 	br	10032adc <open+0x10c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10032a94:	88800317 	ldw	r2,12(r17)
10032a98:	10000526 	beq	r2,zero,10032ab0 <open+0xe0>
10032a9c:	a00b883a 	mov	r5,r20
10032aa0:	980d883a 	mov	r6,r19
10032aa4:	a80f883a 	mov	r7,r21
10032aa8:	103ee83a 	callr	r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10032aac:	10001516 	blt	r2,zero,10032b04 <open+0x134>
  }
  
  /* return the reference upon success */

  return index;
}
10032ab0:	8005883a 	mov	r2,r16
10032ab4:	dfc00617 	ldw	ra,24(sp)
10032ab8:	dd400517 	ldw	r21,20(sp)
10032abc:	dd000417 	ldw	r20,16(sp)
10032ac0:	dcc00317 	ldw	r19,12(sp)
10032ac4:	dc800217 	ldw	r18,8(sp)
10032ac8:	dc400117 	ldw	r17,4(sp)
10032acc:	dc000017 	ldw	r16,0(sp)
10032ad0:	dec00704 	addi	sp,sp,28
10032ad4:	f800283a 	ret
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
10032ad8:	00a3c83a 	sub	r17,zero,r2

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
10032adc:	8009883a 	mov	r4,r16
10032ae0:	00318f40 	call	100318f4 <alt_release_fd>
10032ae4:	00800034 	movhi	r2,0
10032ae8:	108b1304 	addi	r2,r2,11340
10032aec:	10800017 	ldw	r2,0(r2)
10032af0:	10000b26 	beq	r2,zero,10032b20 <open+0x150>
10032af4:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
10032af8:	043fffc4 	movi	r16,-1
10032afc:	14400015 	stw	r17,0(r2)
10032b00:	003feb06 	br	10032ab0 <open+0xe0>

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
10032b04:	8009883a 	mov	r4,r16
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10032b08:	00a3c83a 	sub	r17,zero,r2
  {
    alt_release_fd (index);  
10032b0c:	00318f40 	call	100318f4 <alt_release_fd>
10032b10:	00800034 	movhi	r2,0
10032b14:	108b1304 	addi	r2,r2,11340
10032b18:	10800017 	ldw	r2,0(r2)
10032b1c:	103ff51e 	bne	r2,zero,10032af4 <open+0x124>
10032b20:	00800034 	movhi	r2,0
10032b24:	108b1f04 	addi	r2,r2,11388
10032b28:	003ff306 	br	10032af8 <open+0x128>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10032b2c:	a009883a 	mov	r4,r20
10032b30:	0032c740 	call	10032c74 <alt_find_file>
10032b34:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10032b38:	10000226 	beq	r2,zero,10032b44 <open+0x174>
10032b3c:	04800044 	movi	r18,1
10032b40:	003fb406 	br	10032a14 <open+0x44>
  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    ALT_ERRNO = -status;
10032b44:	043fffc4 	movi	r16,-1
10032b48:	044004c4 	movi	r17,19
10032b4c:	003fe306 	br	10032adc <open+0x10c>

10032b50 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10032b50:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10032b54:	00bfff84 	movi	r2,-2
10032b58:	3084703a 	and	r2,r6,r2
10032b5c:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10032b60:	21400017 	ldw	r5,0(r4)
10032b64:	20800117 	ldw	r2,4(r4)
10032b68:	28800115 	stw	r2,4(r5)
  entry->previous->next = entry->next;
10032b6c:	20c00117 	ldw	r3,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10032b70:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
10032b74:	19400015 	stw	r5,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
10032b78:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10032b7c:	3001703a 	wrctl	status,r6
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
10032b80:	f800283a 	ret

10032b84 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10032b84:	defffc04 	addi	sp,sp,-16

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10032b88:	d0a02117 	ldw	r2,-32636(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10032b8c:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10032b90:	d4201117 	ldw	r16,-32700(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10032b94:	dc800215 	stw	r18,8(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10032b98:	10800044 	addi	r2,r2,1
10032b9c:	d4a01104 	addi	r18,gp,-32700
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10032ba0:	dfc00315 	stw	ra,12(sp)
10032ba4:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10032ba8:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10032bac:	84800d26 	beq	r16,r18,10032be4 <alt_tick+0x60>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10032bb0:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
10032bb4:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10032bb8:	10000326 	beq	r2,zero,10032bc8 <alt_tick+0x44>
10032bbc:	d0a02117 	ldw	r2,-32636(gp)
10032bc0:	1000011e 	bne	r2,zero,10032bc8 <alt_tick+0x44>
    {
      alarm->rollover = 0;
10032bc4:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10032bc8:	d0e02117 	ldw	r3,-32636(gp)
10032bcc:	80800217 	ldw	r2,8(r16)
10032bd0:	18800236 	bltu	r3,r2,10032bdc <alt_tick+0x58>
10032bd4:	80800403 	ldbu	r2,16(r16)
10032bd8:	10000826 	beq	r2,zero,10032bfc <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
10032bdc:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10032be0:	84bff31e 	bne	r16,r18,10032bb0 <alt_tick+0x2c>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
10032be4:	dfc00317 	ldw	ra,12(sp)
10032be8:	dc800217 	ldw	r18,8(sp)
10032bec:	dc400117 	ldw	r17,4(sp)
10032bf0:	dc000017 	ldw	r16,0(sp)
10032bf4:	dec00404 	addi	sp,sp,16
10032bf8:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
10032bfc:	81000517 	ldw	r4,20(r16)
10032c00:	80c00317 	ldw	r3,12(r16)
10032c04:	183ee83a 	callr	r3
10032c08:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10032c0c:	10000926 	beq	r2,zero,10032c34 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
10032c10:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10032c14:	d0e02117 	ldw	r3,-32636(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
10032c18:	2085883a 	add	r2,r4,r2
10032c1c:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10032c20:	10ffee2e 	bgeu	r2,r3,10032bdc <alt_tick+0x58>
        {
          alarm->rollover = 1;
10032c24:	00800044 	movi	r2,1
10032c28:	80800405 	stb	r2,16(r16)
10032c2c:	8821883a 	mov	r16,r17
10032c30:	003feb06 	br	10032be0 <alt_tick+0x5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10032c34:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10032c38:	00bfff84 	movi	r2,-2
10032c3c:	2884703a 	and	r2,r5,r2
10032c40:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10032c44:	81000017 	ldw	r4,0(r16)
10032c48:	80800117 	ldw	r2,4(r16)
10032c4c:	20800115 	stw	r2,4(r4)
  entry->previous->next = entry->next;
10032c50:	80c00117 	ldw	r3,4(r16)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10032c54:	84000115 	stw	r16,4(r16)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
10032c58:	19000015 	stw	r4,0(r3)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
10032c5c:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10032c60:	2801703a 	wrctl	status,r5
10032c64:	8821883a 	mov	r16,r17
10032c68:	003fdd06 	br	10032be0 <alt_tick+0x5c>

10032c6c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
10032c6c:	000170fa 	wrctl	ienable,zero
}
10032c70:	f800283a 	ret

10032c74 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10032c74:	defffa04 	addi	sp,sp,-24
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10032c78:	00800034 	movhi	r2,0
10032c7c:	108b0e04 	addi	r2,r2,11320
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10032c80:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10032c84:	14000017 	ldw	r16,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10032c88:	dd000415 	stw	r20,16(sp)
10032c8c:	dc800215 	stw	r18,8(sp)
10032c90:	dfc00515 	stw	ra,20(sp)
10032c94:	dcc00315 	stw	r19,12(sp)
10032c98:	dc400115 	stw	r17,4(sp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10032c9c:	1029883a 	mov	r20,r2
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10032ca0:	2025883a 	mov	r18,r4
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10032ca4:	80801526 	beq	r16,r2,10032cfc <alt_find_file+0x88>
10032ca8:	04c00bc4 	movi	r19,47
10032cac:	00000806 	br	10032cd0 <alt_find_file+0x5c>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10032cb0:	3485883a 	add	r2,r6,r18
10032cb4:	10800007 	ldb	r2,0(r2)
10032cb8:	14c00126 	beq	r2,r19,10032cc0 <alt_find_file+0x4c>
10032cbc:	1000021e 	bne	r2,zero,10032cc8 <alt_find_file+0x54>
10032cc0:	0022bdc0 	call	10022bdc <memcmp>
10032cc4:	10000e26 	beq	r2,zero,10032d00 <alt_find_file+0x8c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
10032cc8:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10032ccc:	85000b26 	beq	r16,r20,10032cfc <alt_find_file+0x88>
  {
    len = strlen(next->name);
10032cd0:	84400217 	ldw	r17,8(r16)
10032cd4:	8809883a 	mov	r4,r17
10032cd8:	00230240 	call	10023024 <strlen>
10032cdc:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
10032ce0:	8885883a 	add	r2,r17,r2
10032ce4:	10ffffc7 	ldb	r3,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10032ce8:	8809883a 	mov	r4,r17
10032cec:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
10032cf0:	1cffef1e 	bne	r3,r19,10032cb0 <alt_find_file+0x3c>
    {
      len -= 1;
10032cf4:	31bfffc4 	addi	r6,r6,-1
10032cf8:	003fed06 	br	10032cb0 <alt_find_file+0x3c>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10032cfc:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;     
}
10032d00:	8005883a 	mov	r2,r16
10032d04:	dfc00517 	ldw	ra,20(sp)
10032d08:	dd000417 	ldw	r20,16(sp)
10032d0c:	dcc00317 	ldw	r19,12(sp)
10032d10:	dc800217 	ldw	r18,8(sp)
10032d14:	dc400117 	ldw	r17,4(sp)
10032d18:	dc000017 	ldw	r16,0(sp)
10032d1c:	dec00604 	addi	sp,sp,24
10032d20:	f800283a 	ret

10032d24 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10032d24:	01400034 	movhi	r5,0
10032d28:	29465e04 	addi	r5,r5,6520
10032d2c:	0007883a 	mov	r3,zero
10032d30:	01c00804 	movi	r7,32
10032d34:	280d883a 	mov	r6,r5
10032d38:	00000306 	br	10032d48 <alt_get_fd+0x24>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10032d3c:	18c00044 	addi	r3,r3,1
10032d40:	31800304 	addi	r6,r6,12
10032d44:	19c00d26 	beq	r3,r7,10032d7c <alt_get_fd+0x58>
  {
    if (!alt_fd_list[i].dev)
10032d48:	28800017 	ldw	r2,0(r5)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10032d4c:	29400304 	addi	r5,r5,12
  {
    if (!alt_fd_list[i].dev)
10032d50:	103ffa1e 	bne	r2,zero,10032d3c <alt_get_fd+0x18>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
10032d54:	01400034 	movhi	r5,0
10032d58:	294b1204 	addi	r5,r5,11336
10032d5c:	28800017 	ldw	r2,0(r5)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
10032d60:	31000015 	stw	r4,0(r6)
      if (i > alt_max_fd)
10032d64:	10c0030e 	bge	r2,r3,10032d74 <alt_get_fd+0x50>
      {
        alt_max_fd = i;
10032d68:	1805883a 	mov	r2,r3
10032d6c:	28c00015 	stw	r3,0(r5)
10032d70:	f800283a 	ret
  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
10032d74:	1805883a 	mov	r2,r3
10032d78:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10032d7c:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
10032d80:	f800283a 	ret

10032d84 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
10032d84:	00840004 	movi	r2,4096
10032d88:	2007883a 	mov	r3,r4
10032d8c:	1140012e 	bgeu	r2,r5,10032d94 <alt_icache_flush+0x10>
10032d90:	100b883a 	mov	r5,r2
10032d94:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10032d98:	1940032e 	bgeu	r3,r5,10032da8 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10032d9c:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10032da0:	18c00804 	addi	r3,r3,32
10032da4:	197ffd36 	bltu	r3,r5,10032d9c <alt_icache_flush+0x18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10032da8:	208007cc 	andi	r2,r4,31
10032dac:	10000126 	beq	r2,zero,10032db4 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
10032db0:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10032db4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
10032db8:	f800283a 	ret

10032dbc <atexit>:
10032dbc:	200b883a 	mov	r5,r4
10032dc0:	000d883a 	mov	r6,zero
10032dc4:	0009883a 	mov	r4,zero
10032dc8:	000f883a 	mov	r7,zero
10032dcc:	0032e081 	jmpi	10032e08 <__register_exitproc>

10032dd0 <exit>:
10032dd0:	defffe04 	addi	sp,sp,-8
10032dd4:	000b883a 	mov	r5,zero
10032dd8:	dc000015 	stw	r16,0(sp)
10032ddc:	dfc00115 	stw	ra,4(sp)
10032de0:	2021883a 	mov	r16,r4
10032de4:	0032f400 	call	10032f40 <__call_exitprocs>
10032de8:	00800034 	movhi	r2,0
10032dec:	108b0804 	addi	r2,r2,11296
10032df0:	11000017 	ldw	r4,0(r2)
10032df4:	20800f17 	ldw	r2,60(r4)
10032df8:	10000126 	beq	r2,zero,10032e00 <exit+0x30>
10032dfc:	103ee83a 	callr	r2
10032e00:	8009883a 	mov	r4,r16
10032e04:	00330f00 	call	100330f0 <_exit>

10032e08 <__register_exitproc>:
10032e08:	defffa04 	addi	sp,sp,-24
10032e0c:	00800034 	movhi	r2,0
10032e10:	108b0804 	addi	r2,r2,11296
10032e14:	dc000015 	stw	r16,0(sp)
10032e18:	14000017 	ldw	r16,0(r2)
10032e1c:	dd000415 	stw	r20,16(sp)
10032e20:	2829883a 	mov	r20,r5
10032e24:	81405217 	ldw	r5,328(r16)
10032e28:	dcc00315 	stw	r19,12(sp)
10032e2c:	dc800215 	stw	r18,8(sp)
10032e30:	dc400115 	stw	r17,4(sp)
10032e34:	dfc00515 	stw	ra,20(sp)
10032e38:	2023883a 	mov	r17,r4
10032e3c:	3027883a 	mov	r19,r6
10032e40:	3825883a 	mov	r18,r7
10032e44:	28002526 	beq	r5,zero,10032edc <__register_exitproc+0xd4>
10032e48:	29000117 	ldw	r4,4(r5)
10032e4c:	008007c4 	movi	r2,31
10032e50:	11002716 	blt	r2,r4,10032ef0 <__register_exitproc+0xe8>
10032e54:	8800101e 	bne	r17,zero,10032e98 <__register_exitproc+0x90>
10032e58:	2105883a 	add	r2,r4,r4
10032e5c:	1085883a 	add	r2,r2,r2
10032e60:	20c00044 	addi	r3,r4,1
10032e64:	1145883a 	add	r2,r2,r5
10032e68:	0009883a 	mov	r4,zero
10032e6c:	15000215 	stw	r20,8(r2)
10032e70:	28c00115 	stw	r3,4(r5)
10032e74:	2005883a 	mov	r2,r4
10032e78:	dfc00517 	ldw	ra,20(sp)
10032e7c:	dd000417 	ldw	r20,16(sp)
10032e80:	dcc00317 	ldw	r19,12(sp)
10032e84:	dc800217 	ldw	r18,8(sp)
10032e88:	dc400117 	ldw	r17,4(sp)
10032e8c:	dc000017 	ldw	r16,0(sp)
10032e90:	dec00604 	addi	sp,sp,24
10032e94:	f800283a 	ret
10032e98:	29802204 	addi	r6,r5,136
10032e9c:	00800044 	movi	r2,1
10032ea0:	110e983a 	sll	r7,r2,r4
10032ea4:	30c04017 	ldw	r3,256(r6)
10032ea8:	2105883a 	add	r2,r4,r4
10032eac:	1085883a 	add	r2,r2,r2
10032eb0:	1185883a 	add	r2,r2,r6
10032eb4:	19c6b03a 	or	r3,r3,r7
10032eb8:	14802015 	stw	r18,128(r2)
10032ebc:	14c00015 	stw	r19,0(r2)
10032ec0:	00800084 	movi	r2,2
10032ec4:	30c04015 	stw	r3,256(r6)
10032ec8:	88bfe31e 	bne	r17,r2,10032e58 <__register_exitproc+0x50>
10032ecc:	30804117 	ldw	r2,260(r6)
10032ed0:	11c4b03a 	or	r2,r2,r7
10032ed4:	30804115 	stw	r2,260(r6)
10032ed8:	003fdf06 	br	10032e58 <__register_exitproc+0x50>
10032edc:	00800034 	movhi	r2,0
10032ee0:	108bb304 	addi	r2,r2,11980
10032ee4:	100b883a 	mov	r5,r2
10032ee8:	80805215 	stw	r2,328(r16)
10032eec:	003fd606 	br	10032e48 <__register_exitproc+0x40>
10032ef0:	008400b4 	movhi	r2,4098
10032ef4:	10892204 	addi	r2,r2,9352
10032ef8:	1000021e 	bne	r2,zero,10032f04 <__register_exitproc+0xfc>
10032efc:	013fffc4 	movi	r4,-1
10032f00:	003fdc06 	br	10032e74 <__register_exitproc+0x6c>
10032f04:	01006404 	movi	r4,400
10032f08:	103ee83a 	callr	r2
10032f0c:	1007883a 	mov	r3,r2
10032f10:	103ffa26 	beq	r2,zero,10032efc <__register_exitproc+0xf4>
10032f14:	80805217 	ldw	r2,328(r16)
10032f18:	180b883a 	mov	r5,r3
10032f1c:	18000115 	stw	zero,4(r3)
10032f20:	18800015 	stw	r2,0(r3)
10032f24:	80c05215 	stw	r3,328(r16)
10032f28:	18006215 	stw	zero,392(r3)
10032f2c:	18006315 	stw	zero,396(r3)
10032f30:	0009883a 	mov	r4,zero
10032f34:	883fc826 	beq	r17,zero,10032e58 <__register_exitproc+0x50>
10032f38:	003fd706 	br	10032e98 <__register_exitproc+0x90>

10032f3c <register_fini>:
10032f3c:	f800283a 	ret

10032f40 <__call_exitprocs>:
10032f40:	00800034 	movhi	r2,0
10032f44:	108b0804 	addi	r2,r2,11296
10032f48:	10800017 	ldw	r2,0(r2)
10032f4c:	defff304 	addi	sp,sp,-52
10032f50:	df000b15 	stw	fp,44(sp)
10032f54:	d8800115 	stw	r2,4(sp)
10032f58:	008400b4 	movhi	r2,4098
10032f5c:	10891d04 	addi	r2,r2,9332
10032f60:	1005003a 	cmpeq	r2,r2,zero
10032f64:	d8800215 	stw	r2,8(sp)
10032f68:	d8800117 	ldw	r2,4(sp)
10032f6c:	dd400815 	stw	r21,32(sp)
10032f70:	dd000715 	stw	r20,28(sp)
10032f74:	10805204 	addi	r2,r2,328
10032f78:	dfc00c15 	stw	ra,48(sp)
10032f7c:	ddc00a15 	stw	r23,40(sp)
10032f80:	dd800915 	stw	r22,36(sp)
10032f84:	dcc00615 	stw	r19,24(sp)
10032f88:	dc800515 	stw	r18,20(sp)
10032f8c:	dc400415 	stw	r17,16(sp)
10032f90:	dc000315 	stw	r16,12(sp)
10032f94:	282b883a 	mov	r21,r5
10032f98:	2039883a 	mov	fp,r4
10032f9c:	d8800015 	stw	r2,0(sp)
10032fa0:	2829003a 	cmpeq	r20,r5,zero
10032fa4:	d8800117 	ldw	r2,4(sp)
10032fa8:	14405217 	ldw	r17,328(r2)
10032fac:	88001026 	beq	r17,zero,10032ff0 <__call_exitprocs+0xb0>
10032fb0:	ddc00017 	ldw	r23,0(sp)
10032fb4:	88800117 	ldw	r2,4(r17)
10032fb8:	8c802204 	addi	r18,r17,136
10032fbc:	143fffc4 	addi	r16,r2,-1
10032fc0:	80000916 	blt	r16,zero,10032fe8 <__call_exitprocs+0xa8>
10032fc4:	05bfffc4 	movi	r22,-1
10032fc8:	a000151e 	bne	r20,zero,10033020 <__call_exitprocs+0xe0>
10032fcc:	8409883a 	add	r4,r16,r16
10032fd0:	2105883a 	add	r2,r4,r4
10032fd4:	1485883a 	add	r2,r2,r18
10032fd8:	10c02017 	ldw	r3,128(r2)
10032fdc:	a8c01126 	beq	r21,r3,10033024 <__call_exitprocs+0xe4>
10032fe0:	843fffc4 	addi	r16,r16,-1
10032fe4:	85bff81e 	bne	r16,r22,10032fc8 <__call_exitprocs+0x88>
10032fe8:	d8800217 	ldw	r2,8(sp)
10032fec:	10003126 	beq	r2,zero,100330b4 <__call_exitprocs+0x174>
10032ff0:	dfc00c17 	ldw	ra,48(sp)
10032ff4:	df000b17 	ldw	fp,44(sp)
10032ff8:	ddc00a17 	ldw	r23,40(sp)
10032ffc:	dd800917 	ldw	r22,36(sp)
10033000:	dd400817 	ldw	r21,32(sp)
10033004:	dd000717 	ldw	r20,28(sp)
10033008:	dcc00617 	ldw	r19,24(sp)
1003300c:	dc800517 	ldw	r18,20(sp)
10033010:	dc400417 	ldw	r17,16(sp)
10033014:	dc000317 	ldw	r16,12(sp)
10033018:	dec00d04 	addi	sp,sp,52
1003301c:	f800283a 	ret
10033020:	8409883a 	add	r4,r16,r16
10033024:	88c00117 	ldw	r3,4(r17)
10033028:	2105883a 	add	r2,r4,r4
1003302c:	1445883a 	add	r2,r2,r17
10033030:	18ffffc4 	addi	r3,r3,-1
10033034:	11800217 	ldw	r6,8(r2)
10033038:	1c001526 	beq	r3,r16,10033090 <__call_exitprocs+0x150>
1003303c:	10000215 	stw	zero,8(r2)
10033040:	303fe726 	beq	r6,zero,10032fe0 <__call_exitprocs+0xa0>
10033044:	00c00044 	movi	r3,1
10033048:	1c06983a 	sll	r3,r3,r16
1003304c:	90804017 	ldw	r2,256(r18)
10033050:	8cc00117 	ldw	r19,4(r17)
10033054:	1884703a 	and	r2,r3,r2
10033058:	10001426 	beq	r2,zero,100330ac <__call_exitprocs+0x16c>
1003305c:	90804117 	ldw	r2,260(r18)
10033060:	1884703a 	and	r2,r3,r2
10033064:	10000c1e 	bne	r2,zero,10033098 <__call_exitprocs+0x158>
10033068:	2105883a 	add	r2,r4,r4
1003306c:	1485883a 	add	r2,r2,r18
10033070:	11400017 	ldw	r5,0(r2)
10033074:	e009883a 	mov	r4,fp
10033078:	303ee83a 	callr	r6
1003307c:	88800117 	ldw	r2,4(r17)
10033080:	98bfc81e 	bne	r19,r2,10032fa4 <__call_exitprocs+0x64>
10033084:	b8800017 	ldw	r2,0(r23)
10033088:	147fd526 	beq	r2,r17,10032fe0 <__call_exitprocs+0xa0>
1003308c:	003fc506 	br	10032fa4 <__call_exitprocs+0x64>
10033090:	8c000115 	stw	r16,4(r17)
10033094:	003fea06 	br	10033040 <__call_exitprocs+0x100>
10033098:	2105883a 	add	r2,r4,r4
1003309c:	1485883a 	add	r2,r2,r18
100330a0:	11000017 	ldw	r4,0(r2)
100330a4:	303ee83a 	callr	r6
100330a8:	003ff406 	br	1003307c <__call_exitprocs+0x13c>
100330ac:	303ee83a 	callr	r6
100330b0:	003ff206 	br	1003307c <__call_exitprocs+0x13c>
100330b4:	88800117 	ldw	r2,4(r17)
100330b8:	1000081e 	bne	r2,zero,100330dc <__call_exitprocs+0x19c>
100330bc:	89000017 	ldw	r4,0(r17)
100330c0:	20000726 	beq	r4,zero,100330e0 <__call_exitprocs+0x1a0>
100330c4:	b9000015 	stw	r4,0(r23)
100330c8:	8809883a 	mov	r4,r17
100330cc:	00224740 	call	10022474 <free>
100330d0:	bc400017 	ldw	r17,0(r23)
100330d4:	883fb71e 	bne	r17,zero,10032fb4 <__call_exitprocs+0x74>
100330d8:	003fc506 	br	10032ff0 <__call_exitprocs+0xb0>
100330dc:	89000017 	ldw	r4,0(r17)
100330e0:	882f883a 	mov	r23,r17
100330e4:	2023883a 	mov	r17,r4
100330e8:	883fb21e 	bne	r17,zero,10032fb4 <__call_exitprocs+0x74>
100330ec:	003fc006 	br	10032ff0 <__call_exitprocs+0xb0>

100330f0 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100330f0:	20000226 	beq	r4,zero,100330fc <_exit+0xc>
    ALT_SIM_FAIL();
100330f4:	002af070 	cmpltui	zero,zero,43969
100330f8:	003fff06 	br	100330f8 <_exit+0x8>
  } else {
    ALT_SIM_PASS();
100330fc:	002af0b0 	cmpltui	zero,zero,43970
10033100:	003ffd06 	br	100330f8 <_exit+0x8>
10033104:	10032f3c 	xorhi	zero,r2,3260
